// Generated from plsql.g4 by ANTLR 4.5.2
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class plsqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.5.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, PP_IF=2, PP_THEN=3, PP_ELSE=4, PP_ELSIF=5, PP_END=6, PP_ERROR=7, 
		A_LETTER=8, ADD=9, AFTER=10, AGENT=11, AGGREGATE=12, ALL=13, ALTER=14, 
		ANALYZE=15, AND=16, ANY=17, ARRAY=18, AS=19, ASC=20, ASSOCIATE=21, AT=22, 
		ATTRIBUTE=23, AUDIT=24, AUTHID=25, AUTO=26, AUTOMATIC=27, AUTONOMOUS_TRANSACTION=28, 
		BATCH=29, BEFORE=30, BEGIN=31, BETWEEN=32, BFILE=33, BINARY_DOUBLE=34, 
		BINARY_FLOAT=35, BINARY_INTEGER=36, BLOB=37, BLOCK=38, BODY=39, BOOLEAN=40, 
		BOTH=41, BREADTH=42, BULK=43, BY=44, BYTE=45, C_LETTER=46, CACHE=47, CALL=48, 
		CANONICAL=49, CASCADE=50, CASE=51, CAST=52, CHAR=53, CHAR_CS=54, CHARACTER=55, 
		CHECK=56, CHR=57, CLOB=58, CLOSE=59, CLUSTER=60, COLLECT=61, COLUMNS=62, 
		COMMENT=63, COMMIT=64, COMMITTED=65, COMPATIBILITY=66, COMPILE=67, COMPOUND=68, 
		CONNECT=69, CONNECT_BY_ROOT=70, CONSTANT=71, CONSTRAINT=72, CONSTRAINTS=73, 
		CONSTRUCTOR=74, CONTENT=75, CONTEXT=76, CONTINUE=77, CONVERT=78, CORRUPT_XID=79, 
		CORRUPT_XID_ALL=80, COST=81, COUNT=82, CREATE=83, CROSS=84, CUBE=85, CURRENT=86, 
		CURRENT_USER=87, CURSOR=88, CUSTOMDATUM=89, CYCLE=90, DATA=91, DATABASE=92, 
		DATE=93, DAY=94, DB_ROLE_CHANGE=95, DBTIMEZONE=96, DDL=97, DEBUG=98, DEC=99, 
		DECIMAL=100, DECLARE=101, DECOMPOSE=102, DECREMENT=103, DEFAULT=104, DEFAULTS=105, 
		DEFERRED=106, DEFINER=107, DELETE=108, DEPTH=109, DESC=110, DETERMINISTIC=111, 
		DIMENSION=112, DISABLE=113, DISASSOCIATE=114, DISTINCT=115, DOCUMENT=116, 
		DOUBLE=117, DROP=118, DSINTERVAL_UNCONSTRAINED=119, EACH=120, ELEMENT=121, 
		ELSE=122, ELSIF=123, EMPTY=124, ENABLE=125, ENCODING=126, END=127, ENTITYESCAPING=128, 
		ERRORS=129, ESCAPE=130, EVALNAME=131, EXCEPTION=132, EXCEPTION_INIT=133, 
		EXCEPTIONS=134, EXCLUDE=135, EXCLUSIVE=136, EXECUTE=137, EXISTS=138, EXIT=139, 
		EXPLAIN=140, EXTERNAL=141, EXTEND=142, EXTRACT=143, FAILURE=144, FALSE=145, 
		FETCH=146, FINAL=147, FIRST=148, FIRST_VALUE=149, FLOAT=150, FOLLOWING=151, 
		FOLLOWS=152, FOR=153, FORALL=154, FORCE=155, FROM=156, FULL=157, FUNCTION=158, 
		GOTO=159, GRANT=160, GROUP=161, GROUPING=162, HASH=163, HAVING=164, HIDE=165, 
		HOUR=166, IF=167, IGNORE=168, IMMEDIATE=169, IN=170, INCLUDE=171, INCLUDING=172, 
		INCREMENT=173, INDENT=174, INDEX=175, INDEXED=176, INDICATOR=177, INDICES=178, 
		INFINITE=179, INLINE=180, INNER=181, INOUT=182, INSERT=183, INSTANTIABLE=184, 
		INSTEAD=185, INT=186, INTEGER=187, INTERSECT=188, INTERVAL=189, INTO=190, 
		INVALIDATE=191, IS=192, ISOLATION=193, ITERATE=194, JAVA=195, JOIN=196, 
		KEEP=197, LANGUAGE=198, LAST=199, LAST_VALUE=200, LEADING=201, LEFT=202, 
		LEVEL=203, LIBRARY=204, LIKE=205, LIKE2=206, LIKE4=207, LIKEC=208, LIMIT=209, 
		LOCAL=210, LOCK=211, LOCKED=212, LOG=213, LOGOFF=214, LOGON=215, LONG=216, 
		LOOP=217, MAIN=218, MAP=219, MATCHED=220, MAXVALUE=221, MEASURES=222, 
		MEMBER=223, MERGE=224, MINUS=225, MINUTE=226, MINVALUE=227, MLSLABEL=228, 
		MODE=229, MODEL=230, MODIFY=231, MONTH=232, MULTISET=233, NAME=234, NAN=235, 
		NATURAL=236, NATURALN=237, NAV=238, NCHAR=239, NCHAR_CS=240, NCLOB=241, 
		NESTED=242, NEW=243, NEXT=244, NO=245, NOAUDIT=246, NOCACHE=247, NOCOPY=248, 
		NOCYCLE=249, NOENTITYESCAPING=250, NOMAXVALUE=251, NOMINVALUE=252, NONE=253, 
		NOORDER=254, NOSCHEMACHECK=255, NOT=256, NOWAIT=257, NULL=258, NULLS=259, 
		NUMBER=260, NUMERIC=261, NVARCHAR2=262, OBJECT=263, OF=264, OFF=265, OID=266, 
		OLD=267, ON=268, ONLY=269, OPEN=270, OPTION=271, OR=272, ORADATA=273, 
		ORDER=274, ORDINALITY=275, OSERROR=276, OUT=277, OUTER=278, OVER=279, 
		OVERRIDING=280, PACKAGE=281, PARALLEL_ENABLE=282, PARAMETERS=283, PARENT=284, 
		PARTITION=285, PASSING=286, PATH=287, PERCENT_ISOPEN=288, PERCENT_ROWTYPE=289, 
		PERCENT_TYPE=290, PERCENT_FOUND=291, PERCENT_NOTFOUND=292, PIPELINED=293, 
		PIPE=294, PIVOT=295, PLAN=296, PLS_INTEGER=297, POSITIVE=298, POSITIVEN=299, 
		PRAGMA=300, PRECEDING=301, PRECISION=302, PRESENT=303, PRIOR=304, PROCEDURE=305, 
		RAISE=306, RANGE=307, RAW=308, READ=309, REAL=310, RECORD=311, REF=312, 
		REFERENCE=313, REFERENCING=314, REJECT=315, RELIES_ON=316, RENAME=317, 
		REPLACE=318, RESPECT=319, RESTRICT_REFERENCES=320, RESULT=321, RESULT_CACHE=322, 
		RETURN=323, RETURNING=324, REUSE=325, REVERSE=326, REVOKE=327, RIGHT=328, 
		ROLLBACK=329, ROLLUP=330, ROW=331, ROWID=332, ROWS=333, RULES=334, SAMPLE=335, 
		SAVE=336, SAVEPOINT=337, SCHEMA=338, SCHEMACHECK=339, SCN=340, SEARCH=341, 
		SECOND=342, SEED=343, SEGMENT=344, SELECT=345, SELF=346, SEQUENCE=347, 
		SEQUENTIAL=348, SERIALIZABLE=349, SERIALLY_REUSABLE=350, SERVERERROR=351, 
		SESSIONTIMEZONE=352, SET=353, SETS=354, SETTINGS=355, SHARE=356, SHOW=357, 
		SHUTDOWN=358, SIBLINGS=359, SIGNTYPE=360, SIMPLE_INTEGER=361, SINGLE=362, 
		SIZE=363, SKIP_=364, SMALLINT=365, SNAPSHOT=366, SOME=367, SPECIFICATION=368, 
		SQLDATA=369, SQLERROR=370, SQL_PERCENT_ROWCOUNT=371, STANDALONE=372, START=373, 
		STARTUP=374, STATEMENT=375, STATEMENT_ID=376, STATIC=377, STATISTICS=378, 
		STRING=379, SUBMULTISET=380, SUBPARTITION=381, SUBSTITUTABLE=382, SUBTYPE=383, 
		SUCCESS=384, SUSPEND=385, TABLE=386, THE=387, THEN=388, TIME=389, TIMESTAMP=390, 
		TIMESTAMP_LTZ_UNCONSTRAINED=391, TIMESTAMP_TZ_UNCONSTRAINED=392, TIMESTAMP_UNCONSTRAINED=393, 
		TIMEZONE_ABBR=394, TIMEZONE_HOUR=395, TIMEZONE_MINUTE=396, TIMEZONE_REGION=397, 
		TO=398, TO_CHAR=399, TO_NUMBER=400, TRAILING=401, TRANSACTION=402, TRANSLATE=403, 
		TREAT=404, TRIGGER=405, TRIM=406, TRUE=407, TRUNCATE=408, TYPE=409, UNBOUNDED=410, 
		UNDER=411, UNION=412, UNIQUE=413, UNLIMITED=414, UNPIVOT=415, UNTIL=416, 
		UPDATE=417, UPDATED=418, UPSERT=419, UROWID=420, USE=421, USING=422, VALIDATE=423, 
		VALUE=424, VALUES=425, VARCHAR=426, VARCHAR2=427, VARIABLE=428, VARRAY=429, 
		VARYING=430, VERSION=431, VERSIONS=432, WAIT=433, WARNING=434, WELLFORMED=435, 
		WHEN=436, WHENEVER=437, WHERE=438, WHILE=439, WITH=440, WITHIN=441, WORK=442, 
		WRITE=443, XML=444, XMLAGG=445, XMLATTRIBUTES=446, XMLCAST=447, XMLCOLATTVAL=448, 
		XMLELEMENT=449, XMLEXISTS=450, XMLFOREST=451, XMLNAMESPACES=452, XMLPARSE=453, 
		XMLPI=454, XMLQUERY=455, XMLROOT=456, XMLSERIALIZE=457, XMLTABLE=458, 
		YEAR=459, YES=460, YMINTERVAL_UNCONSTRAINED=461, ZONE=462, PREDICTION=463, 
		PREDICTION_BOUNDS=464, PREDICTION_COST=465, PREDICTION_DETAILS=466, PREDICTION_PROBABILITY=467, 
		PREDICTION_SET=468, CUME_DIST=469, DENSE_RANK=470, LISTAGG=471, PERCENT_RANK=472, 
		PERCENTILE_CONT=473, PERCENTILE_DISC=474, RANK=475, AVG=476, CORR=477, 
		LAG=478, LEAD=479, MAX=480, MEDIAN=481, MIN=482, NTILE=483, RATIO_TO_REPORT=484, 
		ROW_NUMBER=485, SUM=486, VARIANCE=487, REGR_=488, STDDEV=489, VAR_=490, 
		COVAR_=491, PROMPT=492, NATIONAL_CHAR_STRING_LIT=493, BIT_STRING_LIT=494, 
		HEX_STRING_LIT=495, DOUBLE_PERIOD=496, PERIOD=497, UNSIGNED_INTEGER=498, 
		APPROXIMATE_NUM_LIT=499, CHAR_STRING=500, DELIMITED_ID=501, PERCENT=502, 
		AMPERSAND=503, LEFT_PAREN=504, RIGHT_PAREN=505, DOUBLE_ASTERISK=506, ASTERISK=507, 
		PLUS_SIGN=508, MINUS_SIGN=509, COMMA=510, SOLIDUS=511, AT_SIGN=512, ASSIGN_OP=513, 
		BINDVAR=514, COLON=515, SEMICOLON=516, LESS_THAN_OR_EQUALS_OP=517, LESS_THAN_OP=518, 
		GREATER_THAN_OR_EQUALS_OP=519, NOT_EQUAL_OP=520, CARRET_OPERATOR_PART=521, 
		TILDE_OPERATOR_PART=522, EXCLAMATION_OPERATOR_PART=523, GREATER_THAN_OP=524, 
		CONCATENATION_OP=525, VERTICAL_BAR=526, EQUALS_OP=527, LEFT_BRACKET=528, 
		RIGHT_BRACKET=529, INTRODUCER=530, SPACES=531, SINGLE_LINE_COMMENT=532, 
		MULTI_LINE_COMMENT=533, SQLPLUS_PROMPT=534, SQLPLUS_CALLSCRIPT=535, SQL92_RESERVED_ALL=536, 
		SQL92_RESERVED_ALTER=537, SQL92_RESERVED_AND=538, SQL92_RESERVED_ANY=539, 
		SQL92_RESERVED_AS=540, SQL92_RESERVED_ASC=541, SQL92_RESERVED_BEGIN=542, 
		SQL92_RESERVED_BETWEEN=543, SQL92_RESERVED_BY=544, SQL92_RESERVED_CASE=545, 
		SQL92_RESERVED_CHECK=546, PLSQL_RESERVED_CLUSTERS=547, PLSQL_RESERVED_COLAUTH=548, 
		PLSQL_RESERVED_COMPRESS=549, SQL92_RESERVED_CONNECT=550, PLSQL_NON_RESERVED_CONNECT_BY_ROOT=551, 
		PLSQL_RESERVED_CRASH=552, SQL92_RESERVED_CREATE=553, SQL92_RESERVED_CURRENT=554, 
		SQL92_RESERVED_CURSOR=555, SQL92_RESERVED_DATE=556, SQL92_RESERVED_DECLARE=557, 
		SQL92_RESERVED_DEFAULT=558, SQL92_RESERVED_DELETE=559, SQL92_RESERVED_DESC=560, 
		SQL92_RESERVED_DISTINCT=561, SQL92_RESERVED_DROP=562, SQL92_RESERVED_ELSE=563, 
		SQL92_RESERVED_END=564, SQL92_RESERVED_EXCEPTION=565, PLSQL_RESERVED_EXCLUSIVE=566, 
		SQL92_RESERVED_EXISTS=567, SQL92_RESERVED_FALSE=568, SQL92_RESERVED_FETCH=569, 
		SQL92_RESERVED_FOR=570, SQL92_RESERVED_FROM=571, SQL92_RESERVED_GOTO=572, 
		SQL92_RESERVED_GRANT=573, SQL92_RESERVED_GROUP=574, SQL92_RESERVED_HAVING=575, 
		PLSQL_RESERVED_IDENTIFIED=576, PLSQL_RESERVED_IF=577, SQL92_RESERVED_IN=578, 
		PLSQL_RESERVED_INDEX=579, PLSQL_RESERVED_INDEXES=580, SQL92_RESERVED_INSERT=581, 
		SQL92_RESERVED_INTERSECT=582, SQL92_RESERVED_INTO=583, SQL92_RESERVED_IS=584, 
		SQL92_RESERVED_LIKE=585, PLSQL_RESERVED_LOCK=586, PLSQL_RESERVED_MINUS=587, 
		PLSQL_RESERVED_MODE=588, PLSQL_RESERVED_NOCOMPRESS=589, SQL92_RESERVED_NOT=590, 
		PLSQL_RESERVED_NOWAIT=591, SQL92_RESERVED_NULL=592, SQL92_RESERVED_OF=593, 
		SQL92_RESERVED_ON=594, SQL92_RESERVED_OPTION=595, SQL92_RESERVED_OR=596, 
		SQL92_RESERVED_ORDER=597, SQL92_RESERVED_OVERLAPS=598, SQL92_RESERVED_PRIOR=599, 
		SQL92_RESERVED_PROCEDURE=600, SQL92_RESERVED_PUBLIC=601, PLSQL_RESERVED_RESOURCE=602, 
		SQL92_RESERVED_REVOKE=603, SQL92_RESERVED_SELECT=604, PLSQL_RESERVED_SHARE=605, 
		SQL92_RESERVED_SIZE=606, PLSQL_RESERVED_START=607, PLSQL_RESERVED_TABAUTH=608, 
		SQL92_RESERVED_TABLE=609, SQL92_RESERVED_THE=610, SQL92_RESERVED_THEN=611, 
		SQL92_RESERVED_TO=612, SQL92_RESERVED_TRUE=613, SQL92_RESERVED_UNION=614, 
		SQL92_RESERVED_UNIQUE=615, SQL92_RESERVED_UPDATE=616, SQL92_RESERVED_VALUES=617, 
		SQL92_RESERVED_VIEW=618, PLSQL_RESERVED_VIEWS=619, SQL92_RESERVED_WHEN=620, 
		SQL92_RESERVED_WHERE=621, SQL92_RESERVED_WITH=622, PLSQL_NON_RESERVED_USING=623, 
		PLSQL_NON_RESERVED_MODEL=624, PLSQL_NON_RESERVED_ELSIF=625, PLSQL_NON_RESERVED_PIVOT=626, 
		PLSQL_NON_RESERVED_UNPIVOT=627, REGULAR_ID=628, ZV=629;
	public static final int
		RULE_swallow_to_semi = 0, RULE_compilation_unit = 1, RULE_sql_script = 2, 
		RULE_unit_statement = 3, RULE_drop_function = 4, RULE_alter_function = 5, 
		RULE_create_function_body = 6, RULE_function_spec = 7, RULE_parallel_enable_clause = 8, 
		RULE_partition_by_clause = 9, RULE_result_cache_clause = 10, RULE_relies_on_part = 11, 
		RULE_streaming_clause = 12, RULE_drop_package = 13, RULE_alter_package = 14, 
		RULE_create_package = 15, RULE_package_body = 16, RULE_package_spec = 17, 
		RULE_package_obj_spec = 18, RULE_package_obj_body = 19, RULE_drop_procedure = 20, 
		RULE_alter_procedure = 21, RULE_create_procedure_body = 22, RULE_procedure_spec = 23, 
		RULE_drop_trigger = 24, RULE_alter_trigger = 25, RULE_create_trigger = 26, 
		RULE_trigger_follows_clause = 27, RULE_trigger_when_clause = 28, RULE_simple_dml_trigger = 29, 
		RULE_for_each_row = 30, RULE_compound_dml_trigger = 31, RULE_non_dml_trigger = 32, 
		RULE_trigger_body = 33, RULE_routine_clause = 34, RULE_compound_trigger_block = 35, 
		RULE_timing_point_section = 36, RULE_non_dml_event = 37, RULE_dml_event_clause = 38, 
		RULE_dml_event_element = 39, RULE_dml_event_nested_clause = 40, RULE_referencing_clause = 41, 
		RULE_referencing_element = 42, RULE_drop_type = 43, RULE_alter_type = 44, 
		RULE_compile_type_clause = 45, RULE_replace_type_clause = 46, RULE_alter_method_spec = 47, 
		RULE_alter_method_element = 48, RULE_alter_attribute_definition = 49, 
		RULE_attribute_definition = 50, RULE_alter_collection_clauses = 51, RULE_dependent_handling_clause = 52, 
		RULE_dependent_exceptions_part = 53, RULE_create_type = 54, RULE_type_definition = 55, 
		RULE_object_type_def = 56, RULE_object_as_part = 57, RULE_object_under_part = 58, 
		RULE_nested_table_type_def = 59, RULE_sqlj_object_type = 60, RULE_type_body = 61, 
		RULE_type_body_elements = 62, RULE_map_order_func_declaration = 63, RULE_subprog_decl_in_type = 64, 
		RULE_proc_decl_in_type = 65, RULE_func_decl_in_type = 66, RULE_constructor_declaration = 67, 
		RULE_modifier_clause = 68, RULE_object_member_spec = 69, RULE_sqlj_object_type_attr = 70, 
		RULE_element_spec = 71, RULE_element_spec_options = 72, RULE_subprogram_spec = 73, 
		RULE_type_procedure_spec = 74, RULE_type_function_spec = 75, RULE_constructor_spec = 76, 
		RULE_map_order_function_spec = 77, RULE_pragma_clause = 78, RULE_pragma_elements = 79, 
		RULE_type_elements_parameter = 80, RULE_drop_sequence = 81, RULE_alter_sequence = 82, 
		RULE_create_sequence = 83, RULE_sequence_spec = 84, RULE_sequence_start_clause = 85, 
		RULE_invoker_rights_clause = 86, RULE_compiler_parameters_clause = 87, 
		RULE_call_spec = 88, RULE_java_spec = 89, RULE_c_spec = 90, RULE_c_agent_in_clause = 91, 
		RULE_c_parameters_clause = 92, RULE_parameter = 93, RULE_default_value_part = 94, 
		RULE_declare_spec = 95, RULE_variable_declaration = 96, RULE_subtype_declaration = 97, 
		RULE_cursor_declaration = 98, RULE_parameter_spec = 99, RULE_exception_declaration = 100, 
		RULE_pragma_declaration = 101, RULE_record_declaration = 102, RULE_record_type_dec = 103, 
		RULE_field_spec = 104, RULE_record_var_dec = 105, RULE_table_declaration = 106, 
		RULE_table_type_dec = 107, RULE_table_indexed_by_part = 108, RULE_varray_type_def = 109, 
		RULE_table_var_dec = 110, RULE_seq_of_statements = 111, RULE_label_declaration = 112, 
		RULE_statement = 113, RULE_assignment_statement = 114, RULE_continue_statement = 115, 
		RULE_exit_statement = 116, RULE_goto_statement = 117, RULE_if_statement = 118, 
		RULE_elsif_part = 119, RULE_else_part = 120, RULE_loop_statement = 121, 
		RULE_cursor_loop_param = 122, RULE_forall_statement = 123, RULE_bounds_clause = 124, 
		RULE_between_bound = 125, RULE_lower_bound = 126, RULE_upper_bound = 127, 
		RULE_null_statement = 128, RULE_raise_statement = 129, RULE_return_statement = 130, 
		RULE_function_call = 131, RULE_body = 132, RULE_collection_statement = 133, 
		RULE_pipe_row = 134, RULE_exception_clause = 135, RULE_exception_handler = 136, 
		RULE_trigger_block = 137, RULE_block = 138, RULE_sql_statement = 139, 
		RULE_execute_immediate = 140, RULE_dynamic_returning_clause = 141, RULE_data_manipulation_language_statements = 142, 
		RULE_cursor_manipulation_statements = 143, RULE_close_statement = 144, 
		RULE_open_statement = 145, RULE_fetch_statement = 146, RULE_open_for_statement = 147, 
		RULE_transaction_control_statements = 148, RULE_set_transaction_command = 149, 
		RULE_set_constraint_command = 150, RULE_commit_statement = 151, RULE_write_clause = 152, 
		RULE_rollback_statement = 153, RULE_savepoint_statement = 154, RULE_explain_statement = 155, 
		RULE_select_statement = 156, RULE_subquery_factoring_clause = 157, RULE_factoring_element = 158, 
		RULE_search_clause = 159, RULE_cycle_clause = 160, RULE_subquery = 161, 
		RULE_subquery_operation_part = 162, RULE_subquery_basic_elements = 163, 
		RULE_query_block = 164, RULE_selected_element = 165, RULE_from_clause = 166, 
		RULE_select_list_elements = 167, RULE_table_ref_list = 168, RULE_table_ref = 169, 
		RULE_table_ref_aux = 170, RULE_join_clause = 171, RULE_join_on_part = 172, 
		RULE_join_using_part = 173, RULE_outer_join_type = 174, RULE_query_partition_clause = 175, 
		RULE_flashback_query_clause = 176, RULE_pivot_clause = 177, RULE_pivot_element = 178, 
		RULE_pivot_for_clause = 179, RULE_pivot_in_clause = 180, RULE_pivot_in_clause_element = 181, 
		RULE_pivot_in_clause_elements = 182, RULE_unpivot_clause = 183, RULE_unpivot_in_clause = 184, 
		RULE_unpivot_in_elements = 185, RULE_hierarchical_query_clause = 186, 
		RULE_start_part = 187, RULE_group_by_clause = 188, RULE_group_by_elements = 189, 
		RULE_rollup_cube_clause = 190, RULE_grouping_sets_clause = 191, RULE_grouping_sets_elements = 192, 
		RULE_having_clause = 193, RULE_model_clause = 194, RULE_cell_reference_options = 195, 
		RULE_return_rows_clause = 196, RULE_reference_model = 197, RULE_main_model = 198, 
		RULE_model_column_clauses = 199, RULE_model_column_partition_part = 200, 
		RULE_model_column_list = 201, RULE_model_column = 202, RULE_model_rules_clause = 203, 
		RULE_model_rules_part = 204, RULE_model_rules_element = 205, RULE_cell_assignment = 206, 
		RULE_model_iterate_clause = 207, RULE_until_part = 208, RULE_order_by_clause = 209, 
		RULE_order_by_elements = 210, RULE_for_update_clause = 211, RULE_for_update_of_part = 212, 
		RULE_for_update_options = 213, RULE_update_statement = 214, RULE_update_set_clause = 215, 
		RULE_column_based_update_set_clause = 216, RULE_delete_statement = 217, 
		RULE_insert_statement = 218, RULE_single_table_insert = 219, RULE_multi_table_insert = 220, 
		RULE_multi_table_element = 221, RULE_conditional_insert_clause = 222, 
		RULE_conditional_insert_when_part = 223, RULE_conditional_insert_else_part = 224, 
		RULE_insert_into_clause = 225, RULE_values_clause = 226, RULE_merge_statement = 227, 
		RULE_merge_update_clause = 228, RULE_merge_element = 229, RULE_merge_update_delete_part = 230, 
		RULE_merge_insert_clause = 231, RULE_selected_tableview = 232, RULE_lock_table_statement = 233, 
		RULE_wait_nowait_part = 234, RULE_lock_table_element = 235, RULE_lock_mode = 236, 
		RULE_general_table_ref = 237, RULE_static_returning_clause = 238, RULE_error_logging_clause = 239, 
		RULE_error_logging_into_part = 240, RULE_error_logging_reject_part = 241, 
		RULE_dml_table_expression_clause = 242, RULE_table_collection_expression = 243, 
		RULE_subquery_restriction_clause = 244, RULE_sample_clause = 245, RULE_seed_part = 246, 
		RULE_cursor_expression = 247, RULE_sql_cursor_expression = 248, RULE_collection_assoc_expression = 249, 
		RULE_collection_type_expression = 250, RULE_expression_list = 251, RULE_condition = 252, 
		RULE_condition_wrapper = 253, RULE_expression = 254, RULE_expression_wrapper = 255, 
		RULE_logical_and_expression = 256, RULE_negated_expression = 257, RULE_equality_expression = 258, 
		RULE_multiset_expression = 259, RULE_multiset_type = 260, RULE_relational_expression = 261, 
		RULE_compound_expression = 262, RULE_like_type = 263, RULE_like_escape_part = 264, 
		RULE_in_elements = 265, RULE_between_elements = 266, RULE_concatenation = 267, 
		RULE_concatenation_wrapper = 268, RULE_additive_expression = 269, RULE_multiply_expression = 270, 
		RULE_datetime_expression = 271, RULE_interval_expression = 272, RULE_model_expression = 273, 
		RULE_model_expression_element = 274, RULE_single_column_for_loop = 275, 
		RULE_for_like_part = 276, RULE_for_increment_decrement_type = 277, RULE_multi_column_for_loop = 278, 
		RULE_unary_expression = 279, RULE_case_statement = 280, RULE_simple_case_statement = 281, 
		RULE_simple_case_when_part = 282, RULE_searched_case_statement = 283, 
		RULE_searched_case_when_part = 284, RULE_case_else_part = 285, RULE_atom = 286, 
		RULE_expression_or_vector = 287, RULE_vector_expr = 288, RULE_quantified_expression = 289, 
		RULE_plsql_type_conversion = 290, RULE_sql_type_conversion = 291, RULE_standard_function = 292, 
		RULE_over_clause_keyword = 293, RULE_within_or_over_clause_keyword = 294, 
		RULE_standard_prediction_function_keyword = 295, RULE_over_clause = 296, 
		RULE_windowing_clause = 297, RULE_windowing_type = 298, RULE_windowing_elements = 299, 
		RULE_using_clause = 300, RULE_using_element = 301, RULE_collect_order_by_part = 302, 
		RULE_within_or_over_part = 303, RULE_cost_matrix_clause = 304, RULE_xml_passing_clause = 305, 
		RULE_xml_attributes_clause = 306, RULE_xml_namespaces_clause = 307, RULE_xml_table_column = 308, 
		RULE_xml_general_default_part = 309, RULE_xml_multiuse_expression_element = 310, 
		RULE_xmlroot_param_version_part = 311, RULE_xmlroot_param_standalone_part = 312, 
		RULE_xmlserialize_param_enconding_part = 313, RULE_xmlserialize_param_version_part = 314, 
		RULE_xmlserialize_param_ident_part = 315, RULE_boolean_static_expression = 316, 
		RULE_preprocessor_internal_statement = 317, RULE_preprocessor_statement = 318, 
		RULE_sql_plus_command = 319, RULE_whenever_command = 320, RULE_set_command = 321, 
		RULE_exit_command = 322, RULE_prompt_command = 323, RULE_call_sql_script_command = 324, 
		RULE_partition_extension_clause = 325, RULE_column_alias = 326, RULE_table_alias = 327, 
		RULE_alias_quoted_string = 328, RULE_where_clause = 329, RULE_current_of_clause = 330, 
		RULE_into_clause_variable = 331, RULE_into_clause = 332, RULE_xml_column_name = 333, 
		RULE_cost_class_name = 334, RULE_attribute_name = 335, RULE_savepoint_name = 336, 
		RULE_rollback_segment_name = 337, RULE_table_var_name = 338, RULE_schema_name = 339, 
		RULE_routine_name = 340, RULE_package_name = 341, RULE_implementation_type_name = 342, 
		RULE_parameter_name = 343, RULE_reference_model_name = 344, RULE_main_model_name = 345, 
		RULE_aggregate_function_name = 346, RULE_query_name = 347, RULE_constraint_name = 348, 
		RULE_label_name = 349, RULE_type_name = 350, RULE_sequence_name = 351, 
		RULE_exception_name = 352, RULE_function_name = 353, RULE_procedure_name = 354, 
		RULE_trigger_name = 355, RULE_variable_name = 356, RULE_index_name = 357, 
		RULE_cursor_name = 358, RULE_record_name = 359, RULE_collection_name = 360, 
		RULE_link_name = 361, RULE_column_name = 362, RULE_tableview_name = 363, 
		RULE_char_set_name = 364, RULE_keep_clause = 365, RULE_function_argument = 366, 
		RULE_function_argument_analytic = 367, RULE_function_argument_modeling = 368, 
		RULE_respect_or_ignore_nulls = 369, RULE_argument = 370, RULE_type_spec = 371, 
		RULE_datatype = 372, RULE_precision_part = 373, RULE_native_datatype_element = 374, 
		RULE_bind_variable = 375, RULE_general_element = 376, RULE_general_element_part = 377, 
		RULE_table_element = 378, RULE_constant = 379, RULE_numeric = 380, RULE_quoted_string = 381, 
		RULE_id = 382, RULE_id_expression = 383, RULE_not_equal_op = 384, RULE_greater_than_or_equals_op = 385, 
		RULE_less_than_or_equals_op = 386, RULE_concatenation_op = 387, RULE_outer_join_sign = 388, 
		RULE_regular_id = 389;
	public static final String[] ruleNames = {
		"swallow_to_semi", "compilation_unit", "sql_script", "unit_statement", 
		"drop_function", "alter_function", "create_function_body", "function_spec", 
		"parallel_enable_clause", "partition_by_clause", "result_cache_clause", 
		"relies_on_part", "streaming_clause", "drop_package", "alter_package", 
		"create_package", "package_body", "package_spec", "package_obj_spec", 
		"package_obj_body", "drop_procedure", "alter_procedure", "create_procedure_body", 
		"procedure_spec", "drop_trigger", "alter_trigger", "create_trigger", "trigger_follows_clause", 
		"trigger_when_clause", "simple_dml_trigger", "for_each_row", "compound_dml_trigger", 
		"non_dml_trigger", "trigger_body", "routine_clause", "compound_trigger_block", 
		"timing_point_section", "non_dml_event", "dml_event_clause", "dml_event_element", 
		"dml_event_nested_clause", "referencing_clause", "referencing_element", 
		"drop_type", "alter_type", "compile_type_clause", "replace_type_clause", 
		"alter_method_spec", "alter_method_element", "alter_attribute_definition", 
		"attribute_definition", "alter_collection_clauses", "dependent_handling_clause", 
		"dependent_exceptions_part", "create_type", "type_definition", "object_type_def", 
		"object_as_part", "object_under_part", "nested_table_type_def", "sqlj_object_type", 
		"type_body", "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
		"proc_decl_in_type", "func_decl_in_type", "constructor_declaration", "modifier_clause", 
		"object_member_spec", "sqlj_object_type_attr", "element_spec", "element_spec_options", 
		"subprogram_spec", "type_procedure_spec", "type_function_spec", "constructor_spec", 
		"map_order_function_spec", "pragma_clause", "pragma_elements", "type_elements_parameter", 
		"drop_sequence", "alter_sequence", "create_sequence", "sequence_spec", 
		"sequence_start_clause", "invoker_rights_clause", "compiler_parameters_clause", 
		"call_spec", "java_spec", "c_spec", "c_agent_in_clause", "c_parameters_clause", 
		"parameter", "default_value_part", "declare_spec", "variable_declaration", 
		"subtype_declaration", "cursor_declaration", "parameter_spec", "exception_declaration", 
		"pragma_declaration", "record_declaration", "record_type_dec", "field_spec", 
		"record_var_dec", "table_declaration", "table_type_dec", "table_indexed_by_part", 
		"varray_type_def", "table_var_dec", "seq_of_statements", "label_declaration", 
		"statement", "assignment_statement", "continue_statement", "exit_statement", 
		"goto_statement", "if_statement", "elsif_part", "else_part", "loop_statement", 
		"cursor_loop_param", "forall_statement", "bounds_clause", "between_bound", 
		"lower_bound", "upper_bound", "null_statement", "raise_statement", "return_statement", 
		"function_call", "body", "collection_statement", "pipe_row", "exception_clause", 
		"exception_handler", "trigger_block", "block", "sql_statement", "execute_immediate", 
		"dynamic_returning_clause", "data_manipulation_language_statements", "cursor_manipulation_statements", 
		"close_statement", "open_statement", "fetch_statement", "open_for_statement", 
		"transaction_control_statements", "set_transaction_command", "set_constraint_command", 
		"commit_statement", "write_clause", "rollback_statement", "savepoint_statement", 
		"explain_statement", "select_statement", "subquery_factoring_clause", 
		"factoring_element", "search_clause", "cycle_clause", "subquery", "subquery_operation_part", 
		"subquery_basic_elements", "query_block", "selected_element", "from_clause", 
		"select_list_elements", "table_ref_list", "table_ref", "table_ref_aux", 
		"join_clause", "join_on_part", "join_using_part", "outer_join_type", "query_partition_clause", 
		"flashback_query_clause", "pivot_clause", "pivot_element", "pivot_for_clause", 
		"pivot_in_clause", "pivot_in_clause_element", "pivot_in_clause_elements", 
		"unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause", 
		"start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause", 
		"grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause", 
		"cell_reference_options", "return_rows_clause", "reference_model", "main_model", 
		"model_column_clauses", "model_column_partition_part", "model_column_list", 
		"model_column", "model_rules_clause", "model_rules_part", "model_rules_element", 
		"cell_assignment", "model_iterate_clause", "until_part", "order_by_clause", 
		"order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options", 
		"update_statement", "update_set_clause", "column_based_update_set_clause", 
		"delete_statement", "insert_statement", "single_table_insert", "multi_table_insert", 
		"multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
		"conditional_insert_else_part", "insert_into_clause", "values_clause", 
		"merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part", 
		"merge_insert_clause", "selected_tableview", "lock_table_statement", "wait_nowait_part", 
		"lock_table_element", "lock_mode", "general_table_ref", "static_returning_clause", 
		"error_logging_clause", "error_logging_into_part", "error_logging_reject_part", 
		"dml_table_expression_clause", "table_collection_expression", "subquery_restriction_clause", 
		"sample_clause", "seed_part", "cursor_expression", "sql_cursor_expression", 
		"collection_assoc_expression", "collection_type_expression", "expression_list", 
		"condition", "condition_wrapper", "expression", "expression_wrapper", 
		"logical_and_expression", "negated_expression", "equality_expression", 
		"multiset_expression", "multiset_type", "relational_expression", "compound_expression", 
		"like_type", "like_escape_part", "in_elements", "between_elements", "concatenation", 
		"concatenation_wrapper", "additive_expression", "multiply_expression", 
		"datetime_expression", "interval_expression", "model_expression", "model_expression_element", 
		"single_column_for_loop", "for_like_part", "for_increment_decrement_type", 
		"multi_column_for_loop", "unary_expression", "case_statement", "simple_case_statement", 
		"simple_case_when_part", "searched_case_statement", "searched_case_when_part", 
		"case_else_part", "atom", "expression_or_vector", "vector_expr", "quantified_expression", 
		"plsql_type_conversion", "sql_type_conversion", "standard_function", "over_clause_keyword", 
		"within_or_over_clause_keyword", "standard_prediction_function_keyword", 
		"over_clause", "windowing_clause", "windowing_type", "windowing_elements", 
		"using_clause", "using_element", "collect_order_by_part", "within_or_over_part", 
		"cost_matrix_clause", "xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
		"xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
		"xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part", 
		"xmlserialize_param_version_part", "xmlserialize_param_ident_part", "boolean_static_expression", 
		"preprocessor_internal_statement", "preprocessor_statement", "sql_plus_command", 
		"whenever_command", "set_command", "exit_command", "prompt_command", "call_sql_script_command", 
		"partition_extension_clause", "column_alias", "table_alias", "alias_quoted_string", 
		"where_clause", "current_of_clause", "into_clause_variable", "into_clause", 
		"xml_column_name", "cost_class_name", "attribute_name", "savepoint_name", 
		"rollback_segment_name", "table_var_name", "schema_name", "routine_name", 
		"package_name", "implementation_type_name", "parameter_name", "reference_model_name", 
		"main_model_name", "aggregate_function_name", "query_name", "constraint_name", 
		"label_name", "type_name", "sequence_name", "exception_name", "function_name", 
		"procedure_name", "trigger_name", "variable_name", "index_name", "cursor_name", 
		"record_name", "collection_name", "link_name", "column_name", "tableview_name", 
		"char_set_name", "keep_clause", "function_argument", "function_argument_analytic", 
		"function_argument_modeling", "respect_or_ignore_nulls", "argument", "type_spec", 
		"datatype", "precision_part", "native_datatype_element", "bind_variable", 
		"general_element", "general_element_part", "table_element", "constant", 
		"numeric", "quoted_string", "id", "id_expression", "not_equal_op", "greater_than_or_equals_op", 
		"less_than_or_equals_op", "concatenation_op", "outer_join_sign", "regular_id"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'..'", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "'.'", null, null, null, null, "'%'", "'&'", 
		"'('", "')'", "'**'", "'*'", "'+'", "'-'", "','", "'/'", "'@'", "':='", 
		null, "':'", "';'", "'<='", "'<'", "'>='", null, "'^'", "'~'", "'!'", 
		"'>'", "'||'", "'|'", "'='", "'['", "']'", "'_'", null, null, null, null, 
		null, "'all'", "'alter'", "'and'", "'any'", "'as'", "'asc'", "'begin'", 
		"'between'", "'by'", "'case'", "'check'", "'clusters'", "'colauth'", "'compress'", 
		"'connect'", "'connect_by_root'", "'crash'", "'create'", "'current'", 
		"'cursor'", "'date'", "'declare'", "'default'", "'delete'", "'desc'", 
		"'distinct'", "'drop'", "'else'", "'end'", "'exception'", "'exclusive'", 
		"'exists'", "'false'", "'fetch'", "'for'", "'from'", "'goto'", "'grant'", 
		"'group'", "'having'", "'identified'", "'if'", "'in'", "'index'", "'indexes'", 
		"'insert'", "'intersect'", "'into'", "'is'", "'like'", "'lock'", "'minus'", 
		"'mode'", "'nocompress'", "'not'", "'nowait'", "'null'", "'of'", "'on'", 
		"'option'", "'or'", "'order'", "'overlaps'", "'prior'", "'procedure'", 
		"'public'", "'resource'", "'revoke'", "'select'", "'share'", "'size'", 
		"'start'", "'tabauth'", "'table'", "'the'", "'then'", "'to'", "'true'", 
		"'union'", "'unique'", "'update'", "'values'", "'view'", "'views'", "'when'", 
		"'where'", "'with'", "'using'", "'model'", "'elsif'", "'pivot'", "'unpivot'", 
		null, "'@!'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, "PP_IF", "PP_THEN", "PP_ELSE", "PP_ELSIF", "PP_END", "PP_ERROR", 
		"A_LETTER", "ADD", "AFTER", "AGENT", "AGGREGATE", "ALL", "ALTER", "ANALYZE", 
		"AND", "ANY", "ARRAY", "AS", "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", "AUDIT", 
		"AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", "BATCH", "BEFORE", 
		"BEGIN", "BETWEEN", "BFILE", "BINARY_DOUBLE", "BINARY_FLOAT", "BINARY_INTEGER", 
		"BLOB", "BLOCK", "BODY", "BOOLEAN", "BOTH", "BREADTH", "BULK", "BY", "BYTE", 
		"C_LETTER", "CACHE", "CALL", "CANONICAL", "CASCADE", "CASE", "CAST", "CHAR", 
		"CHAR_CS", "CHARACTER", "CHECK", "CHR", "CLOB", "CLOSE", "CLUSTER", "COLLECT", 
		"COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "COMPATIBILITY", "COMPILE", 
		"COMPOUND", "CONNECT", "CONNECT_BY_ROOT", "CONSTANT", "CONSTRAINT", "CONSTRAINTS", 
		"CONSTRUCTOR", "CONTENT", "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID", 
		"CORRUPT_XID_ALL", "COST", "COUNT", "CREATE", "CROSS", "CUBE", "CURRENT", 
		"CURRENT_USER", "CURSOR", "CUSTOMDATUM", "CYCLE", "DATA", "DATABASE", 
		"DATE", "DAY", "DB_ROLE_CHANGE", "DBTIMEZONE", "DDL", "DEBUG", "DEC", 
		"DECIMAL", "DECLARE", "DECOMPOSE", "DECREMENT", "DEFAULT", "DEFAULTS", 
		"DEFERRED", "DEFINER", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", "DIMENSION", 
		"DISABLE", "DISASSOCIATE", "DISTINCT", "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
		"EACH", "ELEMENT", "ELSE", "ELSIF", "EMPTY", "ENABLE", "ENCODING", "END", 
		"ENTITYESCAPING", "ERRORS", "ESCAPE", "EVALNAME", "EXCEPTION", "EXCEPTION_INIT", 
		"EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXIT", "EXPLAIN", 
		"EXTERNAL", "EXTEND", "EXTRACT", "FAILURE", "FALSE", "FETCH", "FINAL", 
		"FIRST", "FIRST_VALUE", "FLOAT", "FOLLOWING", "FOLLOWS", "FOR", "FORALL", 
		"FORCE", "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", "GROUPING", 
		"HASH", "HAVING", "HIDE", "HOUR", "IF", "IGNORE", "IMMEDIATE", "IN", "INCLUDE", 
		"INCLUDING", "INCREMENT", "INDENT", "INDEX", "INDEXED", "INDICATOR", "INDICES", 
		"INFINITE", "INLINE", "INNER", "INOUT", "INSERT", "INSTANTIABLE", "INSTEAD", 
		"INT", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVALIDATE", "IS", 
		"ISOLATION", "ITERATE", "JAVA", "JOIN", "KEEP", "LANGUAGE", "LAST", "LAST_VALUE", 
		"LEADING", "LEFT", "LEVEL", "LIBRARY", "LIKE", "LIKE2", "LIKE4", "LIKEC", 
		"LIMIT", "LOCAL", "LOCK", "LOCKED", "LOG", "LOGOFF", "LOGON", "LONG", 
		"LOOP", "MAIN", "MAP", "MATCHED", "MAXVALUE", "MEASURES", "MEMBER", "MERGE", 
		"MINUS", "MINUTE", "MINVALUE", "MLSLABEL", "MODE", "MODEL", "MODIFY", 
		"MONTH", "MULTISET", "NAME", "NAN", "NATURAL", "NATURALN", "NAV", "NCHAR", 
		"NCHAR_CS", "NCLOB", "NESTED", "NEW", "NEXT", "NO", "NOAUDIT", "NOCACHE", 
		"NOCOPY", "NOCYCLE", "NOENTITYESCAPING", "NOMAXVALUE", "NOMINVALUE", "NONE", 
		"NOORDER", "NOSCHEMACHECK", "NOT", "NOWAIT", "NULL", "NULLS", "NUMBER", 
		"NUMERIC", "NVARCHAR2", "OBJECT", "OF", "OFF", "OID", "OLD", "ON", "ONLY", 
		"OPEN", "OPTION", "OR", "ORADATA", "ORDER", "ORDINALITY", "OSERROR", "OUT", 
		"OUTER", "OVER", "OVERRIDING", "PACKAGE", "PARALLEL_ENABLE", "PARAMETERS", 
		"PARENT", "PARTITION", "PASSING", "PATH", "PERCENT_ISOPEN", "PERCENT_ROWTYPE", 
		"PERCENT_TYPE", "PERCENT_FOUND", "PERCENT_NOTFOUND", "PIPELINED", "PIPE", 
		"PIVOT", "PLAN", "PLS_INTEGER", "POSITIVE", "POSITIVEN", "PRAGMA", "PRECEDING", 
		"PRECISION", "PRESENT", "PRIOR", "PROCEDURE", "RAISE", "RANGE", "RAW", 
		"READ", "REAL", "RECORD", "REF", "REFERENCE", "REFERENCING", "REJECT", 
		"RELIES_ON", "RENAME", "REPLACE", "RESPECT", "RESTRICT_REFERENCES", "RESULT", 
		"RESULT_CACHE", "RETURN", "RETURNING", "REUSE", "REVERSE", "REVOKE", "RIGHT", 
		"ROLLBACK", "ROLLUP", "ROW", "ROWID", "ROWS", "RULES", "SAMPLE", "SAVE", 
		"SAVEPOINT", "SCHEMA", "SCHEMACHECK", "SCN", "SEARCH", "SECOND", "SEED", 
		"SEGMENT", "SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", 
		"SERIALLY_REUSABLE", "SERVERERROR", "SESSIONTIMEZONE", "SET", "SETS", 
		"SETTINGS", "SHARE", "SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", 
		"SINGLE", "SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", "SOME", "SPECIFICATION", 
		"SQLDATA", "SQLERROR", "SQL_PERCENT_ROWCOUNT", "STANDALONE", "START", 
		"STARTUP", "STATEMENT", "STATEMENT_ID", "STATIC", "STATISTICS", "STRING", 
		"SUBMULTISET", "SUBPARTITION", "SUBSTITUTABLE", "SUBTYPE", "SUCCESS", 
		"SUSPEND", "TABLE", "THE", "THEN", "TIME", "TIMESTAMP", "TIMESTAMP_LTZ_UNCONSTRAINED", 
		"TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", "TIMEZONE_ABBR", 
		"TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TIMEZONE_REGION", "TO", "TO_CHAR", 
		"TO_NUMBER", "TRAILING", "TRANSACTION", "TRANSLATE", "TREAT", "TRIGGER", 
		"TRIM", "TRUE", "TRUNCATE", "TYPE", "UNBOUNDED", "UNDER", "UNION", "UNIQUE", 
		"UNLIMITED", "UNPIVOT", "UNTIL", "UPDATE", "UPDATED", "UPSERT", "UROWID", 
		"USE", "USING", "VALIDATE", "VALUE", "VALUES", "VARCHAR", "VARCHAR2", 
		"VARIABLE", "VARRAY", "VARYING", "VERSION", "VERSIONS", "WAIT", "WARNING", 
		"WELLFORMED", "WHEN", "WHENEVER", "WHERE", "WHILE", "WITH", "WITHIN", 
		"WORK", "WRITE", "XML", "XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", 
		"XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
		"XMLQUERY", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", 
		"ZONE", "PREDICTION", "PREDICTION_BOUNDS", "PREDICTION_COST", "PREDICTION_DETAILS", 
		"PREDICTION_PROBABILITY", "PREDICTION_SET", "CUME_DIST", "DENSE_RANK", 
		"LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", 
		"AVG", "CORR", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", "RATIO_TO_REPORT", 
		"ROW_NUMBER", "SUM", "VARIANCE", "REGR_", "STDDEV", "VAR_", "COVAR_", 
		"PROMPT", "NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", "HEX_STRING_LIT", 
		"DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
		"CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", "LEFT_PAREN", "RIGHT_PAREN", 
		"DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", 
		"AT_SIGN", "ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", "LESS_THAN_OR_EQUALS_OP", 
		"LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", "CARRET_OPERATOR_PART", 
		"TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", "GREATER_THAN_OP", 
		"CONCATENATION_OP", "VERTICAL_BAR", "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "SQLPLUS_PROMPT", 
		"SQLPLUS_CALLSCRIPT", "SQL92_RESERVED_ALL", "SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", 
		"SQL92_RESERVED_ANY", "SQL92_RESERVED_AS", "SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", 
		"SQL92_RESERVED_BETWEEN", "SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", 
		"SQL92_RESERVED_CHECK", "PLSQL_RESERVED_CLUSTERS", "PLSQL_RESERVED_COLAUTH", 
		"PLSQL_RESERVED_COMPRESS", "SQL92_RESERVED_CONNECT", "PLSQL_NON_RESERVED_CONNECT_BY_ROOT", 
		"PLSQL_RESERVED_CRASH", "SQL92_RESERVED_CREATE", "SQL92_RESERVED_CURRENT", 
		"SQL92_RESERVED_CURSOR", "SQL92_RESERVED_DATE", "SQL92_RESERVED_DECLARE", 
		"SQL92_RESERVED_DEFAULT", "SQL92_RESERVED_DELETE", "SQL92_RESERVED_DESC", 
		"SQL92_RESERVED_DISTINCT", "SQL92_RESERVED_DROP", "SQL92_RESERVED_ELSE", 
		"SQL92_RESERVED_END", "SQL92_RESERVED_EXCEPTION", "PLSQL_RESERVED_EXCLUSIVE", 
		"SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", "SQL92_RESERVED_FETCH", 
		"SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO", "SQL92_RESERVED_GRANT", 
		"SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING", "PLSQL_RESERVED_IDENTIFIED", 
		"PLSQL_RESERVED_IF", "SQL92_RESERVED_IN", "PLSQL_RESERVED_INDEX", "PLSQL_RESERVED_INDEXES", 
		"SQL92_RESERVED_INSERT", "SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", 
		"SQL92_RESERVED_IS", "SQL92_RESERVED_LIKE", "PLSQL_RESERVED_LOCK", "PLSQL_RESERVED_MINUS", 
		"PLSQL_RESERVED_MODE", "PLSQL_RESERVED_NOCOMPRESS", "SQL92_RESERVED_NOT", 
		"PLSQL_RESERVED_NOWAIT", "SQL92_RESERVED_NULL", "SQL92_RESERVED_OF", "SQL92_RESERVED_ON", 
		"SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", "SQL92_RESERVED_ORDER", 
		"SQL92_RESERVED_OVERLAPS", "SQL92_RESERVED_PRIOR", "SQL92_RESERVED_PROCEDURE", 
		"SQL92_RESERVED_PUBLIC", "PLSQL_RESERVED_RESOURCE", "SQL92_RESERVED_REVOKE", 
		"SQL92_RESERVED_SELECT", "PLSQL_RESERVED_SHARE", "SQL92_RESERVED_SIZE", 
		"PLSQL_RESERVED_START", "PLSQL_RESERVED_TABAUTH", "SQL92_RESERVED_TABLE", 
		"SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE", 
		"SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE", 
		"SQL92_RESERVED_VALUES", "SQL92_RESERVED_VIEW", "PLSQL_RESERVED_VIEWS", 
		"SQL92_RESERVED_WHEN", "SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", 
		"PLSQL_NON_RESERVED_USING", "PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_ELSIF", 
		"PLSQL_NON_RESERVED_PIVOT", "PLSQL_NON_RESERVED_UNPIVOT", "REGULAR_ID", 
		"ZV"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "plsql.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public plsqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Swallow_to_semiContext extends ParserRuleContext {
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_swallow_to_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSwallow_to_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSwallow_to_semi(this);
		}
	}

	public final Swallow_to_semiContext swallow_to_semi() throws RecognitionException {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_swallow_to_semi);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(781); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(780);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				}
				setState(783); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << PP_IF) | (1L << PP_THEN) | (1L << PP_ELSE) | (1L << PP_ELSIF) | (1L << PP_END) | (1L << PP_ERROR) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (END - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTEND - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)) | (1L << (INTO - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NEXT - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)) | (1L << (NONE - 192)) | (1L << (NOORDER - 192)) | (1L << (NOSCHEMACHECK - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PERCENT_ISOPEN - 256)) | (1L << (PERCENT_ROWTYPE - 256)) | (1L << (PERCENT_TYPE - 256)) | (1L << (PERCENT_FOUND - 256)) | (1L << (PERCENT_NOTFOUND - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIPE - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)) | (1L << (RENAME - 256)) | (1L << (REPLACE - 256)) | (1L << (RESPECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)) | (1L << (SUBMULTISET - 320)) | (1L << (SUBPARTITION - 320)) | (1L << (SUBSTITUTABLE - 320)) | (1L << (SUBTYPE - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TO_NUMBER - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)) | (1L << (XML - 384)) | (1L << (XMLAGG - 384)) | (1L << (XMLATTRIBUTES - 384)) | (1L << (XMLCAST - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (PROMPT - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (BIT_STRING_LIT - 448)) | (1L << (HEX_STRING_LIT - 448)) | (1L << (DOUBLE_PERIOD - 448)) | (1L << (PERIOD - 448)) | (1L << (UNSIGNED_INTEGER - 448)) | (1L << (APPROXIMATE_NUM_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)) | (1L << (PERCENT - 448)) | (1L << (AMPERSAND - 448)) | (1L << (LEFT_PAREN - 448)) | (1L << (RIGHT_PAREN - 448)) | (1L << (DOUBLE_ASTERISK - 448)) | (1L << (ASTERISK - 448)) | (1L << (PLUS_SIGN - 448)) | (1L << (MINUS_SIGN - 448)) | (1L << (COMMA - 448)) | (1L << (SOLIDUS - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (AT_SIGN - 512)) | (1L << (ASSIGN_OP - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (LESS_THAN_OR_EQUALS_OP - 512)) | (1L << (LESS_THAN_OP - 512)) | (1L << (GREATER_THAN_OR_EQUALS_OP - 512)) | (1L << (NOT_EQUAL_OP - 512)) | (1L << (CARRET_OPERATOR_PART - 512)) | (1L << (TILDE_OPERATOR_PART - 512)) | (1L << (EXCLAMATION_OPERATOR_PART - 512)) | (1L << (GREATER_THAN_OP - 512)) | (1L << (CONCATENATION_OP - 512)) | (1L << (VERTICAL_BAR - 512)) | (1L << (EQUALS_OP - 512)) | (1L << (LEFT_BRACKET - 512)) | (1L << (RIGHT_BRACKET - 512)) | (1L << (INTRODUCER - 512)) | (1L << (SPACES - 512)) | (1L << (SINGLE_LINE_COMMENT - 512)) | (1L << (MULTI_LINE_COMMENT - 512)) | (1L << (SQLPLUS_PROMPT - 512)) | (1L << (SQLPLUS_CALLSCRIPT - 512)) | (1L << (SQL92_RESERVED_ALL - 512)) | (1L << (SQL92_RESERVED_ALTER - 512)) | (1L << (SQL92_RESERVED_AND - 512)) | (1L << (SQL92_RESERVED_ANY - 512)) | (1L << (SQL92_RESERVED_AS - 512)) | (1L << (SQL92_RESERVED_ASC - 512)) | (1L << (SQL92_RESERVED_BEGIN - 512)) | (1L << (SQL92_RESERVED_BETWEEN - 512)) | (1L << (SQL92_RESERVED_BY - 512)) | (1L << (SQL92_RESERVED_CASE - 512)) | (1L << (SQL92_RESERVED_CHECK - 512)) | (1L << (PLSQL_RESERVED_CLUSTERS - 512)) | (1L << (PLSQL_RESERVED_COLAUTH - 512)) | (1L << (PLSQL_RESERVED_COMPRESS - 512)) | (1L << (SQL92_RESERVED_CONNECT - 512)) | (1L << (PLSQL_NON_RESERVED_CONNECT_BY_ROOT - 512)) | (1L << (PLSQL_RESERVED_CRASH - 512)) | (1L << (SQL92_RESERVED_CREATE - 512)) | (1L << (SQL92_RESERVED_CURRENT - 512)) | (1L << (SQL92_RESERVED_CURSOR - 512)) | (1L << (SQL92_RESERVED_DATE - 512)) | (1L << (SQL92_RESERVED_DECLARE - 512)) | (1L << (SQL92_RESERVED_DEFAULT - 512)) | (1L << (SQL92_RESERVED_DELETE - 512)) | (1L << (SQL92_RESERVED_DESC - 512)) | (1L << (SQL92_RESERVED_DISTINCT - 512)) | (1L << (SQL92_RESERVED_DROP - 512)) | (1L << (SQL92_RESERVED_ELSE - 512)) | (1L << (SQL92_RESERVED_END - 512)) | (1L << (SQL92_RESERVED_EXCEPTION - 512)) | (1L << (PLSQL_RESERVED_EXCLUSIVE - 512)) | (1L << (SQL92_RESERVED_EXISTS - 512)) | (1L << (SQL92_RESERVED_FALSE - 512)) | (1L << (SQL92_RESERVED_FETCH - 512)) | (1L << (SQL92_RESERVED_FOR - 512)) | (1L << (SQL92_RESERVED_FROM - 512)) | (1L << (SQL92_RESERVED_GOTO - 512)) | (1L << (SQL92_RESERVED_GRANT - 512)) | (1L << (SQL92_RESERVED_GROUP - 512)) | (1L << (SQL92_RESERVED_HAVING - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (PLSQL_RESERVED_IDENTIFIED - 576)) | (1L << (PLSQL_RESERVED_IF - 576)) | (1L << (SQL92_RESERVED_IN - 576)) | (1L << (PLSQL_RESERVED_INDEX - 576)) | (1L << (PLSQL_RESERVED_INDEXES - 576)) | (1L << (SQL92_RESERVED_INSERT - 576)) | (1L << (SQL92_RESERVED_INTERSECT - 576)) | (1L << (SQL92_RESERVED_INTO - 576)) | (1L << (SQL92_RESERVED_IS - 576)) | (1L << (SQL92_RESERVED_LIKE - 576)) | (1L << (PLSQL_RESERVED_LOCK - 576)) | (1L << (PLSQL_RESERVED_MINUS - 576)) | (1L << (PLSQL_RESERVED_MODE - 576)) | (1L << (PLSQL_RESERVED_NOCOMPRESS - 576)) | (1L << (SQL92_RESERVED_NOT - 576)) | (1L << (PLSQL_RESERVED_NOWAIT - 576)) | (1L << (SQL92_RESERVED_NULL - 576)) | (1L << (SQL92_RESERVED_OF - 576)) | (1L << (SQL92_RESERVED_ON - 576)) | (1L << (SQL92_RESERVED_OPTION - 576)) | (1L << (SQL92_RESERVED_OR - 576)) | (1L << (SQL92_RESERVED_ORDER - 576)) | (1L << (SQL92_RESERVED_OVERLAPS - 576)) | (1L << (SQL92_RESERVED_PRIOR - 576)) | (1L << (SQL92_RESERVED_PROCEDURE - 576)) | (1L << (SQL92_RESERVED_PUBLIC - 576)) | (1L << (PLSQL_RESERVED_RESOURCE - 576)) | (1L << (SQL92_RESERVED_REVOKE - 576)) | (1L << (SQL92_RESERVED_SELECT - 576)) | (1L << (PLSQL_RESERVED_SHARE - 576)) | (1L << (SQL92_RESERVED_SIZE - 576)) | (1L << (PLSQL_RESERVED_START - 576)) | (1L << (PLSQL_RESERVED_TABAUTH - 576)) | (1L << (SQL92_RESERVED_TABLE - 576)) | (1L << (SQL92_RESERVED_THE - 576)) | (1L << (SQL92_RESERVED_THEN - 576)) | (1L << (SQL92_RESERVED_TO - 576)) | (1L << (SQL92_RESERVED_TRUE - 576)) | (1L << (SQL92_RESERVED_UNION - 576)) | (1L << (SQL92_RESERVED_UNIQUE - 576)) | (1L << (SQL92_RESERVED_UPDATE - 576)) | (1L << (SQL92_RESERVED_VALUES - 576)) | (1L << (SQL92_RESERVED_VIEW - 576)) | (1L << (PLSQL_RESERVED_VIEWS - 576)) | (1L << (SQL92_RESERVED_WHEN - 576)) | (1L << (SQL92_RESERVED_WHERE - 576)) | (1L << (SQL92_RESERVED_WITH - 576)) | (1L << (PLSQL_NON_RESERVED_USING - 576)) | (1L << (PLSQL_NON_RESERVED_MODEL - 576)) | (1L << (PLSQL_NON_RESERVED_ELSIF - 576)) | (1L << (PLSQL_NON_RESERVED_PIVOT - 576)) | (1L << (PLSQL_NON_RESERVED_UNPIVOT - 576)) | (1L << (REGULAR_ID - 576)) | (1L << (ZV - 576)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compilation_unitContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(plsqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compilation_unit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompilation_unit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompilation_unit(this);
		}
	}

	public final Compilation_unitContext compilation_unit() throws RecognitionException {
		Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_compilation_unit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(788);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCK - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (PROCEDURE - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELECT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATE - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITH - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (LEFT_PAREN - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				{
				setState(785);
				unit_statement();
				}
				}
				setState(790);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(791);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_scriptContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(plsqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public List<Sql_plus_commandContext> sql_plus_command() {
			return getRuleContexts(Sql_plus_commandContext.class);
		}
		public Sql_plus_commandContext sql_plus_command(int i) {
			return getRuleContext(Sql_plus_commandContext.class,i);
		}
		public List<Preprocessor_statementContext> preprocessor_statement() {
			return getRuleContexts(Preprocessor_statementContext.class);
		}
		public Preprocessor_statementContext preprocessor_statement(int i) {
			return getRuleContext(Preprocessor_statementContext.class,i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_script; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_script(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_script(this);
		}
	}

	public final Sql_scriptContext sql_script() throws RecognitionException {
		Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_script);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCK - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (PROCEDURE - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELECT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATE - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITH - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (LEFT_PAREN - 453)) | (1L << (SOLIDUS - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || ((((_la - 530)) & ~0x3f) == 0 && ((1L << (_la - 530)) & ((1L << (INTRODUCER - 530)) | (1L << (SQLPLUS_PROMPT - 530)) | (1L << (SQLPLUS_CALLSCRIPT - 530)))) != 0) || _la==REGULAR_ID) {
				{
				setState(796);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
				case 1:
					{
					setState(793);
					unit_statement();
					}
					break;
				case 2:
					{
					setState(794);
					sql_plus_command();
					}
					break;
				case 3:
					{
					setState(795);
					preprocessor_statement();
					}
					break;
				}
				}
				setState(800);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(801);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unit_statementContext extends ParserRuleContext {
		public Alter_functionContext alter_function() {
			return getRuleContext(Alter_functionContext.class,0);
		}
		public Alter_packageContext alter_package() {
			return getRuleContext(Alter_packageContext.class,0);
		}
		public Alter_procedureContext alter_procedure() {
			return getRuleContext(Alter_procedureContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_triggerContext alter_trigger() {
			return getRuleContext(Alter_triggerContext.class,0);
		}
		public Alter_typeContext alter_type() {
			return getRuleContext(Alter_typeContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_packageContext create_package() {
			return getRuleContext(Create_packageContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_triggerContext create_trigger() {
			return getRuleContext(Create_triggerContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_packageContext drop_package() {
			return getRuleContext(Drop_packageContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnit_statement(this);
		}
	}

	public final Unit_statementContext unit_statement() throws RecognitionException {
		Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_unit_statement);
		try {
			setState(825);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(803);
				alter_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(804);
				alter_package();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(805);
				alter_procedure();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(806);
				alter_sequence();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(807);
				alter_trigger();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(808);
				alter_type();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(809);
				create_function_body();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(810);
				create_procedure_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(811);
				create_package();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(812);
				create_sequence();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(813);
				create_trigger();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(814);
				create_type();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(815);
				drop_function();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(816);
				drop_package();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(817);
				drop_procedure();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(818);
				drop_sequence();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(819);
				drop_trigger();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(820);
				drop_type();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(821);
				data_manipulation_language_statements();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(822);
				block();
				setState(823);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_function(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_drop_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(827);
			match(DROP);
			setState(828);
			match(FUNCTION);
			setState(829);
			function_name();
			setState(830);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_functionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public Alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_function(this);
		}
	}

	public final Alter_functionContext alter_function() throws RecognitionException {
		Alter_functionContext _localctx = new Alter_functionContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_alter_function);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(832);
			match(ALTER);
			setState(833);
			match(FUNCTION);
			setState(834);
			function_name();
			setState(835);
			match(COMPILE);
			setState(837);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				{
				setState(836);
				match(DEBUG);
				}
				break;
			}
			setState(842);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(839);
					compiler_parameters_clause();
					}
					} 
				}
				setState(844);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
			}
			setState(847);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(845);
				match(REUSE);
				setState(846);
				match(SETTINGS);
				}
			}

			setState(849);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_bodyContext extends ParserRuleContext {
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_function_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_function_body(this);
		}
	}

	public final Create_function_bodyContext create_function_body() throws RecognitionException {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_create_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(856);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(851);
				match(CREATE);
				setState(854);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(852);
					match(OR);
					setState(853);
					match(REPLACE);
					}
				}

				}
			}

			setState(858);
			function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(plsqlParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(plsqlParser.DETERMINISTIC, i);
		}
		public List<TerminalNode> PIPELINED() { return getTokens(plsqlParser.PIPELINED); }
		public TerminalNode PIPELINED(int i) {
			return getToken(plsqlParser.PIPELINED, i);
		}
		public List<TerminalNode> AGGREGATE() { return getTokens(plsqlParser.AGGREGATE); }
		public TerminalNode AGGREGATE(int i) {
			return getToken(plsqlParser.AGGREGATE, i);
		}
		public List<TerminalNode> USING() { return getTokens(plsqlParser.USING); }
		public TerminalNode USING(int i) {
			return getToken(plsqlParser.USING, i);
		}
		public List<Implementation_type_nameContext> implementation_type_name() {
			return getRuleContexts(Implementation_type_nameContext.class);
		}
		public Implementation_type_nameContext implementation_type_name(int i) {
			return getRuleContext(Implementation_type_nameContext.class,i);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_spec(this);
		}
	}

	public final Function_specContext function_spec() throws RecognitionException {
		Function_specContext _localctx = new Function_specContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(860);
			match(FUNCTION);
			setState(861);
			function_name();
			setState(873);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(862);
				match(LEFT_PAREN);
				setState(863);
				parameter();
				setState(868);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(864);
					match(COMMA);
					setState(865);
					parameter();
					}
					}
					setState(870);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(871);
				match(RIGHT_PAREN);
				}
			}

			setState(875);
			match(RETURN);
			setState(876);
			type_spec();
			setState(887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AGGREGATE || _la==AUTHID || _la==DETERMINISTIC || ((((_la - 282)) & ~0x3f) == 0 && ((1L << (_la - 282)) & ((1L << (PARALLEL_ENABLE - 282)) | (1L << (PIPELINED - 282)) | (1L << (RESULT_CACHE - 282)))) != 0)) {
				{
				setState(885);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(877);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(878);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(879);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(880);
					match(DETERMINISTIC);
					}
					break;
				case PIPELINED:
					{
					setState(881);
					match(PIPELINED);
					}
					break;
				case AGGREGATE:
					{
					setState(882);
					match(AGGREGATE);
					setState(883);
					match(USING);
					setState(884);
					implementation_type_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(889);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(904);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(890);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(902);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					setState(892);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(891);
						match(DECLARE);
						}
					}

					setState(897);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (PROCEDURE - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						{
						setState(894);
						declare_spec();
						}
						}
						setState(899);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(900);
					body();
					}
					break;
				case 2:
					{
					setState(901);
					call_spec();
					}
					break;
				}
				}
			}

			setState(906);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parallel_enable_clauseContext extends ParserRuleContext {
		public TerminalNode PARALLEL_ENABLE() { return getToken(plsqlParser.PARALLEL_ENABLE, 0); }
		public Partition_by_clauseContext partition_by_clause() {
			return getRuleContext(Partition_by_clauseContext.class,0);
		}
		public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_enable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParallel_enable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParallel_enable_clause(this);
		}
	}

	public final Parallel_enable_clauseContext parallel_enable_clause() throws RecognitionException {
		Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_parallel_enable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(908);
			match(PARALLEL_ENABLE);
			setState(910);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(909);
				partition_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_by_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode ANY() { return getToken(plsqlParser.ANY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode HASH() { return getToken(plsqlParser.HASH, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public Streaming_clauseContext streaming_clause() {
			return getRuleContext(Streaming_clauseContext.class,0);
		}
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPartition_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPartition_by_clause(this);
		}
	}

	public final Partition_by_clauseContext partition_by_clause() throws RecognitionException {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_partition_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(912);
			match(LEFT_PAREN);
			setState(913);
			match(PARTITION);
			setState(914);
			expression();
			setState(915);
			match(BY);
			setState(929);
			switch (_input.LA(1)) {
			case ANY:
				{
				setState(916);
				match(ANY);
				}
				break;
			case HASH:
			case RANGE:
				{
				setState(917);
				_la = _input.LA(1);
				if ( !(_la==HASH || _la==RANGE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(918);
				match(LEFT_PAREN);
				setState(919);
				column_name();
				setState(924);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(920);
					match(COMMA);
					setState(921);
					column_name();
					}
					}
					setState(926);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(927);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(932);
			_la = _input.LA(1);
			if (_la==CLUSTER || _la==ORDER) {
				{
				setState(931);
				streaming_clause();
				}
			}

			setState(934);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_cache_clauseContext extends ParserRuleContext {
		public TerminalNode RESULT_CACHE() { return getToken(plsqlParser.RESULT_CACHE, 0); }
		public Relies_on_partContext relies_on_part() {
			return getRuleContext(Relies_on_partContext.class,0);
		}
		public Result_cache_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_cache_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterResult_cache_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitResult_cache_clause(this);
		}
	}

	public final Result_cache_clauseContext result_cache_clause() throws RecognitionException {
		Result_cache_clauseContext _localctx = new Result_cache_clauseContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_result_cache_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(936);
			match(RESULT_CACHE);
			setState(938);
			_la = _input.LA(1);
			if (_la==RELIES_ON) {
				{
				setState(937);
				relies_on_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relies_on_partContext extends ParserRuleContext {
		public TerminalNode RELIES_ON() { return getToken(plsqlParser.RELIES_ON, 0); }
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public Relies_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relies_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRelies_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRelies_on_part(this);
		}
	}

	public final Relies_on_partContext relies_on_part() throws RecognitionException {
		Relies_on_partContext _localctx = new Relies_on_partContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_relies_on_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(940);
			match(RELIES_ON);
			setState(941);
			match(LEFT_PAREN);
			setState(942);
			tableview_name();
			setState(947);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(943);
				match(COMMA);
				setState(944);
				tableview_name();
				}
				}
				setState(949);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(950);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Streaming_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode CLUSTER() { return getToken(plsqlParser.CLUSTER, 0); }
		public Streaming_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_streaming_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStreaming_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStreaming_clause(this);
		}
	}

	public final Streaming_clauseContext streaming_clause() throws RecognitionException {
		Streaming_clauseContext _localctx = new Streaming_clauseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_streaming_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(952);
			_la = _input.LA(1);
			if ( !(_la==CLUSTER || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(953);
			expression();
			setState(954);
			match(BY);
			setState(955);
			match(LEFT_PAREN);
			setState(956);
			column_name();
			setState(961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(957);
				match(COMMA);
				setState(958);
				column_name();
				}
				}
				setState(963);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(964);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_packageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public Drop_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_package(this);
		}
	}

	public final Drop_packageContext drop_package() throws RecognitionException {
		Drop_packageContext _localctx = new Drop_packageContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_drop_package);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(966);
			match(DROP);
			setState(967);
			match(PACKAGE);
			setState(969);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				setState(968);
				match(BODY);
				}
				break;
			}
			setState(971);
			package_name();
			setState(972);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_packageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public List<TerminalNode> PACKAGE() { return getTokens(plsqlParser.PACKAGE); }
		public TerminalNode PACKAGE(int i) {
			return getToken(plsqlParser.PACKAGE, i);
		}
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public Alter_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_package(this);
		}
	}

	public final Alter_packageContext alter_package() throws RecognitionException {
		Alter_packageContext _localctx = new Alter_packageContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_alter_package);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(974);
			match(ALTER);
			setState(975);
			match(PACKAGE);
			setState(976);
			package_name();
			setState(977);
			match(COMPILE);
			setState(979);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(978);
				match(DEBUG);
				}
				break;
			}
			setState(982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				setState(981);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(987);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(984);
					compiler_parameters_clause();
					}
					} 
				}
				setState(989);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			}
			setState(992);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(990);
				match(REUSE);
				setState(991);
				match(SETTINGS);
				}
			}

			setState(994);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_packageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Package_specContext package_spec() {
			return getRuleContext(Package_specContext.class,0);
		}
		public Package_bodyContext package_body() {
			return getRuleContext(Package_bodyContext.class,0);
		}
		public Create_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_package(this);
		}
	}

	public final Create_packageContext create_package() throws RecognitionException {
		Create_packageContext _localctx = new Create_packageContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_create_package);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(996);
			match(CREATE);
			setState(999);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(997);
				match(OR);
				setState(998);
				match(REPLACE);
				}
			}

			setState(1001);
			match(PACKAGE);
			setState(1004);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				setState(1002);
				package_spec();
				}
				break;
			case 2:
				{
				setState(1003);
				package_body();
				}
				break;
			}
			setState(1006);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode BEGIN() { return getToken(plsqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<Package_obj_bodyContext> package_obj_body() {
			return getRuleContexts(Package_obj_bodyContext.class);
		}
		public Package_obj_bodyContext package_obj_body(int i) {
			return getRuleContext(Package_obj_bodyContext.class,i);
		}
		public Package_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_body(this);
		}
	}

	public final Package_bodyContext package_body() throws RecognitionException {
		Package_bodyContext _localctx = new Package_bodyContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_package_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1008);
			match(BODY);
			setState(1009);
			package_name();
			setState(1010);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1014);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (PROCEDURE - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				{
				setState(1011);
				package_obj_body();
				}
				}
				setState(1016);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1023);
			switch (_input.LA(1)) {
			case BEGIN:
				{
				setState(1017);
				match(BEGIN);
				setState(1018);
				seq_of_statements();
				}
				break;
			case END:
				{
				setState(1019);
				match(END);
				setState(1021);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					setState(1020);
					package_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_specContext extends ParserRuleContext {
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<Package_obj_specContext> package_obj_spec() {
			return getRuleContexts(Package_obj_specContext.class);
		}
		public Package_obj_specContext package_obj_spec(int i) {
			return getRuleContext(Package_obj_specContext.class,i);
		}
		public Package_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_spec(this);
		}
	}

	public final Package_specContext package_spec() throws RecognitionException {
		Package_specContext _localctx = new Package_specContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_package_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1025);
			package_name();
			setState(1027);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1026);
				invoker_rights_clause();
				}
			}

			setState(1029);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1033);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (PROCEDURE - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				{
				setState(1030);
				package_obj_spec();
				}
				}
				setState(1035);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1036);
			match(END);
			setState(1038);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(1037);
				package_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Preprocessor_statementContext preprocessor_statement() {
			return getRuleContext(Preprocessor_statementContext.class,0);
		}
		public Package_obj_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_obj_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_obj_spec(this);
		}
	}

	public final Package_obj_specContext package_obj_spec() throws RecognitionException {
		Package_obj_specContext _localctx = new Package_obj_specContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_package_obj_spec);
		try {
			setState(1050);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1040);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1041);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1042);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1043);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1044);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1045);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1046);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1047);
				procedure_spec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1048);
				function_spec();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1049);
				preprocessor_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_bodyContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Preprocessor_statementContext preprocessor_statement() {
			return getRuleContext(Preprocessor_statementContext.class,0);
		}
		public Package_obj_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_obj_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_obj_body(this);
		}
	}

	public final Package_obj_bodyContext package_obj_body() throws RecognitionException {
		Package_obj_bodyContext _localctx = new Package_obj_bodyContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_package_obj_body);
		try {
			setState(1062);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1052);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1053);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1054);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1055);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1056);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1057);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1058);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1059);
				create_procedure_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1060);
				create_function_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1061);
				preprocessor_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_procedure(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_drop_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1064);
			match(DROP);
			setState(1065);
			match(PROCEDURE);
			setState(1066);
			procedure_name();
			setState(1067);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_procedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public Alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_procedure(this);
		}
	}

	public final Alter_procedureContext alter_procedure() throws RecognitionException {
		Alter_procedureContext _localctx = new Alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_alter_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1069);
			match(ALTER);
			setState(1070);
			match(PROCEDURE);
			setState(1071);
			procedure_name();
			setState(1072);
			match(COMPILE);
			setState(1074);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				{
				setState(1073);
				match(DEBUG);
				}
				break;
			}
			setState(1079);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,41,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1076);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1081);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,41,_ctx);
			}
			setState(1084);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1082);
				match(REUSE);
				setState(1083);
				match(SETTINGS);
				}
			}

			setState(1086);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedure_bodyContext extends ParserRuleContext {
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_procedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_procedure_body(this);
		}
	}

	public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_create_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1093);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(1088);
				match(CREATE);
				setState(1091);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1089);
					match(OR);
					setState(1090);
					match(REPLACE);
					}
				}

				}
			}

			setState(1095);
			procedure_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProcedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProcedure_spec(this);
		}
	}

	public final Procedure_specContext procedure_spec() throws RecognitionException {
		Procedure_specContext _localctx = new Procedure_specContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1097);
			match(PROCEDURE);
			setState(1098);
			procedure_name();
			setState(1110);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1099);
				match(LEFT_PAREN);
				setState(1100);
				parameter();
				setState(1105);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1101);
					match(COMMA);
					setState(1102);
					parameter();
					}
					}
					setState(1107);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1108);
				match(RIGHT_PAREN);
				}
			}

			setState(1130);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS) {
				{
				setState(1113);
				_la = _input.LA(1);
				if (_la==AUTHID) {
					{
					setState(1112);
					invoker_rights_clause();
					}
				}

				setState(1115);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1128);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					setState(1117);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(1116);
						match(DECLARE);
						}
					}

					setState(1122);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (PROCEDURE - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						{
						setState(1119);
						declare_spec();
						}
						}
						setState(1124);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1125);
					body();
					}
					break;
				case 2:
					{
					setState(1126);
					call_spec();
					}
					break;
				case 3:
					{
					setState(1127);
					match(EXTERNAL);
					}
					break;
				}
				}
			}

			setState(1132);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_trigger(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_drop_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1134);
			match(DROP);
			setState(1135);
			match(TRIGGER);
			setState(1136);
			trigger_name();
			setState(1137);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_triggerContext extends ParserRuleContext {
		public Trigger_nameContext tn1;
		public Trigger_nameContext tn2;
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public Alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_trigger(this);
		}
	}

	public final Alter_triggerContext alter_trigger() throws RecognitionException {
		Alter_triggerContext _localctx = new Alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_alter_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1139);
			match(ALTER);
			setState(1140);
			match(TRIGGER);
			setState(1141);
			((Alter_triggerContext)_localctx).tn1 = trigger_name();
			setState(1160);
			switch (_input.LA(1)) {
			case DISABLE:
			case ENABLE:
				{
				setState(1142);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case RENAME:
				{
				setState(1143);
				match(RENAME);
				setState(1144);
				match(TO);
				setState(1145);
				((Alter_triggerContext)_localctx).tn2 = trigger_name();
				}
				break;
			case COMPILE:
				{
				setState(1146);
				match(COMPILE);
				setState(1148);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
				case 1:
					{
					setState(1147);
					match(DEBUG);
					}
					break;
				}
				setState(1153);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,53,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1150);
						compiler_parameters_clause();
						}
						} 
					}
					setState(1155);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,53,_ctx);
				}
				setState(1158);
				_la = _input.LA(1);
				if (_la==REUSE) {
					{
					setState(1156);
					match(REUSE);
					setState(1157);
					match(SETTINGS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1162);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_triggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Trigger_bodyContext trigger_body() {
			return getRuleContext(Trigger_bodyContext.class,0);
		}
		public Simple_dml_triggerContext simple_dml_trigger() {
			return getRuleContext(Simple_dml_triggerContext.class,0);
		}
		public Compound_dml_triggerContext compound_dml_trigger() {
			return getRuleContext(Compound_dml_triggerContext.class,0);
		}
		public Non_dml_triggerContext non_dml_trigger() {
			return getRuleContext(Non_dml_triggerContext.class,0);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Trigger_follows_clauseContext trigger_follows_clause() {
			return getRuleContext(Trigger_follows_clauseContext.class,0);
		}
		public Trigger_when_clauseContext trigger_when_clause() {
			return getRuleContext(Trigger_when_clauseContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public Create_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_trigger(this);
		}
	}

	public final Create_triggerContext create_trigger() throws RecognitionException {
		Create_triggerContext _localctx = new Create_triggerContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_create_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1164);
			match(CREATE);
			setState(1167);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1165);
				match(OR);
				setState(1166);
				match(REPLACE);
				}
			}

			setState(1169);
			match(TRIGGER);
			setState(1170);
			trigger_name();
			setState(1174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				setState(1171);
				simple_dml_trigger();
				}
				break;
			case 2:
				{
				setState(1172);
				compound_dml_trigger();
				}
				break;
			case 3:
				{
				setState(1173);
				non_dml_trigger();
				}
				break;
			}
			setState(1177);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				setState(1176);
				trigger_follows_clause();
				}
				break;
			}
			setState(1180);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				setState(1179);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(1183);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(1182);
				trigger_when_clause();
				}
			}

			setState(1185);
			trigger_body();
			setState(1186);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_follows_clauseContext extends ParserRuleContext {
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_follows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_follows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_follows_clause(this);
		}
	}

	public final Trigger_follows_clauseContext trigger_follows_clause() throws RecognitionException {
		Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_trigger_follows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1188);
			match(FOLLOWS);
			setState(1189);
			trigger_name();
			setState(1194);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1190);
				match(COMMA);
				setState(1191);
				trigger_name();
				}
				}
				setState(1196);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_when_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_when_clause(this);
		}
	}

	public final Trigger_when_clauseContext trigger_when_clause() throws RecognitionException {
		Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_trigger_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1197);
			match(WHEN);
			setState(1198);
			match(LEFT_PAREN);
			setState(1199);
			condition();
			setState(1200);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_dml_triggerContext extends ParserRuleContext {
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(plsqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public For_each_rowContext for_each_row() {
			return getRuleContext(For_each_rowContext.class,0);
		}
		public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_dml_trigger(this);
		}
	}

	public final Simple_dml_triggerContext simple_dml_trigger() throws RecognitionException {
		Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_simple_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1206);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(1202);
				match(BEFORE);
				}
				break;
			case AFTER:
				{
				setState(1203);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(1204);
				match(INSTEAD);
				setState(1205);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1208);
			dml_event_clause();
			setState(1210);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				{
				setState(1209);
				referencing_clause();
				}
				break;
			}
			setState(1213);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1212);
				for_each_row();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_each_rowContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(plsqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_each_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_each_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_each_row(this);
		}
	}

	public final For_each_rowContext for_each_row() throws RecognitionException {
		For_each_rowContext _localctx = new For_each_rowContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_for_each_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1215);
			match(FOR);
			setState(1216);
			match(EACH);
			setState(1217);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_dml_triggerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompound_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompound_dml_trigger(this);
		}
	}

	public final Compound_dml_triggerContext compound_dml_trigger() throws RecognitionException {
		Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_compound_dml_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1219);
			match(FOR);
			setState(1220);
			dml_event_clause();
			setState(1222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				setState(1221);
				referencing_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_triggerContext extends ParserRuleContext {
		public List<Non_dml_eventContext> non_dml_event() {
			return getRuleContexts(Non_dml_eventContext.class);
		}
		public Non_dml_eventContext non_dml_event(int i) {
			return getRuleContext(Non_dml_eventContext.class,i);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Non_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNon_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNon_dml_trigger(this);
		}
	}

	public final Non_dml_triggerContext non_dml_trigger() throws RecognitionException {
		Non_dml_triggerContext _localctx = new Non_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_non_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1224);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1225);
			non_dml_event();
			setState(1230);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1226);
				match(OR);
				setState(1227);
				non_dml_event();
				}
				}
				setState(1232);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1233);
			match(ON);
			setState(1241);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				setState(1234);
				match(DATABASE);
				}
				break;
			case 2:
				{
				setState(1238);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
				case 1:
					{
					setState(1235);
					schema_name();
					setState(1236);
					match(PERIOD);
					}
					break;
				}
				setState(1240);
				match(SCHEMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_bodyContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public Trigger_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_body(this);
		}
	}

	public final Trigger_bodyContext trigger_body() throws RecognitionException {
		Trigger_bodyContext _localctx = new Trigger_bodyContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_trigger_body);
		try {
			setState(1248);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1243);
				match(COMPOUND);
				setState(1244);
				match(TRIGGER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1245);
				match(CALL);
				setState(1246);
				id();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1247);
				trigger_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_clauseContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Routine_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRoutine_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRoutine_clause(this);
		}
	}

	public final Routine_clauseContext routine_clause() throws RecognitionException {
		Routine_clauseContext _localctx = new Routine_clauseContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_routine_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1250);
			routine_name();
			setState(1252);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1251);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_trigger_blockContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<Timing_point_sectionContext> timing_point_section() {
			return getRuleContexts(Timing_point_sectionContext.class);
		}
		public Timing_point_sectionContext timing_point_section(int i) {
			return getRuleContext(Timing_point_sectionContext.class,i);
		}
		public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompound_trigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompound_trigger_block(this);
		}
	}

	public final Compound_trigger_blockContext compound_trigger_block() throws RecognitionException {
		Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_compound_trigger_block);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1254);
			match(COMPOUND);
			setState(1255);
			match(TRIGGER);
			setState(1259);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1256);
					declare_spec();
					}
					} 
				}
				setState(1261);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,71,_ctx);
			}
			setState(1263); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1262);
				timing_point_section();
				}
				}
				setState(1265); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AFTER || _la==BEFORE );
			setState(1267);
			match(END);
			setState(1268);
			trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timing_point_sectionContext extends ParserRuleContext {
		public Token bk;
		public Token ak;
		public List<TerminalNode> STATEMENT() { return getTokens(plsqlParser.STATEMENT); }
		public TerminalNode STATEMENT(int i) {
			return getToken(plsqlParser.STATEMENT, i);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public List<TerminalNode> BEFORE() { return getTokens(plsqlParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(plsqlParser.BEFORE, i);
		}
		public List<TerminalNode> EACH() { return getTokens(plsqlParser.EACH); }
		public TerminalNode EACH(int i) {
			return getToken(plsqlParser.EACH, i);
		}
		public List<TerminalNode> ROW() { return getTokens(plsqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(plsqlParser.ROW, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(plsqlParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(plsqlParser.AFTER, i);
		}
		public Timing_point_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timing_point_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTiming_point_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTiming_point_section(this);
		}
	}

	public final Timing_point_sectionContext timing_point_section() throws RecognitionException {
		Timing_point_sectionContext _localctx = new Timing_point_sectionContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_timing_point_section);
		try {
			setState(1306);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1270);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1271);
				match(STATEMENT);
				setState(1272);
				match(IS);
				setState(1273);
				trigger_block();
				setState(1274);
				match(BEFORE);
				setState(1275);
				match(STATEMENT);
				setState(1276);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1278);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1279);
				match(EACH);
				setState(1280);
				match(ROW);
				setState(1281);
				match(IS);
				setState(1282);
				trigger_block();
				setState(1283);
				match(BEFORE);
				setState(1284);
				match(EACH);
				setState(1285);
				match(ROW);
				setState(1286);
				match(SEMICOLON);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1288);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1289);
				match(STATEMENT);
				setState(1290);
				match(IS);
				setState(1291);
				trigger_block();
				setState(1292);
				match(AFTER);
				setState(1293);
				match(STATEMENT);
				setState(1294);
				match(SEMICOLON);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1296);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1297);
				match(EACH);
				setState(1298);
				match(ROW);
				setState(1299);
				match(IS);
				setState(1300);
				trigger_block();
				setState(1301);
				match(AFTER);
				setState(1302);
				match(EACH);
				setState(1303);
				match(ROW);
				setState(1304);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_eventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode ANALYZE() { return getToken(plsqlParser.ANALYZE, 0); }
		public TerminalNode ASSOCIATE() { return getToken(plsqlParser.ASSOCIATE, 0); }
		public TerminalNode STATISTICS() { return getToken(plsqlParser.STATISTICS, 0); }
		public TerminalNode AUDIT() { return getToken(plsqlParser.AUDIT, 0); }
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(plsqlParser.DISASSOCIATE, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode GRANT() { return getToken(plsqlParser.GRANT, 0); }
		public TerminalNode NOAUDIT() { return getToken(plsqlParser.NOAUDIT, 0); }
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode REVOKE() { return getToken(plsqlParser.REVOKE, 0); }
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public TerminalNode DDL() { return getToken(plsqlParser.DDL, 0); }
		public TerminalNode STARTUP() { return getToken(plsqlParser.STARTUP, 0); }
		public TerminalNode SHUTDOWN() { return getToken(plsqlParser.SHUTDOWN, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(plsqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode LOGON() { return getToken(plsqlParser.LOGON, 0); }
		public TerminalNode LOGOFF() { return getToken(plsqlParser.LOGOFF, 0); }
		public TerminalNode SERVERERROR() { return getToken(plsqlParser.SERVERERROR, 0); }
		public TerminalNode SUSPEND() { return getToken(plsqlParser.SUSPEND, 0); }
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public Non_dml_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNon_dml_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNon_dml_event(this);
		}
	}

	public final Non_dml_eventContext non_dml_event() throws RecognitionException {
		Non_dml_eventContext _localctx = new Non_dml_eventContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_non_dml_event);
		try {
			setState(1334);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1308);
				match(ALTER);
				}
				break;
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1309);
				match(ANALYZE);
				}
				break;
			case ASSOCIATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1310);
				match(ASSOCIATE);
				setState(1311);
				match(STATISTICS);
				}
				break;
			case AUDIT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1312);
				match(AUDIT);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1313);
				match(COMMENT);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1314);
				match(CREATE);
				}
				break;
			case DISASSOCIATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1315);
				match(DISASSOCIATE);
				setState(1316);
				match(STATISTICS);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 8);
				{
				setState(1317);
				match(DROP);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(1318);
				match(GRANT);
				}
				break;
			case NOAUDIT:
				enterOuterAlt(_localctx, 10);
				{
				setState(1319);
				match(NOAUDIT);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 11);
				{
				setState(1320);
				match(RENAME);
				}
				break;
			case REVOKE:
				enterOuterAlt(_localctx, 12);
				{
				setState(1321);
				match(REVOKE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 13);
				{
				setState(1322);
				match(TRUNCATE);
				}
				break;
			case DDL:
				enterOuterAlt(_localctx, 14);
				{
				setState(1323);
				match(DDL);
				}
				break;
			case STARTUP:
				enterOuterAlt(_localctx, 15);
				{
				setState(1324);
				match(STARTUP);
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 16);
				{
				setState(1325);
				match(SHUTDOWN);
				}
				break;
			case DB_ROLE_CHANGE:
				enterOuterAlt(_localctx, 17);
				{
				setState(1326);
				match(DB_ROLE_CHANGE);
				}
				break;
			case LOGON:
				enterOuterAlt(_localctx, 18);
				{
				setState(1327);
				match(LOGON);
				}
				break;
			case LOGOFF:
				enterOuterAlt(_localctx, 19);
				{
				setState(1328);
				match(LOGOFF);
				}
				break;
			case SERVERERROR:
				enterOuterAlt(_localctx, 20);
				{
				setState(1329);
				match(SERVERERROR);
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 21);
				{
				setState(1330);
				match(SUSPEND);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 22);
				{
				setState(1331);
				match(DATABASE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 23);
				{
				setState(1332);
				match(SCHEMA);
				}
				break;
			case FOLLOWS:
				enterOuterAlt(_localctx, 24);
				{
				setState(1333);
				match(FOLLOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_clauseContext extends ParserRuleContext {
		public List<Dml_event_elementContext> dml_event_element() {
			return getRuleContexts(Dml_event_elementContext.class);
		}
		public Dml_event_elementContext dml_event_element(int i) {
			return getRuleContext(Dml_event_elementContext.class,i);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public Dml_event_nested_clauseContext dml_event_nested_clause() {
			return getRuleContext(Dml_event_nested_clauseContext.class,0);
		}
		public Dml_event_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_clause(this);
		}
	}

	public final Dml_event_clauseContext dml_event_clause() throws RecognitionException {
		Dml_event_clauseContext _localctx = new Dml_event_clauseContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_dml_event_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1336);
			dml_event_element();
			setState(1341);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1337);
				match(OR);
				setState(1338);
				dml_event_element();
				}
				}
				setState(1343);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1344);
			match(ON);
			setState(1346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				setState(1345);
				dml_event_nested_clause();
				}
				break;
			}
			setState(1348);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_elementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Dml_event_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_element(this);
		}
	}

	public final Dml_event_elementContext dml_event_element() throws RecognitionException {
		Dml_event_elementContext _localctx = new Dml_event_elementContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_dml_event_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1350);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1360);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(1351);
				match(OF);
				setState(1352);
				column_name();
				setState(1357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1353);
					match(COMMA);
					setState(1354);
					column_name();
					}
					}
					setState(1359);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_nested_clauseContext extends ParserRuleContext {
		public TerminalNode NESTED() { return getToken(plsqlParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_nested_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_event_nested_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_event_nested_clause(this);
		}
	}

	public final Dml_event_nested_clauseContext dml_event_nested_clause() throws RecognitionException {
		Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_dml_event_nested_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1362);
			match(NESTED);
			setState(1363);
			match(TABLE);
			setState(1364);
			tableview_name();
			setState(1365);
			match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(plsqlParser.REFERENCING, 0); }
		public List<Referencing_elementContext> referencing_element() {
			return getRuleContexts(Referencing_elementContext.class);
		}
		public Referencing_elementContext referencing_element(int i) {
			return getRuleContext(Referencing_elementContext.class,i);
		}
		public Referencing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReferencing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReferencing_clause(this);
		}
	}

	public final Referencing_clauseContext referencing_clause() throws RecognitionException {
		Referencing_clauseContext _localctx = new Referencing_clauseContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_referencing_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1367);
			match(REFERENCING);
			setState(1369); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1368);
					referencing_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1371); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,79,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_elementContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(plsqlParser.OLD, 0); }
		public TerminalNode PARENT() { return getToken(plsqlParser.PARENT, 0); }
		public Referencing_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReferencing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReferencing_element(this);
		}
	}

	public final Referencing_elementContext referencing_element() throws RecognitionException {
		Referencing_elementContext _localctx = new Referencing_elementContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_referencing_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1373);
			_la = _input.LA(1);
			if ( !(((((_la - 243)) & ~0x3f) == 0 && ((1L << (_la - 243)) & ((1L << (NEW - 243)) | (1L << (OLD - 243)) | (1L << (PARENT - 243)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1374);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode VALIDATE() { return getToken(plsqlParser.VALIDATE, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_type(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1376);
			match(DROP);
			setState(1377);
			match(TYPE);
			setState(1379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				setState(1378);
				match(BODY);
				}
				break;
			}
			setState(1381);
			type_name();
			setState(1383);
			_la = _input.LA(1);
			if (_la==FORCE || _la==VALIDATE) {
				{
				setState(1382);
				_la = _input.LA(1);
				if ( !(_la==FORCE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(1385);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_typeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Compile_type_clauseContext compile_type_clause() {
			return getRuleContext(Compile_type_clauseContext.class,0);
		}
		public Replace_type_clauseContext replace_type_clause() {
			return getRuleContext(Replace_type_clauseContext.class,0);
		}
		public Alter_method_specContext alter_method_spec() {
			return getRuleContext(Alter_method_specContext.class,0);
		}
		public Alter_collection_clausesContext alter_collection_clauses() {
			return getRuleContext(Alter_collection_clausesContext.class,0);
		}
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public Dependent_handling_clauseContext dependent_handling_clause() {
			return getRuleContext(Dependent_handling_clauseContext.class,0);
		}
		public Alter_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_type(this);
		}
	}

	public final Alter_typeContext alter_type() throws RecognitionException {
		Alter_typeContext _localctx = new Alter_typeContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_alter_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1387);
			match(ALTER);
			setState(1388);
			match(TYPE);
			setState(1389);
			type_name();
			setState(1395);
			switch (_input.LA(1)) {
			case COMPILE:
				{
				setState(1390);
				compile_type_clause();
				}
				break;
			case REPLACE:
				{
				setState(1391);
				replace_type_clause();
				}
				break;
			case ADD:
			case DROP:
				{
				setState(1392);
				alter_method_spec();
				}
				break;
			case MODIFY:
				{
				setState(1393);
				alter_collection_clauses();
				}
				break;
			case FINAL:
			case INSTANTIABLE:
			case NOT:
			case OVERRIDING:
				{
				setState(1394);
				modifier_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1398);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==INVALIDATE) {
				{
				setState(1397);
				dependent_handling_clause();
				}
			}

			setState(1400);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compile_type_clauseContext extends ParserRuleContext {
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public Compile_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compile_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompile_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompile_type_clause(this);
		}
	}

	public final Compile_type_clauseContext compile_type_clause() throws RecognitionException {
		Compile_type_clauseContext _localctx = new Compile_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_compile_type_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1402);
			match(COMPILE);
			setState(1404);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				setState(1403);
				match(DEBUG);
				}
				break;
			}
			setState(1407);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				setState(1406);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(1412);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,86,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1409);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1414);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,86,_ctx);
			}
			setState(1417);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1415);
				match(REUSE);
				setState(1416);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_type_clauseContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Replace_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReplace_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReplace_type_clause(this);
		}
	}

	public final Replace_type_clauseContext replace_type_clause() throws RecognitionException {
		Replace_type_clauseContext _localctx = new Replace_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_replace_type_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1419);
			match(REPLACE);
			setState(1421);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1420);
				invoker_rights_clause();
				}
			}

			setState(1423);
			match(AS);
			setState(1424);
			match(OBJECT);
			setState(1425);
			match(LEFT_PAREN);
			setState(1426);
			object_member_spec();
			setState(1431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1427);
				match(COMMA);
				setState(1428);
				object_member_spec();
				}
				}
				setState(1433);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1434);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_specContext extends ParserRuleContext {
		public List<Alter_method_elementContext> alter_method_element() {
			return getRuleContexts(Alter_method_elementContext.class);
		}
		public Alter_method_elementContext alter_method_element(int i) {
			return getRuleContext(Alter_method_elementContext.class,i);
		}
		public Alter_method_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_method_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_method_spec(this);
		}
	}

	public final Alter_method_specContext alter_method_spec() throws RecognitionException {
		Alter_method_specContext _localctx = new Alter_method_specContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_alter_method_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1436);
			alter_method_element();
			setState(1441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1437);
				match(COMMA);
				setState(1438);
				alter_method_element();
				}
				}
				setState(1443);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_elementContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Alter_method_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_method_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_method_element(this);
		}
	}

	public final Alter_method_elementContext alter_method_element() throws RecognitionException {
		Alter_method_elementContext _localctx = new Alter_method_elementContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_alter_method_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1444);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1447);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				{
				setState(1445);
				map_order_function_spec();
				}
				break;
			case MEMBER:
			case STATIC:
				{
				setState(1446);
				subprogram_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_attribute_definitionContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTE() { return getToken(plsqlParser.ATTRIBUTE, 0); }
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public List<Attribute_definitionContext> attribute_definition() {
			return getRuleContexts(Attribute_definitionContext.class);
		}
		public Attribute_definitionContext attribute_definition(int i) {
			return getRuleContext(Attribute_definitionContext.class,i);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_attribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_attribute_definition(this);
		}
	}

	public final Alter_attribute_definitionContext alter_attribute_definition() throws RecognitionException {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_alter_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1449);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1450);
			match(ATTRIBUTE);
			setState(1463);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(1451);
				attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				setState(1452);
				match(LEFT_PAREN);
				setState(1453);
				attribute_definition();
				setState(1458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1454);
					match(COMMA);
					setState(1455);
					attribute_definition();
					}
					}
					setState(1460);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1461);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_definitionContext extends ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAttribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAttribute_definition(this);
		}
	}

	public final Attribute_definitionContext attribute_definition() throws RecognitionException {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1465);
			attribute_name();
			setState(1467);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(1466);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_collection_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ELEMENT() { return getToken(plsqlParser.ELEMENT, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collection_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_collection_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_collection_clauses(this);
		}
	}

	public final Alter_collection_clausesContext alter_collection_clauses() throws RecognitionException {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_alter_collection_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1469);
			match(MODIFY);
			setState(1475);
			switch (_input.LA(1)) {
			case LIMIT:
				{
				setState(1470);
				match(LIMIT);
				setState(1471);
				expression();
				}
				break;
			case ELEMENT:
				{
				setState(1472);
				match(ELEMENT);
				setState(1473);
				match(TYPE);
				setState(1474);
				type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_handling_clauseContext extends ParserRuleContext {
		public TerminalNode INVALIDATE() { return getToken(plsqlParser.INVALIDATE, 0); }
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode CONVERT() { return getToken(plsqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(plsqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode INCLUDING() { return getToken(plsqlParser.INCLUDING, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode DATA() { return getToken(plsqlParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return getRuleContext(Dependent_exceptions_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_handling_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDependent_handling_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDependent_handling_clause(this);
		}
	}

	public final Dependent_handling_clauseContext dependent_handling_clause() throws RecognitionException {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_dependent_handling_clause);
		int _la;
		try {
			setState(1493);
			switch (_input.LA(1)) {
			case INVALIDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1477);
				match(INVALIDATE);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1478);
				match(CASCADE);
				setState(1488);
				switch (_input.LA(1)) {
				case CONVERT:
					{
					setState(1479);
					match(CONVERT);
					setState(1480);
					match(TO);
					setState(1481);
					match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					setState(1483);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(1482);
						match(NOT);
						}
					}

					setState(1485);
					match(INCLUDING);
					setState(1486);
					match(TABLE);
					setState(1487);
					match(DATA);
					}
					break;
				case EXCEPTIONS:
				case FORCE:
				case SEMICOLON:
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1491);
				_la = _input.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					setState(1490);
					dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_exceptions_partContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_exceptions_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDependent_exceptions_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDependent_exceptions_part(this);
		}
	}

	public final Dependent_exceptions_partContext dependent_exceptions_part() throws RecognitionException {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_dependent_exceptions_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1496);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(1495);
				match(FORCE);
				}
			}

			setState(1498);
			match(EXCEPTIONS);
			setState(1499);
			match(INTO);
			setState(1500);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_definitionContext type_definition() {
			return getRuleContext(Type_definitionContext.class,0);
		}
		public Type_bodyContext type_body() {
			return getRuleContext(Type_bodyContext.class,0);
		}
		public TerminalNode OR() { return getToken(plsqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_type(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1502);
			match(CREATE);
			setState(1505);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1503);
				match(OR);
				setState(1504);
				match(REPLACE);
				}
			}

			setState(1507);
			match(TYPE);
			setState(1510);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				setState(1508);
				type_definition();
				}
				break;
			case 2:
				{
				setState(1509);
				type_body();
				}
				break;
			}
			setState(1512);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_definitionContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode OID() { return getToken(plsqlParser.OID, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public Object_type_defContext object_type_def() {
			return getRuleContext(Object_type_defContext.class,0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_definition(this);
		}
	}

	public final Type_definitionContext type_definition() throws RecognitionException {
		Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1514);
			type_name();
			setState(1517);
			_la = _input.LA(1);
			if (_la==OID) {
				{
				setState(1515);
				match(OID);
				setState(1516);
				match(CHAR_STRING);
				}
			}

			setState(1520);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				setState(1519);
				object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_defContext extends ParserRuleContext {
		public Object_as_partContext object_as_part() {
			return getRuleContext(Object_as_partContext.class,0);
		}
		public Object_under_partContext object_under_part() {
			return getRuleContext(Object_under_partContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return getRuleContext(Sqlj_object_typeContext.class,0);
		}
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public List<Modifier_clauseContext> modifier_clause() {
			return getRuleContexts(Modifier_clauseContext.class);
		}
		public Modifier_clauseContext modifier_clause(int i) {
			return getRuleContext(Modifier_clauseContext.class,i);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_type_def(this);
		}
	}

	public final Object_type_defContext object_type_def() throws RecognitionException {
		Object_type_defContext _localctx = new Object_type_defContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_object_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1523);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1522);
				invoker_rights_clause();
				}
			}

			setState(1527);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1525);
				object_as_part();
				}
				break;
			case UNDER:
				{
				setState(1526);
				object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1530);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(1529);
				sqlj_object_type();
				}
			}

			setState(1543);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1532);
				match(LEFT_PAREN);
				setState(1533);
				object_member_spec();
				setState(1538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1534);
					match(COMMA);
					setState(1535);
					object_member_spec();
					}
					}
					setState(1540);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1541);
				match(RIGHT_PAREN);
				}
			}

			setState(1548);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				setState(1545);
				modifier_clause();
				}
				}
				setState(1550);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_as_partContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Nested_table_type_defContext nested_table_type_def() {
			return getRuleContext(Nested_table_type_defContext.class,0);
		}
		public Object_as_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_as_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_as_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_as_part(this);
		}
	}

	public final Object_as_partContext object_as_part() throws RecognitionException {
		Object_as_partContext _localctx = new Object_as_partContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_object_as_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1551);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1555);
			switch (_input.LA(1)) {
			case OBJECT:
				{
				setState(1552);
				match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(1553);
				varray_type_def();
				}
				break;
			case TABLE:
				{
				setState(1554);
				nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_under_partContext extends ParserRuleContext {
		public TerminalNode UNDER() { return getToken(plsqlParser.UNDER, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Object_under_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_under_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_under_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_under_part(this);
		}
	}

	public final Object_under_partContext object_under_part() throws RecognitionException {
		Object_under_partContext _localctx = new Object_under_partContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_object_under_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1557);
			match(UNDER);
			setState(1558);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNested_table_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNested_table_type_def(this);
		}
	}

	public final Nested_table_type_defContext nested_table_type_def() throws RecognitionException {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_nested_table_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1560);
			match(TABLE);
			setState(1561);
			match(OF);
			setState(1562);
			type_spec();
			setState(1565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				{
				setState(1563);
				match(NOT);
				setState(1564);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_typeContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode SQLDATA() { return getToken(plsqlParser.SQLDATA, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(plsqlParser.CUSTOMDATUM, 0); }
		public TerminalNode ORADATA() { return getToken(plsqlParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSqlj_object_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSqlj_object_type(this);
		}
	}

	public final Sqlj_object_typeContext sqlj_object_type() throws RecognitionException {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_sqlj_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1567);
			match(EXTERNAL);
			setState(1568);
			match(NAME);
			setState(1569);
			expression();
			setState(1570);
			match(LANGUAGE);
			setState(1571);
			match(JAVA);
			setState(1572);
			match(USING);
			setState(1573);
			_la = _input.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public List<Type_body_elementsContext> type_body_elements() {
			return getRuleContexts(Type_body_elementsContext.class);
		}
		public Type_body_elementsContext type_body_elements(int i) {
			return getRuleContext(Type_body_elementsContext.class,i);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_body(this);
		}
	}

	public final Type_bodyContext type_body() throws RecognitionException {
		Type_bodyContext _localctx = new Type_bodyContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1575);
			match(BODY);
			setState(1576);
			type_name();
			setState(1577);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1578);
			type_body_elements();
			setState(1583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1579);
				match(COMMA);
				setState(1580);
				type_body_elements();
				}
				}
				setState(1585);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1586);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_body_elementsContext extends ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return getRuleContext(Map_order_func_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return getRuleContext(Subprog_decl_in_typeContext.class,0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_body_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_body_elements(this);
		}
	}

	public final Type_body_elementsContext type_body_elements() throws RecognitionException {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_type_body_elements);
		try {
			setState(1590);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1588);
				map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(1589);
				subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_func_declarationContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_func_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMap_order_func_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMap_order_func_declaration(this);
		}
	}

	public final Map_order_func_declarationContext map_order_func_declaration() throws RecognitionException {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_map_order_func_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1592);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1593);
			match(MEMBER);
			setState(1594);
			func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprog_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return getRuleContext(Proc_decl_in_typeContext.class,0);
		}
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return getRuleContext(Constructor_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprog_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubprog_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubprog_decl_in_type(this);
		}
	}

	public final Subprog_decl_in_typeContext subprog_decl_in_type() throws RecognitionException {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_subprog_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1596);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1600);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1597);
				proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				setState(1598);
				func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				setState(1599);
				constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProc_decl_in_type(this);
		}
	}

	public final Proc_decl_in_typeContext proc_decl_in_type() throws RecognitionException {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_proc_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1602);
			match(PROCEDURE);
			setState(1603);
			procedure_name();
			setState(1604);
			match(LEFT_PAREN);
			setState(1605);
			type_elements_parameter();
			setState(1610);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1606);
				match(COMMA);
				setState(1607);
				type_elements_parameter();
				}
				}
				setState(1612);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1613);
			match(RIGHT_PAREN);
			setState(1614);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1628);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				{
				setState(1615);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1617);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1616);
					match(DECLARE);
					}
				}

				setState(1622);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (PROCEDURE - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					{
					setState(1619);
					declare_spec();
					}
					}
					setState(1624);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1625);
				body();
				setState(1626);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunc_decl_in_type(this);
		}
	}

	public final Func_decl_in_typeContext func_decl_in_type() throws RecognitionException {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_func_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1630);
			match(FUNCTION);
			setState(1631);
			function_name();
			setState(1643);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1632);
				match(LEFT_PAREN);
				setState(1633);
				type_elements_parameter();
				setState(1638);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1634);
					match(COMMA);
					setState(1635);
					type_elements_parameter();
					}
					}
					setState(1640);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1641);
				match(RIGHT_PAREN);
				}
			}

			setState(1645);
			match(RETURN);
			setState(1646);
			type_spec();
			setState(1647);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1661);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				setState(1648);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1650);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1649);
					match(DECLARE);
					}
				}

				setState(1655);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (PROCEDURE - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					{
					setState(1652);
					declare_spec();
					}
					}
					setState(1657);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1658);
				body();
				setState(1659);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_declarationContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(plsqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(plsqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstructor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstructor_declaration(this);
		}
	}

	public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_constructor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1664);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1663);
				match(FINAL);
				}
			}

			setState(1667);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1666);
				match(INSTANTIABLE);
				}
			}

			setState(1669);
			match(CONSTRUCTOR);
			setState(1670);
			match(FUNCTION);
			setState(1671);
			type_spec();
			setState(1689);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1672);
				match(LEFT_PAREN);
				{
				setState(1673);
				match(SELF);
				setState(1674);
				match(IN);
				setState(1675);
				match(OUT);
				setState(1676);
				type_spec();
				setState(1677);
				match(COMMA);
				}
				setState(1679);
				type_elements_parameter();
				setState(1684);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1680);
					match(COMMA);
					setState(1681);
					type_elements_parameter();
					}
					}
					setState(1686);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1687);
				match(RIGHT_PAREN);
				}
			}

			setState(1691);
			match(RETURN);
			setState(1692);
			match(SELF);
			setState(1693);
			match(AS);
			setState(1694);
			match(RESULT);
			setState(1695);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1709);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				setState(1696);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1698);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1697);
					match(DECLARE);
					}
				}

				setState(1703);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (PROCEDURE - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					{
					setState(1700);
					declare_spec();
					}
					}
					setState(1705);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1706);
				body();
				setState(1707);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modifier_clauseContext extends ParserRuleContext {
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode OVERRIDING() { return getToken(plsqlParser.OVERRIDING, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifier_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModifier_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModifier_clause(this);
		}
	}

	public final Modifier_clauseContext modifier_clause() throws RecognitionException {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_modifier_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1712);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1711);
				match(NOT);
				}
			}

			setState(1714);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_member_specContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return getRuleContext(Sqlj_object_type_attrContext.class,0);
		}
		public Element_specContext element_spec() {
			return getRuleContext(Element_specContext.class,0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_member_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterObject_member_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitObject_member_spec(this);
		}
	}

	public final Object_member_specContext object_member_spec() throws RecognitionException {
		Object_member_specContext _localctx = new Object_member_specContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_object_member_spec);
		int _la;
		try {
			setState(1722);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1716);
				id();
				setState(1717);
				type_spec();
				setState(1719);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(1718);
					sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1721);
				element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_type_attrContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type_attr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSqlj_object_type_attr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSqlj_object_type_attr(this);
		}
	}

	public final Sqlj_object_type_attrContext sqlj_object_type_attr() throws RecognitionException {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_sqlj_object_type_attr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1724);
			match(EXTERNAL);
			setState(1725);
			match(NAME);
			setState(1726);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_specContext extends ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public List<Element_spec_optionsContext> element_spec_options() {
			return getRuleContexts(Element_spec_optionsContext.class);
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return getRuleContext(Element_spec_optionsContext.class,i);
		}
		public Pragma_clauseContext pragma_clause() {
			return getRuleContext(Pragma_clauseContext.class,0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElement_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElement_spec(this);
		}
	}

	public final Element_specContext element_spec() throws RecognitionException {
		Element_specContext _localctx = new Element_specContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_element_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				setState(1728);
				modifier_clause();
				}
				break;
			}
			setState(1732); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1731);
				element_spec_options();
				}
				}
				setState(1734); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || ((((_la - 219)) & ~0x3f) == 0 && ((1L << (_la - 219)) & ((1L << (MAP - 219)) | (1L << (MEMBER - 219)) | (1L << (ORDER - 219)))) != 0) || _la==STATIC );
			setState(1738);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				setState(1736);
				match(COMMA);
				setState(1737);
				pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_spec_optionsContext extends ParserRuleContext {
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Constructor_specContext constructor_spec() {
			return getRuleContext(Constructor_specContext.class,0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElement_spec_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElement_spec_options(this);
		}
	}

	public final Element_spec_optionsContext element_spec_options() throws RecognitionException {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_element_spec_options);
		try {
			setState(1743);
			switch (_input.LA(1)) {
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(1740);
				subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1741);
				constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1742);
				map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprogram_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return getRuleContext(Type_procedure_specContext.class,0);
		}
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public Subprogram_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprogram_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubprogram_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubprogram_spec(this);
		}
	}

	public final Subprogram_specContext subprogram_spec() throws RecognitionException {
		Subprogram_specContext _localctx = new Subprogram_specContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_subprogram_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1745);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1748);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1746);
				type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				setState(1747);
				type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(plsqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_procedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_procedure_spec(this);
		}
	}

	public final Type_procedure_specContext type_procedure_spec() throws RecognitionException {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_type_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1750);
			match(PROCEDURE);
			setState(1751);
			procedure_name();
			setState(1752);
			match(LEFT_PAREN);
			setState(1753);
			type_elements_parameter();
			setState(1758);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1754);
				match(COMMA);
				setState(1755);
				type_elements_parameter();
				}
				}
				setState(1760);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1761);
			match(RIGHT_PAREN);
			setState(1764);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(1762);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1763);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SELF() { return getToken(plsqlParser.SELF, 0); }
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode VARIABLE() { return getToken(plsqlParser.VARIABLE, 0); }
		public Type_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_function_spec(this);
		}
	}

	public final Type_function_specContext type_function_spec() throws RecognitionException {
		Type_function_specContext _localctx = new Type_function_specContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_type_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1766);
			match(FUNCTION);
			setState(1767);
			function_name();
			setState(1779);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1768);
				match(LEFT_PAREN);
				setState(1769);
				type_elements_parameter();
				setState(1774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1770);
					match(COMMA);
					setState(1771);
					type_elements_parameter();
					}
					}
					setState(1776);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1777);
				match(RIGHT_PAREN);
				}
			}

			setState(1781);
			match(RETURN);
			setState(1786);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				setState(1782);
				type_spec();
				}
				break;
			case 2:
				{
				setState(1783);
				match(SELF);
				setState(1784);
				match(AS);
				setState(1785);
				match(RESULT);
				}
				break;
			}
			setState(1796);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1788);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1789);
				call_spec();
				}
				break;
			case EXTERNAL:
				{
				setState(1790);
				match(EXTERNAL);
				setState(1792);
				_la = _input.LA(1);
				if (_la==VARIABLE) {
					{
					setState(1791);
					match(VARIABLE);
					}
				}

				setState(1794);
				match(NAME);
				setState(1795);
				expression();
				}
				break;
			case CASCADE:
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
			case INVALIDATE:
			case MAP:
			case MEMBER:
			case ORDER:
			case STATIC:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_specContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(plsqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(plsqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(plsqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(plsqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public Constructor_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstructor_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstructor_spec(this);
		}
	}

	public final Constructor_specContext constructor_spec() throws RecognitionException {
		Constructor_specContext _localctx = new Constructor_specContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_constructor_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1799);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1798);
				match(FINAL);
				}
			}

			setState(1802);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1801);
				match(INSTANTIABLE);
				}
			}

			setState(1804);
			match(CONSTRUCTOR);
			setState(1805);
			match(FUNCTION);
			setState(1806);
			type_spec();
			setState(1824);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1807);
				match(LEFT_PAREN);
				{
				setState(1808);
				match(SELF);
				setState(1809);
				match(IN);
				setState(1810);
				match(OUT);
				setState(1811);
				type_spec();
				setState(1812);
				match(COMMA);
				}
				setState(1814);
				type_elements_parameter();
				setState(1819);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1815);
					match(COMMA);
					setState(1816);
					type_elements_parameter();
					}
					}
					setState(1821);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1822);
				match(RIGHT_PAREN);
				}
			}

			setState(1826);
			match(RETURN);
			setState(1827);
			match(SELF);
			setState(1828);
			match(AS);
			setState(1829);
			match(RESULT);
			setState(1832);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(1830);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(1831);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_function_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMap_order_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMap_order_function_spec(this);
		}
	}

	public final Map_order_function_specContext map_order_function_spec() throws RecognitionException {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_map_order_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1834);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1835);
			match(MEMBER);
			setState(1836);
			type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_clauseContext extends ParserRuleContext {
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public List<Pragma_elementsContext> pragma_elements() {
			return getRuleContexts(Pragma_elementsContext.class);
		}
		public Pragma_elementsContext pragma_elements(int i) {
			return getRuleContext(Pragma_elementsContext.class,i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_clause(this);
		}
	}

	public final Pragma_clauseContext pragma_clause() throws RecognitionException {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_pragma_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1838);
			match(PRAGMA);
			setState(1839);
			match(RESTRICT_REFERENCES);
			setState(1840);
			match(LEFT_PAREN);
			setState(1841);
			pragma_elements();
			setState(1846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1842);
				match(COMMA);
				setState(1843);
				pragma_elements();
				}
				}
				setState(1848);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1849);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_elementsContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_elements(this);
		}
	}

	public final Pragma_elementsContext pragma_elements() throws RecognitionException {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_pragma_elements);
		try {
			setState(1853);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1851);
				id();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1852);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_elements_parameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_elements_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_elements_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_elements_parameter(this);
		}
	}

	public final Type_elements_parameterContext type_elements_parameter() throws RecognitionException {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_type_elements_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1855);
			parameter_name();
			setState(1856);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(plsqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDrop_sequence(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_drop_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1858);
			match(DROP);
			setState(1859);
			match(SEQUENCE);
			setState(1860);
			sequence_name();
			setState(1861);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlter_sequence(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1863);
			match(ALTER);
			setState(1864);
			match(SEQUENCE);
			setState(1865);
			sequence_name();
			setState(1867); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1866);
				sequence_spec();
				}
				}
				setState(1869); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CACHE || _la==CYCLE || ((((_la - 173)) & ~0x3f) == 0 && ((1L << (_la - 173)) & ((1L << (INCREMENT - 173)) | (1L << (MAXVALUE - 173)) | (1L << (MINVALUE - 173)))) != 0) || ((((_la - 247)) & ~0x3f) == 0 && ((1L << (_la - 247)) & ((1L << (NOCACHE - 247)) | (1L << (NOCYCLE - 247)) | (1L << (NOMAXVALUE - 247)) | (1L << (NOMINVALUE - 247)) | (1L << (NOORDER - 247)) | (1L << (ORDER - 247)))) != 0) );
			setState(1871);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(plsqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_start_clauseContext> sequence_start_clause() {
			return getRuleContexts(Sequence_start_clauseContext.class);
		}
		public Sequence_start_clauseContext sequence_start_clause(int i) {
			return getRuleContext(Sequence_start_clauseContext.class,i);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCreate_sequence(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1873);
			match(CREATE);
			setState(1874);
			match(SEQUENCE);
			setState(1875);
			sequence_name();
			setState(1880);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CACHE || _la==CYCLE || ((((_la - 173)) & ~0x3f) == 0 && ((1L << (_la - 173)) & ((1L << (INCREMENT - 173)) | (1L << (MAXVALUE - 173)) | (1L << (MINVALUE - 173)))) != 0) || ((((_la - 247)) & ~0x3f) == 0 && ((1L << (_la - 247)) & ((1L << (NOCACHE - 247)) | (1L << (NOCYCLE - 247)) | (1L << (NOMAXVALUE - 247)) | (1L << (NOMINVALUE - 247)) | (1L << (NOORDER - 247)) | (1L << (ORDER - 247)))) != 0) || _la==START) {
				{
				setState(1878);
				switch (_input.LA(1)) {
				case START:
					{
					setState(1876);
					sequence_start_clause();
					}
					break;
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NOCACHE:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOORDER:
				case ORDER:
					{
					setState(1877);
					sequence_spec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1882);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1883);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_specContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(plsqlParser.NOMAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(plsqlParser.NOMINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public TerminalNode CACHE() { return getToken(plsqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(plsqlParser.NOCACHE, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(plsqlParser.NOORDER, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_spec(this);
		}
	}

	public final Sequence_specContext sequence_spec() throws RecognitionException {
		Sequence_specContext _localctx = new Sequence_specContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_sequence_spec);
		try {
			setState(1901);
			switch (_input.LA(1)) {
			case INCREMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1885);
				match(INCREMENT);
				setState(1886);
				match(BY);
				setState(1887);
				match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1888);
				match(MAXVALUE);
				setState(1889);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1890);
				match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1891);
				match(MINVALUE);
				setState(1892);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMINVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1893);
				match(NOMINVALUE);
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1894);
				match(CYCLE);
				}
				break;
			case NOCYCLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1895);
				match(NOCYCLE);
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 8);
				{
				setState(1896);
				match(CACHE);
				setState(1897);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOCACHE:
				enterOuterAlt(_localctx, 9);
				{
				setState(1898);
				match(NOCACHE);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 10);
				{
				setState(1899);
				match(ORDER);
				}
				break;
			case NOORDER:
				enterOuterAlt(_localctx, 11);
				{
				setState(1900);
				match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_start_clauseContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(plsqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_start_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_start_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_start_clause(this);
		}
	}

	public final Sequence_start_clauseContext sequence_start_clause() throws RecognitionException {
		Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_sequence_start_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1903);
			match(START);
			setState(1904);
			match(WITH);
			setState(1905);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Invoker_rights_clauseContext extends ParserRuleContext {
		public TerminalNode AUTHID() { return getToken(plsqlParser.AUTHID, 0); }
		public TerminalNode CURRENT_USER() { return getToken(plsqlParser.CURRENT_USER, 0); }
		public TerminalNode DEFINER() { return getToken(plsqlParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invoker_rights_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInvoker_rights_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInvoker_rights_clause(this);
		}
	}

	public final Invoker_rights_clauseContext invoker_rights_clause() throws RecognitionException {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_invoker_rights_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1907);
			match(AUTHID);
			setState(1908);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compiler_parameters_clauseContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compiler_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompiler_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompiler_parameters_clause(this);
		}
	}

	public final Compiler_parameters_clauseContext compiler_parameters_clause() throws RecognitionException {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_compiler_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1910);
			id();
			setState(1911);
			match(EQUALS_OP);
			setState(1912);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_specContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public Java_specContext java_spec() {
			return getRuleContext(Java_specContext.class,0);
		}
		public C_specContext c_spec() {
			return getRuleContext(C_specContext.class,0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCall_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCall_spec(this);
		}
	}

	public final Call_specContext call_spec() throws RecognitionException {
		Call_specContext _localctx = new Call_specContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_call_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1914);
			match(LANGUAGE);
			setState(1917);
			switch (_input.LA(1)) {
			case JAVA:
				{
				setState(1915);
				java_spec();
				}
				break;
			case C_LETTER:
				{
				setState(1916);
				c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Java_specContext extends ParserRuleContext {
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_java_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJava_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJava_spec(this);
		}
	}

	public final Java_specContext java_spec() throws RecognitionException {
		Java_specContext _localctx = new Java_specContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_java_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1919);
			match(JAVA);
			setState(1920);
			match(NAME);
			setState(1921);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_specContext extends ParserRuleContext {
		public TerminalNode C_LETTER() { return getToken(plsqlParser.C_LETTER, 0); }
		public TerminalNode LIBRARY() { return getToken(plsqlParser.LIBRARY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return getRuleContext(C_agent_in_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode CONTEXT() { return getToken(plsqlParser.CONTEXT, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return getRuleContext(C_parameters_clauseContext.class,0);
		}
		public C_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_spec(this);
		}
	}

	public final C_specContext c_spec() throws RecognitionException {
		C_specContext _localctx = new C_specContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_c_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1923);
			match(C_LETTER);
			setState(1926);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(1924);
				match(NAME);
				setState(1925);
				match(CHAR_STRING);
				}
			}

			setState(1928);
			match(LIBRARY);
			setState(1929);
			id();
			setState(1931);
			_la = _input.LA(1);
			if (_la==AGENT) {
				{
				setState(1930);
				c_agent_in_clause();
				}
			}

			setState(1935);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1933);
				match(WITH);
				setState(1934);
				match(CONTEXT);
				}
			}

			setState(1938);
			_la = _input.LA(1);
			if (_la==PARAMETERS) {
				{
				setState(1937);
				c_parameters_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_agent_in_clauseContext extends ParserRuleContext {
		public TerminalNode AGENT() { return getToken(plsqlParser.AGENT, 0); }
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_agent_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_agent_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_agent_in_clause(this);
		}
	}

	public final C_agent_in_clauseContext c_agent_in_clause() throws RecognitionException {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_c_agent_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1940);
			match(AGENT);
			setState(1941);
			match(IN);
			setState(1942);
			match(LEFT_PAREN);
			setState(1943);
			expression();
			setState(1948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1944);
				match(COMMA);
				setState(1945);
				expression();
				}
				}
				setState(1950);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1951);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_parameters_clauseContext extends ParserRuleContext {
		public TerminalNode PARAMETERS() { return getToken(plsqlParser.PARAMETERS, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterC_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitC_parameters_clause(this);
		}
	}

	public final C_parameters_clauseContext c_parameters_clause() throws RecognitionException {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_c_parameters_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1953);
			match(PARAMETERS);
			setState(1954);
			match(LEFT_PAREN);
			setState(1966);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_NUMBER:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(1955);
				expression();
				setState(1960);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1956);
					match(COMMA);
					setState(1957);
					expression();
					}
					}
					setState(1962);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case PERIOD:
				{
				setState(1963);
				match(PERIOD);
				setState(1964);
				match(PERIOD);
				setState(1965);
				match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1968);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public List<TerminalNode> IN() { return getTokens(plsqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(plsqlParser.IN, i);
		}
		public List<TerminalNode> OUT() { return getTokens(plsqlParser.OUT); }
		public TerminalNode OUT(int i) {
			return getToken(plsqlParser.OUT, i);
		}
		public List<TerminalNode> INOUT() { return getTokens(plsqlParser.INOUT); }
		public TerminalNode INOUT(int i) {
			return getToken(plsqlParser.INOUT, i);
		}
		public List<TerminalNode> NOCOPY() { return getTokens(plsqlParser.NOCOPY); }
		public TerminalNode NOCOPY(int i) {
			return getToken(plsqlParser.NOCOPY, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_parameter);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1970);
			parameter_name();
			setState(1974);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,166,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1971);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					} 
				}
				setState(1976);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,166,_ctx);
			}
			setState(1978);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(1977);
				type_spec();
				}
			}

			setState(1981);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(1980);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_value_partContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASSIGN_OP() { return getToken(plsqlParser.ASSIGN_OP, 0); }
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDefault_value_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDefault_value_part(this);
		}
	}

	public final Default_value_partContext default_value_part() throws RecognitionException {
		Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_default_value_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1983);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1984);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Preprocessor_statementContext preprocessor_statement() {
			return getRuleContext(Preprocessor_statementContext.class,0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDeclare_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDeclare_spec(this);
		}
	}

	public final Declare_specContext declare_spec() throws RecognitionException {
		Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_declare_spec);
		try {
			setState(1996);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1986);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1987);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1988);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1989);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1990);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1991);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1992);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1993);
				create_procedure_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1994);
				create_function_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1995);
				preprocessor_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_declarationContext extends ParserRuleContext {
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CONSTANT() { return getToken(plsqlParser.CONSTANT, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVariable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVariable_declaration(this);
		}
	}

	public final Variable_declarationContext variable_declaration() throws RecognitionException {
		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_variable_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1998);
			variable_name();
			setState(2000);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				setState(1999);
				match(CONSTANT);
				}
				break;
			}
			setState(2002);
			type_spec();
			setState(2005);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2003);
				match(NOT);
				setState(2004);
				match(NULL);
				}
			}

			setState(2008);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2007);
				default_value_part();
				}
			}

			setState(2010);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subtype_declarationContext extends ParserRuleContext {
		public TerminalNode SUBTYPE() { return getToken(plsqlParser.SUBTYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtype_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubtype_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubtype_declaration(this);
		}
	}

	public final Subtype_declarationContext subtype_declaration() throws RecognitionException {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_subtype_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2012);
			match(SUBTYPE);
			setState(2013);
			type_name();
			setState(2014);
			match(IS);
			setState(2015);
			type_spec();
			setState(2021);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(2016);
				match(RANGE);
				setState(2017);
				expression();
				setState(2018);
				match(T__0);
				setState(2019);
				expression();
				}
			}

			setState(2025);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2023);
				match(NOT);
				setState(2024);
				match(NULL);
				}
			}

			setState(2027);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_declarationContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public List<Parameter_specContext> parameter_spec() {
			return getRuleContexts(Parameter_specContext.class);
		}
		public Parameter_specContext parameter_spec(int i) {
			return getRuleContext(Parameter_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_declaration(this);
		}
	}

	public final Cursor_declarationContext cursor_declaration() throws RecognitionException {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_cursor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2029);
			match(CURSOR);
			setState(2030);
			cursor_name();
			setState(2042);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2031);
				match(LEFT_PAREN);
				setState(2032);
				parameter_spec();
				setState(2037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2033);
					match(COMMA);
					setState(2034);
					parameter_spec();
					}
					}
					setState(2039);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2040);
				match(RIGHT_PAREN);
				}
			}

			setState(2046);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(2044);
				match(RETURN);
				setState(2045);
				type_spec();
				}
			}

			setState(2050);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(2048);
				match(IS);
				setState(2049);
				select_statement();
				}
			}

			setState(2052);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_specContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter_spec(this);
		}
	}

	public final Parameter_specContext parameter_spec() throws RecognitionException {
		Parameter_specContext _localctx = new Parameter_specContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_parameter_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2054);
			parameter_name();
			setState(2059);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2056);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(2055);
					match(IN);
					}
				}

				setState(2058);
				type_spec();
				}
			}

			setState(2062);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2061);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_declarationContext extends ParserRuleContext {
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public TerminalNode EXCEPTION() { return getToken(plsqlParser.EXCEPTION, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_declaration(this);
		}
	}

	public final Exception_declarationContext exception_declaration() throws RecognitionException {
		Exception_declarationContext _localctx = new Exception_declarationContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_exception_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2064);
			exception_name();
			setState(2065);
			match(EXCEPTION);
			setState(2066);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_declarationContext extends ParserRuleContext {
		public IdContext id1;
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(plsqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(plsqlParser.EXCEPTION_INIT, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode INLINE() { return getToken(plsqlParser.INLINE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(plsqlParser.MINUS_SIGN, 0); }
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPragma_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPragma_declaration(this);
		}
	}

	public final Pragma_declarationContext pragma_declaration() throws RecognitionException {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_pragma_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2068);
			match(PRAGMA);
			setState(2102);
			switch (_input.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				setState(2069);
				match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				setState(2070);
				match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				setState(2071);
				match(EXCEPTION_INIT);
				setState(2072);
				match(LEFT_PAREN);
				setState(2073);
				exception_name();
				setState(2074);
				match(COMMA);
				setState(2076);
				_la = _input.LA(1);
				if (_la==MINUS_SIGN) {
					{
					setState(2075);
					match(MINUS_SIGN);
					}
				}

				setState(2078);
				numeric();
				setState(2079);
				match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				setState(2081);
				match(INLINE);
				setState(2082);
				match(LEFT_PAREN);
				setState(2083);
				((Pragma_declarationContext)_localctx).id1 = id();
				setState(2084);
				match(COMMA);
				setState(2085);
				expression();
				setState(2086);
				match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				setState(2088);
				match(RESTRICT_REFERENCES);
				setState(2089);
				match(LEFT_PAREN);
				setState(2092);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL_PERCENT_ROWCOUNT:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2090);
					id();
					}
					break;
				case DEFAULT:
					{
					setState(2091);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2096); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2094);
					match(COMMA);
					setState(2095);
					id();
					}
					}
					setState(2098); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(2100);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2104);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_declarationContext extends ParserRuleContext {
		public Record_type_decContext record_type_dec() {
			return getRuleContext(Record_type_decContext.class,0);
		}
		public Record_var_decContext record_var_dec() {
			return getRuleContext(Record_var_decContext.class,0);
		}
		public Record_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_declaration(this);
		}
	}

	public final Record_declarationContext record_declaration() throws RecognitionException {
		Record_declarationContext _localctx = new Record_declarationContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_record_declaration);
		try {
			setState(2108);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2106);
				record_type_dec();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2107);
				record_var_dec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode RECORD() { return getToken(plsqlParser.RECORD, 0); }
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Record_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_type_dec(this);
		}
	}

	public final Record_type_decContext record_type_dec() throws RecognitionException {
		Record_type_decContext _localctx = new Record_type_decContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_record_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2110);
			match(TYPE);
			setState(2111);
			type_name();
			setState(2112);
			match(IS);
			setState(2131);
			switch (_input.LA(1)) {
			case RECORD:
				{
				setState(2113);
				match(RECORD);
				setState(2114);
				match(LEFT_PAREN);
				setState(2115);
				field_spec();
				setState(2120);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2116);
					match(COMMA);
					setState(2117);
					field_spec();
					}
					}
					setState(2122);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2123);
				match(RIGHT_PAREN);
				}
				break;
			case REF:
				{
				setState(2125);
				match(REF);
				setState(2126);
				match(CURSOR);
				setState(2129);
				_la = _input.LA(1);
				if (_la==RETURN) {
					{
					setState(2127);
					match(RETURN);
					setState(2128);
					type_spec();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2133);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_specContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterField_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitField_spec(this);
		}
	}

	public final Field_specContext field_spec() throws RecognitionException {
		Field_specContext _localctx = new Field_specContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_field_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2135);
			column_name();
			setState(2137);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2136);
				type_spec();
				}
			}

			setState(2141);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2139);
				match(NOT);
				setState(2140);
				match(NULL);
				}
			}

			setState(2144);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2143);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_var_decContext extends ParserRuleContext {
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode PERCENT_ROWTYPE() { return getToken(plsqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(plsqlParser.PERCENT_TYPE, 0); }
		public Record_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_var_dec(this);
		}
	}

	public final Record_var_decContext record_var_dec() throws RecognitionException {
		Record_var_decContext _localctx = new Record_var_decContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_record_var_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2146);
			record_name();
			setState(2147);
			type_name();
			setState(2148);
			_la = _input.LA(1);
			if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2149);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_declarationContext extends ParserRuleContext {
		public Table_type_decContext table_type_dec() {
			return getRuleContext(Table_type_decContext.class,0);
		}
		public Table_var_decContext table_var_dec() {
			return getRuleContext(Table_var_decContext.class,0);
		}
		public Table_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_declaration(this);
		}
	}

	public final Table_declarationContext table_declaration() throws RecognitionException {
		Table_declarationContext _localctx = new Table_declarationContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_table_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2153);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(2151);
				table_type_dec();
				}
				break;
			case 2:
				{
				setState(2152);
				table_var_dec();
				}
				break;
			}
			setState(2155);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(plsqlParser.IS, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Table_indexed_by_partContext table_indexed_by_part() {
			return getRuleContext(Table_indexed_by_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Table_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_type_dec(this);
		}
	}

	public final Table_type_decContext table_type_dec() throws RecognitionException {
		Table_type_decContext _localctx = new Table_type_decContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_table_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2157);
			match(TYPE);
			setState(2158);
			type_name();
			setState(2159);
			match(IS);
			setState(2171);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(2160);
				match(TABLE);
				setState(2161);
				match(OF);
				setState(2162);
				type_spec();
				setState(2164);
				_la = _input.LA(1);
				if (_la==INDEX || _la==INDEXED) {
					{
					setState(2163);
					table_indexed_by_part();
					}
				}

				setState(2168);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2166);
					match(NOT);
					setState(2167);
					match(NULL);
					}
				}

				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(2170);
				varray_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_indexed_by_partContext extends ParserRuleContext {
		public Token idx1;
		public Token idx2;
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode INDEXED() { return getToken(plsqlParser.INDEXED, 0); }
		public TerminalNode INDEX() { return getToken(plsqlParser.INDEX, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_indexed_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_indexed_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_indexed_by_part(this);
		}
	}

	public final Table_indexed_by_partContext table_indexed_by_part() throws RecognitionException {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_table_indexed_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2175);
			switch (_input.LA(1)) {
			case INDEXED:
				{
				setState(2173);
				((Table_indexed_by_partContext)_localctx).idx1 = match(INDEXED);
				}
				break;
			case INDEX:
				{
				setState(2174);
				((Table_indexed_by_partContext)_localctx).idx2 = match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2177);
			match(BY);
			setState(2178);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_type_defContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode VARRAY() { return getToken(plsqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(plsqlParser.VARYING, 0); }
		public TerminalNode ARRAY() { return getToken(plsqlParser.ARRAY, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVarray_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVarray_type_def(this);
		}
	}

	public final Varray_type_defContext varray_type_def() throws RecognitionException {
		Varray_type_defContext _localctx = new Varray_type_defContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_varray_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2183);
			switch (_input.LA(1)) {
			case VARRAY:
				{
				setState(2180);
				match(VARRAY);
				}
				break;
			case VARYING:
				{
				setState(2181);
				match(VARYING);
				setState(2182);
				match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2185);
			match(LEFT_PAREN);
			setState(2186);
			expression();
			setState(2187);
			match(RIGHT_PAREN);
			setState(2188);
			match(OF);
			setState(2189);
			type_spec();
			setState(2192);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				setState(2190);
				match(NOT);
				setState(2191);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_decContext extends ParserRuleContext {
		public Table_var_nameContext table_var_name() {
			return getRuleContext(Table_var_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Table_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_var_dec(this);
		}
	}

	public final Table_var_decContext table_var_dec() throws RecognitionException {
		Table_var_decContext _localctx = new Table_var_decContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_table_var_dec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2194);
			table_var_name();
			setState(2195);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seq_of_statementsContext extends ParserRuleContext {
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Label_declarationContext> label_declaration() {
			return getRuleContexts(Label_declarationContext.class);
		}
		public Label_declarationContext label_declaration(int i) {
			return getRuleContext(Label_declarationContext.class,i);
		}
		public List<Preprocessor_statementContext> preprocessor_statement() {
			return getRuleContexts(Preprocessor_statementContext.class);
		}
		public Preprocessor_statementContext preprocessor_statement(int i) {
			return getRuleContext(Preprocessor_statementContext.class,i);
		}
		public List<TerminalNode> EOF() { return getTokens(plsqlParser.EOF); }
		public TerminalNode EOF(int i) {
			return getToken(plsqlParser.EOF, i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSeq_of_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSeq_of_statements(this);
		}
	}

	public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_seq_of_statements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2202); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2202);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
					case 1:
						{
						setState(2197);
						statement();
						setState(2198);
						_la = _input.LA(1);
						if ( !(_la==EOF || _la==SEMICOLON) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					case 2:
						{
						setState(2200);
						label_declaration();
						}
						break;
					case 3:
						{
						setState(2201);
						preprocessor_statement();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2204); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,201,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_declarationContext extends ParserRuleContext {
		public Token ltp1;
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLabel_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLabel_declaration(this);
		}
	}

	public final Label_declarationContext label_declaration() throws RecognitionException {
		Label_declarationContext _localctx = new Label_declarationContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_label_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2206);
			((Label_declarationContext)_localctx).ltp1 = match(LESS_THAN_OP);
			setState(2207);
			match(LESS_THAN_OP);
			setState(2208);
			label_name();
			setState(2209);
			match(GREATER_THAN_OP);
			setState(2210);
			match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(plsqlParser.CREATE, 0); }
		public Swallow_to_semiContext swallow_to_semi() {
			return getRuleContext(Swallow_to_semiContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(plsqlParser.ALTER, 0); }
		public TerminalNode GRANT() { return getToken(plsqlParser.GRANT, 0); }
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Assignment_statementContext assignment_statement() {
			return getRuleContext(Assignment_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Forall_statementContext forall_statement() {
			return getRuleContext(Forall_statementContext.class,0);
		}
		public Null_statementContext null_statement() {
			return getRuleContext(Null_statementContext.class,0);
		}
		public Raise_statementContext raise_statement() {
			return getRuleContext(Raise_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Pipe_rowContext pipe_row() {
			return getRuleContext(Pipe_rowContext.class,0);
		}
		public Collection_statementContext collection_statement() {
			return getRuleContext(Collection_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStatement(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_statement);
		try {
			setState(2239);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2212);
				match(CREATE);
				setState(2213);
				swallow_to_semi();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2214);
				match(ALTER);
				setState(2215);
				swallow_to_semi();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2216);
				match(GRANT);
				setState(2217);
				swallow_to_semi();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2218);
				match(TRUNCATE);
				setState(2219);
				swallow_to_semi();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2220);
				match(PRAGMA);
				setState(2221);
				swallow_to_semi();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2222);
				body();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2223);
				block();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2224);
				assignment_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2225);
				continue_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2226);
				exit_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2227);
				goto_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2228);
				if_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2229);
				loop_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2230);
				forall_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2231);
				null_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2232);
				raise_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2233);
				return_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2234);
				case_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2235);
				sql_statement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2236);
				function_call();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2237);
				pipe_row();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2238);
				collection_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_statementContext extends ParserRuleContext {
		public TerminalNode ASSIGN_OP() { return getToken(plsqlParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAssignment_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAssignment_statement(this);
		}
	}

	public final Assignment_statementContext assignment_statement() throws RecognitionException {
		Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_assignment_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2243);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2241);
				general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				{
				setState(2242);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2245);
			match(ASSIGN_OP);
			setState(2246);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitContinue_statement(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_continue_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2248);
			match(CONTINUE);
			setState(2250);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2249);
				label_name();
				}
			}

			setState(2254);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2252);
				match(WHEN);
				setState(2253);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExit_statement(this);
		}
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_exit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2256);
			match(EXIT);
			setState(2258);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2257);
				label_name();
				}
			}

			setState(2262);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2260);
				match(WHEN);
				setState(2261);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(plsqlParser.GOTO, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGoto_statement(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_goto_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2264);
			match(GOTO);
			setState(2265);
			label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(plsqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(plsqlParser.IF, i);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<Elsif_partContext> elsif_part() {
			return getRuleContexts(Elsif_partContext.class);
		}
		public Elsif_partContext elsif_part(int i) {
			return getRuleContext(Elsif_partContext.class,i);
		}
		public Else_partContext else_part() {
			return getRuleContext(Else_partContext.class,0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIf_statement(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2267);
			match(IF);
			setState(2268);
			condition();
			setState(2269);
			match(THEN);
			setState(2270);
			seq_of_statements();
			setState(2274);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(2271);
				elsif_part();
				}
				}
				setState(2276);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2278);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2277);
				else_part();
				}
			}

			setState(2280);
			match(END);
			setState(2281);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Elsif_partContext extends ParserRuleContext {
		public TerminalNode ELSIF() { return getToken(plsqlParser.ELSIF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elsif_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElsif_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElsif_part(this);
		}
	}

	public final Elsif_partContext elsif_part() throws RecognitionException {
		Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_elsif_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2283);
			match(ELSIF);
			setState(2284);
			condition();
			setState(2285);
			match(THEN);
			setState(2286);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterElse_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitElse_part(this);
		}
	}

	public final Else_partContext else_part() throws RecognitionException {
		Else_partContext _localctx = new Else_partContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2288);
			match(ELSE);
			setState(2289);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_statementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(plsqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(plsqlParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public TerminalNode WHILE() { return getToken(plsqlParser.WHILE, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return getRuleContext(Cursor_loop_paramContext.class,0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLoop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLoop_statement(this);
		}
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_loop_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2292);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				setState(2291);
				label_name();
				}
				break;
			}
			setState(2298);
			switch (_input.LA(1)) {
			case WHILE:
				{
				setState(2294);
				match(WHILE);
				setState(2295);
				condition();
				}
				break;
			case FOR:
				{
				setState(2296);
				match(FOR);
				setState(2297);
				cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2300);
			match(LOOP);
			setState(2301);
			seq_of_statements();
			setState(2302);
			match(END);
			setState(2303);
			match(LOOP);
			setState(2305);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2304);
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_loop_paramContext extends ParserRuleContext {
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode REVERSE() { return getToken(plsqlParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_loop_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_loop_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_loop_param(this);
		}
	}

	public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_cursor_loop_param);
		int _la;
		try {
			setState(2328);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2307);
				index_name();
				setState(2308);
				match(IN);
				setState(2310);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
				case 1:
					{
					setState(2309);
					match(REVERSE);
					}
					break;
				}
				setState(2312);
				lower_bound();
				setState(2313);
				match(T__0);
				setState(2314);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2316);
				record_name();
				setState(2317);
				match(IN);
				setState(2326);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL_PERCENT_ROWCOUNT:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2318);
					cursor_name();
					setState(2320);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(2319);
						expression_list();
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					setState(2322);
					match(LEFT_PAREN);
					setState(2323);
					select_statement();
					setState(2324);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Forall_statementContext extends ParserRuleContext {
		public TerminalNode FORALL() { return getToken(plsqlParser.FORALL, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Bounds_clauseContext bounds_clause() {
			return getRuleContext(Bounds_clauseContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public TerminalNode SAVE() { return getToken(plsqlParser.SAVE, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forall_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterForall_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitForall_statement(this);
		}
	}

	public final Forall_statementContext forall_statement() throws RecognitionException {
		Forall_statementContext _localctx = new Forall_statementContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_forall_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2330);
			match(FORALL);
			setState(2331);
			index_name();
			setState(2332);
			match(IN);
			setState(2333);
			bounds_clause();
			setState(2334);
			sql_statement();
			setState(2337);
			_la = _input.LA(1);
			if (_la==SAVE) {
				{
				setState(2335);
				match(SAVE);
				setState(2336);
				match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bounds_clauseContext extends ParserRuleContext {
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode INDICES() { return getToken(plsqlParser.INDICES, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Between_boundContext between_bound() {
			return getRuleContext(Between_boundContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bounds_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBounds_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBounds_clause(this);
		}
	}

	public final Bounds_clauseContext bounds_clause() throws RecognitionException {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_bounds_clause);
		int _la;
		try {
			setState(2352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2339);
				lower_bound();
				setState(2340);
				match(T__0);
				setState(2341);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2343);
				match(INDICES);
				setState(2344);
				match(OF);
				setState(2345);
				collection_name();
				setState(2347);
				_la = _input.LA(1);
				if (_la==BETWEEN) {
					{
					setState(2346);
					between_bound();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2349);
				match(VALUES);
				setState(2350);
				match(OF);
				setState(2351);
				index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_boundContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBetween_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBetween_bound(this);
		}
	}

	public final Between_boundContext between_bound() throws RecognitionException {
		Between_boundContext _localctx = new Between_boundContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_between_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2354);
			match(BETWEEN);
			setState(2355);
			lower_bound();
			setState(2356);
			match(AND);
			setState(2357);
			upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lower_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lower_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLower_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLower_bound(this);
		}
	}

	public final Lower_boundContext lower_bound() throws RecognitionException {
		Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_lower_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2359);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Upper_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpper_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpper_bound(this);
		}
	}

	public final Upper_boundContext upper_bound() throws RecognitionException {
		Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_upper_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2361);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_statementContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNull_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNull_statement(this);
		}
	}

	public final Null_statementContext null_statement() throws RecognitionException {
		Null_statementContext _localctx = new Null_statementContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_null_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2363);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raise_statementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(plsqlParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRaise_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRaise_statement(this);
		}
	}

	public final Raise_statementContext raise_statement() throws RecognitionException {
		Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_raise_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2365);
			match(RAISE);
			setState(2367);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(2366);
				exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public ConditionContext cn1;
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReturn_statement(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2369);
			match(RETURN);
			setState(2371);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NOT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PRIOR - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TO_CHAR - 389)) | (1L << (TO_NUMBER - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUE - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (UNSIGNED_INTEGER - 453)) | (1L << (APPROXIMATE_NUM_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (LEFT_PAREN - 453)) | (1L << (PLUS_SIGN - 453)) | (1L << (MINUS_SIGN - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(2370);
				((Return_statementContext)_localctx).cn1 = condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_call(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_function_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2374);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				setState(2373);
				match(CALL);
				}
				break;
			}
			setState(2376);
			routine_name();
			setState(2378);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2377);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(plsqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public Exception_clauseContext exception_clause() {
			return getRuleContext(Exception_clauseContext.class,0);
		}
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBody(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2380);
			match(BEGIN);
			setState(2381);
			seq_of_statements();
			setState(2383);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(2382);
				exception_clause();
				}
			}

			setState(2385);
			match(END);
			setState(2387);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				setState(2386);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_statementContext extends ParserRuleContext {
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode EXTEND() { return getToken(plsqlParser.EXTEND, 0); }
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode TRIM() { return getToken(plsqlParser.TRIM, 0); }
		public Collection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCollection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCollection_statement(this);
		}
	}

	public final Collection_statementContext collection_statement() throws RecognitionException {
		Collection_statementContext _localctx = new Collection_statementContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_collection_statement);
		int _la;
		try {
			setState(2432);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2389);
				collection_name();
				setState(2390);
				match(PERIOD);
				setState(2391);
				match(FIRST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2393);
				collection_name();
				setState(2394);
				match(PERIOD);
				setState(2395);
				match(LAST);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2397);
				collection_name();
				setState(2398);
				match(PERIOD);
				setState(2399);
				match(DELETE);
				setState(2408);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(2400);
					match(LEFT_PAREN);
					setState(2401);
					expression();
					setState(2404);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2402);
						match(COMMA);
						setState(2403);
						expression();
						}
					}

					setState(2406);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2410);
				collection_name();
				setState(2411);
				match(PERIOD);
				setState(2412);
				match(EXTEND);
				setState(2421);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(2413);
					match(LEFT_PAREN);
					setState(2414);
					numeric();
					setState(2417);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2415);
						match(COMMA);
						setState(2416);
						numeric();
						}
					}

					setState(2419);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2423);
				collection_name();
				setState(2424);
				match(PERIOD);
				setState(2425);
				match(TRIM);
				setState(2430);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(2426);
					match(LEFT_PAREN);
					setState(2427);
					numeric();
					setState(2428);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pipe_rowContext extends ParserRuleContext {
		public TerminalNode PIPE() { return getToken(plsqlParser.PIPE, 0); }
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public Pipe_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pipe_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPipe_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPipe_row(this);
		}
	}

	public final Pipe_rowContext pipe_row() throws RecognitionException {
		Pipe_rowContext _localctx = new Pipe_rowContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_pipe_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2434);
			match(PIPE);
			setState(2435);
			match(ROW);
			setState(2436);
			match(LEFT_PAREN);
			setState(2437);
			variable_name();
			setState(2438);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_clauseContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(plsqlParser.EXCEPTION, 0); }
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public Exception_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_clause(this);
		}
	}

	public final Exception_clauseContext exception_clause() throws RecognitionException {
		Exception_clauseContext _localctx = new Exception_clauseContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_exception_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2440);
			match(EXCEPTION);
			setState(2442); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2441);
				exception_handler();
				}
				}
				setState(2444); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_handlerContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public List<Exception_nameContext> exception_name() {
			return getRuleContexts(Exception_nameContext.class);
		}
		public Exception_nameContext exception_name(int i) {
			return getRuleContext(Exception_nameContext.class,i);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_handler(this);
		}
	}

	public final Exception_handlerContext exception_handler() throws RecognitionException {
		Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_exception_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2446);
			match(WHEN);
			setState(2447);
			exception_name();
			setState(2452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(2448);
				match(OR);
				setState(2449);
				exception_name();
				}
				}
				setState(2454);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2455);
			match(THEN);
			setState(2456);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_blockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_block(this);
		}
	}

	public final Trigger_blockContext trigger_block() throws RecognitionException {
		Trigger_blockContext _localctx = new Trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2466);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (PROCEDURE - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(2459);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(2458);
					match(DECLARE);
					}
				}

				setState(2462); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2461);
					declare_spec();
					}
					}
					setState(2464); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (PROCEDURE - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
				}
			}

			setState(2468);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(plsqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBlock(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2471);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(2470);
				match(DECLARE);
				}
			}

			setState(2474); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2473);
				declare_spec();
				}
				}
				setState(2476); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (PROCEDURE - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
			setState(2478);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statementContext extends ParserRuleContext {
		public Execute_immediateContext execute_immediate() {
			return getRuleContext(Execute_immediateContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return getRuleContext(Cursor_manipulation_statementsContext.class,0);
		}
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_statement(this);
		}
	}

	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_sql_statement);
		try {
			setState(2484);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2480);
				execute_immediate();
				}
				break;
			case DELETE:
			case EXPLAIN:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2481);
				data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2482);
				cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(2483);
				transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_immediateContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(plsqlParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return getRuleContext(Dynamic_returning_clauseContext.class,0);
		}
		public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExecute_immediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExecute_immediate(this);
		}
	}

	public final Execute_immediateContext execute_immediate() throws RecognitionException {
		Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_execute_immediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2486);
			match(EXECUTE);
			setState(2487);
			match(IMMEDIATE);
			setState(2488);
			expression();
			setState(2498);
			switch (_input.LA(1)) {
			case BULK:
			case INTO:
				{
				setState(2489);
				into_clause();
				setState(2491);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2490);
					using_clause();
					}
				}

				}
				break;
			case USING:
				{
				setState(2493);
				using_clause();
				setState(2495);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(2494);
					dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURN:
			case RETURNING:
				{
				setState(2497);
				dynamic_returning_clause();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_returning_clauseContext extends ParserRuleContext {
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDynamic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDynamic_returning_clause(this);
		}
	}

	public final Dynamic_returning_clauseContext dynamic_returning_clause() throws RecognitionException {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_dynamic_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2500);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2501);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return getRuleContext(Lock_table_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterData_manipulation_language_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitData_manipulation_language_statements(this);
		}
	}

	public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_data_manipulation_language_statements);
		try {
			setState(2510);
			switch (_input.LA(1)) {
			case MERGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2503);
				merge_statement();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2504);
				lock_table_statement();
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2505);
				select_statement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2506);
				update_statement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2507);
				delete_statement();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2508);
				insert_statement();
				}
				break;
			case EXPLAIN:
				enterOuterAlt(_localctx, 7);
				{
				setState(2509);
				explain_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_manipulation_statementsContext extends ParserRuleContext {
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		public Open_for_statementContext open_for_statement() {
			return getRuleContext(Open_for_statementContext.class,0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_manipulation_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_manipulation_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_manipulation_statements(this);
		}
	}

	public final Cursor_manipulation_statementsContext cursor_manipulation_statements() throws RecognitionException {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_cursor_manipulation_statements);
		try {
			setState(2516);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2512);
				close_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2513);
				open_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2514);
				fetch_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2515);
				open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(plsqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterClose_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitClose_statement(this);
		}
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2518);
			match(CLOSE);
			setState(2519);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOpen_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOpen_statement(this);
		}
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2521);
			match(OPEN);
			setState(2522);
			cursor_name();
			setState(2524);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2523);
				expression_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_statementContext extends ParserRuleContext {
		public Token it1;
		public TerminalNode FETCH() { return getToken(plsqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFetch_statement(this);
		}
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2526);
			match(FETCH);
			setState(2527);
			cursor_name();
			setState(2552);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(2528);
				((Fetch_statementContext)_localctx).it1 = match(INTO);
				setState(2529);
				variable_name();
				setState(2534);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2530);
					match(COMMA);
					setState(2531);
					variable_name();
					}
					}
					setState(2536);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				{
				setState(2537);
				match(BULK);
				setState(2538);
				match(COLLECT);
				setState(2539);
				match(INTO);
				setState(2540);
				variable_name();
				setState(2545);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2541);
					match(COMMA);
					setState(2542);
					variable_name();
					}
					}
					setState(2547);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2548);
				match(LIMIT);
				setState(2549);
				variable_name();
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				{
				setState(2551);
				numeric();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_for_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_for_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOpen_for_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOpen_for_statement(this);
		}
	}

	public final Open_for_statementContext open_for_statement() throws RecognitionException {
		Open_for_statementContext _localctx = new Open_for_statementContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_open_for_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2554);
			match(OPEN);
			setState(2555);
			variable_name();
			setState(2556);
			match(FOR);
			setState(2559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				{
				setState(2557);
				select_statement();
				}
				break;
			case 2:
				{
				setState(2558);
				expression();
				}
				break;
			}
			setState(2562);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2561);
				using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_control_statementsContext extends ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return getRuleContext(Set_transaction_commandContext.class,0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return getRuleContext(Set_constraint_commandContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_control_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTransaction_control_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTransaction_control_statements(this);
		}
	}

	public final Transaction_control_statementsContext transaction_control_statements() throws RecognitionException {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_transaction_control_statements);
		try {
			setState(2569);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2564);
				set_transaction_command();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2565);
				set_constraint_command();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2566);
				commit_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2567);
				rollback_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2568);
				savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(plsqlParser.TRANSACTION, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode ISOLATION() { return getToken(plsqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(plsqlParser.LEVEL, 0); }
		public TerminalNode USE() { return getToken(plsqlParser.USE, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode SEGMENT() { return getToken(plsqlParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return getRuleContext(Rollback_segment_nameContext.class,0);
		}
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(plsqlParser.SERIALIZABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(plsqlParser.COMMITTED, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_transaction_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_transaction_command(this);
		}
	}

	public final Set_transaction_commandContext set_transaction_command() throws RecognitionException {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_set_transaction_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2571);
			match(SET);
			setState(2572);
			match(TRANSACTION);
			setState(2586);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(2573);
				match(READ);
				setState(2574);
				_la = _input.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case ISOLATION:
				{
				setState(2575);
				match(ISOLATION);
				setState(2576);
				match(LEVEL);
				setState(2580);
				switch (_input.LA(1)) {
				case SERIALIZABLE:
					{
					setState(2577);
					match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					setState(2578);
					match(READ);
					setState(2579);
					match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case USE:
				{
				setState(2582);
				match(USE);
				setState(2583);
				match(ROLLBACK);
				setState(2584);
				match(SEGMENT);
				setState(2585);
				rollback_segment_name();
				}
				break;
			case EOF:
			case NAME:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2590);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(2588);
				match(NAME);
				setState(2589);
				quoted_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_constraint_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(plsqlParser.CONSTRAINTS, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(plsqlParser.DEFERRED, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraint_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_constraint_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_constraint_command(this);
		}
	}

	public final Set_constraint_commandContext set_constraint_command() throws RecognitionException {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_set_constraint_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2592);
			match(SET);
			setState(2593);
			_la = _input.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2603);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(2594);
				match(ALL);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2595);
				constraint_name();
				setState(2600);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2596);
					match(COMMA);
					setState(2597);
					constraint_name();
					}
					}
					setState(2602);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2605);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Write_clauseContext write_clause() {
			return getRuleContext(Write_clauseContext.class,0);
		}
		public TerminalNode CORRUPT_XID() { return getToken(plsqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(plsqlParser.CORRUPT_XID_ALL, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCommit_statement(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2607);
			match(COMMIT);
			setState(2609);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2608);
				match(WORK);
				}
			}

			setState(2624);
			switch (_input.LA(1)) {
			case COMMENT:
				{
				setState(2611);
				match(COMMENT);
				setState(2612);
				expression();
				}
				break;
			case FORCE:
				{
				setState(2613);
				match(FORCE);
				setState(2622);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
				case 1:
					{
					setState(2614);
					match(CORRUPT_XID);
					setState(2615);
					expression();
					}
					break;
				case 2:
					{
					setState(2616);
					match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					setState(2617);
					expression();
					setState(2620);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2618);
						match(COMMA);
						setState(2619);
						expression();
						}
					}

					}
					break;
				}
				}
				break;
			case EOF:
			case SAVE:
			case WRITE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2627);
			_la = _input.LA(1);
			if (_la==WRITE) {
				{
				setState(2626);
				write_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Write_clauseContext extends ParserRuleContext {
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode BATCH() { return getToken(plsqlParser.BATCH, 0); }
		public Write_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_write_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWrite_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWrite_clause(this);
		}
	}

	public final Write_clauseContext write_clause() throws RecognitionException {
		Write_clauseContext _localctx = new Write_clauseContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_write_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2629);
			match(WRITE);
			setState(2631);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(2630);
				_la = _input.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(2634);
			_la = _input.LA(1);
			if (_la==BATCH || _la==IMMEDIATE) {
				{
				setState(2633);
				_la = _input.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollback_statement(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2636);
			match(ROLLBACK);
			setState(2638);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2637);
				match(WORK);
				}
			}

			setState(2647);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(2640);
				match(TO);
				setState(2642);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
				case 1:
					{
					setState(2641);
					match(SAVEPOINT);
					}
					break;
				}
				setState(2644);
				savepoint_name();
				}
				break;
			case FORCE:
				{
				setState(2645);
				match(FORCE);
				setState(2646);
				quoted_string();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSavepoint_statement(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2649);
			match(SAVEPOINT);
			setState(2650);
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(plsqlParser.EXPLAIN, 0); }
		public TerminalNode PLAN() { return getToken(plsqlParser.PLAN, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(plsqlParser.STATEMENT_ID, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExplain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExplain_statement(this);
		}
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2652);
			match(EXPLAIN);
			setState(2653);
			match(PLAN);
			setState(2658);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2654);
				match(SET);
				setState(2655);
				match(STATEMENT_ID);
				setState(2656);
				match(EQUALS_OP);
				setState(2657);
				quoted_string();
				}
			}

			setState(2662);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2660);
				match(INTO);
				setState(2661);
				tableview_name();
				}
			}

			setState(2664);
			match(FOR);
			setState(2670);
			switch (_input.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(2665);
				select_statement();
				}
				break;
			case UPDATE:
				{
				setState(2666);
				update_statement();
				}
				break;
			case DELETE:
				{
				setState(2667);
				delete_statement();
				}
				break;
			case INSERT:
				{
				setState(2668);
				insert_statement();
				}
				break;
			case MERGE:
				{
				setState(2669);
				merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return getRuleContext(Subquery_factoring_clauseContext.class,0);
		}
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		public List<Order_by_clauseContext> order_by_clause() {
			return getRuleContexts(Order_by_clauseContext.class);
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return getRuleContext(Order_by_clauseContext.class,i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelect_statement(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2673);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2672);
				subquery_factoring_clause();
				}
			}

			setState(2675);
			subquery();
			setState(2680);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==ORDER) {
				{
				setState(2678);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(2676);
					for_update_clause();
					}
					break;
				case ORDER:
					{
					setState(2677);
					order_by_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2682);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_factoring_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public List<Factoring_elementContext> factoring_element() {
			return getRuleContexts(Factoring_elementContext.class);
		}
		public Factoring_elementContext factoring_element(int i) {
			return getRuleContext(Factoring_elementContext.class,i);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_factoring_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_factoring_clause(this);
		}
	}

	public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_subquery_factoring_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2683);
			match(WITH);
			setState(2684);
			factoring_element();
			setState(2689);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2685);
				match(COMMA);
				setState(2686);
				factoring_element();
				}
				}
				setState(2691);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Factoring_elementContext extends ParserRuleContext {
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		public Factoring_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factoring_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFactoring_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFactoring_element(this);
		}
	}

	public final Factoring_elementContext factoring_element() throws RecognitionException {
		Factoring_elementContext _localctx = new Factoring_elementContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_factoring_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2692);
			query_name();
			setState(2704);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2693);
				match(LEFT_PAREN);
				setState(2694);
				column_name();
				setState(2699);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2695);
					match(COMMA);
					setState(2696);
					column_name();
					}
					}
					setState(2701);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2702);
				match(RIGHT_PAREN);
				}
			}

			setState(2706);
			match(AS);
			setState(2707);
			match(LEFT_PAREN);
			setState(2708);
			subquery();
			setState(2710);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2709);
				order_by_clause();
				}
			}

			setState(2712);
			match(RIGHT_PAREN);
			setState(2714);
			_la = _input.LA(1);
			if (_la==SEARCH) {
				{
				setState(2713);
				search_clause();
				}
			}

			setState(2717);
			_la = _input.LA(1);
			if (_la==CYCLE) {
				{
				setState(2716);
				cycle_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_clauseContext extends ParserRuleContext {
		public TerminalNode SEARCH() { return getToken(plsqlParser.SEARCH, 0); }
		public List<TerminalNode> FIRST() { return getTokens(plsqlParser.FIRST); }
		public TerminalNode FIRST(int i) {
			return getToken(plsqlParser.FIRST, i);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode DEPTH() { return getToken(plsqlParser.DEPTH, 0); }
		public TerminalNode BREADTH() { return getToken(plsqlParser.BREADTH, 0); }
		public List<TerminalNode> ASC() { return getTokens(plsqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(plsqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(plsqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(plsqlParser.DESC, i);
		}
		public List<TerminalNode> NULLS() { return getTokens(plsqlParser.NULLS); }
		public TerminalNode NULLS(int i) {
			return getToken(plsqlParser.NULLS, i);
		}
		public List<TerminalNode> LAST() { return getTokens(plsqlParser.LAST); }
		public TerminalNode LAST(int i) {
			return getToken(plsqlParser.LAST, i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearch_clause(this);
		}
	}

	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_search_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2719);
			match(SEARCH);
			setState(2720);
			_la = _input.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2721);
			match(FIRST);
			setState(2722);
			match(BY);
			setState(2723);
			column_name();
			setState(2725);
			_la = _input.LA(1);
			if (_la==ASC) {
				{
				setState(2724);
				match(ASC);
				}
			}

			setState(2728);
			_la = _input.LA(1);
			if (_la==DESC) {
				{
				setState(2727);
				match(DESC);
				}
			}

			setState(2732);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				{
				setState(2730);
				match(NULLS);
				setState(2731);
				match(FIRST);
				}
				break;
			}
			setState(2736);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(2734);
				match(NULLS);
				setState(2735);
				match(LAST);
				}
			}

			setState(2756);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2738);
				match(COMMA);
				setState(2739);
				column_name();
				setState(2741);
				_la = _input.LA(1);
				if (_la==ASC) {
					{
					setState(2740);
					match(ASC);
					}
				}

				setState(2744);
				_la = _input.LA(1);
				if (_la==DESC) {
					{
					setState(2743);
					match(DESC);
					}
				}

				setState(2748);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
				case 1:
					{
					setState(2746);
					match(NULLS);
					setState(2747);
					match(FIRST);
					}
					break;
				}
				setState(2752);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(2750);
					match(NULLS);
					setState(2751);
					match(LAST);
					}
				}

				}
				}
				setState(2758);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2759);
			match(SET);
			setState(2760);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_clauseContext extends ParserRuleContext {
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCycle_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCycle_clause(this);
		}
	}

	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_cycle_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2762);
			match(CYCLE);
			setState(2763);
			column_name();
			setState(2768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2764);
				match(COMMA);
				setState(2765);
				column_name();
				}
				}
				setState(2770);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2771);
			match(SET);
			setState(2772);
			column_name();
			setState(2773);
			match(TO);
			setState(2774);
			expression();
			setState(2775);
			match(DEFAULT);
			setState(2776);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_subquery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2778);
			subquery_basic_elements();
			setState(2782);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTERSECT || _la==MINUS || _la==UNION) {
				{
				{
				setState(2779);
				subquery_operation_part();
				}
				}
				setState(2784);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_operation_partContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public TerminalNode UNION() { return getToken(plsqlParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(plsqlParser.INTERSECT, 0); }
		public TerminalNode MINUS() { return getToken(plsqlParser.MINUS, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_operation_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_operation_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_operation_part(this);
		}
	}

	public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_subquery_operation_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2791);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(2785);
				match(UNION);
				setState(2787);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(2786);
					match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				setState(2789);
				match(INTERSECT);
				}
				break;
			case MINUS:
				{
				setState(2790);
				match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2793);
			subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_basic_elementsContext extends ParserRuleContext {
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_basic_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_basic_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_basic_elements(this);
		}
	}

	public final Subquery_basic_elementsContext subquery_basic_elements() throws RecognitionException {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_subquery_basic_elements);
		try {
			setState(2800);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2795);
				query_block();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2796);
				match(LEFT_PAREN);
				setState(2797);
				subquery();
				setState(2798);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_blockContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(plsqlParser.SELECT, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public List<Selected_elementContext> selected_element() {
			return getRuleContexts(Selected_elementContext.class);
		}
		public Selected_elementContext selected_element(int i) {
			return getRuleContext(Selected_elementContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_block(this);
		}
	}

	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_query_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2802);
			match(SELECT);
			setState(2804);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				{
				setState(2803);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(2815);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(2806);
				match(ASTERISK);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_NUMBER:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2807);
				selected_element();
				setState(2812);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2808);
					match(COMMA);
					setState(2809);
					selected_element();
					}
					}
					setState(2814);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2818);
			_la = _input.LA(1);
			if (_la==BULK || _la==INTO) {
				{
				setState(2817);
				into_clause();
				}
			}

			setState(2820);
			from_clause();
			setState(2822);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				setState(2821);
				where_clause();
				}
				break;
			}
			setState(2825);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				setState(2824);
				hierarchical_query_clause();
				}
				break;
			}
			setState(2828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				setState(2827);
				group_by_clause();
				}
				break;
			}
			setState(2831);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				{
				setState(2830);
				order_by_clause();
				}
				break;
			}
			setState(2834);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				{
				setState(2833);
				model_clause();
				}
				break;
			}
			setState(2837);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				setState(2836);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Selected_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelected_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelected_element(this);
		}
	}

	public final Selected_elementContext selected_element() throws RecognitionException {
		Selected_elementContext _localctx = new Selected_elementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_selected_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2839);
			select_list_elements();
			setState(2841);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				setState(2840);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public Table_ref_listContext table_ref_list() {
			return getRuleContext(Table_ref_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFrom_clause(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2843);
			match(FROM);
			setState(2844);
			table_ref_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elementsContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Select_list_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelect_list_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelect_list_elements(this);
		}
	}

	public final Select_list_elementsContext select_list_elements() throws RecognitionException {
		Select_list_elementsContext _localctx = new Select_list_elementsContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_select_list_elements);
		try {
			setState(2851);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2846);
				tableview_name();
				setState(2847);
				match(PERIOD);
				setState(2848);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2850);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_listContext extends ParserRuleContext {
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public Table_ref_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_ref_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_ref_list(this);
		}
	}

	public final Table_ref_listContext table_ref_list() throws RecognitionException {
		Table_ref_listContext _localctx = new Table_ref_listContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_table_ref_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2853);
			table_ref();
			setState(2858);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,305,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2854);
					match(COMMA);
					setState(2855);
					table_ref();
					}
					} 
				}
				setState(2860);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,305,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Join_clauseContext> join_clause() {
			return getRuleContexts(Join_clauseContext.class);
		}
		public Join_clauseContext join_clause(int i) {
			return getRuleContext(Join_clauseContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_ref(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_table_ref);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2861);
			table_ref_aux();
			setState(2865);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,306,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2862);
					join_clause();
					}
					} 
				}
				setState(2867);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,306,_ctx);
			}
			setState(2870);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				{
				setState(2868);
				pivot_clause();
				}
				break;
			case 2:
				{
				setState(2869);
				unpivot_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_auxContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_ref_aux(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_ref_aux(this);
		}
	}

	public final Table_ref_auxContext table_ref_aux() throws RecognitionException {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_table_ref_aux);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2900);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				setState(2872);
				dml_table_expression_clause();
				setState(2875);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					setState(2873);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(2874);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2877);
				match(LEFT_PAREN);
				setState(2878);
				table_ref();
				setState(2882);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INTERSECT || _la==MINUS || _la==UNION) {
					{
					{
					setState(2879);
					subquery_operation_part();
					}
					}
					setState(2884);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2885);
				match(RIGHT_PAREN);
				setState(2888);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
				case 1:
					{
					setState(2886);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(2887);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(2890);
				match(ONLY);
				setState(2891);
				match(LEFT_PAREN);
				setState(2892);
				dml_table_expression_clause();
				setState(2893);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				setState(2895);
				dml_table_expression_clause();
				setState(2898);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
				case 1:
					{
					setState(2896);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(2897);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			}
			setState(2905);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,313,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2902);
					flashback_query_clause();
					}
					} 
				}
				setState(2907);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,313,_ctx);
			}
			setState(2909);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				{
				setState(2908);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(plsqlParser.JOIN, 0); }
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Query_partition_clauseContext> query_partition_clause() {
			return getRuleContexts(Query_partition_clauseContext.class);
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return getRuleContext(Query_partition_clauseContext.class,i);
		}
		public TerminalNode INNER() { return getToken(plsqlParser.INNER, 0); }
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public List<Join_on_partContext> join_on_part() {
			return getRuleContexts(Join_on_partContext.class);
		}
		public Join_on_partContext join_on_part(int i) {
			return getRuleContext(Join_on_partContext.class,i);
		}
		public List<Join_using_partContext> join_using_part() {
			return getRuleContexts(Join_using_partContext.class);
		}
		public Join_using_partContext join_using_part(int i) {
			return getRuleContext(Join_using_partContext.class,i);
		}
		public TerminalNode CROSS() { return getToken(plsqlParser.CROSS, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_clause(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_join_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2912);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2911);
				query_partition_clause();
				}
			}

			setState(2915);
			_la = _input.LA(1);
			if (_la==CROSS || _la==NATURAL) {
				{
				setState(2914);
				_la = _input.LA(1);
				if ( !(_la==CROSS || _la==NATURAL) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(2919);
			switch (_input.LA(1)) {
			case INNER:
				{
				setState(2917);
				match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				setState(2918);
				outer_join_type();
				}
				break;
			case JOIN:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2921);
			match(JOIN);
			setState(2922);
			table_ref_aux();
			setState(2924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				setState(2923);
				query_partition_clause();
				}
				break;
			}
			setState(2930);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,320,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2928);
					switch (_input.LA(1)) {
					case ON:
						{
						setState(2926);
						join_on_part();
						}
						break;
					case USING:
						{
						setState(2927);
						join_using_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2932);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,320,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_on_partContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_on_part(this);
		}
	}

	public final Join_on_partContext join_on_part() throws RecognitionException {
		Join_on_partContext _localctx = new Join_on_partContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_join_on_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2933);
			match(ON);
			setState(2934);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_using_partContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Join_using_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_using_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterJoin_using_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitJoin_using_part(this);
		}
	}

	public final Join_using_partContext join_using_part() throws RecognitionException {
		Join_using_partContext _localctx = new Join_using_partContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_join_using_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2936);
			match(USING);
			setState(2937);
			match(LEFT_PAREN);
			setState(2938);
			column_name();
			setState(2943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2939);
				match(COMMA);
				setState(2940);
				column_name();
				}
				}
				setState(2945);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2946);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(plsqlParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(plsqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(plsqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(plsqlParser.OUTER, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOuter_join_type(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2948);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2950);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(2949);
				match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_partition_clause(this);
		}
	}

	public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_query_partition_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2952);
			match(PARTITION);
			setState(2953);
			match(BY);
			setState(2967);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				{
				setState(2954);
				match(LEFT_PAREN);
				setState(2955);
				subquery();
				setState(2956);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(2958);
				expression_list();
				}
				break;
			case 3:
				{
				setState(2959);
				expression();
				setState(2964);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,323,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2960);
						match(COMMA);
						setState(2961);
						expression();
						}
						} 
					}
					setState(2966);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,323,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_query_clauseContext extends ParserRuleContext {
		public TerminalNode VERSIONS() { return getToken(plsqlParser.VERSIONS, 0); }
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SCN() { return getToken(plsqlParser.SCN, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public TerminalNode SNAPSHOT() { return getToken(plsqlParser.SNAPSHOT, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFlashback_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFlashback_query_clause(this);
		}
	}

	public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_flashback_query_clause);
		int _la;
		try {
			setState(2977);
			switch (_input.LA(1)) {
			case VERSIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2969);
				match(VERSIONS);
				setState(2970);
				match(BETWEEN);
				setState(2971);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(2972);
				expression();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2973);
				match(AS);
				setState(2974);
				match(OF);
				setState(2975);
				_la = _input.LA(1);
				if ( !(((((_la - 340)) & ~0x3f) == 0 && ((1L << (_la - 340)) & ((1L << (SCN - 340)) | (1L << (SNAPSHOT - 340)) | (1L << (TIMESTAMP - 340)))) != 0)) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(2976);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public TerminalNode PIVOT() { return getToken(plsqlParser.PIVOT, 0); }
		public List<Pivot_elementContext> pivot_element() {
			return getRuleContexts(Pivot_elementContext.class);
		}
		public Pivot_elementContext pivot_element(int i) {
			return getRuleContext(Pivot_elementContext.class,i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return getRuleContext(Pivot_in_clauseContext.class,0);
		}
		public TerminalNode XML() { return getToken(plsqlParser.XML, 0); }
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_clause(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_pivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2979);
			match(PIVOT);
			setState(2981);
			_la = _input.LA(1);
			if (_la==XML) {
				{
				setState(2980);
				match(XML);
				}
			}

			setState(2983);
			match(LEFT_PAREN);
			setState(2984);
			pivot_element();
			setState(2989);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2985);
				match(COMMA);
				setState(2986);
				pivot_element();
				}
				}
				setState(2991);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2992);
			pivot_for_clause();
			setState(2993);
			pivot_in_clause();
			setState(2994);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_elementContext extends ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_element(this);
		}
	}

	public final Pivot_elementContext pivot_element() throws RecognitionException {
		Pivot_elementContext _localctx = new Pivot_elementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_pivot_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2996);
			aggregate_function_name();
			setState(2997);
			match(LEFT_PAREN);
			setState(2998);
			expression();
			setState(2999);
			match(RIGHT_PAREN);
			setState(3001);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3000);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_for_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_for_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_for_clause(this);
		}
	}

	public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_pivot_for_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3003);
			match(FOR);
			setState(3016);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3004);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3005);
				match(LEFT_PAREN);
				setState(3006);
				column_name();
				setState(3011);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3007);
					match(COMMA);
					setState(3008);
					column_name();
					}
					}
					setState(3013);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3014);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> ANY() { return getTokens(plsqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(plsqlParser.ANY, i);
		}
		public List<Pivot_in_clause_elementContext> pivot_in_clause_element() {
			return getRuleContexts(Pivot_in_clause_elementContext.class);
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return getRuleContext(Pivot_in_clause_elementContext.class,i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause(this);
		}
	}

	public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_pivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3018);
			match(IN);
			setState(3019);
			match(LEFT_PAREN);
			setState(3037);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				{
				setState(3020);
				subquery();
				}
				break;
			case 2:
				{
				setState(3021);
				match(ANY);
				setState(3026);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3022);
					match(COMMA);
					setState(3023);
					match(ANY);
					}
					}
					setState(3028);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				{
				setState(3029);
				pivot_in_clause_element();
				setState(3034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3030);
					match(COMMA);
					setState(3031);
					pivot_in_clause_element();
					}
					}
					setState(3036);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(3039);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementContext extends ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return getRuleContext(Pivot_in_clause_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause_element(this);
		}
	}

	public final Pivot_in_clause_elementContext pivot_in_clause_element() throws RecognitionException {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_pivot_in_clause_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3041);
			pivot_in_clause_elements();
			setState(3043);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3042);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPivot_in_clause_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPivot_in_clause_elements(this);
		}
	}

	public final Pivot_in_clause_elementsContext pivot_in_clause_elements() throws RecognitionException {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_pivot_in_clause_elements);
		try {
			setState(3047);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3045);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3046);
				expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public TerminalNode UNPIVOT() { return getToken(plsqlParser.UNPIVOT, 0); }
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return getRuleContext(Unpivot_in_clauseContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode INCLUDE() { return getToken(plsqlParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(plsqlParser.EXCLUDE, 0); }
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_clause(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_unpivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3049);
			match(UNPIVOT);
			setState(3052);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(3050);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3051);
				match(NULLS);
				}
			}

			setState(3054);
			match(LEFT_PAREN);
			setState(3067);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3055);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3056);
				match(LEFT_PAREN);
				setState(3057);
				column_name();
				setState(3062);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3058);
					match(COMMA);
					setState(3059);
					column_name();
					}
					}
					setState(3064);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3065);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3069);
			pivot_for_clause();
			setState(3070);
			unpivot_in_clause();
			setState(3071);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public List<Unpivot_in_elementsContext> unpivot_in_elements() {
			return getRuleContexts(Unpivot_in_elementsContext.class);
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return getRuleContext(Unpivot_in_elementsContext.class,i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_in_clause(this);
		}
	}

	public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_unpivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3073);
			match(IN);
			setState(3074);
			match(LEFT_PAREN);
			setState(3075);
			unpivot_in_elements();
			setState(3080);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3076);
				match(COMMA);
				setState(3077);
				unpivot_in_elements();
				}
				}
				setState(3082);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3083);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_elementsContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnpivot_in_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnpivot_in_elements(this);
		}
	}

	public final Unpivot_in_elementsContext unpivot_in_elements() throws RecognitionException {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_unpivot_in_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3097);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3085);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3086);
				match(LEFT_PAREN);
				setState(3087);
				column_name();
				setState(3092);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3088);
					match(COMMA);
					setState(3089);
					column_name();
					}
					}
					setState(3094);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3095);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3114);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3099);
				match(AS);
				setState(3112);
				switch (_input.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
					{
					setState(3100);
					constant();
					}
					break;
				case LEFT_PAREN:
					{
					setState(3101);
					match(LEFT_PAREN);
					setState(3102);
					constant();
					setState(3107);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3103);
						match(COMMA);
						setState(3104);
						constant();
						}
						}
						setState(3109);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3110);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hierarchical_query_clauseContext extends ParserRuleContext {
		public TerminalNode CONNECT() { return getToken(plsqlParser.CONNECT, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public Start_partContext start_part() {
			return getRuleContext(Start_partContext.class,0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterHierarchical_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitHierarchical_query_clause(this);
		}
	}

	public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_hierarchical_query_clause);
		try {
			setState(3133);
			switch (_input.LA(1)) {
			case CONNECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3116);
				match(CONNECT);
				setState(3117);
				match(BY);
				setState(3119);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
				case 1:
					{
					setState(3118);
					match(NOCYCLE);
					}
					break;
				}
				setState(3121);
				condition();
				setState(3123);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
				case 1:
					{
					setState(3122);
					start_part();
					}
					break;
				}
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(3125);
				start_part();
				setState(3126);
				match(CONNECT);
				setState(3127);
				match(BY);
				setState(3129);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
				case 1:
					{
					setState(3128);
					match(NOCYCLE);
					}
					break;
				}
				setState(3131);
				condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_partContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(plsqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStart_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStart_part(this);
		}
	}

	public final Start_partContext start_part() throws RecognitionException {
		Start_partContext _localctx = new Start_partContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_start_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3135);
			match(START);
			setState(3136);
			match(WITH);
			setState(3137);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(plsqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Group_by_elementsContext> group_by_elements() {
			return getRuleContexts(Group_by_elementsContext.class);
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return getRuleContext(Group_by_elementsContext.class,i);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGroup_by_clause(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_group_by_clause);
		try {
			int _alt;
			setState(3165);
			switch (_input.LA(1)) {
			case GROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3139);
				match(GROUP);
				setState(3140);
				match(BY);
				setState(3141);
				group_by_elements();
				setState(3146);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,349,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3142);
						match(COMMA);
						setState(3143);
						group_by_elements();
						}
						} 
					}
					setState(3148);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,349,_ctx);
				}
				setState(3150);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
				case 1:
					{
					setState(3149);
					having_clause();
					}
					break;
				}
				}
				break;
			case HAVING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3152);
				having_clause();
				setState(3163);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					setState(3153);
					match(GROUP);
					setState(3154);
					match(BY);
					setState(3155);
					group_by_elements();
					setState(3160);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,351,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3156);
							match(COMMA);
							setState(3157);
							group_by_elements();
							}
							} 
						}
						setState(3162);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,351,_ctx);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_elementsContext extends ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGroup_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGroup_by_elements(this);
		}
	}

	public final Group_by_elementsContext group_by_elements() throws RecognitionException {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_group_by_elements);
		try {
			setState(3170);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3167);
				grouping_sets_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3168);
				rollup_cube_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3169);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode ROLLUP() { return getToken(plsqlParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(plsqlParser.CUBE, 0); }
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollup_cube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollup_cube_clause(this);
		}
	}

	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_rollup_cube_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3172);
			_la = _input.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3173);
			match(LEFT_PAREN);
			setState(3174);
			grouping_sets_elements();
			setState(3179);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3175);
				match(COMMA);
				setState(3176);
				grouping_sets_elements();
				}
				}
				setState(3181);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3182);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(plsqlParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(plsqlParser.SETS, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGrouping_sets_clause(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_grouping_sets_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3184);
			match(GROUPING);
			setState(3185);
			match(SETS);
			setState(3186);
			match(LEFT_PAREN);
			setState(3187);
			grouping_sets_elements();
			setState(3192);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3188);
				match(COMMA);
				setState(3189);
				grouping_sets_elements();
				}
				}
				setState(3194);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3195);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_elementsContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGrouping_sets_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGrouping_sets_elements(this);
		}
	}

	public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_grouping_sets_elements);
		try {
			setState(3200);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3197);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3198);
				expression_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3199);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(plsqlParser.HAVING, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitHaving_clause(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3202);
			match(HAVING);
			setState(3203);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_clauseContext extends ParserRuleContext {
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public Main_modelContext main_model() {
			return getRuleContext(Main_modelContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return getRuleContext(Return_rows_clauseContext.class,0);
		}
		public List<Reference_modelContext> reference_model() {
			return getRuleContexts(Reference_modelContext.class);
		}
		public Reference_modelContext reference_model(int i) {
			return getRuleContext(Reference_modelContext.class,i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_clause(this);
		}
	}

	public final Model_clauseContext model_clause() throws RecognitionException {
		Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_model_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3205);
			match(MODEL);
			setState(3209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3206);
				cell_reference_options();
				}
				}
				setState(3211);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3213);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(3212);
				return_rows_clause();
				}
			}

			setState(3218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REFERENCE) {
				{
				{
				setState(3215);
				reference_model();
				}
				}
				setState(3220);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3221);
			main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_reference_optionsContext extends ParserRuleContext {
		public TerminalNode NAV() { return getToken(plsqlParser.NAV, 0); }
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public TerminalNode SINGLE() { return getToken(plsqlParser.SINGLE, 0); }
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_reference_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCell_reference_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCell_reference_options(this);
		}
	}

	public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_cell_reference_options);
		int _la;
		try {
			setState(3231);
			switch (_input.LA(1)) {
			case IGNORE:
			case KEEP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3223);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3224);
				match(NAV);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3225);
				match(UNIQUE);
				setState(3229);
				switch (_input.LA(1)) {
				case DIMENSION:
					{
					setState(3226);
					match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					setState(3227);
					match(SINGLE);
					setState(3228);
					match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_rows_clauseContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public TerminalNode UPDATED() { return getToken(plsqlParser.UPDATED, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_rows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReturn_rows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReturn_rows_clause(this);
		}
	}

	public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_return_rows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3233);
			match(RETURN);
			setState(3234);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3235);
			match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_modelContext extends ParserRuleContext {
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public Reference_model_nameContext reference_model_name() {
			return getRuleContext(Reference_model_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReference_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReference_model(this);
		}
	}

	public final Reference_modelContext reference_model() throws RecognitionException {
		Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_reference_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3237);
			match(REFERENCE);
			setState(3238);
			reference_model_name();
			setState(3239);
			match(ON);
			setState(3240);
			match(LEFT_PAREN);
			setState(3241);
			subquery();
			setState(3242);
			match(RIGHT_PAREN);
			setState(3243);
			model_column_clauses();
			setState(3247);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3244);
				cell_reference_options();
				}
				}
				setState(3249);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_modelContext extends ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return getRuleContext(Model_rules_clauseContext.class,0);
		}
		public TerminalNode MAIN() { return getToken(plsqlParser.MAIN, 0); }
		public Main_model_nameContext main_model_name() {
			return getRuleContext(Main_model_nameContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMain_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMain_model(this);
		}
	}

	public final Main_modelContext main_model() throws RecognitionException {
		Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_main_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3252);
			_la = _input.LA(1);
			if (_la==MAIN) {
				{
				setState(3250);
				match(MAIN);
				setState(3251);
				main_model_name();
				}
			}

			setState(3254);
			model_column_clauses();
			setState(3258);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3255);
				cell_reference_options();
				}
				}
				setState(3260);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3261);
			model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_clausesContext extends ParserRuleContext {
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Model_column_listContext> model_column_list() {
			return getRuleContexts(Model_column_listContext.class);
		}
		public Model_column_listContext model_column_list(int i) {
			return getRuleContext(Model_column_listContext.class,i);
		}
		public TerminalNode MEASURES() { return getToken(plsqlParser.MEASURES, 0); }
		public Model_column_partition_partContext model_column_partition_part() {
			return getRuleContext(Model_column_partition_partContext.class,0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_clauses(this);
		}
	}

	public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_model_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3264);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3263);
				model_column_partition_part();
				}
			}

			setState(3266);
			match(DIMENSION);
			setState(3267);
			match(BY);
			setState(3268);
			model_column_list();
			setState(3269);
			match(MEASURES);
			setState(3270);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_partition_partContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Model_column_listContext model_column_list() {
			return getRuleContext(Model_column_listContext.class,0);
		}
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_partition_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_partition_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_partition_part(this);
		}
	}

	public final Model_column_partition_partContext model_column_partition_part() throws RecognitionException {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_model_column_partition_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3272);
			match(PARTITION);
			setState(3273);
			match(BY);
			setState(3274);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_listContext extends ParserRuleContext {
		public List<Model_columnContext> model_column() {
			return getRuleContexts(Model_columnContext.class);
		}
		public Model_columnContext model_column(int i) {
			return getRuleContext(Model_columnContext.class,i);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column_list(this);
		}
	}

	public final Model_column_listContext model_column_list() throws RecognitionException {
		Model_column_listContext _localctx = new Model_column_listContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_model_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3276);
			match(LEFT_PAREN);
			setState(3277);
			model_column();
			setState(3282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3278);
				match(COMMA);
				setState(3279);
				model_column();
				}
				}
				setState(3284);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3285);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_columnContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_column(this);
		}
	}

	public final Model_columnContext model_column() throws RecognitionException {
		Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_model_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3287);
			expression();
			setState(3289);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3288);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_clauseContext extends ParserRuleContext {
		public List<Model_rules_elementContext> model_rules_element() {
			return getRuleContexts(Model_rules_elementContext.class);
		}
		public Model_rules_elementContext model_rules_element(int i) {
			return getRuleContext(Model_rules_elementContext.class,i);
		}
		public Model_rules_partContext model_rules_part() {
			return getRuleContext(Model_rules_partContext.class,0);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_clause(this);
		}
	}

	public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_model_rules_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3292);
			_la = _input.LA(1);
			if (_la==RULES) {
				{
				setState(3291);
				model_rules_part();
				}
			}

			setState(3294);
			match(LEFT_PAREN);
			setState(3295);
			model_rules_element();
			setState(3300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3296);
				match(COMMA);
				setState(3297);
				model_rules_element();
				}
				}
				setState(3302);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3303);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_partContext extends ParserRuleContext {
		public TerminalNode RULES() { return getToken(plsqlParser.RULES, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return getRuleContext(Model_iterate_clauseContext.class,0);
		}
		public TerminalNode AUTOMATIC() { return getToken(plsqlParser.AUTOMATIC, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(plsqlParser.SEQUENTIAL, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_part(this);
		}
	}

	public final Model_rules_partContext model_rules_part() throws RecognitionException {
		Model_rules_partContext _localctx = new Model_rules_partContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_model_rules_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3305);
			match(RULES);
			setState(3311);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(3306);
				match(UPDATE);
				}
				break;
			case UPSERT:
				{
				setState(3307);
				match(UPSERT);
				setState(3309);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3308);
					match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3315);
			_la = _input.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				setState(3313);
				_la = _input.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3314);
				match(ORDER);
				}
			}

			setState(3318);
			_la = _input.LA(1);
			if (_la==ITERATE) {
				{
				setState(3317);
				model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_elementContext extends ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_rules_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_rules_element(this);
		}
	}

	public final Model_rules_elementContext model_rules_element() throws RecognitionException {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_model_rules_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3325);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
			case 1:
				{
				setState(3320);
				match(UPDATE);
				}
				break;
			case 2:
				{
				setState(3321);
				match(UPSERT);
				setState(3323);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
				case 1:
					{
					setState(3322);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
			setState(3327);
			cell_assignment();
			setState(3329);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3328);
				order_by_clause();
				}
			}

			setState(3331);
			match(EQUALS_OP);
			setState(3332);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_assignmentContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCell_assignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCell_assignment(this);
		}
	}

	public final Cell_assignmentContext cell_assignment() throws RecognitionException {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_cell_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3334);
			model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_iterate_clauseContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(plsqlParser.ITERATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Until_partContext until_part() {
			return getRuleContext(Until_partContext.class,0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_iterate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_iterate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_iterate_clause(this);
		}
	}

	public final Model_iterate_clauseContext model_iterate_clause() throws RecognitionException {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_model_iterate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3336);
			match(ITERATE);
			setState(3337);
			match(LEFT_PAREN);
			setState(3338);
			expression();
			setState(3339);
			match(RIGHT_PAREN);
			setState(3341);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3340);
				until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Until_partContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(plsqlParser.UNTIL, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Until_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_until_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUntil_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUntil_part(this);
		}
	}

	public final Until_partContext until_part() throws RecognitionException {
		Until_partContext _localctx = new Until_partContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_until_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3343);
			match(UNTIL);
			setState(3344);
			match(LEFT_PAREN);
			setState(3345);
			condition();
			setState(3346);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public List<Order_by_elementsContext> order_by_elements() {
			return getRuleContexts(Order_by_elementsContext.class);
		}
		public Order_by_elementsContext order_by_elements(int i) {
			return getRuleContext(Order_by_elementsContext.class,i);
		}
		public TerminalNode SIBLINGS() { return getToken(plsqlParser.SIBLINGS, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOrder_by_clause(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3348);
			match(ORDER);
			setState(3350);
			_la = _input.LA(1);
			if (_la==SIBLINGS) {
				{
				setState(3349);
				match(SIBLINGS);
				}
			}

			setState(3352);
			match(BY);
			setState(3353);
			order_by_elements();
			setState(3358);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,380,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3354);
					match(COMMA);
					setState(3355);
					order_by_elements();
					}
					} 
				}
				setState(3360);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,380,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(plsqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(plsqlParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOrder_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOrder_by_elements(this);
		}
	}

	public final Order_by_elementsContext order_by_elements() throws RecognitionException {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_order_by_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3361);
			expression();
			setState(3363);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				setState(3362);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(3367);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				{
				setState(3365);
				match(NULLS);
				setState(3366);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public For_update_of_partContext for_update_of_part() {
			return getRuleContext(For_update_of_partContext.class,0);
		}
		public For_update_optionsContext for_update_options() {
			return getRuleContext(For_update_optionsContext.class,0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_clause(this);
		}
	}

	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_for_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3369);
			match(FOR);
			setState(3370);
			match(UPDATE);
			setState(3372);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(3371);
				for_update_of_part();
				}
			}

			setState(3375);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
			case 1:
				{
				setState(3374);
				for_update_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_of_partContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public For_update_of_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_of_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_of_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_of_part(this);
		}
	}

	public final For_update_of_partContext for_update_of_part() throws RecognitionException {
		For_update_of_partContext _localctx = new For_update_of_partContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_for_update_of_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3377);
			match(OF);
			setState(3378);
			column_name();
			setState(3383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3379);
				match(COMMA);
				setState(3380);
				column_name();
				}
				}
				setState(3385);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_optionsContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(plsqlParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(plsqlParser.LOCKED, 0); }
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_update_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_update_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_update_options(this);
		}
	}

	public final For_update_optionsContext for_update_options() throws RecognitionException {
		For_update_optionsContext _localctx = new For_update_optionsContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_for_update_options);
		try {
			setState(3391);
			switch (_input.LA(1)) {
			case SKIP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3386);
				match(SKIP_);
				setState(3387);
				match(LOCKED);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3388);
				match(NOWAIT);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3389);
				match(WAIT);
				setState(3390);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpdate_statement(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3393);
			match(UPDATE);
			setState(3394);
			general_table_ref();
			setState(3395);
			update_set_clause();
			setState(3397);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3396);
				where_clause();
				}
			}

			setState(3400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				setState(3399);
				static_returning_clause();
				}
				break;
			}
			setState(3403);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				{
				setState(3402);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_set_clauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public List<Column_based_update_set_clauseContext> column_based_update_set_clause() {
			return getRuleContexts(Column_based_update_set_clauseContext.class);
		}
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return getRuleContext(Column_based_update_set_clauseContext.class,i);
		}
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUpdate_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUpdate_set_clause(this);
		}
	}

	public final Update_set_clauseContext update_set_clause() throws RecognitionException {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_update_set_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3405);
			match(SET);
			setState(3421);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				setState(3406);
				column_based_update_set_clause();
				setState(3411);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3407);
					match(COMMA);
					setState(3408);
					column_based_update_set_clause();
					}
					}
					setState(3413);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(3414);
				match(VALUE);
				setState(3415);
				match(LEFT_PAREN);
				setState(3416);
				id();
				setState(3417);
				match(RIGHT_PAREN);
				setState(3418);
				match(EQUALS_OP);
				setState(3419);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_based_update_set_clauseContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_based_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_based_update_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_based_update_set_clause(this);
		}
	}

	public final Column_based_update_set_clauseContext column_based_update_set_clause() throws RecognitionException {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_column_based_update_set_clause);
		int _la;
		try {
			setState(3440);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3423);
				column_name();
				setState(3424);
				match(EQUALS_OP);
				setState(3425);
				expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3427);
				match(LEFT_PAREN);
				setState(3428);
				column_name();
				setState(3433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3429);
					match(COMMA);
					setState(3430);
					column_name();
					}
					}
					setState(3435);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3436);
				match(RIGHT_PAREN);
				setState(3437);
				match(EQUALS_OP);
				setState(3438);
				subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDelete_statement(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3442);
			match(DELETE);
			setState(3444);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3443);
				match(FROM);
				}
			}

			setState(3446);
			general_table_ref();
			setState(3448);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3447);
				where_clause();
				}
			}

			setState(3451);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				setState(3450);
				static_returning_clause();
				}
				break;
			}
			setState(3454);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				setState(3453);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInsert_statement(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3456);
			match(INSERT);
			setState(3459);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(3457);
				single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(3458);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_table_insertContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSingle_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSingle_table_insert(this);
		}
	}

	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_single_table_insert);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3461);
			insert_into_clause();
			setState(3467);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(3462);
				values_clause();
				setState(3464);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
				case 1:
					{
					setState(3463);
					static_returning_clause();
					}
					break;
				}
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(3466);
				select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3470);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
			case 1:
				{
				setState(3469);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_insertContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return getRuleContext(Conditional_insert_clauseContext.class,0);
		}
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_table_insert(this);
		}
	}

	public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_multi_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3479);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
			case 1:
				{
				setState(3472);
				match(ALL);
				setState(3474); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3473);
					multi_table_element();
					}
					}
					setState(3476); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				setState(3478);
				conditional_insert_clause();
				}
				break;
			}
			setState(3481);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_elementContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_table_element(this);
		}
	}

	public final Multi_table_elementContext multi_table_element() throws RecognitionException {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_multi_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3483);
			insert_into_clause();
			setState(3485);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(3484);
				values_clause();
				}
			}

			setState(3488);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3487);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_clauseContext extends ParserRuleContext {
		public List<Conditional_insert_when_partContext> conditional_insert_when_part() {
			return getRuleContexts(Conditional_insert_when_partContext.class);
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return getRuleContext(Conditional_insert_when_partContext.class,i);
		}
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return getRuleContext(Conditional_insert_else_partContext.class,0);
		}
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_clause(this);
		}
	}

	public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_conditional_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3491);
			_la = _input.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				setState(3490);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(3494); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3493);
				conditional_insert_when_part();
				}
				}
				setState(3496); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(3499);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3498);
				conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_when_part(this);
		}
	}

	public final Conditional_insert_when_partContext conditional_insert_when_part() throws RecognitionException {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_conditional_insert_when_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3501);
			match(WHEN);
			setState(3502);
			condition();
			setState(3503);
			match(THEN);
			setState(3505); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3504);
				multi_table_element();
				}
				}
				setState(3507); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConditional_insert_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConditional_insert_else_part(this);
		}
	}

	public final Conditional_insert_else_partContext conditional_insert_else_part() throws RecognitionException {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_conditional_insert_else_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3509);
			match(ELSE);
			setState(3511); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3510);
				multi_table_element();
				}
				}
				setState(3513); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInsert_into_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInsert_into_clause(this);
		}
	}

	public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_insert_into_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3515);
			match(INTO);
			setState(3516);
			general_table_ref();
			setState(3528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				setState(3517);
				match(LEFT_PAREN);
				setState(3518);
				column_name();
				setState(3523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3519);
					match(COMMA);
					setState(3520);
					column_name();
					}
					}
					setState(3525);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3526);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Collection_assoc_expressionContext collection_assoc_expression() {
			return getRuleContext(Collection_assoc_expressionContext.class,0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitValues_clause(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_values_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3530);
			match(VALUES);
			setState(3534);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				setState(3531);
				expression_list();
				}
				break;
			case 2:
				{
				setState(3532);
				record_name();
				}
				break;
			case 3:
				{
				setState(3533);
				collection_assoc_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(plsqlParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public Selected_tableviewContext selected_tableview() {
			return getRuleContext(Selected_tableviewContext.class,0);
		}
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_statement(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3536);
			match(MERGE);
			setState(3537);
			match(INTO);
			setState(3538);
			tableview_name();
			setState(3540);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3539);
				table_alias();
				}
			}

			setState(3542);
			match(USING);
			setState(3543);
			selected_tableview();
			setState(3544);
			match(ON);
			setState(3545);
			match(LEFT_PAREN);
			setState(3546);
			condition();
			setState(3547);
			match(RIGHT_PAREN);
			setState(3556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				setState(3548);
				merge_update_clause();
				setState(3550);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3549);
					merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(3552);
				merge_insert_clause();
				setState(3554);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3553);
					merge_update_clause();
					}
				}

				}
				break;
			}
			setState(3559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				setState(3558);
				error_logging_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public List<Merge_elementContext> merge_element() {
			return getRuleContexts(Merge_elementContext.class);
		}
		public Merge_elementContext merge_element(int i) {
			return getRuleContext(Merge_elementContext.class,i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext merge_update_delete_part() {
			return getRuleContext(Merge_update_delete_partContext.class,0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_update_clause(this);
		}
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_merge_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3561);
			match(WHEN);
			setState(3562);
			match(MATCHED);
			setState(3563);
			match(THEN);
			setState(3564);
			match(UPDATE);
			setState(3565);
			match(SET);
			setState(3566);
			merge_element();
			setState(3571);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3567);
				match(COMMA);
				setState(3568);
				merge_element();
				}
				}
				setState(3573);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3575);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3574);
				where_clause();
				}
			}

			setState(3578);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				setState(3577);
				merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_elementContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_element(this);
		}
	}

	public final Merge_elementContext merge_element() throws RecognitionException {
		Merge_elementContext _localctx = new Merge_elementContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_merge_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3580);
			column_name();
			setState(3581);
			match(EQUALS_OP);
			setState(3582);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_delete_partContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(plsqlParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_delete_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_update_delete_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_update_delete_part(this);
		}
	}

	public final Merge_update_delete_partContext merge_update_delete_part() throws RecognitionException {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_merge_update_delete_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3584);
			match(DELETE);
			setState(3585);
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public TerminalNode INSERT() { return getToken(plsqlParser.INSERT, 0); }
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMerge_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMerge_insert_clause(this);
		}
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3587);
			match(WHEN);
			setState(3588);
			match(NOT);
			setState(3589);
			match(MATCHED);
			setState(3590);
			match(THEN);
			setState(3591);
			match(INSERT);
			setState(3603);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3592);
				match(LEFT_PAREN);
				setState(3593);
				column_name();
				setState(3598);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3594);
					match(COMMA);
					setState(3595);
					column_name();
					}
					}
					setState(3600);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3601);
				match(RIGHT_PAREN);
				}
			}

			setState(3605);
			match(VALUES);
			setState(3606);
			expression_list();
			setState(3608);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3607);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_tableviewContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_tableview; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSelected_tableview(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSelected_tableview(this);
		}
	}

	public final Selected_tableviewContext selected_tableview() throws RecognitionException {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_selected_tableview);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3615);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3610);
				tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3611);
				match(LEFT_PAREN);
				setState(3612);
				select_statement();
				setState(3613);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3618);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3617);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_statementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(plsqlParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public List<Lock_table_elementContext> lock_table_element() {
			return getRuleContexts(Lock_table_elementContext.class);
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return getRuleContext(Lock_table_elementContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(plsqlParser.MODE, 0); }
		public Wait_nowait_partContext wait_nowait_part() {
			return getRuleContext(Wait_nowait_partContext.class,0);
		}
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_table_statement(this);
		}
	}

	public final Lock_table_statementContext lock_table_statement() throws RecognitionException {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_lock_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3620);
			match(LOCK);
			setState(3621);
			match(TABLE);
			setState(3622);
			lock_table_element();
			setState(3627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3623);
				match(COMMA);
				setState(3624);
				lock_table_element();
				}
				}
				setState(3629);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3630);
			match(IN);
			setState(3631);
			lock_mode();
			setState(3632);
			match(MODE);
			setState(3634);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				setState(3633);
				wait_nowait_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Wait_nowait_partContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(plsqlParser.NOWAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wait_nowait_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWait_nowait_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWait_nowait_part(this);
		}
	}

	public final Wait_nowait_partContext wait_nowait_part() throws RecognitionException {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_wait_nowait_part);
		try {
			setState(3639);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3636);
				match(WAIT);
				setState(3637);
				expression();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3638);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_elementContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_table_element(this);
		}
	}

	public final Lock_table_elementContext lock_table_element() throws RecognitionException {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_lock_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3641);
			tableview_name();
			setState(3643);
			_la = _input.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				setState(3642);
				partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public TerminalNode SHARE() { return getToken(plsqlParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(plsqlParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(plsqlParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLock_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLock_mode(this);
		}
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_lock_mode);
		int _la;
		try {
			setState(3657);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3645);
				match(ROW);
				setState(3646);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3647);
				match(ROW);
				setState(3648);
				match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3649);
				match(SHARE);
				setState(3651);
				_la = _input.LA(1);
				if (_la==UPDATE) {
					{
					setState(3650);
					match(UPDATE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3653);
				match(SHARE);
				setState(3654);
				match(ROW);
				setState(3655);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3656);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_table_refContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGeneral_table_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGeneral_table_ref(this);
		}
	}

	public final General_table_refContext general_table_ref() throws RecognitionException {
		General_table_refContext _localctx = new General_table_refContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_general_table_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3665);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				{
				setState(3659);
				dml_table_expression_clause();
				}
				break;
			case 2:
				{
				setState(3660);
				match(ONLY);
				setState(3661);
				match(LEFT_PAREN);
				setState(3662);
				dml_table_expression_clause();
				setState(3663);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3668);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				{
				setState(3667);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_returning_clauseContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStatic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStatic_returning_clause(this);
		}
	}

	public final Static_returning_clauseContext static_returning_clause() throws RecognitionException {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_static_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3670);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3671);
			expression();
			setState(3676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3672);
				match(COMMA);
				setState(3673);
				expression();
				}
				}
				setState(3678);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3679);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOG() { return getToken(plsqlParser.LOG, 0); }
		public TerminalNode ERRORS() { return getToken(plsqlParser.ERRORS, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return getRuleContext(Error_logging_into_partContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return getRuleContext(Error_logging_reject_partContext.class,0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_clause(this);
		}
	}

	public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_error_logging_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3681);
			match(LOG);
			setState(3682);
			match(ERRORS);
			setState(3684);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
			case 1:
				{
				setState(3683);
				error_logging_into_part();
				}
				break;
			}
			setState(3687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				setState(3686);
				expression_wrapper();
				}
				break;
			}
			setState(3690);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				setState(3689);
				error_logging_reject_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_into_partContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_into_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_into_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_into_part(this);
		}
	}

	public final Error_logging_into_partContext error_logging_into_part() throws RecognitionException {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_error_logging_into_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3692);
			match(INTO);
			setState(3693);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_reject_partContext extends ParserRuleContext {
		public TerminalNode REJECT() { return getToken(plsqlParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public TerminalNode UNLIMITED() { return getToken(plsqlParser.UNLIMITED, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_reject_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterError_logging_reject_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitError_logging_reject_part(this);
		}
	}

	public final Error_logging_reject_partContext error_logging_reject_part() throws RecognitionException {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_error_logging_reject_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3695);
			match(REJECT);
			setState(3696);
			match(LIMIT);
			setState(3699);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(3697);
				match(UNLIMITED);
				}
				break;
			case 2:
				{
				setState(3698);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_table_expression_clauseContext extends ParserRuleContext {
		public Table_collection_expressionContext table_collection_expression() {
			return getRuleContext(Table_collection_expressionContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDml_table_expression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDml_table_expression_clause(this);
		}
	}

	public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_dml_table_expression_clause);
		int _la;
		try {
			setState(3713);
			switch (_input.LA(1)) {
			case TABLE:
			case THE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3701);
				table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3702);
				match(LEFT_PAREN);
				setState(3703);
				select_statement();
				setState(3705);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3704);
					subquery_restriction_clause();
					}
				}

				setState(3707);
				match(RIGHT_PAREN);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(3709);
				tableview_name();
				setState(3711);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
				case 1:
					{
					setState(3710);
					sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_collection_expressionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(plsqlParser.TABLE, 0); }
		public TerminalNode THE() { return getToken(plsqlParser.THE, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_collection_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_collection_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_collection_expression(this);
		}
	}

	public final Table_collection_expressionContext table_collection_expression() throws RecognitionException {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_table_collection_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3715);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3728);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
			case 1:
				{
				setState(3716);
				match(LEFT_PAREN);
				setState(3717);
				subquery();
				setState(3718);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(3720);
				match(LEFT_PAREN);
				setState(3721);
				expression();
				setState(3722);
				match(RIGHT_PAREN);
				setState(3726);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
				case 1:
					{
					setState(3723);
					match(LEFT_PAREN);
					setState(3724);
					match(PLUS_SIGN);
					setState(3725);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_restriction_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode CHECK() { return getToken(plsqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(plsqlParser.OPTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_restriction_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSubquery_restriction_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSubquery_restriction_clause(this);
		}
	}

	public final Subquery_restriction_clauseContext subquery_restriction_clause() throws RecognitionException {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_subquery_restriction_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3730);
			match(WITH);
			setState(3739);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(3731);
				match(READ);
				setState(3732);
				match(ONLY);
				}
				break;
			case CHECK:
				{
				setState(3733);
				match(CHECK);
				setState(3734);
				match(OPTION);
				setState(3737);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(3735);
					match(CONSTRAINT);
					setState(3736);
					constraint_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_clauseContext extends ParserRuleContext {
		public TerminalNode SAMPLE() { return getToken(plsqlParser.SAMPLE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BLOCK() { return getToken(plsqlParser.BLOCK, 0); }
		public Seed_partContext seed_part() {
			return getRuleContext(Seed_partContext.class,0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSample_clause(this);
		}
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3741);
			match(SAMPLE);
			setState(3743);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(3742);
				match(BLOCK);
				}
			}

			setState(3745);
			match(LEFT_PAREN);
			setState(3746);
			expression();
			setState(3749);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3747);
				match(COMMA);
				setState(3748);
				expression();
				}
			}

			setState(3751);
			match(RIGHT_PAREN);
			setState(3753);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				{
				setState(3752);
				seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seed_partContext extends ParserRuleContext {
		public TerminalNode SEED() { return getToken(plsqlParser.SEED, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Seed_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seed_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSeed_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSeed_part(this);
		}
	}

	public final Seed_partContext seed_part() throws RecognitionException {
		Seed_partContext _localctx = new Seed_partContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_seed_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3755);
			match(SEED);
			setState(3756);
			match(LEFT_PAREN);
			setState(3757);
			expression();
			setState(3758);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_expressionContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode PERCENT_NOTFOUND() { return getToken(plsqlParser.PERCENT_NOTFOUND, 0); }
		public TerminalNode PERCENT_FOUND() { return getToken(plsqlParser.PERCENT_FOUND, 0); }
		public TerminalNode PERCENT_ISOPEN() { return getToken(plsqlParser.PERCENT_ISOPEN, 0); }
		public Sql_cursor_expressionContext sql_cursor_expression() {
			return getRuleContext(Sql_cursor_expressionContext.class,0);
		}
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_expression(this);
		}
	}

	public final Cursor_expressionContext cursor_expression() throws RecognitionException {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_cursor_expression);
		try {
			setState(3775);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3760);
				match(CURSOR);
				setState(3761);
				match(LEFT_PAREN);
				setState(3762);
				subquery();
				setState(3763);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3765);
				cursor_name();
				setState(3766);
				match(PERCENT_NOTFOUND);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3768);
				cursor_name();
				setState(3769);
				match(PERCENT_FOUND);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3771);
				cursor_name();
				setState(3772);
				match(PERCENT_ISOPEN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3774);
				sql_cursor_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_cursor_expressionContext extends ParserRuleContext {
		public TerminalNode SQL_PERCENT_ROWCOUNT() { return getToken(plsqlParser.SQL_PERCENT_ROWCOUNT, 0); }
		public Sql_cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_cursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_cursor_expression(this);
		}
	}

	public final Sql_cursor_expressionContext sql_cursor_expression() throws RecognitionException {
		Sql_cursor_expressionContext _localctx = new Sql_cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_sql_cursor_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3777);
			match(SQL_PERCENT_ROWCOUNT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_assoc_expressionContext extends ParserRuleContext {
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Collection_assoc_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_assoc_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCollection_assoc_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCollection_assoc_expression(this);
		}
	}

	public final Collection_assoc_expressionContext collection_assoc_expression() throws RecognitionException {
		Collection_assoc_expressionContext _localctx = new Collection_assoc_expressionContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_collection_assoc_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3779);
			collection_name();
			setState(3780);
			match(LEFT_PAREN);
			setState(3781);
			expression();
			setState(3782);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_type_expressionContext extends ParserRuleContext {
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(plsqlParser.EXISTS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Collection_assoc_expressionContext collection_assoc_expression() {
			return getRuleContext(Collection_assoc_expressionContext.class,0);
		}
		public TerminalNode PRIOR() { return getToken(plsqlParser.PRIOR, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(plsqlParser.NEXT, 0); }
		public TerminalNode COUNT() { return getToken(plsqlParser.COUNT, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public Collection_type_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_type_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCollection_type_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCollection_type_expression(this);
		}
	}

	public final Collection_type_expressionContext collection_type_expression() throws RecognitionException {
		Collection_type_expressionContext _localctx = new Collection_type_expressionContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_collection_type_expression);
		try {
			setState(3814);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3784);
				collection_name();
				setState(3785);
				match(PERIOD);
				setState(3786);
				match(EXISTS);
				setState(3787);
				match(LEFT_PAREN);
				setState(3788);
				expression();
				setState(3789);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3791);
				collection_assoc_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3792);
				collection_name();
				setState(3793);
				match(PERIOD);
				setState(3794);
				match(PRIOR);
				setState(3795);
				match(LEFT_PAREN);
				setState(3796);
				numeric();
				setState(3797);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3799);
				collection_name();
				setState(3800);
				match(PERIOD);
				setState(3801);
				match(NEXT);
				setState(3802);
				match(LEFT_PAREN);
				setState(3803);
				numeric();
				setState(3804);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3806);
				collection_name();
				setState(3807);
				match(PERIOD);
				setState(3808);
				match(COUNT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3810);
				collection_name();
				setState(3811);
				match(PERIOD);
				setState(3812);
				match(LIMIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression_list(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3816);
			match(LEFT_PAREN);
			setState(3818);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NOT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PRIOR - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TO_CHAR - 389)) | (1L << (TO_NUMBER - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUE - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (UNSIGNED_INTEGER - 453)) | (1L << (APPROXIMATE_NUM_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (LEFT_PAREN - 453)) | (1L << (PLUS_SIGN - 453)) | (1L << (MINUS_SIGN - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3817);
				expression();
				}
			}

			setState(3824);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3820);
				match(COMMA);
				setState(3821);
				expression();
				}
				}
				setState(3826);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3827);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCondition(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3829);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_wrapperContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Condition_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCondition_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCondition_wrapper(this);
		}
	}

	public final Condition_wrapperContext condition_wrapper() throws RecognitionException {
		Condition_wrapperContext _localctx = new Condition_wrapperContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_condition_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3831);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Logical_and_expressionContext logical_and_expression() {
			return getRuleContext(Logical_and_expressionContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(plsqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(plsqlParser.OR, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3833);
			logical_and_expression();
			}
			setState(3838);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,454,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3834);
					match(OR);
					setState(3835);
					expression();
					}
					} 
				}
				setState(3840);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,454,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_wrapperContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression_wrapper(this);
		}
	}

	public final Expression_wrapperContext expression_wrapper() throws RecognitionException {
		Expression_wrapperContext _localctx = new Expression_wrapperContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_expression_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3841);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logical_and_expressionContext extends ParserRuleContext {
		public List<Negated_expressionContext> negated_expression() {
			return getRuleContexts(Negated_expressionContext.class);
		}
		public Negated_expressionContext negated_expression(int i) {
			return getRuleContext(Negated_expressionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(plsqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(plsqlParser.AND, i);
		}
		public Logical_and_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_and_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLogical_and_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLogical_and_expression(this);
		}
	}

	public final Logical_and_expressionContext logical_and_expression() throws RecognitionException {
		Logical_and_expressionContext _localctx = new Logical_and_expressionContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_logical_and_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3843);
			negated_expression();
			setState(3848);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,455,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3844);
					match(AND);
					setState(3845);
					negated_expression();
					}
					} 
				}
				setState(3850);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,455,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Negated_expressionContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Negated_expressionContext negated_expression() {
			return getRuleContext(Negated_expressionContext.class,0);
		}
		public Equality_expressionContext equality_expression() {
			return getRuleContext(Equality_expressionContext.class,0);
		}
		public Negated_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_negated_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNegated_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNegated_expression(this);
		}
	}

	public final Negated_expressionContext negated_expression() throws RecognitionException {
		Negated_expressionContext _localctx = new Negated_expressionContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_negated_expression);
		try {
			setState(3854);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3851);
				match(NOT);
				setState(3852);
				negated_expression();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_NUMBER:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3853);
				equality_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Equality_expressionContext extends ParserRuleContext {
		public Multiset_expressionContext multiset_expression() {
			return getRuleContext(Multiset_expressionContext.class,0);
		}
		public List<TerminalNode> IS() { return getTokens(plsqlParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(plsqlParser.IS, i);
		}
		public List<TerminalNode> NULL() { return getTokens(plsqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(plsqlParser.NULL, i);
		}
		public List<TerminalNode> NAN() { return getTokens(plsqlParser.NAN); }
		public TerminalNode NAN(int i) {
			return getToken(plsqlParser.NAN, i);
		}
		public List<TerminalNode> PRESENT() { return getTokens(plsqlParser.PRESENT); }
		public TerminalNode PRESENT(int i) {
			return getToken(plsqlParser.PRESENT, i);
		}
		public List<TerminalNode> INFINITE() { return getTokens(plsqlParser.INFINITE); }
		public TerminalNode INFINITE(int i) {
			return getToken(plsqlParser.INFINITE, i);
		}
		public List<TerminalNode> A_LETTER() { return getTokens(plsqlParser.A_LETTER); }
		public TerminalNode A_LETTER(int i) {
			return getToken(plsqlParser.A_LETTER, i);
		}
		public List<TerminalNode> SET() { return getTokens(plsqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(plsqlParser.SET, i);
		}
		public List<TerminalNode> EMPTY() { return getTokens(plsqlParser.EMPTY); }
		public TerminalNode EMPTY(int i) {
			return getToken(plsqlParser.EMPTY, i);
		}
		public List<TerminalNode> OF() { return getTokens(plsqlParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(plsqlParser.OF, i);
		}
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public List<TerminalNode> NOT() { return getTokens(plsqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(plsqlParser.NOT, i);
		}
		public List<TerminalNode> TYPE() { return getTokens(plsqlParser.TYPE); }
		public TerminalNode TYPE(int i) {
			return getToken(plsqlParser.TYPE, i);
		}
		public List<TerminalNode> ONLY() { return getTokens(plsqlParser.ONLY); }
		public TerminalNode ONLY(int i) {
			return getToken(plsqlParser.ONLY, i);
		}
		public Cursor_expressionContext cursor_expression() {
			return getRuleContext(Cursor_expressionContext.class,0);
		}
		public Collection_type_expressionContext collection_type_expression() {
			return getRuleContext(Collection_type_expressionContext.class,0);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equality_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterEquality_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitEquality_expression(this);
		}
	}

	public final Equality_expressionContext equality_expression() throws RecognitionException {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_equality_expression);
		int _la;
		try {
			int _alt;
			setState(3895);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3856);
				multiset_expression();
				setState(3890);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,462,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3857);
						match(IS);
						setState(3859);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(3858);
							match(NOT);
							}
						}

						setState(3886);
						switch (_input.LA(1)) {
						case NULL:
							{
							setState(3861);
							match(NULL);
							}
							break;
						case NAN:
							{
							setState(3862);
							match(NAN);
							}
							break;
						case PRESENT:
							{
							setState(3863);
							match(PRESENT);
							}
							break;
						case INFINITE:
							{
							setState(3864);
							match(INFINITE);
							}
							break;
						case A_LETTER:
							{
							setState(3865);
							match(A_LETTER);
							setState(3866);
							match(SET);
							}
							break;
						case EMPTY:
							{
							setState(3867);
							match(EMPTY);
							}
							break;
						case OF:
							{
							setState(3868);
							match(OF);
							setState(3870);
							_la = _input.LA(1);
							if (_la==TYPE) {
								{
								setState(3869);
								match(TYPE);
								}
							}

							setState(3872);
							match(LEFT_PAREN);
							setState(3874);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
							case 1:
								{
								setState(3873);
								match(ONLY);
								}
								break;
							}
							setState(3876);
							type_spec();
							setState(3881);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==COMMA) {
								{
								{
								setState(3877);
								match(COMMA);
								setState(3878);
								type_spec();
								}
								}
								setState(3883);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							setState(3884);
							match(RIGHT_PAREN);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					setState(3892);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,462,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3893);
				cursor_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3894);
				collection_type_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_expressionContext extends ParserRuleContext {
		public Relational_expressionContext relational_expression() {
			return getRuleContext(Relational_expressionContext.class,0);
		}
		public Multiset_typeContext multiset_type() {
			return getRuleContext(Multiset_typeContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMultiset_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMultiset_expression(this);
		}
	}

	public final Multiset_expressionContext multiset_expression() throws RecognitionException {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_multiset_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3897);
			relational_expression();
			setState(3904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				{
				setState(3898);
				multiset_type();
				setState(3900);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(3899);
					match(OF);
					}
				}

				setState(3902);
				concatenation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode SUBMULTISET() { return getToken(plsqlParser.SUBMULTISET, 0); }
		public Multiset_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMultiset_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMultiset_type(this);
		}
	}

	public final Multiset_typeContext multiset_type() throws RecognitionException {
		Multiset_typeContext _localctx = new Multiset_typeContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_multiset_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3906);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_expressionContext extends ParserRuleContext {
		public List<Compound_expressionContext> compound_expression() {
			return getRuleContexts(Compound_expressionContext.class);
		}
		public Compound_expressionContext compound_expression(int i) {
			return getRuleContext(Compound_expressionContext.class,i);
		}
		public List<Not_equal_opContext> not_equal_op() {
			return getRuleContexts(Not_equal_opContext.class);
		}
		public Not_equal_opContext not_equal_op(int i) {
			return getRuleContext(Not_equal_opContext.class,i);
		}
		public List<Less_than_or_equals_opContext> less_than_or_equals_op() {
			return getRuleContexts(Less_than_or_equals_opContext.class);
		}
		public Less_than_or_equals_opContext less_than_or_equals_op(int i) {
			return getRuleContext(Less_than_or_equals_opContext.class,i);
		}
		public List<Greater_than_or_equals_opContext> greater_than_or_equals_op() {
			return getRuleContexts(Greater_than_or_equals_opContext.class);
		}
		public Greater_than_or_equals_opContext greater_than_or_equals_op(int i) {
			return getRuleContext(Greater_than_or_equals_opContext.class,i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRelational_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRelational_expression(this);
		}
	}

	public final Relational_expressionContext relational_expression() throws RecognitionException {
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_relational_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3908);
			compound_expression();
			setState(3920);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,467,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3915);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
					case 1:
						{
						setState(3909);
						match(EQUALS_OP);
						}
						break;
					case 2:
						{
						setState(3910);
						not_equal_op();
						}
						break;
					case 3:
						{
						setState(3911);
						match(LESS_THAN_OP);
						}
						break;
					case 4:
						{
						setState(3912);
						match(GREATER_THAN_OP);
						}
						break;
					case 5:
						{
						setState(3913);
						less_than_or_equals_op();
						}
						break;
					case 6:
						{
						setState(3914);
						greater_than_or_equals_op();
						}
						break;
					}
					setState(3917);
					compound_expression();
					}
					} 
				}
				setState(3922);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,467,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_expressionContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public In_elementsContext in_elements() {
			return getRuleContext(In_elementsContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public Between_elementsContext between_elements() {
			return getRuleContext(Between_elementsContext.class,0);
		}
		public Like_typeContext like_type() {
			return getRuleContext(Like_typeContext.class,0);
		}
		public TerminalNode NOT() { return getToken(plsqlParser.NOT, 0); }
		public Like_escape_partContext like_escape_part() {
			return getRuleContext(Like_escape_partContext.class,0);
		}
		public Compound_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCompound_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCompound_expression(this);
		}
	}

	public final Compound_expressionContext compound_expression() throws RecognitionException {
		Compound_expressionContext _localctx = new Compound_expressionContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_compound_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3923);
			concatenation();
			setState(3938);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				{
				setState(3925);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3924);
					match(NOT);
					}
				}

				setState(3936);
				switch (_input.LA(1)) {
				case IN:
					{
					setState(3927);
					match(IN);
					setState(3928);
					in_elements();
					}
					break;
				case BETWEEN:
					{
					setState(3929);
					match(BETWEEN);
					setState(3930);
					between_elements();
					}
					break;
				case LIKE:
				case LIKE2:
				case LIKE4:
				case LIKEC:
					{
					setState(3931);
					like_type();
					setState(3932);
					concatenation();
					setState(3934);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
					case 1:
						{
						setState(3933);
						like_escape_part();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_typeContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(plsqlParser.LIKE, 0); }
		public TerminalNode LIKEC() { return getToken(plsqlParser.LIKEC, 0); }
		public TerminalNode LIKE2() { return getToken(plsqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(plsqlParser.LIKE4, 0); }
		public Like_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLike_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLike_type(this);
		}
	}

	public final Like_typeContext like_type() throws RecognitionException {
		Like_typeContext _localctx = new Like_typeContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_like_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3940);
			_la = _input.LA(1);
			if ( !(((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & ((1L << (LIKE - 205)) | (1L << (LIKE2 - 205)) | (1L << (LIKE4 - 205)) | (1L << (LIKEC - 205)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_escape_partContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(plsqlParser.ESCAPE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Like_escape_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_escape_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLike_escape_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLike_escape_part(this);
		}
	}

	public final Like_escape_partContext like_escape_part() throws RecognitionException {
		Like_escape_partContext _localctx = new Like_escape_partContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_like_escape_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3942);
			match(ESCAPE);
			setState(3943);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_elementsContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public In_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIn_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIn_elements(this);
		}
	}

	public final In_elementsContext in_elements() throws RecognitionException {
		In_elementsContext _localctx = new In_elementsContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_in_elements);
		int _la;
		try {
			setState(3963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3945);
				match(LEFT_PAREN);
				setState(3946);
				subquery();
				setState(3947);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3949);
				match(LEFT_PAREN);
				setState(3950);
				concatenation_wrapper();
				setState(3955);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3951);
					match(COMMA);
					setState(3952);
					concatenation_wrapper();
					}
					}
					setState(3957);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3958);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3960);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3961);
				bind_variable();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3962);
				general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_elementsContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBetween_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBetween_elements(this);
		}
	}

	public final Between_elementsContext between_elements() throws RecognitionException {
		Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_between_elements);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3965);
			concatenation();
			setState(3966);
			match(AND);
			setState(3967);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcatenationContext extends ParserRuleContext {
		public List<Additive_expressionContext> additive_expression() {
			return getRuleContexts(Additive_expressionContext.class);
		}
		public Additive_expressionContext additive_expression(int i) {
			return getRuleContext(Additive_expressionContext.class,i);
		}
		public List<Concatenation_opContext> concatenation_op() {
			return getRuleContexts(Concatenation_opContext.class);
		}
		public Concatenation_opContext concatenation_op(int i) {
			return getRuleContext(Concatenation_opContext.class,i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConcatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConcatenation(this);
		}
	}

	public final ConcatenationContext concatenation() throws RecognitionException {
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_concatenation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3969);
			additive_expression();
			setState(3975);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,474,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3970);
					concatenation_op();
					setState(3971);
					additive_expression();
					}
					} 
				}
				setState(3977);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,474,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Concatenation_wrapperContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Concatenation_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConcatenation_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConcatenation_wrapper(this);
		}
	}

	public final Concatenation_wrapperContext concatenation_wrapper() throws RecognitionException {
		Concatenation_wrapperContext _localctx = new Concatenation_wrapperContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_concatenation_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3978);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Additive_expressionContext extends ParserRuleContext {
		public List<Multiply_expressionContext> multiply_expression() {
			return getRuleContexts(Multiply_expressionContext.class);
		}
		public Multiply_expressionContext multiply_expression(int i) {
			return getRuleContext(Multiply_expressionContext.class,i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_additive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAdditive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAdditive_expression(this);
		}
	}

	public final Additive_expressionContext additive_expression() throws RecognitionException {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_additive_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3980);
			multiply_expression();
			setState(3985);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,475,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3981);
					_la = _input.LA(1);
					if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(3982);
					multiply_expression();
					}
					} 
				}
				setState(3987);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,475,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiply_expressionContext extends ParserRuleContext {
		public List<Datetime_expressionContext> datetime_expression() {
			return getRuleContexts(Datetime_expressionContext.class);
		}
		public Datetime_expressionContext datetime_expression(int i) {
			return getRuleContext(Datetime_expressionContext.class,i);
		}
		public Multiply_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiply_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMultiply_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMultiply_expression(this);
		}
	}

	public final Multiply_expressionContext multiply_expression() throws RecognitionException {
		Multiply_expressionContext _localctx = new Multiply_expressionContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_multiply_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3988);
			datetime_expression();
			setState(3993);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,476,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3989);
					_la = _input.LA(1);
					if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(3990);
					datetime_expression();
					}
					} 
				}
				setState(3995);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,476,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_expressionContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Datetime_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDatetime_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDatetime_expression(this);
		}
	}

	public final Datetime_expressionContext datetime_expression() throws RecognitionException {
		Datetime_expressionContext _localctx = new Datetime_expressionContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_datetime_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3996);
			model_expression();
			setState(4005);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				{
				setState(3997);
				match(AT);
				setState(4002);
				switch (_input.LA(1)) {
				case LOCAL:
					{
					setState(3998);
					match(LOCAL);
					}
					break;
				case TIME:
					{
					setState(3999);
					match(TIME);
					setState(4000);
					match(ZONE);
					setState(4001);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(4004);
				interval_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_expressionContext extends ParserRuleContext {
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInterval_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInterval_expression(this);
		}
	}

	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_interval_expression);
		int _la;
		try {
			setState(4031);
			switch (_input.LA(1)) {
			case DAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4007);
				match(DAY);
				setState(4012);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4008);
					match(LEFT_PAREN);
					setState(4009);
					concatenation_wrapper();
					setState(4010);
					match(RIGHT_PAREN);
					}
				}

				setState(4014);
				match(TO);
				setState(4015);
				match(SECOND);
				setState(4020);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
				case 1:
					{
					setState(4016);
					match(LEFT_PAREN);
					setState(4017);
					concatenation_wrapper();
					setState(4018);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4022);
				match(YEAR);
				setState(4027);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4023);
					match(LEFT_PAREN);
					setState(4024);
					concatenation_wrapper();
					setState(4025);
					match(RIGHT_PAREN);
					}
				}

				setState(4029);
				match(TO);
				setState(4030);
				match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		public Model_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_expression(this);
		}
	}

	public final Model_expressionContext model_expression() throws RecognitionException {
		Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_model_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4033);
			unary_expression();
			setState(4038);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
			case 1:
				{
				setState(4034);
				match(LEFT_BRACKET);
				setState(4035);
				model_expression_element();
				setState(4036);
				match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expression_elementContext extends ParserRuleContext {
		public List<TerminalNode> ANY() { return getTokens(plsqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(plsqlParser.ANY, i);
		}
		public List<Condition_wrapperContext> condition_wrapper() {
			return getRuleContexts(Condition_wrapperContext.class);
		}
		public Condition_wrapperContext condition_wrapper(int i) {
			return getRuleContext(Condition_wrapperContext.class,i);
		}
		public List<Single_column_for_loopContext> single_column_for_loop() {
			return getRuleContexts(Single_column_for_loopContext.class);
		}
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return getRuleContext(Single_column_for_loopContext.class,i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterModel_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitModel_expression_element(this);
		}
	}

	public final Model_expression_elementContext model_expression_element() throws RecognitionException {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_model_expression_element);
		int _la;
		try {
			setState(4063);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4042);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
				case 1:
					{
					setState(4040);
					match(ANY);
					}
					break;
				case 2:
					{
					setState(4041);
					condition_wrapper();
					}
					break;
				}
				setState(4051);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4044);
					match(COMMA);
					setState(4047);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
					case 1:
						{
						setState(4045);
						match(ANY);
						}
						break;
					case 2:
						{
						setState(4046);
						condition_wrapper();
						}
						break;
					}
					}
					}
					setState(4053);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4054);
				single_column_for_loop();
				setState(4059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4055);
					match(COMMA);
					setState(4056);
					single_column_for_loop();
					}
					}
					setState(4061);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4062);
				multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_column_for_loopContext extends ParserRuleContext {
		public ExpressionContext ex1;
		public ExpressionContext ex2;
		public ExpressionContext ex3;
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public For_increment_decrement_typeContext for_increment_decrement_type() {
			return getRuleContext(For_increment_decrement_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public For_like_partContext for_like_part() {
			return getRuleContext(For_like_partContext.class,0);
		}
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSingle_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSingle_column_for_loop(this);
		}
	}

	public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_single_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4065);
			match(FOR);
			setState(4066);
			column_name();
			setState(4079);
			switch (_input.LA(1)) {
			case IN:
				{
				setState(4067);
				match(IN);
				setState(4068);
				expression_list();
				}
				break;
			case FROM:
			case LIKE:
				{
				setState(4070);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(4069);
					for_like_part();
					}
				}

				setState(4072);
				match(FROM);
				setState(4073);
				((Single_column_for_loopContext)_localctx).ex1 = expression();
				setState(4074);
				match(TO);
				setState(4075);
				((Single_column_for_loopContext)_localctx).ex2 = expression();
				setState(4076);
				for_increment_decrement_type();
				setState(4077);
				((Single_column_for_loopContext)_localctx).ex3 = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_like_partContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(plsqlParser.LIKE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_like_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_like_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_like_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_like_part(this);
		}
	}

	public final For_like_partContext for_like_part() throws RecognitionException {
		For_like_partContext _localctx = new For_like_partContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_for_like_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4081);
			match(LIKE);
			setState(4082);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_increment_decrement_typeContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode DECREMENT() { return getToken(plsqlParser.DECREMENT, 0); }
		public For_increment_decrement_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_increment_decrement_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFor_increment_decrement_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFor_increment_decrement_type(this);
		}
	}

	public final For_increment_decrement_typeContext for_increment_decrement_type() throws RecognitionException {
		For_increment_decrement_typeContext _localctx = new For_increment_decrement_typeContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_for_increment_decrement_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4084);
			_la = _input.LA(1);
			if ( !(_la==DECREMENT || _la==INCREMENT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_column_for_loopContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMulti_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMulti_column_for_loop(this);
		}
	}

	public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_multi_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4086);
			match(FOR);
			setState(4087);
			match(LEFT_PAREN);
			setState(4088);
			column_name();
			setState(4093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4089);
				match(COMMA);
				setState(4090);
				column_name();
				}
				}
				setState(4095);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4096);
			match(RIGHT_PAREN);
			setState(4097);
			match(IN);
			setState(4098);
			match(LEFT_PAREN);
			setState(4111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				setState(4099);
				subquery();
				}
				break;
			case 2:
				{
				setState(4100);
				match(LEFT_PAREN);
				setState(4101);
				expression_list();
				setState(4106);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4102);
					match(COMMA);
					setState(4103);
					expression_list();
					}
					}
					setState(4108);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4109);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4113);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode PRIOR() { return getToken(plsqlParser.PRIOR, 0); }
		public TerminalNode CONNECT_BY_ROOT() { return getToken(plsqlParser.CONNECT_BY_ROOT, 0); }
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Quantified_expressionContext quantified_expression() {
			return getRuleContext(Quantified_expressionContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUnary_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUnary_expression(this);
		}
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_unary_expression);
		try {
			setState(4133);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4115);
				match(MINUS_SIGN);
				setState(4116);
				unary_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4117);
				match(PLUS_SIGN);
				setState(4118);
				unary_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4119);
				match(PRIOR);
				setState(4120);
				unary_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4121);
				match(CONNECT_BY_ROOT);
				setState(4122);
				unary_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4123);
				match(NEW);
				setState(4124);
				unary_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4125);
				match(DISTINCT);
				setState(4126);
				unary_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4127);
				match(ALL);
				setState(4128);
				unary_expression();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4129);
				case_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4130);
				quantified_expression();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4131);
				standard_function();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4132);
				atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_statementContext extends ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return getRuleContext(Searched_case_statementContext.class,0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return getRuleContext(Simple_case_statementContext.class,0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCase_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCase_statement(this);
		}
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_case_statement);
		try {
			setState(4137);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4135);
				searched_case_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4136);
				simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(plsqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(plsqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Simple_case_when_partContext> simple_case_when_part() {
			return getRuleContexts(Simple_case_when_partContext.class);
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return getRuleContext(Simple_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_case_statement(this);
		}
	}

	public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_simple_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4140);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4139);
				label_name();
				}
			}

			setState(4142);
			((Simple_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4143);
			atom();
			setState(4145); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4144);
				simple_case_when_part();
				}
				}
				setState(4147); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4150);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4149);
				case_else_part();
				}
			}

			setState(4152);
			match(END);
			setState(4154);
			_la = _input.LA(1);
			if (_la==CASE) {
				{
				setState(4153);
				match(CASE);
				}
			}

			setState(4157);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				{
				setState(4156);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSimple_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSimple_case_when_part(this);
		}
	}

	public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_simple_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4159);
			match(WHEN);
			setState(4160);
			expression_wrapper();
			setState(4161);
			match(THEN);
			setState(4164);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				{
				setState(4162);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4163);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public TerminalNode END() { return getToken(plsqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(plsqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(plsqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Searched_case_when_partContext> searched_case_when_part() {
			return getRuleContexts(Searched_case_when_partContext.class);
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return getRuleContext(Searched_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearched_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearched_case_statement(this);
		}
	}

	public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_searched_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4167);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4166);
				label_name();
				}
			}

			setState(4169);
			((Searched_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4171); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4170);
				searched_case_when_part();
				}
				}
				setState(4173); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4176);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4175);
				case_else_part();
				}
			}

			setState(4178);
			match(END);
			setState(4180);
			_la = _input.LA(1);
			if (_la==CASE) {
				{
				setState(4179);
				match(CASE);
				}
			}

			setState(4183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
			case 1:
				{
				setState(4182);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(plsqlParser.WHEN, 0); }
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		public TerminalNode THEN() { return getToken(plsqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSearched_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSearched_case_when_part(this);
		}
	}

	public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_searched_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4185);
			match(WHEN);
			setState(4186);
			condition_wrapper();
			setState(4187);
			match(THEN);
			setState(4190);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				{
				setState(4188);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4189);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(plsqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCase_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCase_else_part(this);
		}
	}

	public final Case_else_partContext case_else_part() throws RecognitionException {
		Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_case_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4192);
			match(ELSE);
			setState(4195);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
			case 1:
				{
				setState(4193);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4194);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AtomContext extends ParserRuleContext {
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_or_vectorContext expression_or_vector() {
			return getRuleContext(Expression_or_vectorContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAtom(this);
		}
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_atom);
		try {
			int _alt;
			setState(4217);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4197);
				table_element();
				setState(4198);
				outer_join_sign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4200);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4201);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4202);
				general_element();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4203);
				match(LEFT_PAREN);
				setState(4215);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
				case 1:
					{
					setState(4204);
					subquery();
					setState(4205);
					match(RIGHT_PAREN);
					setState(4209);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,509,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(4206);
							subquery_operation_part();
							}
							} 
						}
						setState(4211);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,509,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(4212);
					expression_or_vector();
					setState(4213);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_or_vectorContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Vector_exprContext vector_expr() {
			return getRuleContext(Vector_exprContext.class,0);
		}
		public Expression_or_vectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_or_vector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExpression_or_vector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExpression_or_vector(this);
		}
	}

	public final Expression_or_vectorContext expression_or_vector() throws RecognitionException {
		Expression_or_vectorContext _localctx = new Expression_or_vectorContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_expression_or_vector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4219);
			expression();
			setState(4221);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4220);
				vector_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vector_exprContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Vector_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vector_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVector_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVector_expr(this);
		}
	}

	public final Vector_exprContext vector_expr() throws RecognitionException {
		Vector_exprContext _localctx = new Vector_exprContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_vector_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4223);
			match(COMMA);
			setState(4224);
			expression();
			setState(4229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4225);
				match(COMMA);
				setState(4226);
				expression();
				}
				}
				setState(4231);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_expressionContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(plsqlParser.SOME, 0); }
		public TerminalNode EXISTS() { return getToken(plsqlParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(plsqlParser.ANY, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuantified_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuantified_expression(this);
		}
	}

	public final Quantified_expressionContext quantified_expression() throws RecognitionException {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_quantified_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4232);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(4241);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
			case 1:
				{
				setState(4233);
				match(LEFT_PAREN);
				setState(4234);
				subquery();
				setState(4235);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4237);
				match(LEFT_PAREN);
				setState(4238);
				expression_wrapper();
				setState(4239);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Plsql_type_conversionContext extends ParserRuleContext {
		public TerminalNode TO_CHAR() { return getToken(plsqlParser.TO_CHAR, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode TO_NUMBER() { return getToken(plsqlParser.TO_NUMBER, 0); }
		public Plsql_type_conversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsql_type_conversion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPlsql_type_conversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPlsql_type_conversion(this);
		}
	}

	public final Plsql_type_conversionContext plsql_type_conversion() throws RecognitionException {
		Plsql_type_conversionContext _localctx = new Plsql_type_conversionContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_plsql_type_conversion);
		int _la;
		try {
			setState(4267);
			switch (_input.LA(1)) {
			case TO_CHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4243);
				match(TO_CHAR);
				setState(4244);
				match(LEFT_PAREN);
				setState(4245);
				expression();
				setState(4250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4246);
					match(COMMA);
					setState(4247);
					expression();
					}
					}
					setState(4252);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4253);
				match(RIGHT_PAREN);
				}
				break;
			case TO_NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4255);
				match(TO_NUMBER);
				setState(4256);
				match(LEFT_PAREN);
				setState(4257);
				expression();
				setState(4262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4258);
					match(COMMA);
					setState(4259);
					expression();
					}
					}
					setState(4264);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4265);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_type_conversionContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CAST() { return getToken(plsqlParser.CAST, 0); }
		public TerminalNode XMLCAST() { return getToken(plsqlParser.XMLCAST, 0); }
		public TerminalNode MULTISET() { return getToken(plsqlParser.MULTISET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Plsql_type_conversionContext plsql_type_conversion() {
			return getRuleContext(Plsql_type_conversionContext.class,0);
		}
		public Sql_type_conversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_type_conversion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_type_conversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_type_conversion(this);
		}
	}

	public final Sql_type_conversionContext sql_type_conversion() throws RecognitionException {
		Sql_type_conversionContext _localctx = new Sql_type_conversionContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_sql_type_conversion);
		int _la;
		try {
			setState(4284);
			switch (_input.LA(1)) {
			case CAST:
			case XMLCAST:
				enterOuterAlt(_localctx, 1);
				{
				setState(4269);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4270);
				match(LEFT_PAREN);
				setState(4277);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
				case 1:
					{
					setState(4271);
					match(MULTISET);
					setState(4272);
					match(LEFT_PAREN);
					setState(4273);
					subquery();
					setState(4274);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(4276);
					concatenation_wrapper();
					}
					break;
				}
				setState(4279);
				match(AS);
				setState(4280);
				type_spec();
				setState(4281);
				match(RIGHT_PAREN);
				}
				break;
			case TO_CHAR:
			case TO_NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4283);
				plsql_type_conversion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_functionContext extends ParserRuleContext {
		public Over_clause_keywordContext over_clause_keyword() {
			return getRuleContext(Over_clause_keywordContext.class,0);
		}
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return getRuleContext(Function_argument_modelingContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(plsqlParser.COUNT, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public TerminalNode DISTINCT() { return getToken(plsqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(plsqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(plsqlParser.ALL, 0); }
		public Sql_type_conversionContext sql_type_conversion() {
			return getRuleContext(Sql_type_conversionContext.class,0);
		}
		public TerminalNode CHR() { return getToken(plsqlParser.CHR, 0); }
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public TerminalNode NCHAR_CS() { return getToken(plsqlParser.NCHAR_CS, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public Collect_order_by_partContext collect_order_by_part() {
			return getRuleContext(Collect_order_by_partContext.class,0);
		}
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return getRuleContext(Within_or_over_clause_keywordContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public List<Within_or_over_partContext> within_or_over_part() {
			return getRuleContexts(Within_or_over_partContext.class);
		}
		public Within_or_over_partContext within_or_over_part(int i) {
			return getRuleContext(Within_or_over_partContext.class,i);
		}
		public TerminalNode DECOMPOSE() { return getToken(plsqlParser.DECOMPOSE, 0); }
		public TerminalNode CANONICAL() { return getToken(plsqlParser.CANONICAL, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(plsqlParser.COMPATIBILITY, 0); }
		public TerminalNode EXTRACT() { return getToken(plsqlParser.EXTRACT, 0); }
		public TerminalNode FROM() { return getToken(plsqlParser.FROM, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(plsqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(plsqlParser.LAST_VALUE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return getRuleContext(Respect_or_ignore_nullsContext.class,0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return getRuleContext(Standard_prediction_function_keywordContext.class,0);
		}
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return getRuleContext(Cost_matrix_clauseContext.class,0);
		}
		public TerminalNode TRANSLATE() { return getToken(plsqlParser.TRANSLATE, 0); }
		public TerminalNode CHAR_CS() { return getToken(plsqlParser.CHAR_CS, 0); }
		public TerminalNode TREAT() { return getToken(plsqlParser.TREAT, 0); }
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode TRIM() { return getToken(plsqlParser.TRIM, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode LEADING() { return getToken(plsqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(plsqlParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(plsqlParser.BOTH, 0); }
		public TerminalNode XMLAGG() { return getToken(plsqlParser.XMLAGG, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode XMLCOLATTVAL() { return getToken(plsqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLFOREST() { return getToken(plsqlParser.XMLFOREST, 0); }
		public TerminalNode XMLELEMENT() { return getToken(plsqlParser.XMLELEMENT, 0); }
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return getRuleContext(Xml_attributes_clauseContext.class,0);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode XMLEXISTS() { return getToken(plsqlParser.XMLEXISTS, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(plsqlParser.XMLPARSE, 0); }
		public TerminalNode DOCUMENT() { return getToken(plsqlParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(plsqlParser.CONTENT, 0); }
		public TerminalNode WELLFORMED() { return getToken(plsqlParser.WELLFORMED, 0); }
		public TerminalNode XMLPI() { return getToken(plsqlParser.XMLPI, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode XMLQUERY() { return getToken(plsqlParser.XMLQUERY, 0); }
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode EMPTY() { return getToken(plsqlParser.EMPTY, 0); }
		public TerminalNode XMLROOT() { return getToken(plsqlParser.XMLROOT, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return getRuleContext(Xmlroot_param_version_partContext.class,0);
		}
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return getRuleContext(Xmlroot_param_standalone_partContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(plsqlParser.XMLSERIALIZE, 0); }
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return getRuleContext(Xmlserialize_param_enconding_partContext.class,0);
		}
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return getRuleContext(Xmlserialize_param_version_partContext.class,0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return getRuleContext(Xmlserialize_param_ident_partContext.class,0);
		}
		public TerminalNode DEFAULTS() { return getToken(plsqlParser.DEFAULTS, 0); }
		public TerminalNode HIDE() { return getToken(plsqlParser.HIDE, 0); }
		public TerminalNode SHOW() { return getToken(plsqlParser.SHOW, 0); }
		public TerminalNode XMLTABLE() { return getToken(plsqlParser.XMLTABLE, 0); }
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return getRuleContext(Xml_namespaces_clauseContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(plsqlParser.COLUMNS, 0); }
		public List<Xml_table_columnContext> xml_table_column() {
			return getRuleContexts(Xml_table_columnContext.class);
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return getRuleContext(Xml_table_columnContext.class,i);
		}
		public Standard_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStandard_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStandard_function(this);
		}
	}

	public final Standard_functionContext standard_function() throws RecognitionException {
		Standard_functionContext _localctx = new Standard_functionContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_standard_function);
		int _la;
		try {
			int _alt;
			setState(4584);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4286);
				over_clause_keyword();
				setState(4287);
				function_argument_analytic();
				setState(4289);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
				case 1:
					{
					setState(4288);
					over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4291);
				regular_id();
				setState(4292);
				function_argument_modeling();
				setState(4294);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
				case 1:
					{
					setState(4293);
					using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4296);
				match(COUNT);
				setState(4297);
				match(LEFT_PAREN);
				setState(4303);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(4298);
					match(ASTERISK);
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL_PERCENT_ROWCOUNT:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CHAR:
				case TO_NUMBER:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4300);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
					case 1:
						{
						setState(4299);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					}
					setState(4302);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4305);
				match(RIGHT_PAREN);
				setState(4307);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
				case 1:
					{
					setState(4306);
					over_clause();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4309);
				sql_type_conversion();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4310);
				match(CHR);
				setState(4311);
				match(LEFT_PAREN);
				setState(4312);
				concatenation_wrapper();
				setState(4313);
				match(USING);
				setState(4314);
				match(NCHAR_CS);
				setState(4315);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4317);
				match(COLLECT);
				setState(4318);
				match(LEFT_PAREN);
				setState(4320);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
				case 1:
					{
					setState(4319);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(4322);
				concatenation_wrapper();
				setState(4324);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4323);
					collect_order_by_part();
					}
				}

				setState(4326);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4328);
				within_or_over_clause_keyword();
				setState(4329);
				function_argument();
				setState(4331); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4330);
						within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4333); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,527,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4335);
				match(DECOMPOSE);
				setState(4336);
				match(LEFT_PAREN);
				setState(4337);
				concatenation_wrapper();
				setState(4339);
				_la = _input.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					setState(4338);
					_la = _input.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(4341);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4343);
				match(EXTRACT);
				setState(4344);
				match(LEFT_PAREN);
				setState(4345);
				regular_id();
				setState(4346);
				match(FROM);
				setState(4347);
				concatenation_wrapper();
				setState(4348);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4350);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4351);
				function_argument_analytic();
				setState(4353);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(4352);
					respect_or_ignore_nulls();
					}
				}

				setState(4355);
				over_clause();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4357);
				standard_prediction_function_keyword();
				setState(4358);
				match(LEFT_PAREN);
				setState(4359);
				expression_wrapper();
				setState(4364);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4360);
					match(COMMA);
					setState(4361);
					expression_wrapper();
					}
					}
					setState(4366);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4368);
				_la = _input.LA(1);
				if (_la==COST) {
					{
					setState(4367);
					cost_matrix_clause();
					}
				}

				setState(4371);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4370);
					using_clause();
					}
				}

				setState(4373);
				match(RIGHT_PAREN);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4375);
				match(TRANSLATE);
				setState(4376);
				match(LEFT_PAREN);
				setState(4377);
				expression_wrapper();
				setState(4380);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4378);
					match(USING);
					setState(4379);
					_la = _input.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(4386);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4382);
					match(COMMA);
					setState(4383);
					expression_wrapper();
					}
					}
					setState(4388);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4389);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4391);
				match(TREAT);
				setState(4392);
				match(LEFT_PAREN);
				setState(4393);
				expression_wrapper();
				setState(4394);
				match(AS);
				setState(4396);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
				case 1:
					{
					setState(4395);
					match(REF);
					}
					break;
				}
				setState(4398);
				type_spec();
				setState(4399);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4401);
				match(TRIM);
				setState(4402);
				match(LEFT_PAREN);
				setState(4410);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
				case 1:
					{
					setState(4404);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(4403);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
					}

					setState(4407);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(4406);
						quoted_string();
						}
					}

					setState(4409);
					match(FROM);
					}
					break;
				}
				setState(4412);
				concatenation_wrapper();
				setState(4413);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4415);
				match(XMLAGG);
				setState(4416);
				match(LEFT_PAREN);
				setState(4417);
				expression_wrapper();
				setState(4419);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4418);
					order_by_clause();
					}
				}

				setState(4421);
				match(RIGHT_PAREN);
				setState(4424);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4422);
					match(PERIOD);
					setState(4423);
					general_element_part();
					}
				}

				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4426);
				_la = _input.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4427);
				match(LEFT_PAREN);
				setState(4428);
				xml_multiuse_expression_element();
				setState(4433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4429);
					match(COMMA);
					setState(4430);
					xml_multiuse_expression_element();
					}
					}
					setState(4435);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4436);
				match(RIGHT_PAREN);
				setState(4439);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4437);
					match(PERIOD);
					setState(4438);
					general_element_part();
					}
				}

				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4441);
				match(XMLELEMENT);
				setState(4442);
				match(LEFT_PAREN);
				setState(4444);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
				case 1:
					{
					setState(4443);
					_la = _input.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(4447);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
				case 1:
					{
					setState(4446);
					_la = _input.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(4449);
				expression_wrapper();
				setState(4452);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
				case 1:
					{
					setState(4450);
					match(COMMA);
					setState(4451);
					xml_attributes_clause();
					}
					break;
				}
				setState(4461);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4454);
					match(COMMA);
					setState(4455);
					expression_wrapper();
					setState(4457);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						setState(4456);
						column_alias();
						}
					}

					}
					}
					setState(4463);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4464);
				match(RIGHT_PAREN);
				setState(4467);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4465);
					match(PERIOD);
					setState(4466);
					general_element_part();
					}
				}

				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4469);
				match(XMLEXISTS);
				setState(4470);
				match(LEFT_PAREN);
				setState(4471);
				expression_wrapper();
				setState(4473);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4472);
					xml_passing_clause();
					}
				}

				setState(4475);
				match(RIGHT_PAREN);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4477);
				match(XMLPARSE);
				setState(4478);
				match(LEFT_PAREN);
				setState(4479);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4480);
				concatenation_wrapper();
				setState(4482);
				_la = _input.LA(1);
				if (_la==WELLFORMED) {
					{
					setState(4481);
					match(WELLFORMED);
					}
				}

				setState(4484);
				match(RIGHT_PAREN);
				setState(4487);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4485);
					match(PERIOD);
					setState(4486);
					general_element_part();
					}
				}

				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4489);
				match(XMLPI);
				setState(4490);
				match(LEFT_PAREN);
				setState(4495);
				switch (_input.LA(1)) {
				case NAME:
					{
					setState(4491);
					match(NAME);
					setState(4492);
					id();
					}
					break;
				case EVALNAME:
					{
					setState(4493);
					match(EVALNAME);
					setState(4494);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4499);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4497);
					match(COMMA);
					setState(4498);
					concatenation_wrapper();
					}
				}

				setState(4501);
				match(RIGHT_PAREN);
				setState(4504);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4502);
					match(PERIOD);
					setState(4503);
					general_element_part();
					}
				}

				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(4506);
				match(XMLQUERY);
				setState(4507);
				match(LEFT_PAREN);
				setState(4508);
				concatenation_wrapper();
				setState(4510);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4509);
					xml_passing_clause();
					}
				}

				setState(4512);
				match(RETURNING);
				setState(4513);
				match(CONTENT);
				setState(4517);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(4514);
					match(NULL);
					setState(4515);
					match(ON);
					setState(4516);
					match(EMPTY);
					}
				}

				setState(4519);
				match(RIGHT_PAREN);
				setState(4522);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4520);
					match(PERIOD);
					setState(4521);
					general_element_part();
					}
				}

				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(4524);
				match(XMLROOT);
				setState(4525);
				match(LEFT_PAREN);
				setState(4526);
				concatenation_wrapper();
				setState(4527);
				xmlroot_param_version_part();
				setState(4530);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4528);
					match(COMMA);
					setState(4529);
					xmlroot_param_standalone_part();
					}
				}

				setState(4532);
				match(RIGHT_PAREN);
				setState(4535);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4533);
					match(PERIOD);
					setState(4534);
					general_element_part();
					}
				}

				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(4537);
				match(XMLSERIALIZE);
				setState(4538);
				match(LEFT_PAREN);
				setState(4539);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4540);
				concatenation_wrapper();
				setState(4543);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4541);
					match(AS);
					setState(4542);
					type_spec();
					}
				}

				setState(4546);
				_la = _input.LA(1);
				if (_la==ENCODING) {
					{
					setState(4545);
					xmlserialize_param_enconding_part();
					}
				}

				setState(4549);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(4548);
					xmlserialize_param_version_part();
					}
				}

				setState(4552);
				_la = _input.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					setState(4551);
					xmlserialize_param_ident_part();
					}
				}

				setState(4556);
				_la = _input.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					setState(4554);
					_la = _input.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(4555);
					match(DEFAULTS);
					}
				}

				setState(4558);
				match(RIGHT_PAREN);
				setState(4561);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4559);
					match(PERIOD);
					setState(4560);
					general_element_part();
					}
				}

				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(4563);
				match(XMLTABLE);
				setState(4564);
				match(LEFT_PAREN);
				setState(4566);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
				case 1:
					{
					setState(4565);
					xml_namespaces_clause();
					}
					break;
				}
				setState(4568);
				concatenation_wrapper();
				setState(4570);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4569);
					xml_passing_clause();
					}
				}

				setState(4577);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(4572);
					match(COLUMNS);
					setState(4573);
					xml_table_column();
					{
					setState(4574);
					match(COMMA);
					setState(4575);
					xml_table_column();
					}
					}
				}

				setState(4579);
				match(RIGHT_PAREN);
				setState(4582);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4580);
					match(PERIOD);
					setState(4581);
					general_element_part();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(plsqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(plsqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(plsqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(plsqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(plsqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(plsqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(plsqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(plsqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(plsqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(plsqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(plsqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(plsqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(plsqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(plsqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(plsqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(plsqlParser.COVAR_, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOver_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOver_clause_keyword(this);
		}
	}

	public final Over_clause_keywordContext over_clause_keyword() throws RecognitionException {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4586);
			_la = _input.LA(1);
			if ( !(((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (AVG - 476)) | (1L << (CORR - 476)) | (1L << (LAG - 476)) | (1L << (LEAD - 476)) | (1L << (MAX - 476)) | (1L << (MEDIAN - 476)) | (1L << (MIN - 476)) | (1L << (NTILE - 476)) | (1L << (RATIO_TO_REPORT - 476)) | (1L << (ROW_NUMBER - 476)) | (1L << (SUM - 476)) | (1L << (VARIANCE - 476)) | (1L << (REGR_ - 476)) | (1L << (STDDEV - 476)) | (1L << (VAR_ - 476)) | (1L << (COVAR_ - 476)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode CUME_DIST() { return getToken(plsqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(plsqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(plsqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(plsqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(plsqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(plsqlParser.RANK, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWithin_or_over_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWithin_or_over_clause_keyword(this);
		}
	}

	public final Within_or_over_clause_keywordContext within_or_over_clause_keyword() throws RecognitionException {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4588);
			_la = _input.LA(1);
			if ( !(((((_la - 469)) & ~0x3f) == 0 && ((1L << (_la - 469)) & ((1L << (CUME_DIST - 469)) | (1L << (DENSE_RANK - 469)) | (1L << (LISTAGG - 469)) | (1L << (PERCENT_RANK - 469)) | (1L << (PERCENTILE_CONT - 469)) | (1L << (PERCENTILE_DISC - 469)) | (1L << (RANK - 469)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_prediction_function_keywordContext extends ParserRuleContext {
		public TerminalNode PREDICTION() { return getToken(plsqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(plsqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(plsqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(plsqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(plsqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(plsqlParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_prediction_function_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterStandard_prediction_function_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitStandard_prediction_function_keyword(this);
		}
	}

	public final Standard_prediction_function_keywordContext standard_prediction_function_keyword() throws RecognitionException {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4590);
			_la = _input.LA(1);
			if ( !(((((_la - 463)) & ~0x3f) == 0 && ((1L << (_la - 463)) & ((1L << (PREDICTION - 463)) | (1L << (PREDICTION_BOUNDS - 463)) | (1L << (PREDICTION_COST - 463)) | (1L << (PREDICTION_DETAILS - 463)) | (1L << (PREDICTION_PROBABILITY - 463)) | (1L << (PREDICTION_SET - 463)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(plsqlParser.OVER, 0); }
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Windowing_clauseContext windowing_clause() {
			return getRuleContext(Windowing_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOver_clause(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4592);
			match(OVER);
			setState(4593);
			match(LEFT_PAREN);
			setState(4595);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4594);
				query_partition_clause();
				}
			}

			setState(4601);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4597);
				order_by_clause();
				setState(4599);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(4598);
					windowing_clause();
					}
				}

				}
			}

			setState(4603);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_clauseContext extends ParserRuleContext {
		public Windowing_typeContext windowing_type() {
			return getRuleContext(Windowing_typeContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(plsqlParser.BETWEEN, 0); }
		public List<Windowing_elementsContext> windowing_elements() {
			return getRuleContexts(Windowing_elementsContext.class);
		}
		public Windowing_elementsContext windowing_elements(int i) {
			return getRuleContext(Windowing_elementsContext.class,i);
		}
		public TerminalNode AND() { return getToken(plsqlParser.AND, 0); }
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_clause(this);
		}
	}

	public final Windowing_clauseContext windowing_clause() throws RecognitionException {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_windowing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4605);
			windowing_type();
			setState(4612);
			switch (_input.LA(1)) {
			case BETWEEN:
				{
				setState(4606);
				match(BETWEEN);
				setState(4607);
				windowing_elements();
				setState(4608);
				match(AND);
				setState(4609);
				windowing_elements();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_NUMBER:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4611);
				windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_typeContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_type(this);
		}
	}

	public final Windowing_typeContext windowing_type() throws RecognitionException {
		Windowing_typeContext _localctx = new Windowing_typeContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_windowing_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4614);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_elementsContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(plsqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(plsqlParser.PRECEDING, 0); }
		public TerminalNode CURRENT() { return getToken(plsqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public TerminalNode FOLLOWING() { return getToken(plsqlParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWindowing_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWindowing_elements(this);
		}
	}

	public final Windowing_elementsContext windowing_elements() throws RecognitionException {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_windowing_elements);
		int _la;
		try {
			setState(4623);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,575,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4616);
				match(UNBOUNDED);
				setState(4617);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4618);
				match(CURRENT);
				setState(4619);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4620);
				concatenation_wrapper();
				setState(4621);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public List<Using_elementContext> using_element() {
			return getRuleContexts(Using_elementContext.class);
		}
		public Using_elementContext using_element(int i) {
			return getRuleContext(Using_elementContext.class,i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUsing_clause(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_using_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4625);
			match(USING);
			setState(4635);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(4626);
				match(ASTERISK);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_NUMBER:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4627);
				using_element();
				setState(4632);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,576,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4628);
						match(COMMA);
						setState(4629);
						using_element();
						}
						} 
					}
					setState(4634);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,576,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public TerminalNode IN() { return getToken(plsqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Using_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterUsing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitUsing_element(this);
		}
	}

	public final Using_elementContext using_element() throws RecognitionException {
		Using_elementContext _localctx = new Using_elementContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_using_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4642);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
			case 1:
				{
				setState(4637);
				match(IN);
				setState(4639);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
				case 1:
					{
					setState(4638);
					match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(4641);
				match(OUT);
				}
				break;
			}
			setState(4644);
			select_list_elements();
			setState(4646);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
			case 1:
				{
				setState(4645);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collect_order_by_partContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(plsqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collect_order_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCollect_order_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCollect_order_by_part(this);
		}
	}

	public final Collect_order_by_partContext collect_order_by_part() throws RecognitionException {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_collect_order_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4648);
			match(ORDER);
			setState(4649);
			match(BY);
			setState(4650);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_partContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(plsqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(plsqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWithin_or_over_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWithin_or_over_part(this);
		}
	}

	public final Within_or_over_partContext within_or_over_part() throws RecognitionException {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_within_or_over_part);
		try {
			setState(4659);
			switch (_input.LA(1)) {
			case WITHIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4652);
				match(WITHIN);
				setState(4653);
				match(GROUP);
				setState(4654);
				match(LEFT_PAREN);
				setState(4655);
				order_by_clause();
				setState(4656);
				match(RIGHT_PAREN);
				}
				break;
			case OVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4658);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_matrix_clauseContext extends ParserRuleContext {
		public TerminalNode COST() { return getToken(plsqlParser.COST, 0); }
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public List<Cost_class_nameContext> cost_class_name() {
			return getRuleContexts(Cost_class_nameContext.class);
		}
		public Cost_class_nameContext cost_class_name(int i) {
			return getRuleContext(Cost_class_nameContext.class,i);
		}
		public TerminalNode VALUES() { return getToken(plsqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(plsqlParser.AUTO, 0); }
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_matrix_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCost_matrix_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCost_matrix_clause(this);
		}
	}

	public final Cost_matrix_clauseContext cost_matrix_clause() throws RecognitionException {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_cost_matrix_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4661);
			match(COST);
			setState(4679);
			switch (_input.LA(1)) {
			case MODEL:
				{
				setState(4662);
				match(MODEL);
				setState(4664);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(4663);
					match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(4666);
				match(LEFT_PAREN);
				setState(4667);
				cost_class_name();
				setState(4672);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4668);
					match(COMMA);
					setState(4669);
					cost_class_name();
					}
					}
					setState(4674);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4675);
				match(RIGHT_PAREN);
				setState(4676);
				match(VALUES);
				setState(4677);
				expression_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_passing_clauseContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(plsqlParser.PASSING, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public TerminalNode BY() { return getToken(plsqlParser.BY, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_passing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_passing_clause(this);
		}
	}

	public final Xml_passing_clauseContext xml_passing_clause() throws RecognitionException {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_xml_passing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4681);
			match(PASSING);
			setState(4684);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(4682);
				match(BY);
				setState(4683);
				match(VALUE);
				}
			}

			setState(4686);
			expression_wrapper();
			setState(4688);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(4687);
				column_alias();
				}
			}

			{
			setState(4690);
			match(COMMA);
			setState(4691);
			expression_wrapper();
			setState(4693);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,587,_ctx) ) {
			case 1:
				{
				setState(4692);
				column_alias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributes_clauseContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(plsqlParser.XMLATTRIBUTES, 0); }
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(plsqlParser.SCHEMACHECK, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(plsqlParser.NOSCHEMACHECK, 0); }
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_attributes_clause(this);
		}
	}

	public final Xml_attributes_clauseContext xml_attributes_clause() throws RecognitionException {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_xml_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4695);
			match(XMLATTRIBUTES);
			setState(4696);
			match(LEFT_PAREN);
			setState(4698);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
			case 1:
				{
				setState(4697);
				_la = _input.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(4701);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
			case 1:
				{
				setState(4700);
				_la = _input.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(4703);
			xml_multiuse_expression_element();
			setState(4708);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4704);
				match(COMMA);
				setState(4705);
				xml_multiuse_expression_element();
				}
				}
				setState(4710);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4711);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespaces_clauseContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(plsqlParser.XMLNAMESPACES, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespaces_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_namespaces_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_namespaces_clause(this);
		}
	}

	public final Xml_namespaces_clauseContext xml_namespaces_clause() throws RecognitionException {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_xml_namespaces_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4713);
			match(XMLNAMESPACES);
			setState(4714);
			match(LEFT_PAREN);
			setState(4718);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
			case 1:
				{
				setState(4715);
				concatenation_wrapper();
				setState(4716);
				column_alias();
				}
				break;
			}
			setState(4726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4720);
				match(COMMA);
				setState(4721);
				concatenation_wrapper();
				setState(4722);
				column_alias();
				}
				}
				setState(4728);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4730);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4729);
				xml_general_default_part();
				}
			}

			setState(4732);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_table_columnContext extends ParserRuleContext {
		public Xml_column_nameContext xml_column_name() {
			return getRuleContext(Xml_column_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(plsqlParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode PATH() { return getToken(plsqlParser.PATH, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_table_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_table_column(this);
		}
	}

	public final Xml_table_columnContext xml_table_column() throws RecognitionException {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_xml_table_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4734);
			xml_column_name();
			setState(4745);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(4735);
				match(FOR);
				setState(4736);
				match(ORDINALITY);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(4737);
				type_spec();
				setState(4740);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(4738);
					match(PATH);
					setState(4739);
					concatenation_wrapper();
					}
				}

				setState(4743);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(4742);
					xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_general_default_partContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_general_default_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_general_default_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_general_default_part(this);
		}
	}

	public final Xml_general_default_partContext xml_general_default_part() throws RecognitionException {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_xml_general_default_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4747);
			match(DEFAULT);
			setState(4748);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_multiuse_expression_elementContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_multiuse_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_multiuse_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_multiuse_expression_element(this);
		}
	}

	public final Xml_multiuse_expression_elementContext xml_multiuse_expression_element() throws RecognitionException {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4750);
			expression();
			setState(4757);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4751);
				match(AS);
				setState(4755);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,597,_ctx) ) {
				case 1:
					{
					setState(4752);
					id_expression();
					}
					break;
				case 2:
					{
					setState(4753);
					match(EVALNAME);
					setState(4754);
					concatenation();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlroot_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlroot_param_version_part(this);
		}
	}

	public final Xmlroot_param_version_partContext xmlroot_param_version_part() throws RecognitionException {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_xmlroot_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4759);
			match(VERSION);
			setState(4763);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
			case 1:
				{
				setState(4760);
				match(NO);
				setState(4761);
				match(VALUE);
				}
				break;
			case 2:
				{
				setState(4762);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_standalone_partContext extends ParserRuleContext {
		public TerminalNode STANDALONE() { return getToken(plsqlParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(plsqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_standalone_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlroot_param_standalone_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlroot_param_standalone_part(this);
		}
	}

	public final Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() throws RecognitionException {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4765);
			match(STANDALONE);
			setState(4771);
			switch (_input.LA(1)) {
			case YES:
				{
				setState(4766);
				match(YES);
				}
				break;
			case NO:
				{
				setState(4767);
				match(NO);
				setState(4769);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4768);
					match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
		public TerminalNode ENCODING() { return getToken(plsqlParser.ENCODING, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_enconding_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_enconding_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_enconding_part(this);
		}
	}

	public final Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() throws RecognitionException {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_xmlserialize_param_enconding_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4773);
			match(ENCODING);
			setState(4774);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_version_part(this);
		}
	}

	public final Xmlserialize_param_version_partContext xmlserialize_param_version_part() throws RecognitionException {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_xmlserialize_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4776);
			match(VERSION);
			setState(4777);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_ident_partContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode INDENT() { return getToken(plsqlParser.INDENT, 0); }
		public TerminalNode SIZE() { return getToken(plsqlParser.SIZE, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_ident_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXmlserialize_param_ident_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXmlserialize_param_ident_part(this);
		}
	}

	public final Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() throws RecognitionException {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			setState(4787);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(4779);
				match(NO);
				setState(4780);
				match(INDENT);
				}
				break;
			case INDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4781);
				match(INDENT);
				setState(4785);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(4782);
					match(SIZE);
					setState(4783);
					match(EQUALS_OP);
					setState(4784);
					concatenation_wrapper();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_static_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Boolean_static_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_static_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBoolean_static_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBoolean_static_expression(this);
		}
	}

	public final Boolean_static_expressionContext boolean_static_expression() throws RecognitionException {
		Boolean_static_expressionContext _localctx = new Boolean_static_expressionContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_boolean_static_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4789);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Preprocessor_internal_statementContext extends ParserRuleContext {
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Sql_scriptContext sql_script() {
			return getRuleContext(Sql_scriptContext.class,0);
		}
		public Preprocessor_internal_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preprocessor_internal_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPreprocessor_internal_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPreprocessor_internal_statement(this);
		}
	}

	public final Preprocessor_internal_statementContext preprocessor_internal_statement() throws RecognitionException {
		Preprocessor_internal_statementContext _localctx = new Preprocessor_internal_statementContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_preprocessor_internal_statement);
		int _la;
		try {
			setState(4798);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4792); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4791);
					declare_spec();
					}
					}
					setState(4794); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (PROCEDURE - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4796);
				seq_of_statements();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4797);
				sql_script();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Preprocessor_statementContext extends ParserRuleContext {
		public TerminalNode PP_IF() { return getToken(plsqlParser.PP_IF, 0); }
		public List<Boolean_static_expressionContext> boolean_static_expression() {
			return getRuleContexts(Boolean_static_expressionContext.class);
		}
		public Boolean_static_expressionContext boolean_static_expression(int i) {
			return getRuleContext(Boolean_static_expressionContext.class,i);
		}
		public List<TerminalNode> PP_THEN() { return getTokens(plsqlParser.PP_THEN); }
		public TerminalNode PP_THEN(int i) {
			return getToken(plsqlParser.PP_THEN, i);
		}
		public TerminalNode PP_END() { return getToken(plsqlParser.PP_END, 0); }
		public List<Preprocessor_internal_statementContext> preprocessor_internal_statement() {
			return getRuleContexts(Preprocessor_internal_statementContext.class);
		}
		public Preprocessor_internal_statementContext preprocessor_internal_statement(int i) {
			return getRuleContext(Preprocessor_internal_statementContext.class,i);
		}
		public List<TerminalNode> PP_ELSIF() { return getTokens(plsqlParser.PP_ELSIF); }
		public TerminalNode PP_ELSIF(int i) {
			return getToken(plsqlParser.PP_ELSIF, i);
		}
		public TerminalNode PP_ELSE() { return getToken(plsqlParser.PP_ELSE, 0); }
		public Preprocessor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preprocessor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPreprocessor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPreprocessor_statement(this);
		}
	}

	public final Preprocessor_statementContext preprocessor_statement() throws RecognitionException {
		Preprocessor_statementContext _localctx = new Preprocessor_statementContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_preprocessor_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4800);
			match(PP_IF);
			setState(4801);
			boolean_static_expression();
			setState(4802);
			match(PP_THEN);
			setState(4804);
			_la = _input.LA(1);
			if (((((_la - -1)) & ~0x3f) == 0 && ((1L << (_la - -1)) & ((1L << (EOF - -1)) | (1L << (PP_IF - -1)) | (1L << (A_LETTER - -1)) | (1L << (ADD - -1)) | (1L << (AFTER - -1)) | (1L << (AGENT - -1)) | (1L << (AGGREGATE - -1)) | (1L << (ALTER - -1)) | (1L << (ANALYZE - -1)) | (1L << (ARRAY - -1)) | (1L << (ASSOCIATE - -1)) | (1L << (AT - -1)) | (1L << (ATTRIBUTE - -1)) | (1L << (AUDIT - -1)) | (1L << (AUTHID - -1)) | (1L << (AUTO - -1)) | (1L << (AUTOMATIC - -1)) | (1L << (AUTONOMOUS_TRANSACTION - -1)) | (1L << (BATCH - -1)) | (1L << (BEFORE - -1)) | (1L << (BEGIN - -1)) | (1L << (BFILE - -1)) | (1L << (BINARY_DOUBLE - -1)) | (1L << (BINARY_FLOAT - -1)) | (1L << (BINARY_INTEGER - -1)) | (1L << (BLOB - -1)) | (1L << (BLOCK - -1)) | (1L << (BODY - -1)) | (1L << (BOOLEAN - -1)) | (1L << (BOTH - -1)) | (1L << (BULK - -1)) | (1L << (BYTE - -1)) | (1L << (C_LETTER - -1)) | (1L << (CALL - -1)) | (1L << (CANONICAL - -1)) | (1L << (CASCADE - -1)) | (1L << (CASE - -1)) | (1L << (CAST - -1)) | (1L << (CHAR - -1)) | (1L << (CHAR_CS - -1)) | (1L << (CHARACTER - -1)) | (1L << (CHR - -1)) | (1L << (CLOB - -1)) | (1L << (CLOSE - -1)) | (1L << (CLUSTER - -1)) | (1L << (COLLECT - -1)) | (1L << (COLUMNS - -1)))) != 0) || ((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (COMMENT - 63)) | (1L << (COMMIT - 63)) | (1L << (COMMITTED - 63)) | (1L << (COMPATIBILITY - 63)) | (1L << (COMPILE - 63)) | (1L << (COMPOUND - 63)) | (1L << (CONSTANT - 63)) | (1L << (CONSTRAINT - 63)) | (1L << (CONSTRAINTS - 63)) | (1L << (CONSTRUCTOR - 63)) | (1L << (CONTENT - 63)) | (1L << (CONTEXT - 63)) | (1L << (CONTINUE - 63)) | (1L << (CONVERT - 63)) | (1L << (CORRUPT_XID - 63)) | (1L << (CORRUPT_XID_ALL - 63)) | (1L << (COST - 63)) | (1L << (COUNT - 63)) | (1L << (CREATE - 63)) | (1L << (CROSS - 63)) | (1L << (CUBE - 63)) | (1L << (CURRENT_USER - 63)) | (1L << (CURSOR - 63)) | (1L << (CUSTOMDATUM - 63)) | (1L << (CYCLE - 63)) | (1L << (DATA - 63)) | (1L << (DATABASE - 63)) | (1L << (DAY - 63)) | (1L << (DB_ROLE_CHANGE - 63)) | (1L << (DBTIMEZONE - 63)) | (1L << (DDL - 63)) | (1L << (DEBUG - 63)) | (1L << (DEC - 63)) | (1L << (DECIMAL - 63)) | (1L << (DECLARE - 63)) | (1L << (DECOMPOSE - 63)) | (1L << (DECREMENT - 63)) | (1L << (DEFAULTS - 63)) | (1L << (DEFERRED - 63)) | (1L << (DEFINER - 63)) | (1L << (DELETE - 63)) | (1L << (DETERMINISTIC - 63)) | (1L << (DIMENSION - 63)) | (1L << (DISABLE - 63)) | (1L << (DISASSOCIATE - 63)) | (1L << (DOCUMENT - 63)) | (1L << (DOUBLE - 63)) | (1L << (DROP - 63)) | (1L << (DSINTERVAL_UNCONSTRAINED - 63)) | (1L << (EACH - 63)) | (1L << (ELEMENT - 63)) | (1L << (EMPTY - 63)) | (1L << (ENABLE - 63)) | (1L << (ENCODING - 63)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCK - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PIPE - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELECT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATE - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITH - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (LEFT_PAREN - 453)) | (1L << (SOLIDUS - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (LESS_THAN_OP - 518)) | (1L << (INTRODUCER - 518)) | (1L << (SQLPLUS_PROMPT - 518)) | (1L << (SQLPLUS_CALLSCRIPT - 518)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4803);
				preprocessor_internal_statement();
				}
			}

			setState(4814);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PP_ELSIF) {
				{
				{
				setState(4806);
				match(PP_ELSIF);
				setState(4807);
				boolean_static_expression();
				setState(4808);
				match(PP_THEN);
				setState(4810);
				_la = _input.LA(1);
				if (((((_la - -1)) & ~0x3f) == 0 && ((1L << (_la - -1)) & ((1L << (EOF - -1)) | (1L << (PP_IF - -1)) | (1L << (A_LETTER - -1)) | (1L << (ADD - -1)) | (1L << (AFTER - -1)) | (1L << (AGENT - -1)) | (1L << (AGGREGATE - -1)) | (1L << (ALTER - -1)) | (1L << (ANALYZE - -1)) | (1L << (ARRAY - -1)) | (1L << (ASSOCIATE - -1)) | (1L << (AT - -1)) | (1L << (ATTRIBUTE - -1)) | (1L << (AUDIT - -1)) | (1L << (AUTHID - -1)) | (1L << (AUTO - -1)) | (1L << (AUTOMATIC - -1)) | (1L << (AUTONOMOUS_TRANSACTION - -1)) | (1L << (BATCH - -1)) | (1L << (BEFORE - -1)) | (1L << (BEGIN - -1)) | (1L << (BFILE - -1)) | (1L << (BINARY_DOUBLE - -1)) | (1L << (BINARY_FLOAT - -1)) | (1L << (BINARY_INTEGER - -1)) | (1L << (BLOB - -1)) | (1L << (BLOCK - -1)) | (1L << (BODY - -1)) | (1L << (BOOLEAN - -1)) | (1L << (BOTH - -1)) | (1L << (BULK - -1)) | (1L << (BYTE - -1)) | (1L << (C_LETTER - -1)) | (1L << (CALL - -1)) | (1L << (CANONICAL - -1)) | (1L << (CASCADE - -1)) | (1L << (CASE - -1)) | (1L << (CAST - -1)) | (1L << (CHAR - -1)) | (1L << (CHAR_CS - -1)) | (1L << (CHARACTER - -1)) | (1L << (CHR - -1)) | (1L << (CLOB - -1)) | (1L << (CLOSE - -1)) | (1L << (CLUSTER - -1)) | (1L << (COLLECT - -1)) | (1L << (COLUMNS - -1)))) != 0) || ((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (COMMENT - 63)) | (1L << (COMMIT - 63)) | (1L << (COMMITTED - 63)) | (1L << (COMPATIBILITY - 63)) | (1L << (COMPILE - 63)) | (1L << (COMPOUND - 63)) | (1L << (CONSTANT - 63)) | (1L << (CONSTRAINT - 63)) | (1L << (CONSTRAINTS - 63)) | (1L << (CONSTRUCTOR - 63)) | (1L << (CONTENT - 63)) | (1L << (CONTEXT - 63)) | (1L << (CONTINUE - 63)) | (1L << (CONVERT - 63)) | (1L << (CORRUPT_XID - 63)) | (1L << (CORRUPT_XID_ALL - 63)) | (1L << (COST - 63)) | (1L << (COUNT - 63)) | (1L << (CREATE - 63)) | (1L << (CROSS - 63)) | (1L << (CUBE - 63)) | (1L << (CURRENT_USER - 63)) | (1L << (CURSOR - 63)) | (1L << (CUSTOMDATUM - 63)) | (1L << (CYCLE - 63)) | (1L << (DATA - 63)) | (1L << (DATABASE - 63)) | (1L << (DAY - 63)) | (1L << (DB_ROLE_CHANGE - 63)) | (1L << (DBTIMEZONE - 63)) | (1L << (DDL - 63)) | (1L << (DEBUG - 63)) | (1L << (DEC - 63)) | (1L << (DECIMAL - 63)) | (1L << (DECLARE - 63)) | (1L << (DECOMPOSE - 63)) | (1L << (DECREMENT - 63)) | (1L << (DEFAULTS - 63)) | (1L << (DEFERRED - 63)) | (1L << (DEFINER - 63)) | (1L << (DELETE - 63)) | (1L << (DETERMINISTIC - 63)) | (1L << (DIMENSION - 63)) | (1L << (DISABLE - 63)) | (1L << (DISASSOCIATE - 63)) | (1L << (DOCUMENT - 63)) | (1L << (DOUBLE - 63)) | (1L << (DROP - 63)) | (1L << (DSINTERVAL_UNCONSTRAINED - 63)) | (1L << (EACH - 63)) | (1L << (ELEMENT - 63)) | (1L << (EMPTY - 63)) | (1L << (ENABLE - 63)) | (1L << (ENCODING - 63)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCK - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PIPE - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELECT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATE - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITH - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (LEFT_PAREN - 453)) | (1L << (SOLIDUS - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (LESS_THAN_OP - 518)) | (1L << (INTRODUCER - 518)) | (1L << (SQLPLUS_PROMPT - 518)) | (1L << (SQLPLUS_CALLSCRIPT - 518)))) != 0) || _la==REGULAR_ID) {
					{
					setState(4809);
					preprocessor_internal_statement();
					}
				}

				}
				}
				setState(4816);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4821);
			_la = _input.LA(1);
			if (_la==PP_ELSE) {
				{
				setState(4817);
				match(PP_ELSE);
				setState(4819);
				_la = _input.LA(1);
				if (((((_la - -1)) & ~0x3f) == 0 && ((1L << (_la - -1)) & ((1L << (EOF - -1)) | (1L << (PP_IF - -1)) | (1L << (A_LETTER - -1)) | (1L << (ADD - -1)) | (1L << (AFTER - -1)) | (1L << (AGENT - -1)) | (1L << (AGGREGATE - -1)) | (1L << (ALTER - -1)) | (1L << (ANALYZE - -1)) | (1L << (ARRAY - -1)) | (1L << (ASSOCIATE - -1)) | (1L << (AT - -1)) | (1L << (ATTRIBUTE - -1)) | (1L << (AUDIT - -1)) | (1L << (AUTHID - -1)) | (1L << (AUTO - -1)) | (1L << (AUTOMATIC - -1)) | (1L << (AUTONOMOUS_TRANSACTION - -1)) | (1L << (BATCH - -1)) | (1L << (BEFORE - -1)) | (1L << (BEGIN - -1)) | (1L << (BFILE - -1)) | (1L << (BINARY_DOUBLE - -1)) | (1L << (BINARY_FLOAT - -1)) | (1L << (BINARY_INTEGER - -1)) | (1L << (BLOB - -1)) | (1L << (BLOCK - -1)) | (1L << (BODY - -1)) | (1L << (BOOLEAN - -1)) | (1L << (BOTH - -1)) | (1L << (BULK - -1)) | (1L << (BYTE - -1)) | (1L << (C_LETTER - -1)) | (1L << (CALL - -1)) | (1L << (CANONICAL - -1)) | (1L << (CASCADE - -1)) | (1L << (CASE - -1)) | (1L << (CAST - -1)) | (1L << (CHAR - -1)) | (1L << (CHAR_CS - -1)) | (1L << (CHARACTER - -1)) | (1L << (CHR - -1)) | (1L << (CLOB - -1)) | (1L << (CLOSE - -1)) | (1L << (CLUSTER - -1)) | (1L << (COLLECT - -1)) | (1L << (COLUMNS - -1)))) != 0) || ((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (COMMENT - 63)) | (1L << (COMMIT - 63)) | (1L << (COMMITTED - 63)) | (1L << (COMPATIBILITY - 63)) | (1L << (COMPILE - 63)) | (1L << (COMPOUND - 63)) | (1L << (CONSTANT - 63)) | (1L << (CONSTRAINT - 63)) | (1L << (CONSTRAINTS - 63)) | (1L << (CONSTRUCTOR - 63)) | (1L << (CONTENT - 63)) | (1L << (CONTEXT - 63)) | (1L << (CONTINUE - 63)) | (1L << (CONVERT - 63)) | (1L << (CORRUPT_XID - 63)) | (1L << (CORRUPT_XID_ALL - 63)) | (1L << (COST - 63)) | (1L << (COUNT - 63)) | (1L << (CREATE - 63)) | (1L << (CROSS - 63)) | (1L << (CUBE - 63)) | (1L << (CURRENT_USER - 63)) | (1L << (CURSOR - 63)) | (1L << (CUSTOMDATUM - 63)) | (1L << (CYCLE - 63)) | (1L << (DATA - 63)) | (1L << (DATABASE - 63)) | (1L << (DAY - 63)) | (1L << (DB_ROLE_CHANGE - 63)) | (1L << (DBTIMEZONE - 63)) | (1L << (DDL - 63)) | (1L << (DEBUG - 63)) | (1L << (DEC - 63)) | (1L << (DECIMAL - 63)) | (1L << (DECLARE - 63)) | (1L << (DECOMPOSE - 63)) | (1L << (DECREMENT - 63)) | (1L << (DEFAULTS - 63)) | (1L << (DEFERRED - 63)) | (1L << (DEFINER - 63)) | (1L << (DELETE - 63)) | (1L << (DETERMINISTIC - 63)) | (1L << (DIMENSION - 63)) | (1L << (DISABLE - 63)) | (1L << (DISASSOCIATE - 63)) | (1L << (DOCUMENT - 63)) | (1L << (DOUBLE - 63)) | (1L << (DROP - 63)) | (1L << (DSINTERVAL_UNCONSTRAINED - 63)) | (1L << (EACH - 63)) | (1L << (ELEMENT - 63)) | (1L << (EMPTY - 63)) | (1L << (ENABLE - 63)) | (1L << (ENCODING - 63)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCK - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PIPE - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELECT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATE - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITH - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (LEFT_PAREN - 453)) | (1L << (SOLIDUS - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || ((((_la - 518)) & ~0x3f) == 0 && ((1L << (_la - 518)) & ((1L << (LESS_THAN_OP - 518)) | (1L << (INTRODUCER - 518)) | (1L << (SQLPLUS_PROMPT - 518)) | (1L << (SQLPLUS_CALLSCRIPT - 518)))) != 0) || _la==REGULAR_ID) {
					{
					setState(4818);
					preprocessor_internal_statement();
					}
				}

				}
			}

			setState(4823);
			match(PP_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_plus_commandContext extends ParserRuleContext {
		public Whenever_commandContext whenever_command() {
			return getRuleContext(Whenever_commandContext.class,0);
		}
		public Exit_commandContext exit_command() {
			return getRuleContext(Exit_commandContext.class,0);
		}
		public Prompt_commandContext prompt_command() {
			return getRuleContext(Prompt_commandContext.class,0);
		}
		public Set_commandContext set_command() {
			return getRuleContext(Set_commandContext.class,0);
		}
		public Call_sql_script_commandContext call_sql_script_command() {
			return getRuleContext(Call_sql_script_commandContext.class,0);
		}
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_plus_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSql_plus_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSql_plus_command(this);
		}
	}

	public final Sql_plus_commandContext sql_plus_command() throws RecognitionException {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_sql_plus_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4831);
			switch (_input.LA(1)) {
			case SOLIDUS:
				{
				setState(4825);
				match(SOLIDUS);
				}
				break;
			case WHENEVER:
				{
				setState(4826);
				whenever_command();
				}
				break;
			case EXIT:
				{
				setState(4827);
				exit_command();
				}
				break;
			case SQLPLUS_PROMPT:
				{
				setState(4828);
				prompt_command();
				}
				break;
			case SET:
				{
				setState(4829);
				set_command();
				}
				break;
			case SQLPLUS_CALLSCRIPT:
				{
				setState(4830);
				call_sql_script_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4834);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(4833);
				match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Whenever_commandContext extends ParserRuleContext {
		public TerminalNode WHENEVER() { return getToken(plsqlParser.WHENEVER, 0); }
		public TerminalNode SQLERROR() { return getToken(plsqlParser.SQLERROR, 0); }
		public TerminalNode OSERROR() { return getToken(plsqlParser.OSERROR, 0); }
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public TerminalNode SUCCESS() { return getToken(plsqlParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(plsqlParser.FAILURE, 0); }
		public TerminalNode WARNING() { return getToken(plsqlParser.WARNING, 0); }
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode NONE() { return getToken(plsqlParser.NONE, 0); }
		public Whenever_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenever_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWhenever_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWhenever_command(this);
		}
	}

	public final Whenever_commandContext whenever_command() throws RecognitionException {
		Whenever_commandContext _localctx = new Whenever_commandContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_whenever_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4836);
			match(WHENEVER);
			setState(4837);
			_la = _input.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(4843);
			switch (_input.LA(1)) {
			case EXIT:
				{
				setState(4838);
				match(EXIT);
				setState(4839);
				_la = _input.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4840);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case CONTINUE:
				{
				setState(4841);
				match(CONTINUE);
				setState(4842);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public TerminalNode ON() { return getToken(plsqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(plsqlParser.OFF, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Set_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSet_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSet_command(this);
		}
	}

	public final Set_commandContext set_command() throws RecognitionException {
		Set_commandContext _localctx = new Set_commandContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_set_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4845);
			match(SET);
			setState(4846);
			regular_id();
			setState(4852);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
			case 1:
				{
				setState(4847);
				match(CHAR_STRING);
				}
				break;
			case 2:
				{
				setState(4848);
				match(ON);
				}
				break;
			case 3:
				{
				setState(4849);
				match(OFF);
				}
				break;
			case 4:
				{
				setState(4850);
				numeric();
				}
				break;
			case 5:
				{
				setState(4851);
				regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_commandContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public Exit_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterExit_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitExit_command(this);
		}
	}

	public final Exit_commandContext exit_command() throws RecognitionException {
		Exit_commandContext _localctx = new Exit_commandContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_exit_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4854);
			match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prompt_commandContext extends ParserRuleContext {
		public TerminalNode SQLPLUS_PROMPT() { return getToken(plsqlParser.SQLPLUS_PROMPT, 0); }
		public Prompt_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prompt_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPrompt_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPrompt_command(this);
		}
	}

	public final Prompt_commandContext prompt_command() throws RecognitionException {
		Prompt_commandContext _localctx = new Prompt_commandContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_prompt_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4856);
			match(SQLPLUS_PROMPT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_sql_script_commandContext extends ParserRuleContext {
		public TerminalNode SQLPLUS_CALLSCRIPT() { return getToken(plsqlParser.SQLPLUS_CALLSCRIPT, 0); }
		public Call_sql_script_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_sql_script_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCall_sql_script_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCall_sql_script_command(this);
		}
	}

	public final Call_sql_script_commandContext call_sql_script_command() throws RecognitionException {
		Call_sql_script_commandContext _localctx = new Call_sql_script_commandContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_call_sql_script_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4858);
			match(SQLPLUS_CALLSCRIPT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_extension_clauseContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode FOR() { return getToken(plsqlParser.FOR, 0); }
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_extension_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPartition_extension_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPartition_extension_clause(this);
		}
	}

	public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_partition_extension_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4860);
			_la = _input.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(4862);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4861);
				match(FOR);
				}
			}

			setState(4864);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public TerminalNode AS() { return getToken(plsqlParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_alias(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_column_alias);
		int _la;
		try {
			setState(4874);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4867);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4866);
					match(AS);
					}
				}

				setState(4871);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL_PERCENT_ROWCOUNT:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4869);
					id();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(4870);
					alias_quoted_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4873);
				match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_alias(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4878);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4876);
				id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				{
				setState(4877);
				alias_quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_quoted_stringContext extends ParserRuleContext {
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Alias_quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAlias_quoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAlias_quoted_string(this);
		}
	}

	public final Alias_quoted_stringContext alias_quoted_string() throws RecognitionException {
		Alias_quoted_stringContext _localctx = new Alias_quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_alias_quoted_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4880);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(plsqlParser.WHERE, 0); }
		public Current_of_clauseContext current_of_clause() {
			return getRuleContext(Current_of_clauseContext.class,0);
		}
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitWhere_clause(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4882);
			match(WHERE);
			setState(4885);
			switch (_input.LA(1)) {
			case CURRENT:
				{
				setState(4883);
				current_of_clause();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_NUMBER:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4884);
				condition_wrapper();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_of_clauseContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(plsqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(plsqlParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Current_of_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_of_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCurrent_of_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCurrent_of_clause(this);
		}
	}

	public final Current_of_clauseContext current_of_clause() throws RecognitionException {
		Current_of_clauseContext _localctx = new Current_of_clauseContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_current_of_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4887);
			match(CURRENT);
			setState(4888);
			match(OF);
			setState(4889);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clause_variableContext extends ParserRuleContext {
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public Collection_assoc_expressionContext collection_assoc_expression() {
			return getRuleContext(Collection_assoc_expressionContext.class,0);
		}
		public Into_clause_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInto_clause_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInto_clause_variable(this);
		}
	}

	public final Into_clause_variableContext into_clause_variable() throws RecognitionException {
		Into_clause_variableContext _localctx = new Into_clause_variableContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_into_clause_variable);
		try {
			setState(4893);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4891);
				variable_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4892);
				collection_assoc_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(plsqlParser.INTO, 0); }
		public List<Into_clause_variableContext> into_clause_variable() {
			return getRuleContexts(Into_clause_variableContext.class);
		}
		public Into_clause_variableContext into_clause_variable(int i) {
			return getRuleContext(Into_clause_variableContext.class,i);
		}
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitInto_clause(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_into_clause);
		int _la;
		try {
			setState(4915);
			switch (_input.LA(1)) {
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(4895);
				match(INTO);
				setState(4896);
				into_clause_variable();
				setState(4901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4897);
					match(COMMA);
					setState(4898);
					into_clause_variable();
					}
					}
					setState(4903);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4904);
				match(BULK);
				setState(4905);
				match(COLLECT);
				setState(4906);
				match(INTO);
				setState(4907);
				variable_name();
				setState(4912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4908);
					match(COMMA);
					setState(4909);
					variable_name();
					}
					}
					setState(4914);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_column_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterXml_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitXml_column_name(this);
		}
	}

	public final Xml_column_nameContext xml_column_name() throws RecognitionException {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_xml_column_name);
		try {
			setState(4919);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4917);
				id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(4918);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_class_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_class_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCost_class_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCost_class_name(this);
		}
	}

	public final Cost_class_nameContext cost_class_name() throws RecognitionException {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_cost_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4921);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAttribute_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAttribute_name(this);
		}
	}

	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4923);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSavepoint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSavepoint_name(this);
		}
	}

	public final Savepoint_nameContext savepoint_name() throws RecognitionException {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_savepoint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4925);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_segment_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_segment_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRollback_segment_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRollback_segment_name(this);
		}
	}

	public final Rollback_segment_nameContext rollback_segment_name() throws RecognitionException {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_rollback_segment_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4927);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_var_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_var_name(this);
		}
	}

	public final Table_var_nameContext table_var_name() throws RecognitionException {
		Table_var_nameContext _localctx = new Table_var_nameContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_table_var_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4929);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSchema_name(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4931);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRoutine_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRoutine_name(this);
		}
	}

	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_routine_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4933);
			id();
			setState(4938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4934);
				match(PERIOD);
				setState(4935);
				id_expression();
				}
				}
				setState(4940);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4943);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(4941);
				match(AT_SIGN);
				setState(4942);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPackage_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPackage_name(this);
		}
	}

	public final Package_nameContext package_name() throws RecognitionException {
		Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_package_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,628,_ctx) ) {
			case 1:
				{
				setState(4945);
				schema_name();
				setState(4946);
				match(PERIOD);
				}
				break;
			}
			setState(4950);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_type_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterImplementation_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitImplementation_type_name(this);
		}
	}

	public final Implementation_type_nameContext implementation_type_name() throws RecognitionException {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_implementation_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4952);
			id();
			setState(4955);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(4953);
				match(PERIOD);
				setState(4954);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitParameter_name(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4957);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_model_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterReference_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitReference_model_name(this);
		}
	}

	public final Reference_model_nameContext reference_model_name() throws RecognitionException {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_reference_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4959);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_model_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterMain_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitMain_model_name(this);
		}
	}

	public final Main_model_nameContext main_model_name() throws RecognitionException {
		Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_main_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4961);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_function_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterAggregate_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitAggregate_function_name(this);
		}
	}

	public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_aggregate_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4963);
			id();
			setState(4968);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4964);
				match(PERIOD);
				setState(4965);
				id_expression();
				}
				}
				setState(4970);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuery_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuery_name(this);
		}
	}

	public final Query_nameContext query_name() throws RecognitionException {
		Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_query_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4971);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstraint_name(this);
		}
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_constraint_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4973);
			id();
			setState(4978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4974);
				match(PERIOD);
				setState(4975);
				id_expression();
				}
				}
				setState(4980);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4983);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(4981);
				match(AT_SIGN);
				setState(4982);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLabel_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLabel_name(this);
		}
	}

	public final Label_nameContext label_name() throws RecognitionException {
		Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_label_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4985);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_name(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4987);
			id_expression();
			setState(4992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4988);
				match(PERIOD);
				setState(4989);
				id_expression();
				}
				}
				setState(4994);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Sequence_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterSequence_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitSequence_name(this);
		}
	}

	public final Sequence_nameContext sequence_name() throws RecognitionException {
		Sequence_nameContext _localctx = new Sequence_nameContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_sequence_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4995);
			id_expression();
			setState(5000);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(4996);
				match(PERIOD);
				setState(4997);
				id_expression();
				}
				}
				setState(5002);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterException_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitException_name(this);
		}
	}

	public final Exception_nameContext exception_name() throws RecognitionException {
		Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_exception_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5003);
			id();
			setState(5008);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5004);
				match(PERIOD);
				setState(5005);
				id_expression();
				}
				}
				setState(5010);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_name(this);
		}
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5011);
			id();
			setState(5014);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5012);
				match(PERIOD);
				setState(5013);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterProcedure_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitProcedure_name(this);
		}
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_procedure_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5016);
			id();
			setState(5019);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5017);
				match(PERIOD);
				setState(5018);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTrigger_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTrigger_name(this);
		}
	}

	public final Trigger_nameContext trigger_name() throws RecognitionException {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_trigger_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5021);
			id();
			setState(5024);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5022);
				match(PERIOD);
				setState(5023);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterVariable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitVariable_name(this);
		}
	}

	public final Variable_nameContext variable_name() throws RecognitionException {
		Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_variable_name);
		int _la;
		try {
			setState(5036);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5028);
				_la = _input.LA(1);
				if (_la==INTRODUCER) {
					{
					setState(5026);
					match(INTRODUCER);
					setState(5027);
					char_set_name();
					}
				}

				setState(5030);
				id_expression();
				setState(5033);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(5031);
					match(PERIOD);
					setState(5032);
					id_expression();
					}
				}

				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5035);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitIndex_name(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5038);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCursor_name(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_cursor_name);
		try {
			setState(5042);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5040);
				id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5041);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRecord_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRecord_name(this);
		}
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_record_name);
		try {
			setState(5046);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5044);
				id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5045);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterCollection_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitCollection_name(this);
		}
	}

	public final Collection_nameContext collection_name() throws RecognitionException {
		Collection_nameContext _localctx = new Collection_nameContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_collection_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5048);
			id();
			setState(5051);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
			case 1:
				{
				setState(5049);
				match(PERIOD);
				setState(5050);
				id_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Link_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_link_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLink_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLink_name(this);
		}
	}

	public final Link_nameContext link_name() throws RecognitionException {
		Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_link_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5053);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitColumn_name(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_column_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5055);
			id();
			setState(5060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5056);
				match(PERIOD);
				setState(5057);
				id_expression();
				}
				}
				setState(5062);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tableview_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableview_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTableview_name(this);
		}
	}

	public final Tableview_nameContext tableview_name() throws RecognitionException {
		Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5063);
			id();
			setState(5066);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
			case 1:
				{
				setState(5064);
				match(PERIOD);
				setState(5065);
				id_expression();
				}
				break;
			}
			setState(5071);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,647,_ctx) ) {
			case 1:
				{
				setState(5068);
				match(AT_SIGN);
				setState(5069);
				link_name();
				}
				break;
			case 2:
				{
				setState(5070);
				partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_set_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Char_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterChar_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitChar_set_name(this);
		}
	}

	public final Char_set_nameContext char_set_name() throws RecognitionException {
		Char_set_nameContext _localctx = new Char_set_nameContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_char_set_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5073);
			id_expression();
			setState(5078);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5074);
				match(PERIOD);
				setState(5075);
				id_expression();
				}
				}
				setState(5080);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Keep_clauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keep_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterKeep_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitKeep_clause(this);
		}
	}

	public final Keep_clauseContext keep_clause() throws RecognitionException {
		Keep_clauseContext _localctx = new Keep_clauseContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_keep_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5081);
			match(KEEP);
			setState(5082);
			match(LEFT_PAREN);
			setState(5083);
			match(DENSE_RANK);
			setState(5084);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(5085);
			order_by_clause();
			setState(5086);
			match(RIGHT_PAREN);
			setState(5088);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
			case 1:
				{
				setState(5087);
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argumentContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument(this);
		}
	}

	public final Function_argumentContext function_argument() throws RecognitionException {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_function_argument);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5090);
			match(LEFT_PAREN);
			setState(5092);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NOT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PRIOR - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TO_CHAR - 389)) | (1L << (TO_NUMBER - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUE - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (UNSIGNED_INTEGER - 453)) | (1L << (APPROXIMATE_NUM_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (LEFT_PAREN - 453)) | (1L << (PLUS_SIGN - 453)) | (1L << (MINUS_SIGN - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(5091);
				argument();
				}
			}

			setState(5098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5094);
				match(COMMA);
				setState(5095);
				argument();
				}
				}
				setState(5100);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5101);
			match(RIGHT_PAREN);
			setState(5103);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
			case 1:
				{
				setState(5102);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_analyticContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<Respect_or_ignore_nullsContext> respect_or_ignore_nulls() {
			return getRuleContexts(Respect_or_ignore_nullsContext.class);
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return getRuleContext(Respect_or_ignore_nullsContext.class,i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_analytic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument_analytic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument_analytic(this);
		}
	}

	public final Function_argument_analyticContext function_argument_analytic() throws RecognitionException {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_function_argument_analytic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5105);
			match(LEFT_PAREN);
			setState(5110);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NOT - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PRIOR - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TO_CHAR - 389)) | (1L << (TO_NUMBER - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUE - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (UNSIGNED_INTEGER - 453)) | (1L << (APPROXIMATE_NUM_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (LEFT_PAREN - 453)) | (1L << (PLUS_SIGN - 453)) | (1L << (MINUS_SIGN - 453)) | (1L << (BINDVAR - 453)) | (1L << (COLON - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(5106);
				argument();
				setState(5108);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5107);
					respect_or_ignore_nulls();
					}
				}

				}
			}

			setState(5119);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5112);
				match(COMMA);
				setState(5113);
				argument();
				setState(5115);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5114);
					respect_or_ignore_nulls();
					}
				}

				}
				}
				setState(5121);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5122);
			match(RIGHT_PAREN);
			setState(5124);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,657,_ctx) ) {
			case 1:
				{
				setState(5123);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_modelingContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(plsqlParser.USING, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(plsqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(plsqlParser.NULL, i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_modeling; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterFunction_argument_modeling(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitFunction_argument_modeling(this);
		}
	}

	public final Function_argument_modelingContext function_argument_modeling() throws RecognitionException {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_function_argument_modeling);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5126);
			match(LEFT_PAREN);
			setState(5127);
			column_name();
			setState(5140);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5128);
				match(COMMA);
				setState(5131);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					setState(5129);
					numeric();
					}
					break;
				case NULL:
					{
					setState(5130);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5138);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5133);
					match(COMMA);
					setState(5136);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(5134);
						numeric();
						}
						break;
					case NULL:
						{
						setState(5135);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(5142);
			match(USING);
			setState(5162);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
			case 1:
				{
				setState(5143);
				tableview_name();
				setState(5144);
				match(PERIOD);
				setState(5145);
				match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(5147);
				match(ASTERISK);
				}
				break;
			case 3:
				{
				setState(5148);
				expression();
				setState(5150);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					setState(5149);
					column_alias();
					}
				}

				setState(5159);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5152);
					match(COMMA);
					setState(5153);
					expression();
					setState(5155);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						setState(5154);
						column_alias();
						}
					}

					}
					}
					setState(5161);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(5164);
			match(RIGHT_PAREN);
			setState(5166);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,666,_ctx) ) {
			case 1:
				{
				setState(5165);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Respect_or_ignore_nullsContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode RESPECT() { return getToken(plsqlParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respect_or_ignore_nulls; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRespect_or_ignore_nulls(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRespect_or_ignore_nulls(this);
		}
	}

	public final Respect_or_ignore_nullsContext respect_or_ignore_nulls() throws RecognitionException {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5168);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(5169);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitArgument(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
			case 1:
				{
				setState(5171);
				id();
				setState(5172);
				match(EQUALS_OP);
				setState(5173);
				match(GREATER_THAN_OP);
				}
				break;
			}
			setState(5177);
			expression_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_specContext extends ParserRuleContext {
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(plsqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(plsqlParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterType_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitType_spec(this);
		}
	}

	public final Type_specContext type_spec() throws RecognitionException {
		Type_specContext _localctx = new Type_specContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_type_spec);
		int _la;
		try {
			setState(5187);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,670,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5179);
				datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5181);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,668,_ctx) ) {
				case 1:
					{
					setState(5180);
					match(REF);
					}
					break;
				}
				setState(5183);
				type_name();
				setState(5185);
				_la = _input.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					setState(5184);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatatypeContext extends ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		public TerminalNode WITH() { return getToken(plsqlParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitDatatype(this);
		}
	}

	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_datatype);
		int _la;
		try {
			setState(5217);
			switch (_input.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INT:
			case INTEGER:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR:
			case VARCHAR2:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 1);
				{
				setState(5189);
				native_datatype_element();
				setState(5191);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
				case 1:
					{
					setState(5190);
					precision_part();
					}
					break;
				}
				setState(5199);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5193);
					match(WITH);
					setState(5195);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(5194);
						match(LOCAL);
						}
					}

					setState(5197);
					match(TIME);
					setState(5198);
					match(ZONE);
					}
				}

				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5201);
				match(INTERVAL);
				setState(5202);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(5207);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5203);
					match(LEFT_PAREN);
					setState(5204);
					expression_wrapper();
					setState(5205);
					match(RIGHT_PAREN);
					}
				}

				setState(5209);
				match(TO);
				setState(5210);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(5215);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
				case 1:
					{
					setState(5211);
					match(LEFT_PAREN);
					setState(5212);
					expression_wrapper();
					setState(5213);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_partContext extends ParserRuleContext {
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public TerminalNode BYTE() { return getToken(plsqlParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterPrecision_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitPrecision_part(this);
		}
	}

	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5219);
			match(LEFT_PAREN);
			setState(5220);
			numeric();
			setState(5223);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5221);
				match(COMMA);
				setState(5222);
				numeric();
				}
			}

			setState(5226);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(5225);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(5228);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Native_datatype_elementContext extends ParserRuleContext {
		public TerminalNode BINARY_INTEGER() { return getToken(plsqlParser.BINARY_INTEGER, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(plsqlParser.PLS_INTEGER, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(plsqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(plsqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode NATURALN() { return getToken(plsqlParser.NATURALN, 0); }
		public TerminalNode POSITIVE() { return getToken(plsqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(plsqlParser.POSITIVEN, 0); }
		public TerminalNode SIGNTYPE() { return getToken(plsqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(plsqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode NVARCHAR2() { return getToken(plsqlParser.NVARCHAR2, 0); }
		public TerminalNode DEC() { return getToken(plsqlParser.DEC, 0); }
		public TerminalNode INTEGER() { return getToken(plsqlParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(plsqlParser.INT, 0); }
		public TerminalNode NUMERIC() { return getToken(plsqlParser.NUMERIC, 0); }
		public TerminalNode SMALLINT() { return getToken(plsqlParser.SMALLINT, 0); }
		public TerminalNode NUMBER() { return getToken(plsqlParser.NUMBER, 0); }
		public TerminalNode DECIMAL() { return getToken(plsqlParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(plsqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(plsqlParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(plsqlParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(plsqlParser.REAL, 0); }
		public TerminalNode NCHAR() { return getToken(plsqlParser.NCHAR, 0); }
		public TerminalNode LONG() { return getToken(plsqlParser.LONG, 0); }
		public TerminalNode RAW() { return getToken(plsqlParser.RAW, 0); }
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(plsqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR2() { return getToken(plsqlParser.VARCHAR2, 0); }
		public TerminalNode VARCHAR() { return getToken(plsqlParser.VARCHAR, 0); }
		public TerminalNode STRING() { return getToken(plsqlParser.STRING, 0); }
		public TerminalNode BOOLEAN() { return getToken(plsqlParser.BOOLEAN, 0); }
		public TerminalNode DATE() { return getToken(plsqlParser.DATE, 0); }
		public TerminalNode ROWID() { return getToken(plsqlParser.ROWID, 0); }
		public TerminalNode UROWID() { return getToken(plsqlParser.UROWID, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(plsqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(plsqlParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(plsqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(plsqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(plsqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(plsqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode BFILE() { return getToken(plsqlParser.BFILE, 0); }
		public TerminalNode BLOB() { return getToken(plsqlParser.BLOB, 0); }
		public TerminalNode CLOB() { return getToken(plsqlParser.CLOB, 0); }
		public TerminalNode NCLOB() { return getToken(plsqlParser.NCLOB, 0); }
		public TerminalNode MLSLABEL() { return getToken(plsqlParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNative_datatype_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNative_datatype_element(this);
		}
	}

	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_native_datatype_element);
		int _la;
		try {
			setState(5290);
			switch (_input.LA(1)) {
			case BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5230);
				match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5231);
				match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5232);
				match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(5233);
				match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5234);
				match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				enterOuterAlt(_localctx, 6);
				{
				setState(5235);
				match(NATURALN);
				}
				break;
			case POSITIVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5236);
				match(POSITIVE);
				}
				break;
			case POSITIVEN:
				enterOuterAlt(_localctx, 8);
				{
				setState(5237);
				match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5238);
				match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				enterOuterAlt(_localctx, 10);
				{
				setState(5239);
				match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				enterOuterAlt(_localctx, 11);
				{
				setState(5240);
				match(NVARCHAR2);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 12);
				{
				setState(5241);
				match(DEC);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 13);
				{
				setState(5242);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 14);
				{
				setState(5243);
				match(INT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 15);
				{
				setState(5244);
				match(NUMERIC);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 16);
				{
				setState(5245);
				match(SMALLINT);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 17);
				{
				setState(5246);
				match(NUMBER);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 18);
				{
				setState(5247);
				match(DECIMAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 19);
				{
				setState(5248);
				match(DOUBLE);
				setState(5250);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5249);
					match(PRECISION);
					}
				}

				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 20);
				{
				setState(5252);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 21);
				{
				setState(5253);
				match(REAL);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 22);
				{
				setState(5254);
				match(NCHAR);
				}
				break;
			case LONG:
				enterOuterAlt(_localctx, 23);
				{
				setState(5255);
				match(LONG);
				setState(5257);
				_la = _input.LA(1);
				if (_la==RAW) {
					{
					setState(5256);
					match(RAW);
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(5259);
				match(CHAR);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 25);
				{
				setState(5260);
				match(CHARACTER);
				}
				break;
			case VARCHAR2:
				enterOuterAlt(_localctx, 26);
				{
				setState(5261);
				match(VARCHAR2);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 27);
				{
				setState(5262);
				match(VARCHAR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 28);
				{
				setState(5263);
				match(STRING);
				}
				break;
			case RAW:
				enterOuterAlt(_localctx, 29);
				{
				setState(5264);
				match(RAW);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 30);
				{
				setState(5265);
				match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 31);
				{
				setState(5266);
				match(DATE);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 32);
				{
				setState(5267);
				match(ROWID);
				}
				break;
			case UROWID:
				enterOuterAlt(_localctx, 33);
				{
				setState(5268);
				match(UROWID);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 34);
				{
				setState(5269);
				match(YEAR);
				}
				break;
			case MONTH:
				enterOuterAlt(_localctx, 35);
				{
				setState(5270);
				match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 36);
				{
				setState(5271);
				match(DAY);
				}
				break;
			case HOUR:
				enterOuterAlt(_localctx, 37);
				{
				setState(5272);
				match(HOUR);
				}
				break;
			case MINUTE:
				enterOuterAlt(_localctx, 38);
				{
				setState(5273);
				match(MINUTE);
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 39);
				{
				setState(5274);
				match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				enterOuterAlt(_localctx, 40);
				{
				setState(5275);
				match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 41);
				{
				setState(5276);
				match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				enterOuterAlt(_localctx, 42);
				{
				setState(5277);
				match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				enterOuterAlt(_localctx, 43);
				{
				setState(5278);
				match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 44);
				{
				setState(5279);
				match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				enterOuterAlt(_localctx, 45);
				{
				setState(5280);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 46);
				{
				setState(5281);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 47);
				{
				setState(5282);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 48);
				{
				setState(5283);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 49);
				{
				setState(5284);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				enterOuterAlt(_localctx, 50);
				{
				setState(5285);
				match(BFILE);
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 51);
				{
				setState(5286);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 52);
				{
				setState(5287);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 53);
				{
				setState(5288);
				match(NCLOB);
				}
				break;
			case MLSLABEL:
				enterOuterAlt(_localctx, 54);
				{
				setState(5289);
				match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bind_variableContext extends ParserRuleContext {
		public List<TerminalNode> BINDVAR() { return getTokens(plsqlParser.BINDVAR); }
		public TerminalNode BINDVAR(int i) {
			return getToken(plsqlParser.BINDVAR, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public TerminalNode INDICATOR() { return getToken(plsqlParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterBind_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitBind_variable(this);
		}
	}

	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_bind_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5295);
			switch (_input.LA(1)) {
			case BINDVAR:
				{
				setState(5292);
				match(BINDVAR);
				}
				break;
			case COLON:
				{
				setState(5293);
				match(COLON);
				setState(5294);
				match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5305);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,685,_ctx) ) {
			case 1:
				{
				setState(5298);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(5297);
					match(INDICATOR);
					}
				}

				setState(5303);
				switch (_input.LA(1)) {
				case BINDVAR:
					{
					setState(5300);
					match(BINDVAR);
					}
					break;
				case COLON:
					{
					setState(5301);
					match(COLON);
					setState(5302);
					match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(5311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5307);
				match(PERIOD);
				setState(5308);
				general_element_part();
				}
				}
				setState(5313);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_elementContext extends ParserRuleContext {
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public General_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGeneral_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGeneral_element(this);
		}
	}

	public final General_elementContext general_element() throws RecognitionException {
		General_elementContext _localctx = new General_elementContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_general_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5314);
			general_element_part();
			setState(5319);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5315);
				match(PERIOD);
				setState(5316);
				general_element_part();
				}
				}
				setState(5321);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_element_partContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public General_element_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGeneral_element_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGeneral_element_part(this);
		}
	}

	public final General_element_partContext general_element_part() throws RecognitionException {
		General_element_partContext _localctx = new General_element_partContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_general_element_part);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5324);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5322);
				match(INTRODUCER);
				setState(5323);
				char_set_name();
				}
			}

			setState(5326);
			id_expression();
			setState(5331);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,689,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5327);
					match(PERIOD);
					setState(5328);
					id_expression();
					}
					} 
				}
				setState(5333);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,689,_ctx);
			}
			setState(5335);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,690,_ctx) ) {
			case 1:
				{
				setState(5334);
				function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitTable_element(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5339);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5337);
				match(INTRODUCER);
				setState(5338);
				char_set_name();
				}
			}

			setState(5341);
			id_expression();
			setState(5346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5342);
				match(PERIOD);
				setState(5343);
				id_expression();
				}
				}
				setState(5348);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public List<Bind_variableContext> bind_variable() {
			return getRuleContexts(Bind_variableContext.class);
		}
		public Bind_variableContext bind_variable(int i) {
			return getRuleContext(Bind_variableContext.class,i);
		}
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public List<TerminalNode> DAY() { return getTokens(plsqlParser.DAY); }
		public TerminalNode DAY(int i) {
			return getToken(plsqlParser.DAY, i);
		}
		public List<TerminalNode> HOUR() { return getTokens(plsqlParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(plsqlParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(plsqlParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(plsqlParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(plsqlParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(plsqlParser.SECOND, i);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public TerminalNode TO() { return getToken(plsqlParser.TO, 0); }
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(plsqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(plsqlParser.UNSIGNED_INTEGER, i);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode DATE() { return getToken(plsqlParser.DATE, 0); }
		public TerminalNode NULL() { return getToken(plsqlParser.NULL, 0); }
		public TerminalNode TRUE() { return getToken(plsqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(plsqlParser.FALSE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(plsqlParser.DBTIMEZONE, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(plsqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public TerminalNode DEFAULT() { return getToken(plsqlParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConstant(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_constant);
		int _la;
		try {
			setState(5411);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5349);
				match(TIMESTAMP);
				setState(5352);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5350);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5351);
					bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5358);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,694,_ctx) ) {
				case 1:
					{
					setState(5354);
					match(AT);
					setState(5355);
					match(TIME);
					setState(5356);
					match(ZONE);
					setState(5357);
					quoted_string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5360);
				match(INTERVAL);
				setState(5364);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5361);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5362);
					bind_variable();
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL_PERCENT_ROWCOUNT:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5363);
					general_element_part();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5366);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(5380);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,699,_ctx) ) {
				case 1:
					{
					setState(5367);
					match(LEFT_PAREN);
					setState(5370);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(5368);
						match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						setState(5369);
						bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5377);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5372);
						match(COMMA);
						setState(5375);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(5373);
							match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							setState(5374);
							bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(5379);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5397);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,703,_ctx) ) {
				case 1:
					{
					setState(5382);
					match(TO);
					setState(5395);
					switch (_input.LA(1)) {
					case DAY:
						{
						setState(5383);
						match(DAY);
						}
						break;
					case HOUR:
						{
						setState(5384);
						match(HOUR);
						}
						break;
					case MINUTE:
						{
						setState(5385);
						match(MINUTE);
						}
						break;
					case SECOND:
						{
						setState(5386);
						match(SECOND);
						setState(5393);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,701,_ctx) ) {
						case 1:
							{
							setState(5387);
							match(LEFT_PAREN);
							setState(5390);
							switch (_input.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								setState(5388);
								match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								setState(5389);
								bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5392);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5399);
				numeric();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5400);
				match(DATE);
				setState(5401);
				quoted_string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(5402);
				quoted_string();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(5403);
				match(NULL);
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5404);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5405);
				match(FALSE);
				}
				break;
			case DBTIMEZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5406);
				match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				enterOuterAlt(_localctx, 10);
				{
				setState(5407);
				match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5408);
				match(MINVALUE);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 12);
				{
				setState(5409);
				match(MAXVALUE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 13);
				{
				setState(5410);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(plsqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(plsqlParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNumeric(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_numeric);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5413);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quoted_stringContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(plsqlParser.CHAR_STRING, 0); }
		public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(plsqlParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterQuoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitQuoted_string(this);
		}
	}

	public final Quoted_stringContext quoted_string() throws RecognitionException {
		Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_quoted_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5415);
			_la = _input.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(plsqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitId(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5419);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5417);
				match(INTRODUCER);
				setState(5418);
				char_set_name();
				}
			}

			setState(5421);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_expressionContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode DELIMITED_ID() { return getToken(plsqlParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterId_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitId_expression(this);
		}
	}

	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_id_expression);
		try {
			setState(5425);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5423);
				regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5424);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Not_equal_opContext extends ParserRuleContext {
		public TerminalNode NOT_EQUAL_OP() { return getToken(plsqlParser.NOT_EQUAL_OP, 0); }
		public Not_equal_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not_equal_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterNot_equal_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitNot_equal_op(this);
		}
	}

	public final Not_equal_opContext not_equal_op() throws RecognitionException {
		Not_equal_opContext _localctx = new Not_equal_opContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_not_equal_op);
		try {
			setState(5434);
			switch (_input.LA(1)) {
			case NOT_EQUAL_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5427);
				match(NOT_EQUAL_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5428);
				match(LESS_THAN_OP);
				setState(5429);
				match(GREATER_THAN_OP);
				}
				break;
			case EXCLAMATION_OPERATOR_PART:
				enterOuterAlt(_localctx, 3);
				{
				setState(5430);
				match(EXCLAMATION_OPERATOR_PART);
				setState(5431);
				match(EQUALS_OP);
				}
				break;
			case CARRET_OPERATOR_PART:
				enterOuterAlt(_localctx, 4);
				{
				setState(5432);
				match(CARRET_OPERATOR_PART);
				setState(5433);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Greater_than_or_equals_opContext extends ParserRuleContext {
		public Greater_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_greater_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterGreater_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitGreater_than_or_equals_op(this);
		}
	}

	public final Greater_than_or_equals_opContext greater_than_or_equals_op() throws RecognitionException {
		Greater_than_or_equals_opContext _localctx = new Greater_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_greater_than_or_equals_op);
		try {
			setState(5439);
			switch (_input.LA(1)) {
			case GREATER_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5436);
				match(GREATER_THAN_OR_EQUALS_OP);
				}
				break;
			case GREATER_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5437);
				match(GREATER_THAN_OP);
				setState(5438);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Less_than_or_equals_opContext extends ParserRuleContext {
		public Less_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_less_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterLess_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitLess_than_or_equals_op(this);
		}
	}

	public final Less_than_or_equals_opContext less_than_or_equals_op() throws RecognitionException {
		Less_than_or_equals_opContext _localctx = new Less_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_less_than_or_equals_op);
		try {
			setState(5444);
			switch (_input.LA(1)) {
			case LESS_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5441);
				match(LESS_THAN_OR_EQUALS_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5442);
				match(LESS_THAN_OP);
				setState(5443);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Concatenation_opContext extends ParserRuleContext {
		public Concatenation_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterConcatenation_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitConcatenation_op(this);
		}
	}

	public final Concatenation_opContext concatenation_op() throws RecognitionException {
		Concatenation_opContext _localctx = new Concatenation_opContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_concatenation_op);
		try {
			setState(5449);
			switch (_input.LA(1)) {
			case CONCATENATION_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5446);
				match(CONCATENATION_OP);
				}
				break;
			case VERTICAL_BAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5447);
				match(VERTICAL_BAR);
				setState(5448);
				match(VERTICAL_BAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_signContext extends ParserRuleContext {
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterOuter_join_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitOuter_join_sign(this);
		}
	}

	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5451);
			match(LEFT_PAREN);
			setState(5452);
			match(PLUS_SIGN);
			setState(5453);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_idContext extends ParserRuleContext {
		public TerminalNode REGULAR_ID() { return getToken(plsqlParser.REGULAR_ID, 0); }
		public TerminalNode A_LETTER() { return getToken(plsqlParser.A_LETTER, 0); }
		public TerminalNode ADD() { return getToken(plsqlParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(plsqlParser.AFTER, 0); }
		public TerminalNode AGENT() { return getToken(plsqlParser.AGENT, 0); }
		public TerminalNode AGGREGATE() { return getToken(plsqlParser.AGGREGATE, 0); }
		public TerminalNode ANALYZE() { return getToken(plsqlParser.ANALYZE, 0); }
		public TerminalNode ARRAY() { return getToken(plsqlParser.ARRAY, 0); }
		public TerminalNode ASSOCIATE() { return getToken(plsqlParser.ASSOCIATE, 0); }
		public TerminalNode AT() { return getToken(plsqlParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(plsqlParser.ATTRIBUTE, 0); }
		public TerminalNode AUDIT() { return getToken(plsqlParser.AUDIT, 0); }
		public TerminalNode AUTHID() { return getToken(plsqlParser.AUTHID, 0); }
		public TerminalNode AUTO() { return getToken(plsqlParser.AUTO, 0); }
		public TerminalNode AUTOMATIC() { return getToken(plsqlParser.AUTOMATIC, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(plsqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode BATCH() { return getToken(plsqlParser.BATCH, 0); }
		public TerminalNode BEFORE() { return getToken(plsqlParser.BEFORE, 0); }
		public TerminalNode BFILE() { return getToken(plsqlParser.BFILE, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(plsqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(plsqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(plsqlParser.BINARY_INTEGER, 0); }
		public TerminalNode BLOB() { return getToken(plsqlParser.BLOB, 0); }
		public TerminalNode BLOCK() { return getToken(plsqlParser.BLOCK, 0); }
		public TerminalNode BODY() { return getToken(plsqlParser.BODY, 0); }
		public TerminalNode BOOLEAN() { return getToken(plsqlParser.BOOLEAN, 0); }
		public TerminalNode BOTH() { return getToken(plsqlParser.BOTH, 0); }
		public TerminalNode BULK() { return getToken(plsqlParser.BULK, 0); }
		public TerminalNode BYTE() { return getToken(plsqlParser.BYTE, 0); }
		public TerminalNode C_LETTER() { return getToken(plsqlParser.C_LETTER, 0); }
		public TerminalNode CALL() { return getToken(plsqlParser.CALL, 0); }
		public TerminalNode CANONICAL() { return getToken(plsqlParser.CANONICAL, 0); }
		public TerminalNode CASCADE() { return getToken(plsqlParser.CASCADE, 0); }
		public TerminalNode CAST() { return getToken(plsqlParser.CAST, 0); }
		public TerminalNode CHAR() { return getToken(plsqlParser.CHAR, 0); }
		public TerminalNode CHAR_CS() { return getToken(plsqlParser.CHAR_CS, 0); }
		public TerminalNode CHARACTER() { return getToken(plsqlParser.CHARACTER, 0); }
		public TerminalNode CHR() { return getToken(plsqlParser.CHR, 0); }
		public TerminalNode CLOB() { return getToken(plsqlParser.CLOB, 0); }
		public TerminalNode CLOSE() { return getToken(plsqlParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(plsqlParser.CLUSTER, 0); }
		public TerminalNode COLLECT() { return getToken(plsqlParser.COLLECT, 0); }
		public TerminalNode COLUMNS() { return getToken(plsqlParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(plsqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(plsqlParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(plsqlParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(plsqlParser.COMPATIBILITY, 0); }
		public TerminalNode COMPILE() { return getToken(plsqlParser.COMPILE, 0); }
		public TerminalNode COMPOUND() { return getToken(plsqlParser.COMPOUND, 0); }
		public TerminalNode CONSTANT() { return getToken(plsqlParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(plsqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(plsqlParser.CONSTRAINTS, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(plsqlParser.CONSTRUCTOR, 0); }
		public TerminalNode CONTENT() { return getToken(plsqlParser.CONTENT, 0); }
		public TerminalNode CONTEXT() { return getToken(plsqlParser.CONTEXT, 0); }
		public TerminalNode CONTINUE() { return getToken(plsqlParser.CONTINUE, 0); }
		public TerminalNode CONVERT() { return getToken(plsqlParser.CONVERT, 0); }
		public TerminalNode CORRUPT_XID() { return getToken(plsqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(plsqlParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COST() { return getToken(plsqlParser.COST, 0); }
		public TerminalNode COUNT() { return getToken(plsqlParser.COUNT, 0); }
		public TerminalNode CROSS() { return getToken(plsqlParser.CROSS, 0); }
		public TerminalNode CUBE() { return getToken(plsqlParser.CUBE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(plsqlParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR() { return getToken(plsqlParser.CURSOR, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(plsqlParser.CUSTOMDATUM, 0); }
		public TerminalNode CYCLE() { return getToken(plsqlParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(plsqlParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(plsqlParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(plsqlParser.DAY, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(plsqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(plsqlParser.DBTIMEZONE, 0); }
		public TerminalNode DDL() { return getToken(plsqlParser.DDL, 0); }
		public TerminalNode DEBUG() { return getToken(plsqlParser.DEBUG, 0); }
		public TerminalNode DEC() { return getToken(plsqlParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(plsqlParser.DECIMAL, 0); }
		public TerminalNode DECOMPOSE() { return getToken(plsqlParser.DECOMPOSE, 0); }
		public TerminalNode DECREMENT() { return getToken(plsqlParser.DECREMENT, 0); }
		public TerminalNode DEFAULTS() { return getToken(plsqlParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(plsqlParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(plsqlParser.DEFINER, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(plsqlParser.DETERMINISTIC, 0); }
		public TerminalNode DIMENSION() { return getToken(plsqlParser.DIMENSION, 0); }
		public TerminalNode DISABLE() { return getToken(plsqlParser.DISABLE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(plsqlParser.DISASSOCIATE, 0); }
		public TerminalNode DOCUMENT() { return getToken(plsqlParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(plsqlParser.DOUBLE, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode EACH() { return getToken(plsqlParser.EACH, 0); }
		public TerminalNode ELEMENT() { return getToken(plsqlParser.ELEMENT, 0); }
		public TerminalNode EMPTY() { return getToken(plsqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(plsqlParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(plsqlParser.ENCODING, 0); }
		public TerminalNode ENTITYESCAPING() { return getToken(plsqlParser.ENTITYESCAPING, 0); }
		public TerminalNode ERRORS() { return getToken(plsqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(plsqlParser.ESCAPE, 0); }
		public TerminalNode EVALNAME() { return getToken(plsqlParser.EVALNAME, 0); }
		public TerminalNode EXCEPTION() { return getToken(plsqlParser.EXCEPTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(plsqlParser.EXCEPTION_INIT, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(plsqlParser.EXCEPTIONS, 0); }
		public TerminalNode EXCLUDE() { return getToken(plsqlParser.EXCLUDE, 0); }
		public TerminalNode EXECUTE() { return getToken(plsqlParser.EXECUTE, 0); }
		public TerminalNode EXIT() { return getToken(plsqlParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(plsqlParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(plsqlParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(plsqlParser.EXTRACT, 0); }
		public TerminalNode FAILURE() { return getToken(plsqlParser.FAILURE, 0); }
		public TerminalNode FINAL() { return getToken(plsqlParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(plsqlParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(plsqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLOAT() { return getToken(plsqlParser.FLOAT, 0); }
		public TerminalNode FOLLOWING() { return getToken(plsqlParser.FOLLOWING, 0); }
		public TerminalNode FOLLOWS() { return getToken(plsqlParser.FOLLOWS, 0); }
		public TerminalNode FORALL() { return getToken(plsqlParser.FORALL, 0); }
		public TerminalNode FORCE() { return getToken(plsqlParser.FORCE, 0); }
		public TerminalNode FULL() { return getToken(plsqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(plsqlParser.FUNCTION, 0); }
		public TerminalNode GROUPING() { return getToken(plsqlParser.GROUPING, 0); }
		public TerminalNode HASH() { return getToken(plsqlParser.HASH, 0); }
		public TerminalNode HIDE() { return getToken(plsqlParser.HIDE, 0); }
		public TerminalNode HOUR() { return getToken(plsqlParser.HOUR, 0); }
		public TerminalNode IGNORE() { return getToken(plsqlParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(plsqlParser.IMMEDIATE, 0); }
		public TerminalNode INCLUDE() { return getToken(plsqlParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(plsqlParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(plsqlParser.INCREMENT, 0); }
		public TerminalNode INDENT() { return getToken(plsqlParser.INDENT, 0); }
		public TerminalNode INDEXED() { return getToken(plsqlParser.INDEXED, 0); }
		public TerminalNode INDICATOR() { return getToken(plsqlParser.INDICATOR, 0); }
		public TerminalNode INDICES() { return getToken(plsqlParser.INDICES, 0); }
		public TerminalNode INFINITE() { return getToken(plsqlParser.INFINITE, 0); }
		public TerminalNode INLINE() { return getToken(plsqlParser.INLINE, 0); }
		public TerminalNode INNER() { return getToken(plsqlParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(plsqlParser.INOUT, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(plsqlParser.INSTANTIABLE, 0); }
		public TerminalNode INSTEAD() { return getToken(plsqlParser.INSTEAD, 0); }
		public TerminalNode INT() { return getToken(plsqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(plsqlParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(plsqlParser.INTERVAL, 0); }
		public TerminalNode INVALIDATE() { return getToken(plsqlParser.INVALIDATE, 0); }
		public TerminalNode ISOLATION() { return getToken(plsqlParser.ISOLATION, 0); }
		public TerminalNode ITERATE() { return getToken(plsqlParser.ITERATE, 0); }
		public TerminalNode JAVA() { return getToken(plsqlParser.JAVA, 0); }
		public TerminalNode JOIN() { return getToken(plsqlParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(plsqlParser.KEEP, 0); }
		public TerminalNode LANGUAGE() { return getToken(plsqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(plsqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(plsqlParser.LAST_VALUE, 0); }
		public TerminalNode LEADING() { return getToken(plsqlParser.LEADING, 0); }
		public TerminalNode LEFT() { return getToken(plsqlParser.LEFT, 0); }
		public TerminalNode LEVEL() { return getToken(plsqlParser.LEVEL, 0); }
		public TerminalNode LIBRARY() { return getToken(plsqlParser.LIBRARY, 0); }
		public TerminalNode LIKE2() { return getToken(plsqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(plsqlParser.LIKE4, 0); }
		public TerminalNode LIKEC() { return getToken(plsqlParser.LIKEC, 0); }
		public TerminalNode LIMIT() { return getToken(plsqlParser.LIMIT, 0); }
		public TerminalNode LOCAL() { return getToken(plsqlParser.LOCAL, 0); }
		public TerminalNode LOCKED() { return getToken(plsqlParser.LOCKED, 0); }
		public TerminalNode LOG() { return getToken(plsqlParser.LOG, 0); }
		public TerminalNode LOGOFF() { return getToken(plsqlParser.LOGOFF, 0); }
		public TerminalNode LOGON() { return getToken(plsqlParser.LOGON, 0); }
		public TerminalNode LONG() { return getToken(plsqlParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(plsqlParser.LOOP, 0); }
		public TerminalNode MAIN() { return getToken(plsqlParser.MAIN, 0); }
		public TerminalNode MAP() { return getToken(plsqlParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(plsqlParser.MATCHED, 0); }
		public TerminalNode MAXVALUE() { return getToken(plsqlParser.MAXVALUE, 0); }
		public TerminalNode MEASURES() { return getToken(plsqlParser.MEASURES, 0); }
		public TerminalNode MEMBER() { return getToken(plsqlParser.MEMBER, 0); }
		public TerminalNode MERGE() { return getToken(plsqlParser.MERGE, 0); }
		public TerminalNode MINUTE() { return getToken(plsqlParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(plsqlParser.MINVALUE, 0); }
		public TerminalNode MLSLABEL() { return getToken(plsqlParser.MLSLABEL, 0); }
		public TerminalNode MODEL() { return getToken(plsqlParser.MODEL, 0); }
		public TerminalNode MODIFY() { return getToken(plsqlParser.MODIFY, 0); }
		public TerminalNode MONTH() { return getToken(plsqlParser.MONTH, 0); }
		public TerminalNode MULTISET() { return getToken(plsqlParser.MULTISET, 0); }
		public TerminalNode NAME() { return getToken(plsqlParser.NAME, 0); }
		public TerminalNode NAN() { return getToken(plsqlParser.NAN, 0); }
		public TerminalNode NATURAL() { return getToken(plsqlParser.NATURAL, 0); }
		public TerminalNode NATURALN() { return getToken(plsqlParser.NATURALN, 0); }
		public TerminalNode NAV() { return getToken(plsqlParser.NAV, 0); }
		public TerminalNode NCHAR() { return getToken(plsqlParser.NCHAR, 0); }
		public TerminalNode NCHAR_CS() { return getToken(plsqlParser.NCHAR_CS, 0); }
		public TerminalNode NCLOB() { return getToken(plsqlParser.NCLOB, 0); }
		public TerminalNode NESTED() { return getToken(plsqlParser.NESTED, 0); }
		public TerminalNode NEW() { return getToken(plsqlParser.NEW, 0); }
		public TerminalNode NO() { return getToken(plsqlParser.NO, 0); }
		public TerminalNode NOAUDIT() { return getToken(plsqlParser.NOAUDIT, 0); }
		public TerminalNode NOCOPY() { return getToken(plsqlParser.NOCOPY, 0); }
		public TerminalNode NOCYCLE() { return getToken(plsqlParser.NOCYCLE, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(plsqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NONE() { return getToken(plsqlParser.NONE, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(plsqlParser.NOSCHEMACHECK, 0); }
		public TerminalNode NULLS() { return getToken(plsqlParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(plsqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(plsqlParser.NUMERIC, 0); }
		public TerminalNode NVARCHAR2() { return getToken(plsqlParser.NVARCHAR2, 0); }
		public TerminalNode OBJECT() { return getToken(plsqlParser.OBJECT, 0); }
		public TerminalNode OFF() { return getToken(plsqlParser.OFF, 0); }
		public TerminalNode OID() { return getToken(plsqlParser.OID, 0); }
		public TerminalNode OLD() { return getToken(plsqlParser.OLD, 0); }
		public TerminalNode ONLY() { return getToken(plsqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(plsqlParser.OPEN, 0); }
		public TerminalNode ORADATA() { return getToken(plsqlParser.ORADATA, 0); }
		public TerminalNode ORDINALITY() { return getToken(plsqlParser.ORDINALITY, 0); }
		public TerminalNode OSERROR() { return getToken(plsqlParser.OSERROR, 0); }
		public TerminalNode OUT() { return getToken(plsqlParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(plsqlParser.OUTER, 0); }
		public TerminalNode OVER() { return getToken(plsqlParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(plsqlParser.OVERRIDING, 0); }
		public TerminalNode PACKAGE() { return getToken(plsqlParser.PACKAGE, 0); }
		public TerminalNode PARALLEL_ENABLE() { return getToken(plsqlParser.PARALLEL_ENABLE, 0); }
		public TerminalNode PARAMETERS() { return getToken(plsqlParser.PARAMETERS, 0); }
		public TerminalNode PARENT() { return getToken(plsqlParser.PARENT, 0); }
		public TerminalNode PARTITION() { return getToken(plsqlParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(plsqlParser.PASSING, 0); }
		public TerminalNode PATH() { return getToken(plsqlParser.PATH, 0); }
		public TerminalNode PIPELINED() { return getToken(plsqlParser.PIPELINED, 0); }
		public TerminalNode PLAN() { return getToken(plsqlParser.PLAN, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(plsqlParser.PLS_INTEGER, 0); }
		public TerminalNode POSITIVE() { return getToken(plsqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(plsqlParser.POSITIVEN, 0); }
		public TerminalNode PRAGMA() { return getToken(plsqlParser.PRAGMA, 0); }
		public TerminalNode PRECEDING() { return getToken(plsqlParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(plsqlParser.PRECISION, 0); }
		public TerminalNode PRESENT() { return getToken(plsqlParser.PRESENT, 0); }
		public TerminalNode RAISE() { return getToken(plsqlParser.RAISE, 0); }
		public TerminalNode RANGE() { return getToken(plsqlParser.RANGE, 0); }
		public TerminalNode RAW() { return getToken(plsqlParser.RAW, 0); }
		public TerminalNode READ() { return getToken(plsqlParser.READ, 0); }
		public TerminalNode REAL() { return getToken(plsqlParser.REAL, 0); }
		public TerminalNode RECORD() { return getToken(plsqlParser.RECORD, 0); }
		public TerminalNode REF() { return getToken(plsqlParser.REF, 0); }
		public TerminalNode REFERENCE() { return getToken(plsqlParser.REFERENCE, 0); }
		public TerminalNode REFERENCING() { return getToken(plsqlParser.REFERENCING, 0); }
		public TerminalNode REJECT() { return getToken(plsqlParser.REJECT, 0); }
		public TerminalNode RELIES_ON() { return getToken(plsqlParser.RELIES_ON, 0); }
		public TerminalNode RENAME() { return getToken(plsqlParser.RENAME, 0); }
		public TerminalNode REPLACE() { return getToken(plsqlParser.REPLACE, 0); }
		public TerminalNode RESPECT() { return getToken(plsqlParser.RESPECT, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(plsqlParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode RESULT() { return getToken(plsqlParser.RESULT, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(plsqlParser.RESULT_CACHE, 0); }
		public TerminalNode RETURN() { return getToken(plsqlParser.RETURN, 0); }
		public TerminalNode RETURNING() { return getToken(plsqlParser.RETURNING, 0); }
		public TerminalNode REUSE() { return getToken(plsqlParser.REUSE, 0); }
		public TerminalNode REVERSE() { return getToken(plsqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(plsqlParser.RIGHT, 0); }
		public TerminalNode ROLLBACK() { return getToken(plsqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(plsqlParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(plsqlParser.ROW, 0); }
		public TerminalNode ROWID() { return getToken(plsqlParser.ROWID, 0); }
		public TerminalNode ROWS() { return getToken(plsqlParser.ROWS, 0); }
		public TerminalNode RULES() { return getToken(plsqlParser.RULES, 0); }
		public TerminalNode SAMPLE() { return getToken(plsqlParser.SAMPLE, 0); }
		public TerminalNode SAVE() { return getToken(plsqlParser.SAVE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(plsqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(plsqlParser.SCHEMA, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(plsqlParser.SCHEMACHECK, 0); }
		public TerminalNode SCN() { return getToken(plsqlParser.SCN, 0); }
		public TerminalNode SECOND() { return getToken(plsqlParser.SECOND, 0); }
		public TerminalNode SEED() { return getToken(plsqlParser.SEED, 0); }
		public TerminalNode SEGMENT() { return getToken(plsqlParser.SEGMENT, 0); }
		public TerminalNode SELF() { return getToken(plsqlParser.SELF, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(plsqlParser.SEQUENTIAL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(plsqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(plsqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode SERVERERROR() { return getToken(plsqlParser.SERVERERROR, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(plsqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode SET() { return getToken(plsqlParser.SET, 0); }
		public TerminalNode SETS() { return getToken(plsqlParser.SETS, 0); }
		public TerminalNode SETTINGS() { return getToken(plsqlParser.SETTINGS, 0); }
		public TerminalNode SHOW() { return getToken(plsqlParser.SHOW, 0); }
		public TerminalNode SHUTDOWN() { return getToken(plsqlParser.SHUTDOWN, 0); }
		public TerminalNode SIBLINGS() { return getToken(plsqlParser.SIBLINGS, 0); }
		public TerminalNode SIGNTYPE() { return getToken(plsqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(plsqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode SINGLE() { return getToken(plsqlParser.SINGLE, 0); }
		public TerminalNode SKIP_() { return getToken(plsqlParser.SKIP_, 0); }
		public TerminalNode SMALLINT() { return getToken(plsqlParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(plsqlParser.SNAPSHOT, 0); }
		public TerminalNode SOME() { return getToken(plsqlParser.SOME, 0); }
		public TerminalNode SPECIFICATION() { return getToken(plsqlParser.SPECIFICATION, 0); }
		public TerminalNode SQLDATA() { return getToken(plsqlParser.SQLDATA, 0); }
		public TerminalNode SQLERROR() { return getToken(plsqlParser.SQLERROR, 0); }
		public TerminalNode SQL_PERCENT_ROWCOUNT() { return getToken(plsqlParser.SQL_PERCENT_ROWCOUNT, 0); }
		public TerminalNode STANDALONE() { return getToken(plsqlParser.STANDALONE, 0); }
		public TerminalNode STARTUP() { return getToken(plsqlParser.STARTUP, 0); }
		public TerminalNode STATEMENT() { return getToken(plsqlParser.STATEMENT, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(plsqlParser.STATEMENT_ID, 0); }
		public TerminalNode STATIC() { return getToken(plsqlParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(plsqlParser.STATISTICS, 0); }
		public TerminalNode STRING() { return getToken(plsqlParser.STRING, 0); }
		public TerminalNode SUBMULTISET() { return getToken(plsqlParser.SUBMULTISET, 0); }
		public TerminalNode SUBPARTITION() { return getToken(plsqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(plsqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode SUBTYPE() { return getToken(plsqlParser.SUBTYPE, 0); }
		public TerminalNode SUCCESS() { return getToken(plsqlParser.SUCCESS, 0); }
		public TerminalNode SUSPEND() { return getToken(plsqlParser.SUSPEND, 0); }
		public TerminalNode TIME() { return getToken(plsqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(plsqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(plsqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(plsqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(plsqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(plsqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(plsqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TRAILING() { return getToken(plsqlParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(plsqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSLATE() { return getToken(plsqlParser.TRANSLATE, 0); }
		public TerminalNode TREAT() { return getToken(plsqlParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(plsqlParser.TRIGGER, 0); }
		public TerminalNode TRIM() { return getToken(plsqlParser.TRIM, 0); }
		public TerminalNode TRUNCATE() { return getToken(plsqlParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(plsqlParser.TYPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(plsqlParser.UNBOUNDED, 0); }
		public TerminalNode UNDER() { return getToken(plsqlParser.UNDER, 0); }
		public TerminalNode UNLIMITED() { return getToken(plsqlParser.UNLIMITED, 0); }
		public TerminalNode UNTIL() { return getToken(plsqlParser.UNTIL, 0); }
		public TerminalNode UPDATED() { return getToken(plsqlParser.UPDATED, 0); }
		public TerminalNode UPSERT() { return getToken(plsqlParser.UPSERT, 0); }
		public TerminalNode UROWID() { return getToken(plsqlParser.UROWID, 0); }
		public TerminalNode USE() { return getToken(plsqlParser.USE, 0); }
		public TerminalNode VALIDATE() { return getToken(plsqlParser.VALIDATE, 0); }
		public TerminalNode VALUE() { return getToken(plsqlParser.VALUE, 0); }
		public TerminalNode VARCHAR() { return getToken(plsqlParser.VARCHAR, 0); }
		public TerminalNode VARCHAR2() { return getToken(plsqlParser.VARCHAR2, 0); }
		public TerminalNode VARIABLE() { return getToken(plsqlParser.VARIABLE, 0); }
		public TerminalNode VARRAY() { return getToken(plsqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(plsqlParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(plsqlParser.VERSION, 0); }
		public TerminalNode VERSIONS() { return getToken(plsqlParser.VERSIONS, 0); }
		public TerminalNode WAIT() { return getToken(plsqlParser.WAIT, 0); }
		public TerminalNode WARNING() { return getToken(plsqlParser.WARNING, 0); }
		public TerminalNode WELLFORMED() { return getToken(plsqlParser.WELLFORMED, 0); }
		public TerminalNode WHENEVER() { return getToken(plsqlParser.WHENEVER, 0); }
		public TerminalNode WHILE() { return getToken(plsqlParser.WHILE, 0); }
		public TerminalNode WITHIN() { return getToken(plsqlParser.WITHIN, 0); }
		public TerminalNode WORK() { return getToken(plsqlParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(plsqlParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(plsqlParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(plsqlParser.XMLAGG, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(plsqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCAST() { return getToken(plsqlParser.XMLCAST, 0); }
		public TerminalNode XMLCOLATTVAL() { return getToken(plsqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLELEMENT() { return getToken(plsqlParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(plsqlParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(plsqlParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(plsqlParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(plsqlParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(plsqlParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(plsqlParser.XMLQUERY, 0); }
		public TerminalNode XMLROOT() { return getToken(plsqlParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(plsqlParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(plsqlParser.XMLTABLE, 0); }
		public TerminalNode YEAR() { return getToken(plsqlParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(plsqlParser.YES, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(plsqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode ZONE() { return getToken(plsqlParser.ZONE, 0); }
		public TerminalNode PREDICTION() { return getToken(plsqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(plsqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(plsqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(plsqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(plsqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(plsqlParser.PREDICTION_SET, 0); }
		public TerminalNode CUME_DIST() { return getToken(plsqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(plsqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(plsqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(plsqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(plsqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(plsqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(plsqlParser.RANK, 0); }
		public TerminalNode AVG() { return getToken(plsqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(plsqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(plsqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(plsqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(plsqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(plsqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(plsqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(plsqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(plsqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(plsqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(plsqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(plsqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(plsqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(plsqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(plsqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(plsqlParser.COVAR_, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).enterRegular_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof plsqlListener ) ((plsqlListener)listener).exitRegular_id(this);
		}
	}

	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_regular_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5455);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)) | (1L << (INVALIDATE - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (NULLS - 259)) | (1L << (NUMBER - 259)) | (1L << (NUMERIC - 259)) | (1L << (NVARCHAR2 - 259)) | (1L << (OBJECT - 259)) | (1L << (OFF - 259)) | (1L << (OID - 259)) | (1L << (OLD - 259)) | (1L << (ONLY - 259)) | (1L << (OPEN - 259)) | (1L << (ORADATA - 259)) | (1L << (ORDINALITY - 259)) | (1L << (OSERROR - 259)) | (1L << (OUT - 259)) | (1L << (OUTER - 259)) | (1L << (OVER - 259)) | (1L << (OVERRIDING - 259)) | (1L << (PACKAGE - 259)) | (1L << (PARALLEL_ENABLE - 259)) | (1L << (PARAMETERS - 259)) | (1L << (PARENT - 259)) | (1L << (PARTITION - 259)) | (1L << (PASSING - 259)) | (1L << (PATH - 259)) | (1L << (PIPELINED - 259)) | (1L << (PLAN - 259)) | (1L << (PLS_INTEGER - 259)) | (1L << (POSITIVE - 259)) | (1L << (POSITIVEN - 259)) | (1L << (PRAGMA - 259)) | (1L << (PRECEDING - 259)) | (1L << (PRECISION - 259)) | (1L << (PRESENT - 259)) | (1L << (RAISE - 259)) | (1L << (RANGE - 259)) | (1L << (RAW - 259)) | (1L << (READ - 259)) | (1L << (REAL - 259)) | (1L << (RECORD - 259)) | (1L << (REF - 259)) | (1L << (REFERENCE - 259)) | (1L << (REFERENCING - 259)) | (1L << (REJECT - 259)) | (1L << (RELIES_ON - 259)) | (1L << (RENAME - 259)) | (1L << (REPLACE - 259)) | (1L << (RESPECT - 259)) | (1L << (RESTRICT_REFERENCES - 259)) | (1L << (RESULT - 259)) | (1L << (RESULT_CACHE - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (RETURN - 323)) | (1L << (RETURNING - 323)) | (1L << (REUSE - 323)) | (1L << (REVERSE - 323)) | (1L << (RIGHT - 323)) | (1L << (ROLLBACK - 323)) | (1L << (ROLLUP - 323)) | (1L << (ROW - 323)) | (1L << (ROWID - 323)) | (1L << (ROWS - 323)) | (1L << (RULES - 323)) | (1L << (SAMPLE - 323)) | (1L << (SAVE - 323)) | (1L << (SAVEPOINT - 323)) | (1L << (SCHEMA - 323)) | (1L << (SCHEMACHECK - 323)) | (1L << (SCN - 323)) | (1L << (SECOND - 323)) | (1L << (SEED - 323)) | (1L << (SEGMENT - 323)) | (1L << (SELF - 323)) | (1L << (SEQUENTIAL - 323)) | (1L << (SERIALIZABLE - 323)) | (1L << (SERIALLY_REUSABLE - 323)) | (1L << (SERVERERROR - 323)) | (1L << (SESSIONTIMEZONE - 323)) | (1L << (SET - 323)) | (1L << (SETS - 323)) | (1L << (SETTINGS - 323)) | (1L << (SHOW - 323)) | (1L << (SHUTDOWN - 323)) | (1L << (SIBLINGS - 323)) | (1L << (SIGNTYPE - 323)) | (1L << (SIMPLE_INTEGER - 323)) | (1L << (SINGLE - 323)) | (1L << (SKIP_ - 323)) | (1L << (SMALLINT - 323)) | (1L << (SNAPSHOT - 323)) | (1L << (SOME - 323)) | (1L << (SPECIFICATION - 323)) | (1L << (SQLDATA - 323)) | (1L << (SQLERROR - 323)) | (1L << (SQL_PERCENT_ROWCOUNT - 323)) | (1L << (STANDALONE - 323)) | (1L << (STARTUP - 323)) | (1L << (STATEMENT - 323)) | (1L << (STATEMENT_ID - 323)) | (1L << (STATIC - 323)) | (1L << (STATISTICS - 323)) | (1L << (STRING - 323)) | (1L << (SUBMULTISET - 323)) | (1L << (SUBPARTITION - 323)) | (1L << (SUBSTITUTABLE - 323)) | (1L << (SUBTYPE - 323)) | (1L << (SUCCESS - 323)) | (1L << (SUSPEND - 323)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRIM - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLPARSE - 453)) | (1L << (XMLPI - 453)) | (1L << (XMLQUERY - 453)) | (1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUM - 453)) | (1L << (VARIANCE - 453)) | (1L << (REGR_ - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (COVAR_ - 453)))) != 0) || _la==REGULAR_ID) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u0277\u1554\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\3\2\6\2\u0310\n\2\r\2\16\2\u0311\3\3"+
		"\7\3\u0315\n\3\f\3\16\3\u0318\13\3\3\3\3\3\3\4\3\4\3\4\7\4\u031f\n\4\f"+
		"\4\16\4\u0322\13\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5"+
		"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u033c\n\5\3\6\3\6\3\6"+
		"\3\6\3\6\3\7\3\7\3\7\3\7\3\7\5\7\u0348\n\7\3\7\7\7\u034b\n\7\f\7\16\7"+
		"\u034e\13\7\3\7\3\7\5\7\u0352\n\7\3\7\3\7\3\b\3\b\3\b\5\b\u0359\n\b\5"+
		"\b\u035b\n\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\7\t\u0365\n\t\f\t\16\t\u0368"+
		"\13\t\3\t\3\t\5\t\u036c\n\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\7"+
		"\t\u0378\n\t\f\t\16\t\u037b\13\t\3\t\3\t\5\t\u037f\n\t\3\t\7\t\u0382\n"+
		"\t\f\t\16\t\u0385\13\t\3\t\3\t\5\t\u0389\n\t\5\t\u038b\n\t\3\t\3\t\3\n"+
		"\3\n\5\n\u0391\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\7"+
		"\13\u039d\n\13\f\13\16\13\u03a0\13\13\3\13\3\13\5\13\u03a4\n\13\3\13\5"+
		"\13\u03a7\n\13\3\13\3\13\3\f\3\f\5\f\u03ad\n\f\3\r\3\r\3\r\3\r\3\r\7\r"+
		"\u03b4\n\r\f\r\16\r\u03b7\13\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3"+
		"\16\7\16\u03c2\n\16\f\16\16\16\u03c5\13\16\3\16\3\16\3\17\3\17\3\17\5"+
		"\17\u03cc\n\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\5\20\u03d6\n\20"+
		"\3\20\5\20\u03d9\n\20\3\20\7\20\u03dc\n\20\f\20\16\20\u03df\13\20\3\20"+
		"\3\20\5\20\u03e3\n\20\3\20\3\20\3\21\3\21\3\21\5\21\u03ea\n\21\3\21\3"+
		"\21\3\21\5\21\u03ef\n\21\3\21\3\21\3\22\3\22\3\22\3\22\7\22\u03f7\n\22"+
		"\f\22\16\22\u03fa\13\22\3\22\3\22\3\22\3\22\5\22\u0400\n\22\5\22\u0402"+
		"\n\22\3\23\3\23\5\23\u0406\n\23\3\23\3\23\7\23\u040a\n\23\f\23\16\23\u040d"+
		"\13\23\3\23\3\23\5\23\u0411\n\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3"+
		"\24\3\24\3\24\5\24\u041d\n\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25"+
		"\3\25\3\25\5\25\u0429\n\25\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27"+
		"\3\27\5\27\u0435\n\27\3\27\7\27\u0438\n\27\f\27\16\27\u043b\13\27\3\27"+
		"\3\27\5\27\u043f\n\27\3\27\3\27\3\30\3\30\3\30\5\30\u0446\n\30\5\30\u0448"+
		"\n\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\31\7\31\u0452\n\31\f\31\16"+
		"\31\u0455\13\31\3\31\3\31\5\31\u0459\n\31\3\31\5\31\u045c\n\31\3\31\3"+
		"\31\5\31\u0460\n\31\3\31\7\31\u0463\n\31\f\31\16\31\u0466\13\31\3\31\3"+
		"\31\3\31\5\31\u046b\n\31\5\31\u046d\n\31\3\31\3\31\3\32\3\32\3\32\3\32"+
		"\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u047f\n\33\3\33"+
		"\7\33\u0482\n\33\f\33\16\33\u0485\13\33\3\33\3\33\5\33\u0489\n\33\5\33"+
		"\u048b\n\33\3\33\3\33\3\34\3\34\3\34\5\34\u0492\n\34\3\34\3\34\3\34\3"+
		"\34\3\34\5\34\u0499\n\34\3\34\5\34\u049c\n\34\3\34\5\34\u049f\n\34\3\34"+
		"\5\34\u04a2\n\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\7\35\u04ab\n\35\f"+
		"\35\16\35\u04ae\13\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\5\37"+
		"\u04b9\n\37\3\37\3\37\5\37\u04bd\n\37\3\37\5\37\u04c0\n\37\3 \3 \3 \3"+
		" \3!\3!\3!\5!\u04c9\n!\3\"\3\"\3\"\3\"\7\"\u04cf\n\"\f\"\16\"\u04d2\13"+
		"\"\3\"\3\"\3\"\3\"\3\"\5\"\u04d9\n\"\3\"\5\"\u04dc\n\"\3#\3#\3#\3#\3#"+
		"\5#\u04e3\n#\3$\3$\5$\u04e7\n$\3%\3%\3%\7%\u04ec\n%\f%\16%\u04ef\13%\3"+
		"%\6%\u04f2\n%\r%\16%\u04f3\3%\3%\3%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3"+
		"&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3"+
		"&\3&\5&\u051d\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3"+
		"\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0539\n\'\3(\3"+
		"(\3(\7(\u053e\n(\f(\16(\u0541\13(\3(\3(\5(\u0545\n(\3(\3(\3)\3)\3)\3)"+
		"\3)\7)\u054e\n)\f)\16)\u0551\13)\5)\u0553\n)\3*\3*\3*\3*\3*\3+\3+\6+\u055c"+
		"\n+\r+\16+\u055d\3,\3,\3,\3-\3-\3-\5-\u0566\n-\3-\3-\5-\u056a\n-\3-\3"+
		"-\3.\3.\3.\3.\3.\3.\3.\3.\5.\u0576\n.\3.\5.\u0579\n.\3.\3.\3/\3/\5/\u057f"+
		"\n/\3/\5/\u0582\n/\3/\7/\u0585\n/\f/\16/\u0588\13/\3/\3/\5/\u058c\n/\3"+
		"\60\3\60\5\60\u0590\n\60\3\60\3\60\3\60\3\60\3\60\3\60\7\60\u0598\n\60"+
		"\f\60\16\60\u059b\13\60\3\60\3\60\3\61\3\61\3\61\7\61\u05a2\n\61\f\61"+
		"\16\61\u05a5\13\61\3\62\3\62\3\62\5\62\u05aa\n\62\3\63\3\63\3\63\3\63"+
		"\3\63\3\63\3\63\7\63\u05b3\n\63\f\63\16\63\u05b6\13\63\3\63\3\63\5\63"+
		"\u05ba\n\63\3\64\3\64\5\64\u05be\n\64\3\65\3\65\3\65\3\65\3\65\3\65\5"+
		"\65\u05c6\n\65\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u05ce\n\66\3\66\3\66"+
		"\3\66\5\66\u05d3\n\66\3\66\5\66\u05d6\n\66\5\66\u05d8\n\66\3\67\5\67\u05db"+
		"\n\67\3\67\3\67\3\67\3\67\38\38\38\58\u05e4\n8\38\38\38\58\u05e9\n8\3"+
		"8\38\39\39\39\59\u05f0\n9\39\59\u05f3\n9\3:\5:\u05f6\n:\3:\3:\5:\u05fa"+
		"\n:\3:\5:\u05fd\n:\3:\3:\3:\3:\7:\u0603\n:\f:\16:\u0606\13:\3:\3:\5:\u060a"+
		"\n:\3:\7:\u060d\n:\f:\16:\u0610\13:\3;\3;\3;\3;\5;\u0616\n;\3<\3<\3<\3"+
		"=\3=\3=\3=\3=\5=\u0620\n=\3>\3>\3>\3>\3>\3>\3>\3>\3?\3?\3?\3?\3?\3?\7"+
		"?\u0630\n?\f?\16?\u0633\13?\3?\3?\3@\3@\5@\u0639\n@\3A\3A\3A\3A\3B\3B"+
		"\3B\3B\5B\u0643\nB\3C\3C\3C\3C\3C\3C\7C\u064b\nC\fC\16C\u064e\13C\3C\3"+
		"C\3C\3C\5C\u0654\nC\3C\7C\u0657\nC\fC\16C\u065a\13C\3C\3C\3C\5C\u065f"+
		"\nC\3D\3D\3D\3D\3D\3D\7D\u0667\nD\fD\16D\u066a\13D\3D\3D\5D\u066e\nD\3"+
		"D\3D\3D\3D\3D\5D\u0675\nD\3D\7D\u0678\nD\fD\16D\u067b\13D\3D\3D\3D\5D"+
		"\u0680\nD\3E\5E\u0683\nE\3E\5E\u0686\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E"+
		"\3E\3E\3E\7E\u0695\nE\fE\16E\u0698\13E\3E\3E\5E\u069c\nE\3E\3E\3E\3E\3"+
		"E\3E\3E\5E\u06a5\nE\3E\7E\u06a8\nE\fE\16E\u06ab\13E\3E\3E\3E\5E\u06b0"+
		"\nE\3F\5F\u06b3\nF\3F\3F\3G\3G\3G\5G\u06ba\nG\3G\5G\u06bd\nG\3H\3H\3H"+
		"\3H\3I\5I\u06c4\nI\3I\6I\u06c7\nI\rI\16I\u06c8\3I\3I\5I\u06cd\nI\3J\3"+
		"J\3J\5J\u06d2\nJ\3K\3K\3K\5K\u06d7\nK\3L\3L\3L\3L\3L\3L\7L\u06df\nL\f"+
		"L\16L\u06e2\13L\3L\3L\3L\5L\u06e7\nL\3M\3M\3M\3M\3M\3M\7M\u06ef\nM\fM"+
		"\16M\u06f2\13M\3M\3M\5M\u06f6\nM\3M\3M\3M\3M\3M\5M\u06fd\nM\3M\3M\3M\3"+
		"M\5M\u0703\nM\3M\3M\5M\u0707\nM\3N\5N\u070a\nN\3N\5N\u070d\nN\3N\3N\3"+
		"N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\7N\u071c\nN\fN\16N\u071f\13N\3N\3N\5N"+
		"\u0723\nN\3N\3N\3N\3N\3N\3N\5N\u072b\nN\3O\3O\3O\3O\3P\3P\3P\3P\3P\3P"+
		"\7P\u0737\nP\fP\16P\u073a\13P\3P\3P\3Q\3Q\5Q\u0740\nQ\3R\3R\3R\3S\3S\3"+
		"S\3S\3S\3T\3T\3T\3T\6T\u074e\nT\rT\16T\u074f\3T\3T\3U\3U\3U\3U\3U\7U\u0759"+
		"\nU\fU\16U\u075c\13U\3U\3U\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3"+
		"V\3V\5V\u0770\nV\3W\3W\3W\3W\3X\3X\3X\3Y\3Y\3Y\3Y\3Z\3Z\3Z\5Z\u0780\n"+
		"Z\3[\3[\3[\3[\3\\\3\\\3\\\5\\\u0789\n\\\3\\\3\\\3\\\5\\\u078e\n\\\3\\"+
		"\3\\\5\\\u0792\n\\\3\\\5\\\u0795\n\\\3]\3]\3]\3]\3]\3]\7]\u079d\n]\f]"+
		"\16]\u07a0\13]\3]\3]\3^\3^\3^\3^\3^\7^\u07a9\n^\f^\16^\u07ac\13^\3^\3"+
		"^\3^\5^\u07b1\n^\3^\3^\3_\3_\7_\u07b7\n_\f_\16_\u07ba\13_\3_\5_\u07bd"+
		"\n_\3_\5_\u07c0\n_\3`\3`\3`\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\5a\u07cf\na"+
		"\3b\3b\5b\u07d3\nb\3b\3b\3b\5b\u07d8\nb\3b\5b\u07db\nb\3b\3b\3c\3c\3c"+
		"\3c\3c\3c\3c\3c\3c\5c\u07e8\nc\3c\3c\5c\u07ec\nc\3c\3c\3d\3d\3d\3d\3d"+
		"\3d\7d\u07f6\nd\fd\16d\u07f9\13d\3d\3d\5d\u07fd\nd\3d\3d\5d\u0801\nd\3"+
		"d\3d\5d\u0805\nd\3d\3d\3e\3e\5e\u080b\ne\3e\5e\u080e\ne\3e\5e\u0811\n"+
		"e\3f\3f\3f\3f\3g\3g\3g\3g\3g\3g\3g\3g\5g\u081f\ng\3g\3g\3g\3g\3g\3g\3"+
		"g\3g\3g\3g\3g\3g\3g\3g\5g\u082f\ng\3g\3g\6g\u0833\ng\rg\16g\u0834\3g\3"+
		"g\5g\u0839\ng\3g\3g\3h\3h\5h\u083f\nh\3i\3i\3i\3i\3i\3i\3i\3i\7i\u0849"+
		"\ni\fi\16i\u084c\13i\3i\3i\3i\3i\3i\3i\5i\u0854\ni\5i\u0856\ni\3i\3i\3"+
		"j\3j\5j\u085c\nj\3j\3j\5j\u0860\nj\3j\5j\u0863\nj\3k\3k\3k\3k\3k\3l\3"+
		"l\5l\u086c\nl\3l\3l\3m\3m\3m\3m\3m\3m\3m\5m\u0877\nm\3m\3m\5m\u087b\n"+
		"m\3m\5m\u087e\nm\3n\3n\5n\u0882\nn\3n\3n\3n\3o\3o\3o\5o\u088a\no\3o\3"+
		"o\3o\3o\3o\3o\3o\5o\u0893\no\3p\3p\3p\3q\3q\3q\3q\3q\6q\u089d\nq\rq\16"+
		"q\u089e\3r\3r\3r\3r\3r\3r\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3"+
		"s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\5s\u08c2\ns\3t\3t\5t\u08c6\nt\3"+
		"t\3t\3t\3u\3u\5u\u08cd\nu\3u\3u\5u\u08d1\nu\3v\3v\5v\u08d5\nv\3v\3v\5"+
		"v\u08d9\nv\3w\3w\3w\3x\3x\3x\3x\3x\7x\u08e3\nx\fx\16x\u08e6\13x\3x\5x"+
		"\u08e9\nx\3x\3x\3x\3y\3y\3y\3y\3y\3z\3z\3z\3{\5{\u08f7\n{\3{\3{\3{\3{"+
		"\5{\u08fd\n{\3{\3{\3{\3{\3{\5{\u0904\n{\3|\3|\3|\5|\u0909\n|\3|\3|\3|"+
		"\3|\3|\3|\3|\3|\5|\u0913\n|\3|\3|\3|\3|\5|\u0919\n|\5|\u091b\n|\3}\3}"+
		"\3}\3}\3}\3}\3}\5}\u0924\n}\3~\3~\3~\3~\3~\3~\3~\3~\5~\u092e\n~\3~\3~"+
		"\3~\5~\u0933\n~\3\177\3\177\3\177\3\177\3\177\3\u0080\3\u0080\3\u0081"+
		"\3\u0081\3\u0082\3\u0082\3\u0083\3\u0083\5\u0083\u0942\n\u0083\3\u0084"+
		"\3\u0084\5\u0084\u0946\n\u0084\3\u0085\5\u0085\u0949\n\u0085\3\u0085\3"+
		"\u0085\5\u0085\u094d\n\u0085\3\u0086\3\u0086\3\u0086\5\u0086\u0952\n\u0086"+
		"\3\u0086\3\u0086\5\u0086\u0956\n\u0086\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\5\u0087\u0967\n\u0087\3\u0087\3\u0087\5\u0087\u096b\n"+
		"\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087"+
		"\u0974\n\u0087\3\u0087\3\u0087\5\u0087\u0978\n\u0087\3\u0087\3\u0087\3"+
		"\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0981\n\u0087\5\u0087\u0983"+
		"\n\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0089\3\u0089"+
		"\6\u0089\u098d\n\u0089\r\u0089\16\u0089\u098e\3\u008a\3\u008a\3\u008a"+
		"\3\u008a\7\u008a\u0995\n\u008a\f\u008a\16\u008a\u0998\13\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008b\5\u008b\u099e\n\u008b\3\u008b\6\u008b\u09a1\n"+
		"\u008b\r\u008b\16\u008b\u09a2\5\u008b\u09a5\n\u008b\3\u008b\3\u008b\3"+
		"\u008c\5\u008c\u09aa\n\u008c\3\u008c\6\u008c\u09ad\n\u008c\r\u008c\16"+
		"\u008c\u09ae\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u09b7"+
		"\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u09be\n\u008e"+
		"\3\u008e\3\u008e\5\u008e\u09c2\n\u008e\3\u008e\5\u008e\u09c5\n\u008e\3"+
		"\u008f\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\5\u0090\u09d1\n\u0090\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091"+
		"\u09d7\n\u0091\3\u0092\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093\5\u0093"+
		"\u09df\n\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\7\u0094"+
		"\u09e7\n\u0094\f\u0094\16\u0094\u09ea\13\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\7\u0094\u09f2\n\u0094\f\u0094\16\u0094\u09f5"+
		"\13\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u09fb\n\u0094\3\u0095"+
		"\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0a02\n\u0095\3\u0095\5\u0095"+
		"\u0a05\n\u0095\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u0a0c\n"+
		"\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\5\u0097\u0a17\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097"+
		"\u0a1d\n\u0097\3\u0097\3\u0097\5\u0097\u0a21\n\u0097\3\u0098\3\u0098\3"+
		"\u0098\3\u0098\3\u0098\3\u0098\7\u0098\u0a29\n\u0098\f\u0098\16\u0098"+
		"\u0a2c\13\u0098\5\u0098\u0a2e\n\u0098\3\u0098\3\u0098\3\u0099\3\u0099"+
		"\5\u0099\u0a34\n\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\5\u0099\u0a3f\n\u0099\5\u0099\u0a41\n\u0099\5"+
		"\u0099\u0a43\n\u0099\3\u0099\5\u0099\u0a46\n\u0099\3\u009a\3\u009a\5\u009a"+
		"\u0a4a\n\u009a\3\u009a\5\u009a\u0a4d\n\u009a\3\u009b\3\u009b\5\u009b\u0a51"+
		"\n\u009b\3\u009b\3\u009b\5\u009b\u0a55\n\u009b\3\u009b\3\u009b\3\u009b"+
		"\5\u009b\u0a5a\n\u009b\3\u009c\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\5\u009d\u0a65\n\u009d\3\u009d\3\u009d\5\u009d"+
		"\u0a69\n\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d"+
		"\u0a71\n\u009d\3\u009e\5\u009e\u0a74\n\u009e\3\u009e\3\u009e\3\u009e\7"+
		"\u009e\u0a79\n\u009e\f\u009e\16\u009e\u0a7c\13\u009e\3\u009f\3\u009f\3"+
		"\u009f\3\u009f\7\u009f\u0a82\n\u009f\f\u009f\16\u009f\u0a85\13\u009f\3"+
		"\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\7\u00a0\u0a8c\n\u00a0\f\u00a0\16"+
		"\u00a0\u0a8f\13\u00a0\3\u00a0\3\u00a0\5\u00a0\u0a93\n\u00a0\3\u00a0\3"+
		"\u00a0\3\u00a0\3\u00a0\5\u00a0\u0a99\n\u00a0\3\u00a0\3\u00a0\5\u00a0\u0a9d"+
		"\n\u00a0\3\u00a0\5\u00a0\u0aa0\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\5\u00a1\u0aa8\n\u00a1\3\u00a1\5\u00a1\u0aab\n\u00a1\3"+
		"\u00a1\3\u00a1\5\u00a1\u0aaf\n\u00a1\3\u00a1\3\u00a1\5\u00a1\u0ab3\n\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0ab8\n\u00a1\3\u00a1\5\u00a1\u0abb\n"+
		"\u00a1\3\u00a1\3\u00a1\5\u00a1\u0abf\n\u00a1\3\u00a1\3\u00a1\5\u00a1\u0ac3"+
		"\n\u00a1\7\u00a1\u0ac5\n\u00a1\f\u00a1\16\u00a1\u0ac8\13\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0ad1\n\u00a2"+
		"\f\u00a2\16\u00a2\u0ad4\13\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a3\3\u00a3\7\u00a3\u0adf\n\u00a3\f\u00a3\16\u00a3"+
		"\u0ae2\13\u00a3\3\u00a4\3\u00a4\5\u00a4\u0ae6\n\u00a4\3\u00a4\3\u00a4"+
		"\5\u00a4\u0aea\n\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5"+
		"\3\u00a5\5\u00a5\u0af3\n\u00a5\3\u00a6\3\u00a6\5\u00a6\u0af7\n\u00a6\3"+
		"\u00a6\3\u00a6\3\u00a6\3\u00a6\7\u00a6\u0afd\n\u00a6\f\u00a6\16\u00a6"+
		"\u0b00\13\u00a6\5\u00a6\u0b02\n\u00a6\3\u00a6\5\u00a6\u0b05\n\u00a6\3"+
		"\u00a6\3\u00a6\5\u00a6\u0b09\n\u00a6\3\u00a6\5\u00a6\u0b0c\n\u00a6\3\u00a6"+
		"\5\u00a6\u0b0f\n\u00a6\3\u00a6\5\u00a6\u0b12\n\u00a6\3\u00a6\5\u00a6\u0b15"+
		"\n\u00a6\3\u00a6\5\u00a6\u0b18\n\u00a6\3\u00a7\3\u00a7\5\u00a7\u0b1c\n"+
		"\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\5\u00a9\u0b26\n\u00a9\3\u00aa\3\u00aa\3\u00aa\7\u00aa\u0b2b\n\u00aa\f"+
		"\u00aa\16\u00aa\u0b2e\13\u00aa\3\u00ab\3\u00ab\7\u00ab\u0b32\n\u00ab\f"+
		"\u00ab\16\u00ab\u0b35\13\u00ab\3\u00ab\3\u00ab\5\u00ab\u0b39\n\u00ab\3"+
		"\u00ac\3\u00ac\3\u00ac\5\u00ac\u0b3e\n\u00ac\3\u00ac\3\u00ac\3\u00ac\7"+
		"\u00ac\u0b43\n\u00ac\f\u00ac\16\u00ac\u0b46\13\u00ac\3\u00ac\3\u00ac\3"+
		"\u00ac\5\u00ac\u0b4b\n\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3"+
		"\u00ac\3\u00ac\3\u00ac\5\u00ac\u0b55\n\u00ac\5\u00ac\u0b57\n\u00ac\3\u00ac"+
		"\7\u00ac\u0b5a\n\u00ac\f\u00ac\16\u00ac\u0b5d\13\u00ac\3\u00ac\5\u00ac"+
		"\u0b60\n\u00ac\3\u00ad\5\u00ad\u0b63\n\u00ad\3\u00ad\5\u00ad\u0b66\n\u00ad"+
		"\3\u00ad\3\u00ad\5\u00ad\u0b6a\n\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad"+
		"\u0b6f\n\u00ad\3\u00ad\3\u00ad\7\u00ad\u0b73\n\u00ad\f\u00ad\16\u00ad"+
		"\u0b76\13\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\7\u00af\u0b80\n\u00af\f\u00af\16\u00af\u0b83\13\u00af\3\u00af"+
		"\3\u00af\3\u00b0\3\u00b0\5\u00b0\u0b89\n\u00b0\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\7\u00b1\u0b95"+
		"\n\u00b1\f\u00b1\16\u00b1\u0b98\13\u00b1\5\u00b1\u0b9a\n\u00b1\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0ba4"+
		"\n\u00b2\3\u00b3\3\u00b3\5\u00b3\u0ba8\n\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\7\u00b3\u0bae\n\u00b3\f\u00b3\16\u00b3\u0bb1\13\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4"+
		"\u0bbc\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\7\u00b5"+
		"\u0bc4\n\u00b5\f\u00b5\16\u00b5\u0bc7\13\u00b5\3\u00b5\3\u00b5\5\u00b5"+
		"\u0bcb\n\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\7\u00b6"+
		"\u0bd3\n\u00b6\f\u00b6\16\u00b6\u0bd6\13\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\7\u00b6\u0bdb\n\u00b6\f\u00b6\16\u00b6\u0bde\13\u00b6\5\u00b6\u0be0\n"+
		"\u00b6\3\u00b6\3\u00b6\3\u00b7\3\u00b7\5\u00b7\u0be6\n\u00b7\3\u00b8\3"+
		"\u00b8\5\u00b8\u0bea\n\u00b8\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u0bef\n\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\7\u00b9\u0bf7\n\u00b9"+
		"\f\u00b9\16\u00b9\u0bfa\13\u00b9\3\u00b9\3\u00b9\5\u00b9\u0bfe\n\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\7\u00ba\u0c09\n\u00ba\f\u00ba\16\u00ba\u0c0c\13\u00ba\3\u00ba\3\u00ba"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u0c15\n\u00bb\f\u00bb"+
		"\16\u00bb\u0c18\13\u00bb\3\u00bb\3\u00bb\5\u00bb\u0c1c\n\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u0c24\n\u00bb\f\u00bb"+
		"\16\u00bb\u0c27\13\u00bb\3\u00bb\3\u00bb\5\u00bb\u0c2b\n\u00bb\5\u00bb"+
		"\u0c2d\n\u00bb\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u0c32\n\u00bc\3\u00bc\3"+
		"\u00bc\5\u00bc\u0c36\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u0c3c"+
		"\n\u00bc\3\u00bc\3\u00bc\5\u00bc\u0c40\n\u00bc\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u0c4b\n\u00be"+
		"\f\u00be\16\u00be\u0c4e\13\u00be\3\u00be\5\u00be\u0c51\n\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u0c59\n\u00be\f\u00be"+
		"\16\u00be\u0c5c\13\u00be\5\u00be\u0c5e\n\u00be\5\u00be\u0c60\n\u00be\3"+
		"\u00bf\3\u00bf\3\u00bf\5\u00bf\u0c65\n\u00bf\3\u00c0\3\u00c0\3\u00c0\3"+
		"\u00c0\3\u00c0\7\u00c0\u0c6c\n\u00c0\f\u00c0\16\u00c0\u0c6f\13\u00c0\3"+
		"\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1"+
		"\u0c79\n\u00c1\f\u00c1\16\u00c1\u0c7c\13\u00c1\3\u00c1\3\u00c1\3\u00c2"+
		"\3\u00c2\3\u00c2\5\u00c2\u0c83\n\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c4"+
		"\3\u00c4\7\u00c4\u0c8a\n\u00c4\f\u00c4\16\u00c4\u0c8d\13\u00c4\3\u00c4"+
		"\5\u00c4\u0c90\n\u00c4\3\u00c4\7\u00c4\u0c93\n\u00c4\f\u00c4\16\u00c4"+
		"\u0c96\13\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\5\u00c5\u0ca0\n\u00c5\5\u00c5\u0ca2\n\u00c5\3\u00c6\3\u00c6\3"+
		"\u00c6\3\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\7\u00c7\u0cb0\n\u00c7\f\u00c7\16\u00c7\u0cb3\13\u00c7\3\u00c8"+
		"\3\u00c8\5\u00c8\u0cb7\n\u00c8\3\u00c8\3\u00c8\7\u00c8\u0cbb\n\u00c8\f"+
		"\u00c8\16\u00c8\u0cbe\13\u00c8\3\u00c8\3\u00c8\3\u00c9\5\u00c9\u0cc3\n"+
		"\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\7\u00cb\u0cd3\n\u00cb"+
		"\f\u00cb\16\u00cb\u0cd6\13\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc\5\u00cc"+
		"\u0cdc\n\u00cc\3\u00cd\5\u00cd\u0cdf\n\u00cd\3\u00cd\3\u00cd\3\u00cd\3"+
		"\u00cd\7\u00cd\u0ce5\n\u00cd\f\u00cd\16\u00cd\u0ce8\13\u00cd\3\u00cd\3"+
		"\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0cf0\n\u00ce\5\u00ce\u0cf2"+
		"\n\u00ce\3\u00ce\3\u00ce\5\u00ce\u0cf6\n\u00ce\3\u00ce\5\u00ce\u0cf9\n"+
		"\u00ce\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u0cfe\n\u00cf\5\u00cf\u0d00\n\u00cf"+
		"\3\u00cf\3\u00cf\5\u00cf\u0d04\n\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00d0"+
		"\3\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u0d10\n\u00d1"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d3\3\u00d3\5\u00d3\u0d19"+
		"\n\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\7\u00d3\u0d1f\n\u00d3\f\u00d3"+
		"\16\u00d3\u0d22\13\u00d3\3\u00d4\3\u00d4\5\u00d4\u0d26\n\u00d4\3\u00d4"+
		"\3\u00d4\5\u00d4\u0d2a\n\u00d4\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u0d2f\n"+
		"\u00d5\3\u00d5\5\u00d5\u0d32\n\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\7"+
		"\u00d6\u0d38\n\u00d6\f\u00d6\16\u00d6\u0d3b\13\u00d6\3\u00d7\3\u00d7\3"+
		"\u00d7\3\u00d7\3\u00d7\5\u00d7\u0d42\n\u00d7\3\u00d8\3\u00d8\3\u00d8\3"+
		"\u00d8\5\u00d8\u0d48\n\u00d8\3\u00d8\5\u00d8\u0d4b\n\u00d8\3\u00d8\5\u00d8"+
		"\u0d4e\n\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\7\u00d9\u0d54\n\u00d9\f"+
		"\u00d9\16\u00d9\u0d57\13\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\5\u00d9\u0d60\n\u00d9\3\u00da\3\u00da\3\u00da\3\u00da"+
		"\3\u00da\3\u00da\3\u00da\3\u00da\7\u00da\u0d6a\n\u00da\f\u00da\16\u00da"+
		"\u0d6d\13\u00da\3\u00da\3\u00da\3\u00da\3\u00da\5\u00da\u0d73\n\u00da"+
		"\3\u00db\3\u00db\5\u00db\u0d77\n\u00db\3\u00db\3\u00db\5\u00db\u0d7b\n"+
		"\u00db\3\u00db\5\u00db\u0d7e\n\u00db\3\u00db\5\u00db\u0d81\n\u00db\3\u00dc"+
		"\3\u00dc\3\u00dc\5\u00dc\u0d86\n\u00dc\3\u00dd\3\u00dd\3\u00dd\5\u00dd"+
		"\u0d8b\n\u00dd\3\u00dd\5\u00dd\u0d8e\n\u00dd\3\u00dd\5\u00dd\u0d91\n\u00dd"+
		"\3\u00de\3\u00de\6\u00de\u0d95\n\u00de\r\u00de\16\u00de\u0d96\3\u00de"+
		"\5\u00de\u0d9a\n\u00de\3\u00de\3\u00de\3\u00df\3\u00df\5\u00df\u0da0\n"+
		"\u00df\3\u00df\5\u00df\u0da3\n\u00df\3\u00e0\5\u00e0\u0da6\n\u00e0\3\u00e0"+
		"\6\u00e0\u0da9\n\u00e0\r\u00e0\16\u00e0\u0daa\3\u00e0\5\u00e0\u0dae\n"+
		"\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1\6\u00e1\u0db4\n\u00e1\r\u00e1\16"+
		"\u00e1\u0db5\3\u00e2\3\u00e2\6\u00e2\u0dba\n\u00e2\r\u00e2\16\u00e2\u0dbb"+
		"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\7\u00e3\u0dc4\n\u00e3"+
		"\f\u00e3\16\u00e3\u0dc7\13\u00e3\3\u00e3\3\u00e3\5\u00e3\u0dcb\n\u00e3"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u0dd1\n\u00e4\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\5\u00e5\u0dd7\n\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u0de1\n\u00e5\3\u00e5\3\u00e5"+
		"\5\u00e5\u0de5\n\u00e5\5\u00e5\u0de7\n\u00e5\3\u00e5\5\u00e5\u0dea\n\u00e5"+
		"\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6"+
		"\u0df4\n\u00e6\f\u00e6\16\u00e6\u0df7\13\u00e6\3\u00e6\5\u00e6\u0dfa\n"+
		"\u00e6\3\u00e6\5\u00e6\u0dfd\n\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3"+
		"\u00e8\3\u00e8\3\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\7\u00e9\u0e0f\n\u00e9\f\u00e9\16\u00e9\u0e12"+
		"\13\u00e9\3\u00e9\3\u00e9\5\u00e9\u0e16\n\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\5\u00e9\u0e1b\n\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea"+
		"\u0e22\n\u00ea\3\u00ea\5\u00ea\u0e25\n\u00ea\3\u00eb\3\u00eb\3\u00eb\3"+
		"\u00eb\3\u00eb\7\u00eb\u0e2c\n\u00eb\f\u00eb\16\u00eb\u0e2f\13\u00eb\3"+
		"\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u0e35\n\u00eb\3\u00ec\3\u00ec\3"+
		"\u00ec\5\u00ec\u0e3a\n\u00ec\3\u00ed\3\u00ed\5\u00ed\u0e3e\n\u00ed\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u0e46\n\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u0e4c\n\u00ee\3\u00ef\3\u00ef\3\u00ef"+
		"\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u0e54\n\u00ef\3\u00ef\5\u00ef\u0e57\n"+
		"\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\7\u00f0\u0e5d\n\u00f0\f\u00f0\16"+
		"\u00f0\u0e60\13\u00f0\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f1\5\u00f1"+
		"\u0e67\n\u00f1\3\u00f1\5\u00f1\u0e6a\n\u00f1\3\u00f1\5\u00f1\u0e6d\n\u00f1"+
		"\3\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u0e76"+
		"\n\u00f3\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u0e7c\n\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u0e82\n\u00f4\5\u00f4\u0e84\n\u00f4\3"+
		"\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\5\u00f5\u0e91\n\u00f5\5\u00f5\u0e93\n\u00f5\3\u00f6\3"+
		"\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u0e9c\n\u00f6\5"+
		"\u00f6\u0e9e\n\u00f6\3\u00f7\3\u00f7\5\u00f7\u0ea2\n\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\5\u00f7\u0ea8\n\u00f7\3\u00f7\3\u00f7\5\u00f7\u0eac\n"+
		"\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u0ec2\n\u00f9\3\u00fa\3\u00fa\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u0ee9"+
		"\n\u00fc\3\u00fd\3\u00fd\5\u00fd\u0eed\n\u00fd\3\u00fd\3\u00fd\7\u00fd"+
		"\u0ef1\n\u00fd\f\u00fd\16\u00fd\u0ef4\13\u00fd\3\u00fd\3\u00fd\3\u00fe"+
		"\3\u00fe\3\u00ff\3\u00ff\3\u0100\3\u0100\3\u0100\7\u0100\u0eff\n\u0100"+
		"\f\u0100\16\u0100\u0f02\13\u0100\3\u0101\3\u0101\3\u0102\3\u0102\3\u0102"+
		"\7\u0102\u0f09\n\u0102\f\u0102\16\u0102\u0f0c\13\u0102\3\u0103\3\u0103"+
		"\3\u0103\5\u0103\u0f11\n\u0103\3\u0104\3\u0104\3\u0104\5\u0104\u0f16\n"+
		"\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\5\u0104\u0f21\n\u0104\3\u0104\3\u0104\5\u0104\u0f25\n\u0104\3"+
		"\u0104\3\u0104\3\u0104\7\u0104\u0f2a\n\u0104\f\u0104\16\u0104\u0f2d\13"+
		"\u0104\3\u0104\3\u0104\5\u0104\u0f31\n\u0104\7\u0104\u0f33\n\u0104\f\u0104"+
		"\16\u0104\u0f36\13\u0104\3\u0104\3\u0104\5\u0104\u0f3a\n\u0104\3\u0105"+
		"\3\u0105\3\u0105\5\u0105\u0f3f\n\u0105\3\u0105\3\u0105\5\u0105\u0f43\n"+
		"\u0105\3\u0106\3\u0106\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\5\u0107\u0f4e\n\u0107\3\u0107\7\u0107\u0f51\n\u0107\f\u0107\16"+
		"\u0107\u0f54\13\u0107\3\u0108\3\u0108\5\u0108\u0f58\n\u0108\3\u0108\3"+
		"\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u0f61\n\u0108\5"+
		"\u0108\u0f63\n\u0108\5\u0108\u0f65\n\u0108\3\u0109\3\u0109\3\u010a\3\u010a"+
		"\3\u010a\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\7\u010b\u0f74\n\u010b\f\u010b\16\u010b\u0f77\13\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\5\u010b\u0f7e\n\u010b\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010d\3\u010d\3\u010d\3\u010d\7\u010d\u0f88\n\u010d\f\u010d"+
		"\16\u010d\u0f8b\13\u010d\3\u010e\3\u010e\3\u010f\3\u010f\3\u010f\7\u010f"+
		"\u0f92\n\u010f\f\u010f\16\u010f\u0f95\13\u010f\3\u0110\3\u0110\3\u0110"+
		"\7\u0110\u0f9a\n\u0110\f\u0110\16\u0110\u0f9d\13\u0110\3\u0111\3\u0111"+
		"\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u0fa5\n\u0111\3\u0111\5\u0111"+
		"\u0fa8\n\u0111\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u0faf\n"+
		"\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u0fb7\n"+
		"\u0112\3\u0112\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u0fbe\n\u0112\3"+
		"\u0112\3\u0112\5\u0112\u0fc2\n\u0112\3\u0113\3\u0113\3\u0113\3\u0113\3"+
		"\u0113\5\u0113\u0fc9\n\u0113\3\u0114\3\u0114\5\u0114\u0fcd\n\u0114\3\u0114"+
		"\3\u0114\3\u0114\5\u0114\u0fd2\n\u0114\7\u0114\u0fd4\n\u0114\f\u0114\16"+
		"\u0114\u0fd7\13\u0114\3\u0114\3\u0114\3\u0114\7\u0114\u0fdc\n\u0114\f"+
		"\u0114\16\u0114\u0fdf\13\u0114\3\u0114\5\u0114\u0fe2\n\u0114\3\u0115\3"+
		"\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u0fe9\n\u0115\3\u0115\3\u0115\3"+
		"\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u0ff2\n\u0115\3\u0116\3"+
		"\u0116\3\u0116\3\u0117\3\u0117\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118"+
		"\7\u0118\u0ffe\n\u0118\f\u0118\16\u0118\u1001\13\u0118\3\u0118\3\u0118"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\7\u0118\u100b\n\u0118"+
		"\f\u0118\16\u0118\u100e\13\u0118\3\u0118\3\u0118\5\u0118\u1012\n\u0118"+
		"\3\u0118\3\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\5\u0119\u1028\n\u0119\3\u011a\3\u011a\5\u011a\u102c\n"+
		"\u011a\3\u011b\5\u011b\u102f\n\u011b\3\u011b\3\u011b\3\u011b\6\u011b\u1034"+
		"\n\u011b\r\u011b\16\u011b\u1035\3\u011b\5\u011b\u1039\n\u011b\3\u011b"+
		"\3\u011b\5\u011b\u103d\n\u011b\3\u011b\5\u011b\u1040\n\u011b\3\u011c\3"+
		"\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u1047\n\u011c\3\u011d\5\u011d\u104a"+
		"\n\u011d\3\u011d\3\u011d\6\u011d\u104e\n\u011d\r\u011d\16\u011d\u104f"+
		"\3\u011d\5\u011d\u1053\n\u011d\3\u011d\3\u011d\5\u011d\u1057\n\u011d\3"+
		"\u011d\5\u011d\u105a\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5"+
		"\u011e\u1061\n\u011e\3\u011f\3\u011f\3\u011f\5\u011f\u1066\n\u011f\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\7\u0120\u1072\n\u0120\f\u0120\16\u0120\u1075\13\u0120\3\u0120\3\u0120"+
		"\3\u0120\5\u0120\u107a\n\u0120\5\u0120\u107c\n\u0120\3\u0121\3\u0121\5"+
		"\u0121\u1080\n\u0121\3\u0122\3\u0122\3\u0122\3\u0122\7\u0122\u1086\n\u0122"+
		"\f\u0122\16\u0122\u1089\13\u0122\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123"+
		"\3\u0123\3\u0123\3\u0123\3\u0123\5\u0123\u1094\n\u0123\3\u0124\3\u0124"+
		"\3\u0124\3\u0124\3\u0124\7\u0124\u109b\n\u0124\f\u0124\16\u0124\u109e"+
		"\13\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\7\u0124"+
		"\u10a7\n\u0124\f\u0124\16\u0124\u10aa\13\u0124\3\u0124\3\u0124\5\u0124"+
		"\u10ae\n\u0124\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\5\u0125\u10b8\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\5\u0125\u10bf\n\u0125\3\u0126\3\u0126\3\u0126\5\u0126\u10c4\n\u0126\3"+
		"\u0126\3\u0126\3\u0126\5\u0126\u10c9\n\u0126\3\u0126\3\u0126\3\u0126\3"+
		"\u0126\5\u0126\u10cf\n\u0126\3\u0126\5\u0126\u10d2\n\u0126\3\u0126\3\u0126"+
		"\5\u0126\u10d6\n\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u10e3\n\u0126\3\u0126"+
		"\3\u0126\5\u0126\u10e7\n\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\6\u0126\u10ee\n\u0126\r\u0126\16\u0126\u10ef\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\5\u0126\u10f6\n\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u1104"+
		"\n\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\7\u0126"+
		"\u110d\n\u0126\f\u0126\16\u0126\u1110\13\u0126\3\u0126\5\u0126\u1113\n"+
		"\u0126\3\u0126\5\u0126\u1116\n\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3"+
		"\u0126\3\u0126\3\u0126\5\u0126\u111f\n\u0126\3\u0126\3\u0126\7\u0126\u1123"+
		"\n\u0126\f\u0126\16\u0126\u1126\13\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\5\u0126\u112f\n\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\5\u0126\u1137\n\u0126\3\u0126\5\u0126\u113a\n"+
		"\u0126\3\u0126\5\u0126\u113d\n\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3"+
		"\u0126\3\u0126\3\u0126\5\u0126\u1146\n\u0126\3\u0126\3\u0126\3\u0126\5"+
		"\u0126\u114b\n\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\7\u0126\u1152"+
		"\n\u0126\f\u0126\16\u0126\u1155\13\u0126\3\u0126\3\u0126\3\u0126\5\u0126"+
		"\u115a\n\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u115f\n\u0126\3\u0126\5"+
		"\u0126\u1162\n\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u1167\n\u0126\3\u0126"+
		"\3\u0126\3\u0126\5\u0126\u116c\n\u0126\7\u0126\u116e\n\u0126\f\u0126\16"+
		"\u0126\u1171\13\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u1176\n\u0126\3"+
		"\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u117c\n\u0126\3\u0126\3\u0126\3"+
		"\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u1185\n\u0126\3\u0126\3"+
		"\u0126\3\u0126\5\u0126\u118a\n\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3"+
		"\u0126\3\u0126\5\u0126\u1192\n\u0126\3\u0126\3\u0126\5\u0126\u1196\n\u0126"+
		"\3\u0126\3\u0126\3\u0126\5\u0126\u119b\n\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\5\u0126\u11a1\n\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\5\u0126\u11a8\n\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u11ad\n\u0126\3"+
		"\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u11b5\n\u0126\3"+
		"\u0126\3\u0126\3\u0126\5\u0126\u11ba\n\u0126\3\u0126\3\u0126\3\u0126\3"+
		"\u0126\3\u0126\3\u0126\5\u0126\u11c2\n\u0126\3\u0126\5\u0126\u11c5\n\u0126"+
		"\3\u0126\5\u0126\u11c8\n\u0126\3\u0126\5\u0126\u11cb\n\u0126\3\u0126\3"+
		"\u0126\5\u0126\u11cf\n\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u11d4\n\u0126"+
		"\3\u0126\3\u0126\3\u0126\5\u0126\u11d9\n\u0126\3\u0126\3\u0126\5\u0126"+
		"\u11dd\n\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u11e4\n"+
		"\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u11e9\n\u0126\5\u0126\u11eb\n\u0126"+
		"\3\u0127\3\u0127\3\u0128\3\u0128\3\u0129\3\u0129\3\u012a\3\u012a\3\u012a"+
		"\5\u012a\u11f6\n\u012a\3\u012a\3\u012a\5\u012a\u11fa\n\u012a\5\u012a\u11fc"+
		"\n\u012a\3\u012a\3\u012a\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\5\u012b\u1207\n\u012b\3\u012c\3\u012c\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u1212\n\u012d\3\u012e\3\u012e"+
		"\3\u012e\3\u012e\3\u012e\7\u012e\u1219\n\u012e\f\u012e\16\u012e\u121c"+
		"\13\u012e\5\u012e\u121e\n\u012e\3\u012f\3\u012f\5\u012f\u1222\n\u012f"+
		"\3\u012f\5\u012f\u1225\n\u012f\3\u012f\3\u012f\5\u012f\u1229\n\u012f\3"+
		"\u0130\3\u0130\3\u0130\3\u0130\3\u0131\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\5\u0131\u1236\n\u0131\3\u0132\3\u0132\3\u0132\5\u0132"+
		"\u123b\n\u0132\3\u0132\3\u0132\3\u0132\3\u0132\7\u0132\u1241\n\u0132\f"+
		"\u0132\16\u0132\u1244\13\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132"+
		"\u124a\n\u0132\3\u0133\3\u0133\3\u0133\5\u0133\u124f\n\u0133\3\u0133\3"+
		"\u0133\5\u0133\u1253\n\u0133\3\u0133\3\u0133\3\u0133\5\u0133\u1258\n\u0133"+
		"\3\u0134\3\u0134\3\u0134\5\u0134\u125d\n\u0134\3\u0134\5\u0134\u1260\n"+
		"\u0134\3\u0134\3\u0134\3\u0134\7\u0134\u1265\n\u0134\f\u0134\16\u0134"+
		"\u1268\13\u0134\3\u0134\3\u0134\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\5\u0135\u1271\n\u0135\3\u0135\3\u0135\3\u0135\3\u0135\7\u0135\u1277\n"+
		"\u0135\f\u0135\16\u0135\u127a\13\u0135\3\u0135\5\u0135\u127d\n\u0135\3"+
		"\u0135\3\u0135\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\5\u0136"+
		"\u1287\n\u0136\3\u0136\5\u0136\u128a\n\u0136\5\u0136\u128c\n\u0136\3\u0137"+
		"\3\u0137\3\u0137\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\5\u0138\u1296"+
		"\n\u0138\5\u0138\u1298\n\u0138\3\u0139\3\u0139\3\u0139\3\u0139\5\u0139"+
		"\u129e\n\u0139\3\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u12a4\n\u013a\5"+
		"\u013a\u12a6\n\u013a\3\u013b\3\u013b\3\u013b\3\u013c\3\u013c\3\u013c\3"+
		"\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u12b4\n\u013d\5"+
		"\u013d\u12b6\n\u013d\3\u013e\3\u013e\3\u013f\6\u013f\u12bb\n\u013f\r\u013f"+
		"\16\u013f\u12bc\3\u013f\3\u013f\5\u013f\u12c1\n\u013f\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\5\u0140\u12c7\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\5\u0140\u12cd\n\u0140\7\u0140\u12cf\n\u0140\f\u0140\16\u0140\u12d2\13"+
		"\u0140\3\u0140\3\u0140\5\u0140\u12d6\n\u0140\5\u0140\u12d8\n\u0140\3\u0140"+
		"\3\u0140\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\5\u0141\u12e2"+
		"\n\u0141\3\u0141\5\u0141\u12e5\n\u0141\3\u0142\3\u0142\3\u0142\3\u0142"+
		"\3\u0142\3\u0142\3\u0142\5\u0142\u12ee\n\u0142\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u12f7\n\u0143\3\u0144\3\u0144"+
		"\3\u0145\3\u0145\3\u0146\3\u0146\3\u0147\3\u0147\5\u0147\u1301\n\u0147"+
		"\3\u0147\3\u0147\3\u0148\5\u0148\u1306\n\u0148\3\u0148\3\u0148\5\u0148"+
		"\u130a\n\u0148\3\u0148\5\u0148\u130d\n\u0148\3\u0149\3\u0149\5\u0149\u1311"+
		"\n\u0149\3\u014a\3\u014a\3\u014b\3\u014b\3\u014b\5\u014b\u1318\n\u014b"+
		"\3\u014c\3\u014c\3\u014c\3\u014c\3\u014d\3\u014d\5\u014d\u1320\n\u014d"+
		"\3\u014e\3\u014e\3\u014e\3\u014e\7\u014e\u1326\n\u014e\f\u014e\16\u014e"+
		"\u1329\13\u014e\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\3\u014e\7\u014e"+
		"\u1331\n\u014e\f\u014e\16\u014e\u1334\13\u014e\5\u014e\u1336\n\u014e\3"+
		"\u014f\3\u014f\5\u014f\u133a\n\u014f\3\u0150\3\u0150\3\u0151\3\u0151\3"+
		"\u0152\3\u0152\3\u0153\3\u0153\3\u0154\3\u0154\3\u0155\3\u0155\3\u0156"+
		"\3\u0156\3\u0156\7\u0156\u134b\n\u0156\f\u0156\16\u0156\u134e\13\u0156"+
		"\3\u0156\3\u0156\5\u0156\u1352\n\u0156\3\u0157\3\u0157\3\u0157\5\u0157"+
		"\u1357\n\u0157\3\u0157\3\u0157\3\u0158\3\u0158\3\u0158\5\u0158\u135e\n"+
		"\u0158\3\u0159\3\u0159\3\u015a\3\u015a\3\u015b\3\u015b\3\u015c\3\u015c"+
		"\3\u015c\7\u015c\u1369\n\u015c\f\u015c\16\u015c\u136c\13\u015c\3\u015d"+
		"\3\u015d\3\u015e\3\u015e\3\u015e\7\u015e\u1373\n\u015e\f\u015e\16\u015e"+
		"\u1376\13\u015e\3\u015e\3\u015e\5\u015e\u137a\n\u015e\3\u015f\3\u015f"+
		"\3\u0160\3\u0160\3\u0160\7\u0160\u1381\n\u0160\f\u0160\16\u0160\u1384"+
		"\13\u0160\3\u0161\3\u0161\3\u0161\7\u0161\u1389\n\u0161\f\u0161\16\u0161"+
		"\u138c\13\u0161\3\u0162\3\u0162\3\u0162\7\u0162\u1391\n\u0162\f\u0162"+
		"\16\u0162\u1394\13\u0162\3\u0163\3\u0163\3\u0163\5\u0163\u1399\n\u0163"+
		"\3\u0164\3\u0164\3\u0164\5\u0164\u139e\n\u0164\3\u0165\3\u0165\3\u0165"+
		"\5\u0165\u13a3\n\u0165\3\u0166\3\u0166\5\u0166\u13a7\n\u0166\3\u0166\3"+
		"\u0166\3\u0166\5\u0166\u13ac\n\u0166\3\u0166\5\u0166\u13af\n\u0166\3\u0167"+
		"\3\u0167\3\u0168\3\u0168\5\u0168\u13b5\n\u0168\3\u0169\3\u0169\5\u0169"+
		"\u13b9\n\u0169\3\u016a\3\u016a\3\u016a\5\u016a\u13be\n\u016a\3\u016b\3"+
		"\u016b\3\u016c\3\u016c\3\u016c\7\u016c\u13c5\n\u016c\f\u016c\16\u016c"+
		"\u13c8\13\u016c\3\u016d\3\u016d\3\u016d\5\u016d\u13cd\n\u016d\3\u016d"+
		"\3\u016d\3\u016d\5\u016d\u13d2\n\u016d\3\u016e\3\u016e\3\u016e\7\u016e"+
		"\u13d7\n\u016e\f\u016e\16\u016e\u13da\13\u016e\3\u016f\3\u016f\3\u016f"+
		"\3\u016f\3\u016f\3\u016f\3\u016f\5\u016f\u13e3\n\u016f\3\u0170\3\u0170"+
		"\5\u0170\u13e7\n\u0170\3\u0170\3\u0170\7\u0170\u13eb\n\u0170\f\u0170\16"+
		"\u0170\u13ee\13\u0170\3\u0170\3\u0170\5\u0170\u13f2\n\u0170\3\u0171\3"+
		"\u0171\3\u0171\5\u0171\u13f7\n\u0171\5\u0171\u13f9\n\u0171\3\u0171\3\u0171"+
		"\3\u0171\5\u0171\u13fe\n\u0171\7\u0171\u1400\n\u0171\f\u0171\16\u0171"+
		"\u1403\13\u0171\3\u0171\3\u0171\5\u0171\u1407\n\u0171\3\u0172\3\u0172"+
		"\3\u0172\3\u0172\3\u0172\5\u0172\u140e\n\u0172\3\u0172\3\u0172\3\u0172"+
		"\5\u0172\u1413\n\u0172\5\u0172\u1415\n\u0172\5\u0172\u1417\n\u0172\3\u0172"+
		"\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\3\u0172\5\u0172\u1421"+
		"\n\u0172\3\u0172\3\u0172\3\u0172\5\u0172\u1426\n\u0172\7\u0172\u1428\n"+
		"\u0172\f\u0172\16\u0172\u142b\13\u0172\5\u0172\u142d\n\u0172\3\u0172\3"+
		"\u0172\5\u0172\u1431\n\u0172\3\u0173\3\u0173\3\u0173\3\u0174\3\u0174\3"+
		"\u0174\3\u0174\5\u0174\u143a\n\u0174\3\u0174\3\u0174\3\u0175\3\u0175\5"+
		"\u0175\u1440\n\u0175\3\u0175\3\u0175\5\u0175\u1444\n\u0175\5\u0175\u1446"+
		"\n\u0175\3\u0176\3\u0176\5\u0176\u144a\n\u0176\3\u0176\3\u0176\5\u0176"+
		"\u144e\n\u0176\3\u0176\3\u0176\5\u0176\u1452\n\u0176\3\u0176\3\u0176\3"+
		"\u0176\3\u0176\3\u0176\3\u0176\5\u0176\u145a\n\u0176\3\u0176\3\u0176\3"+
		"\u0176\3\u0176\3\u0176\3\u0176\5\u0176\u1462\n\u0176\5\u0176\u1464\n\u0176"+
		"\3\u0177\3\u0177\3\u0177\3\u0177\5\u0177\u146a\n\u0177\3\u0177\5\u0177"+
		"\u146d\n\u0177\3\u0177\3\u0177\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178"+
		"\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178"+
		"\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\5\u0178\u1485\n\u0178"+
		"\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\5\u0178\u148c\n\u0178\3\u0178"+
		"\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178"+
		"\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178"+
		"\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178"+
		"\3\u0178\3\u0178\3\u0178\5\u0178\u14ad\n\u0178\3\u0179\3\u0179\3\u0179"+
		"\5\u0179\u14b2\n\u0179\3\u0179\5\u0179\u14b5\n\u0179\3\u0179\3\u0179\3"+
		"\u0179\5\u0179\u14ba\n\u0179\5\u0179\u14bc\n\u0179\3\u0179\3\u0179\7\u0179"+
		"\u14c0\n\u0179\f\u0179\16\u0179\u14c3\13\u0179\3\u017a\3\u017a\3\u017a"+
		"\7\u017a\u14c8\n\u017a\f\u017a\16\u017a\u14cb\13\u017a\3\u017b\3\u017b"+
		"\5\u017b\u14cf\n\u017b\3\u017b\3\u017b\3\u017b\7\u017b\u14d4\n\u017b\f"+
		"\u017b\16\u017b\u14d7\13\u017b\3\u017b\5\u017b\u14da\n\u017b\3\u017c\3"+
		"\u017c\5\u017c\u14de\n\u017c\3\u017c\3\u017c\3\u017c\7\u017c\u14e3\n\u017c"+
		"\f\u017c\16\u017c\u14e6\13\u017c\3\u017d\3\u017d\3\u017d\5\u017d\u14eb"+
		"\n\u017d\3\u017d\3\u017d\3\u017d\3\u017d\5\u017d\u14f1\n\u017d\3\u017d"+
		"\3\u017d\3\u017d\3\u017d\5\u017d\u14f7\n\u017d\3\u017d\3\u017d\3\u017d"+
		"\3\u017d\5\u017d\u14fd\n\u017d\3\u017d\3\u017d\3\u017d\5\u017d\u1502\n"+
		"\u017d\5\u017d\u1504\n\u017d\3\u017d\5\u017d\u1507\n\u017d\3\u017d\3\u017d"+
		"\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\5\u017d\u1511\n\u017d"+
		"\3\u017d\5\u017d\u1514\n\u017d\5\u017d\u1516\n\u017d\5\u017d\u1518\n\u017d"+
		"\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d"+
		"\3\u017d\3\u017d\3\u017d\5\u017d\u1526\n\u017d\3\u017e\3\u017e\3\u017f"+
		"\3\u017f\3\u0180\3\u0180\5\u0180\u152e\n\u0180\3\u0180\3\u0180\3\u0181"+
		"\3\u0181\5\u0181\u1534\n\u0181\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\3\u0182\5\u0182\u153d\n\u0182\3\u0183\3\u0183\3\u0183\5\u0183"+
		"\u1542\n\u0183\3\u0184\3\u0184\3\u0184\5\u0184\u1547\n\u0184\3\u0185\3"+
		"\u0185\3\u0185\5\u0185\u154c\n\u0185\3\u0186\3\u0186\3\u0186\3\u0186\3"+
		"\u0187\3\u0187\3\u0187\2\2\u0188\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36"+
		" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082"+
		"\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a"+
		"\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2"+
		"\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca"+
		"\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2"+
		"\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa"+
		"\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112"+
		"\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a"+
		"\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142"+
		"\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a"+
		"\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172"+
		"\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a"+
		"\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2"+
		"\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba"+
		"\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2"+
		"\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea"+
		"\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202"+
		"\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a"+
		"\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232"+
		"\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a"+
		"\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262"+
		"\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a"+
		"\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292"+
		"\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa"+
		"\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2"+
		"\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da"+
		"\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2"+
		"\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a"+
		"\u030c\2Q\3\2\u0206\u0206\4\2\25\25\u00c2\u00c2\4\2\u00a5\u00a5\u0135"+
		"\u0135\4\2>>\u0114\u0114\5\2))\u011b\u011b\u0172\u0172\4\2ss\177\177\4"+
		"\2\f\f  \5\2nn\u00b9\u00b9\u01a3\u01a3\5\2\u00f5\u00f5\u010d\u010d\u011e"+
		"\u011e\4\2\u009d\u009d\u01a9\u01a9\4\2))\u0172\u0172\4\2\13\13xx\5\2\13"+
		"\13xx\u00e9\u00e9\5\2[[\u0113\u0113\u0173\u0173\4\2\u00dd\u00dd\u0114"+
		"\u0114\4\2\u00e1\u00e1\u017b\u017b\5\2\u0095\u0095\u00ba\u00ba\u011a\u011a"+
		"\4\2YYmm\6\2\u00ac\u00ac\u00b8\u00b8\u00fa\u00fa\u0117\u0117\4\2jj\u0203"+
		"\u0203\3\2\u0123\u0124\3\3\u0206\u0206\3\2\u0145\u0146\4\2\u010f\u010f"+
		"\u01bd\u01bd\3\2JK\4\2ll\u00ab\u00ab\4\2\u0103\u0103\u01b3\u01b3\4\2\37"+
		"\37\u00ab\u00ab\4\2,,oo\5\2\17\17uu\u019f\u019f\4\2VV\u00ee\u00ee\5\2"+
		"\u009f\u009f\u00cc\u00cc\u014a\u014a\4\2\u0156\u0156\u0188\u0188\5\2\u0156"+
		"\u0156\u0170\u0170\u0188\u0188\4\2\u0089\u0089\u00ad\u00ad\4\2WW\u014c"+
		"\u014c\4\2\u00aa\u00aa\u00c7\u00c7\4\2\17\17\u01a4\u01a4\4\2\35\35\u015e"+
		"\u015e\4\2\26\26pp\4\2\u0096\u0096\u00c9\u00c9\4\2\17\17\u0096\u0096\3"+
		"\2\u0184\u0185\4\2\u00e1\u00e1\u017e\u017e\3\2\u00cf\u00d2\3\2\u01fe\u01ff"+
		"\4\2\u01fd\u01fd\u0201\u0201\4\2ii\u00af\u00af\6\2\17\17\23\23\u008c\u008c"+
		"\u0171\u0171\4\2\66\66\u01c1\u01c1\4\2uu\u019f\u019f\4\2\63\63DD\4\2\u0097"+
		"\u0097\u00ca\u00ca\4\288\u00f2\u00f2\5\2++\u00cb\u00cb\u0193\u0193\4\2"+
		"\u01c2\u01c2\u01c5\u01c5\4\2\u0082\u0082\u00fc\u00fc\4\2\u0085\u0085\u00ec"+
		"\u00ec\4\2MMvv\4\2\u00a7\u00a7\u0167\u0167\3\2\u01de\u01ed\3\2\u01d7\u01dd"+
		"\3\2\u01d1\u01d6\4\2\u0135\u0135\u014f\u014f\4\2\u0099\u0099\u012f\u012f"+
		"\4\2\u0101\u0101\u0155\u0155\4\2\u0116\u0116\u0174\u0174\5\2\u0092\u0092"+
		"\u0182\u0182\u01b4\u01b4\4\2BB\u014b\u014b\5\2BB\u00ff\u00ff\u014b\u014b"+
		"\4\2\u011f\u011f\u017f\u017f\4\2\u00aa\u00aa\u0141\u0141\4\2``\u01cd\u01cd"+
		"\4\2\u00ea\u00ea\u0158\u0158\4\2//\67\67\6\2``\u00a8\u00a8\u00e4\u00e4"+
		"\u0158\u0158\3\2\u01f4\u01f5\4\2\u01ef\u01ef\u01f6\u01f6I\2\n\16\21\21"+
		"\24\24\27 #+--/\60\62\64\669;FITVWY^`fhikmqtvwy{~\u0080\u0082\u0089\u008b"+
		"\u008b\u008d\u008f\u0091\u0092\u0095\u009a\u009c\u009d\u009f\u00a0\u00a4"+
		"\u00a5\u00a7\u00a8\u00aa\u00ab\u00ad\u00b0\u00b2\u00b8\u00ba\u00bd\u00bf"+
		"\u00bf\u00c1\u00c1\u00c3\u00ce\u00d0\u00d4\u00d6\u00e2\u00e4\u00e6\u00e8"+
		"\u00f5\u00f7\u00f8\u00fa\u00fc\u00ff\u00ff\u0101\u0101\u0105\u0109\u010b"+
		"\u010d\u010f\u0110\u0113\u0113\u0115\u0121\u0127\u0127\u012a\u0131\u0134"+
		"\u0148\u014a\u0156\u0158\u015a\u015c\u015c\u015e\u0165\u0167\u016c\u016e"+
		"\u0176\u0178\u0183\u0187\u018f\u0193\u0198\u019a\u019d\u01a0\u01a0\u01a2"+
		"\u01a2\u01a4\u01a7\u01a9\u01aa\u01ac\u01b5\u01b7\u01b7\u01b9\u01b9\u01bb"+
		"\u01ed\u0276\u0276\u17c4\2\u030f\3\2\2\2\4\u0316\3\2\2\2\6\u0320\3\2\2"+
		"\2\b\u033b\3\2\2\2\n\u033d\3\2\2\2\f\u0342\3\2\2\2\16\u035a\3\2\2\2\20"+
		"\u035e\3\2\2\2\22\u038e\3\2\2\2\24\u0392\3\2\2\2\26\u03aa\3\2\2\2\30\u03ae"+
		"\3\2\2\2\32\u03ba\3\2\2\2\34\u03c8\3\2\2\2\36\u03d0\3\2\2\2 \u03e6\3\2"+
		"\2\2\"\u03f2\3\2\2\2$\u0403\3\2\2\2&\u041c\3\2\2\2(\u0428\3\2\2\2*\u042a"+
		"\3\2\2\2,\u042f\3\2\2\2.\u0447\3\2\2\2\60\u044b\3\2\2\2\62\u0470\3\2\2"+
		"\2\64\u0475\3\2\2\2\66\u048e\3\2\2\28\u04a6\3\2\2\2:\u04af\3\2\2\2<\u04b8"+
		"\3\2\2\2>\u04c1\3\2\2\2@\u04c5\3\2\2\2B\u04ca\3\2\2\2D\u04e2\3\2\2\2F"+
		"\u04e4\3\2\2\2H\u04e8\3\2\2\2J\u051c\3\2\2\2L\u0538\3\2\2\2N\u053a\3\2"+
		"\2\2P\u0548\3\2\2\2R\u0554\3\2\2\2T\u0559\3\2\2\2V\u055f\3\2\2\2X\u0562"+
		"\3\2\2\2Z\u056d\3\2\2\2\\\u057c\3\2\2\2^\u058d\3\2\2\2`\u059e\3\2\2\2"+
		"b\u05a6\3\2\2\2d\u05ab\3\2\2\2f\u05bb\3\2\2\2h\u05bf\3\2\2\2j\u05d7\3"+
		"\2\2\2l\u05da\3\2\2\2n\u05e0\3\2\2\2p\u05ec\3\2\2\2r\u05f5\3\2\2\2t\u0611"+
		"\3\2\2\2v\u0617\3\2\2\2x\u061a\3\2\2\2z\u0621\3\2\2\2|\u0629\3\2\2\2~"+
		"\u0638\3\2\2\2\u0080\u063a\3\2\2\2\u0082\u063e\3\2\2\2\u0084\u0644\3\2"+
		"\2\2\u0086\u0660\3\2\2\2\u0088\u0682\3\2\2\2\u008a\u06b2\3\2\2\2\u008c"+
		"\u06bc\3\2\2\2\u008e\u06be\3\2\2\2\u0090\u06c3\3\2\2\2\u0092\u06d1\3\2"+
		"\2\2\u0094\u06d3\3\2\2\2\u0096\u06d8\3\2\2\2\u0098\u06e8\3\2\2\2\u009a"+
		"\u0709\3\2\2\2\u009c\u072c\3\2\2\2\u009e\u0730\3\2\2\2\u00a0\u073f\3\2"+
		"\2\2\u00a2\u0741\3\2\2\2\u00a4\u0744\3\2\2\2\u00a6\u0749\3\2\2\2\u00a8"+
		"\u0753\3\2\2\2\u00aa\u076f\3\2\2\2\u00ac\u0771\3\2\2\2\u00ae\u0775\3\2"+
		"\2\2\u00b0\u0778\3\2\2\2\u00b2\u077c\3\2\2\2\u00b4\u0781\3\2\2\2\u00b6"+
		"\u0785\3\2\2\2\u00b8\u0796\3\2\2\2\u00ba\u07a3\3\2\2\2\u00bc\u07b4\3\2"+
		"\2\2\u00be\u07c1\3\2\2\2\u00c0\u07ce\3\2\2\2\u00c2\u07d0\3\2\2\2\u00c4"+
		"\u07de\3\2\2\2\u00c6\u07ef\3\2\2\2\u00c8\u0808\3\2\2\2\u00ca\u0812\3\2"+
		"\2\2\u00cc\u0816\3\2\2\2\u00ce\u083e\3\2\2\2\u00d0\u0840\3\2\2\2\u00d2"+
		"\u0859\3\2\2\2\u00d4\u0864\3\2\2\2\u00d6\u086b\3\2\2\2\u00d8\u086f\3\2"+
		"\2\2\u00da\u0881\3\2\2\2\u00dc\u0889\3\2\2\2\u00de\u0894\3\2\2\2\u00e0"+
		"\u089c\3\2\2\2\u00e2\u08a0\3\2\2\2\u00e4\u08c1\3\2\2\2\u00e6\u08c5\3\2"+
		"\2\2\u00e8\u08ca\3\2\2\2\u00ea\u08d2\3\2\2\2\u00ec\u08da\3\2\2\2\u00ee"+
		"\u08dd\3\2\2\2\u00f0\u08ed\3\2\2\2\u00f2\u08f2\3\2\2\2\u00f4\u08f6\3\2"+
		"\2\2\u00f6\u091a\3\2\2\2\u00f8\u091c\3\2\2\2\u00fa\u0932\3\2\2\2\u00fc"+
		"\u0934\3\2\2\2\u00fe\u0939\3\2\2\2\u0100\u093b\3\2\2\2\u0102\u093d\3\2"+
		"\2\2\u0104\u093f\3\2\2\2\u0106\u0943\3\2\2\2\u0108\u0948\3\2\2\2\u010a"+
		"\u094e\3\2\2\2\u010c\u0982\3\2\2\2\u010e\u0984\3\2\2\2\u0110\u098a\3\2"+
		"\2\2\u0112\u0990\3\2\2\2\u0114\u09a4\3\2\2\2\u0116\u09a9\3\2\2\2\u0118"+
		"\u09b6\3\2\2\2\u011a\u09b8\3\2\2\2\u011c\u09c6\3\2\2\2\u011e\u09d0\3\2"+
		"\2\2\u0120\u09d6\3\2\2\2\u0122\u09d8\3\2\2\2\u0124\u09db\3\2\2\2\u0126"+
		"\u09e0\3\2\2\2\u0128\u09fc\3\2\2\2\u012a\u0a0b\3\2\2\2\u012c\u0a0d\3\2"+
		"\2\2\u012e\u0a22\3\2\2\2\u0130\u0a31\3\2\2\2\u0132\u0a47\3\2\2\2\u0134"+
		"\u0a4e\3\2\2\2\u0136\u0a5b\3\2\2\2\u0138\u0a5e\3\2\2\2\u013a\u0a73\3\2"+
		"\2\2\u013c\u0a7d\3\2\2\2\u013e\u0a86\3\2\2\2\u0140\u0aa1\3\2\2\2\u0142"+
		"\u0acc\3\2\2\2\u0144\u0adc\3\2\2\2\u0146\u0ae9\3\2\2\2\u0148\u0af2\3\2"+
		"\2\2\u014a\u0af4\3\2\2\2\u014c\u0b19\3\2\2\2\u014e\u0b1d\3\2\2\2\u0150"+
		"\u0b25\3\2\2\2\u0152\u0b27\3\2\2\2\u0154\u0b2f\3\2\2\2\u0156\u0b56\3\2"+
		"\2\2\u0158\u0b62\3\2\2\2\u015a\u0b77\3\2\2\2\u015c\u0b7a\3\2\2\2\u015e"+
		"\u0b86\3\2\2\2\u0160\u0b8a\3\2\2\2\u0162\u0ba3\3\2\2\2\u0164\u0ba5\3\2"+
		"\2\2\u0166\u0bb6\3\2\2\2\u0168\u0bbd\3\2\2\2\u016a\u0bcc\3\2\2\2\u016c"+
		"\u0be3\3\2\2\2\u016e\u0be9\3\2\2\2\u0170\u0beb\3\2\2\2\u0172\u0c03\3\2"+
		"\2\2\u0174\u0c1b\3\2\2\2\u0176\u0c3f\3\2\2\2\u0178\u0c41\3\2\2\2\u017a"+
		"\u0c5f\3\2\2\2\u017c\u0c64\3\2\2\2\u017e\u0c66\3\2\2\2\u0180\u0c72\3\2"+
		"\2\2\u0182\u0c82\3\2\2\2\u0184\u0c84\3\2\2\2\u0186\u0c87\3\2\2\2\u0188"+
		"\u0ca1\3\2\2\2\u018a\u0ca3\3\2\2\2\u018c\u0ca7\3\2\2\2\u018e\u0cb6\3\2"+
		"\2\2\u0190\u0cc2\3\2\2\2\u0192\u0cca\3\2\2\2\u0194\u0cce\3\2\2\2\u0196"+
		"\u0cd9\3\2\2\2\u0198\u0cde\3\2\2\2\u019a\u0ceb\3\2\2\2\u019c\u0cff\3\2"+
		"\2\2\u019e\u0d08\3\2\2\2\u01a0\u0d0a\3\2\2\2\u01a2\u0d11\3\2\2\2\u01a4"+
		"\u0d16\3\2\2\2\u01a6\u0d23\3\2\2\2\u01a8\u0d2b\3\2\2\2\u01aa\u0d33\3\2"+
		"\2\2\u01ac\u0d41\3\2\2\2\u01ae\u0d43\3\2\2\2\u01b0\u0d4f\3\2\2\2\u01b2"+
		"\u0d72\3\2\2\2\u01b4\u0d74\3\2\2\2\u01b6\u0d82\3\2\2\2\u01b8\u0d87\3\2"+
		"\2\2\u01ba\u0d99\3\2\2\2\u01bc\u0d9d\3\2\2\2\u01be\u0da5\3\2\2\2\u01c0"+
		"\u0daf\3\2\2\2\u01c2\u0db7\3\2\2\2\u01c4\u0dbd\3\2\2\2\u01c6\u0dcc\3\2"+
		"\2\2\u01c8\u0dd2\3\2\2\2\u01ca\u0deb\3\2\2\2\u01cc\u0dfe\3\2\2\2\u01ce"+
		"\u0e02\3\2\2\2\u01d0\u0e05\3\2\2\2\u01d2\u0e21\3\2\2\2\u01d4\u0e26\3\2"+
		"\2\2\u01d6\u0e39\3\2\2\2\u01d8\u0e3b\3\2\2\2\u01da\u0e4b\3\2\2\2\u01dc"+
		"\u0e53\3\2\2\2\u01de\u0e58\3\2\2\2\u01e0\u0e63\3\2\2\2\u01e2\u0e6e\3\2"+
		"\2\2\u01e4\u0e71\3\2\2\2\u01e6\u0e83\3\2\2\2\u01e8\u0e85\3\2\2\2\u01ea"+
		"\u0e94\3\2\2\2\u01ec\u0e9f\3\2\2\2\u01ee\u0ead\3\2\2\2\u01f0\u0ec1\3\2"+
		"\2\2\u01f2\u0ec3\3\2\2\2\u01f4\u0ec5\3\2\2\2\u01f6\u0ee8\3\2\2\2\u01f8"+
		"\u0eea\3\2\2\2\u01fa\u0ef7\3\2\2\2\u01fc\u0ef9\3\2\2\2\u01fe\u0efb\3\2"+
		"\2\2\u0200\u0f03\3\2\2\2\u0202\u0f05\3\2\2\2\u0204\u0f10\3\2\2\2\u0206"+
		"\u0f39\3\2\2\2\u0208\u0f3b\3\2\2\2\u020a\u0f44\3\2\2\2\u020c\u0f46\3\2"+
		"\2\2\u020e\u0f55\3\2\2\2\u0210\u0f66\3\2\2\2\u0212\u0f68\3\2\2\2\u0214"+
		"\u0f7d\3\2\2\2\u0216\u0f7f\3\2\2\2\u0218\u0f83\3\2\2\2\u021a\u0f8c\3\2"+
		"\2\2\u021c\u0f8e\3\2\2\2\u021e\u0f96\3\2\2\2\u0220\u0f9e\3\2\2\2\u0222"+
		"\u0fc1\3\2\2\2\u0224\u0fc3\3\2\2\2\u0226\u0fe1\3\2\2\2\u0228\u0fe3\3\2"+
		"\2\2\u022a\u0ff3\3\2\2\2\u022c\u0ff6\3\2\2\2\u022e\u0ff8\3\2\2\2\u0230"+
		"\u1027\3\2\2\2\u0232\u102b\3\2\2\2\u0234\u102e\3\2\2\2\u0236\u1041\3\2"+
		"\2\2\u0238\u1049\3\2\2\2\u023a\u105b\3\2\2\2\u023c\u1062\3\2\2\2\u023e"+
		"\u107b\3\2\2\2\u0240\u107d\3\2\2\2\u0242\u1081\3\2\2\2\u0244\u108a\3\2"+
		"\2\2\u0246\u10ad\3\2\2\2\u0248\u10be\3\2\2\2\u024a\u11ea\3\2\2\2\u024c"+
		"\u11ec\3\2\2\2\u024e\u11ee\3\2\2\2\u0250\u11f0\3\2\2\2\u0252\u11f2\3\2"+
		"\2\2\u0254\u11ff\3\2\2\2\u0256\u1208\3\2\2\2\u0258\u1211\3\2\2\2\u025a"+
		"\u1213\3\2\2\2\u025c\u1224\3\2\2\2\u025e\u122a\3\2\2\2\u0260\u1235\3\2"+
		"\2\2\u0262\u1237\3\2\2\2\u0264\u124b\3\2\2\2\u0266\u1259\3\2\2\2\u0268"+
		"\u126b\3\2\2\2\u026a\u1280\3\2\2\2\u026c\u128d\3\2\2\2\u026e\u1290\3\2"+
		"\2\2\u0270\u1299\3\2\2\2\u0272\u129f\3\2\2\2\u0274\u12a7\3\2\2\2\u0276"+
		"\u12aa\3\2\2\2\u0278\u12b5\3\2\2\2\u027a\u12b7\3\2\2\2\u027c\u12c0\3\2"+
		"\2\2\u027e\u12c2\3\2\2\2\u0280\u12e1\3\2\2\2\u0282\u12e6\3\2\2\2\u0284"+
		"\u12ef\3\2\2\2\u0286\u12f8\3\2\2\2\u0288\u12fa\3\2\2\2\u028a\u12fc\3\2"+
		"\2\2\u028c\u12fe\3\2\2\2\u028e\u130c\3\2\2\2\u0290\u1310\3\2\2\2\u0292"+
		"\u1312\3\2\2\2\u0294\u1314\3\2\2\2\u0296\u1319\3\2\2\2\u0298\u131f\3\2"+
		"\2\2\u029a\u1335\3\2\2\2\u029c\u1339\3\2\2\2\u029e\u133b\3\2\2\2\u02a0"+
		"\u133d\3\2\2\2\u02a2\u133f\3\2\2\2\u02a4\u1341\3\2\2\2\u02a6\u1343\3\2"+
		"\2\2\u02a8\u1345\3\2\2\2\u02aa\u1347\3\2\2\2\u02ac\u1356\3\2\2\2\u02ae"+
		"\u135a\3\2\2\2\u02b0\u135f\3\2\2\2\u02b2\u1361\3\2\2\2\u02b4\u1363\3\2"+
		"\2\2\u02b6\u1365\3\2\2\2\u02b8\u136d\3\2\2\2\u02ba\u136f\3\2\2\2\u02bc"+
		"\u137b\3\2\2\2\u02be\u137d\3\2\2\2\u02c0\u1385\3\2\2\2\u02c2\u138d\3\2"+
		"\2\2\u02c4\u1395\3\2\2\2\u02c6\u139a\3\2\2\2\u02c8\u139f\3\2\2\2\u02ca"+
		"\u13ae\3\2\2\2\u02cc\u13b0\3\2\2\2\u02ce\u13b4\3\2\2\2\u02d0\u13b8\3\2"+
		"\2\2\u02d2\u13ba\3\2\2\2\u02d4\u13bf\3\2\2\2\u02d6\u13c1\3\2\2\2\u02d8"+
		"\u13c9\3\2\2\2\u02da\u13d3\3\2\2\2\u02dc\u13db\3\2\2\2\u02de\u13e4\3\2"+
		"\2\2\u02e0\u13f3\3\2\2\2\u02e2\u1408\3\2\2\2\u02e4\u1432\3\2\2\2\u02e6"+
		"\u1439\3\2\2\2\u02e8\u1445\3\2\2\2\u02ea\u1463\3\2\2\2\u02ec\u1465\3\2"+
		"\2\2\u02ee\u14ac\3\2\2\2\u02f0\u14b1\3\2\2\2\u02f2\u14c4\3\2\2\2\u02f4"+
		"\u14ce\3\2\2\2\u02f6\u14dd\3\2\2\2\u02f8\u1525\3\2\2\2\u02fa\u1527\3\2"+
		"\2\2\u02fc\u1529\3\2\2\2\u02fe\u152d\3\2\2\2\u0300\u1533\3\2\2\2\u0302"+
		"\u153c\3\2\2\2\u0304\u1541\3\2\2\2\u0306\u1546\3\2\2\2\u0308\u154b\3\2"+
		"\2\2\u030a\u154d\3\2\2\2\u030c\u1551\3\2\2\2\u030e\u0310\n\2\2\2\u030f"+
		"\u030e\3\2\2\2\u0310\u0311\3\2\2\2\u0311\u030f\3\2\2\2\u0311\u0312\3\2"+
		"\2\2\u0312\3\3\2\2\2\u0313\u0315\5\b\5\2\u0314\u0313\3\2\2\2\u0315\u0318"+
		"\3\2\2\2\u0316\u0314\3\2\2\2\u0316\u0317\3\2\2\2\u0317\u0319\3\2\2\2\u0318"+
		"\u0316\3\2\2\2\u0319\u031a\7\2\2\3\u031a\5\3\2\2\2\u031b\u031f\5\b\5\2"+
		"\u031c\u031f\5\u0280\u0141\2\u031d\u031f\5\u027e\u0140\2\u031e\u031b\3"+
		"\2\2\2\u031e\u031c\3\2\2\2\u031e\u031d\3\2\2\2\u031f\u0322\3\2\2\2\u0320"+
		"\u031e\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0323\3\2\2\2\u0322\u0320\3\2"+
		"\2\2\u0323\u0324\7\2\2\3\u0324\7\3\2\2\2\u0325\u033c\5\f\7\2\u0326\u033c"+
		"\5\36\20\2\u0327\u033c\5,\27\2\u0328\u033c\5\u00a6T\2\u0329\u033c\5\64"+
		"\33\2\u032a\u033c\5Z.\2\u032b\u033c\5\16\b\2\u032c\u033c\5.\30\2\u032d"+
		"\u033c\5 \21\2\u032e\u033c\5\u00a8U\2\u032f\u033c\5\66\34\2\u0330\u033c"+
		"\5n8\2\u0331\u033c\5\n\6\2\u0332\u033c\5\34\17\2\u0333\u033c\5*\26\2\u0334"+
		"\u033c\5\u00a4S\2\u0335\u033c\5\62\32\2\u0336\u033c\5X-\2\u0337\u033c"+
		"\5\u011e\u0090\2\u0338\u0339\5\u0116\u008c\2\u0339\u033a\7\u0206\2\2\u033a"+
		"\u033c\3\2\2\2\u033b\u0325\3\2\2\2\u033b\u0326\3\2\2\2\u033b\u0327\3\2"+
		"\2\2\u033b\u0328\3\2\2\2\u033b\u0329\3\2\2\2\u033b\u032a\3\2\2\2\u033b"+
		"\u032b\3\2\2\2\u033b\u032c\3\2\2\2\u033b\u032d\3\2\2\2\u033b\u032e\3\2"+
		"\2\2\u033b\u032f\3\2\2\2\u033b\u0330\3\2\2\2\u033b\u0331\3\2\2\2\u033b"+
		"\u0332\3\2\2\2\u033b\u0333\3\2\2\2\u033b\u0334\3\2\2\2\u033b\u0335\3\2"+
		"\2\2\u033b\u0336\3\2\2\2\u033b\u0337\3\2\2\2\u033b\u0338\3\2\2\2\u033c"+
		"\t\3\2\2\2\u033d\u033e\7x\2\2\u033e\u033f\7\u00a0\2\2\u033f\u0340\5\u02c4"+
		"\u0163\2\u0340\u0341\7\u0206\2\2\u0341\13\3\2\2\2\u0342\u0343\7\20\2\2"+
		"\u0343\u0344\7\u00a0\2\2\u0344\u0345\5\u02c4\u0163\2\u0345\u0347\7E\2"+
		"\2\u0346\u0348\7d\2\2\u0347\u0346\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u034c"+
		"\3\2\2\2\u0349\u034b\5\u00b0Y\2\u034a\u0349\3\2\2\2\u034b\u034e\3\2\2"+
		"\2\u034c\u034a\3\2\2\2\u034c\u034d\3\2\2\2\u034d\u0351\3\2\2\2\u034e\u034c"+
		"\3\2\2\2\u034f\u0350\7\u0147\2\2\u0350\u0352\7\u0165\2\2\u0351\u034f\3"+
		"\2\2\2\u0351\u0352\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0354\7\u0206\2\2"+
		"\u0354\r\3\2\2\2\u0355\u0358\7U\2\2\u0356\u0357\7\u0112\2\2\u0357\u0359"+
		"\7\u0140\2\2\u0358\u0356\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035b\3\2\2"+
		"\2\u035a\u0355\3\2\2\2\u035a\u035b\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035d"+
		"\5\20\t\2\u035d\17\3\2\2\2\u035e\u035f\7\u00a0\2\2\u035f\u036b\5\u02c4"+
		"\u0163\2\u0360\u0361\7\u01fa\2\2\u0361\u0366\5\u00bc_\2\u0362\u0363\7"+
		"\u0200\2\2\u0363\u0365\5\u00bc_\2\u0364\u0362\3\2\2\2\u0365\u0368\3\2"+
		"\2\2\u0366\u0364\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0369\3\2\2\2\u0368"+
		"\u0366\3\2\2\2\u0369\u036a\7\u01fb\2\2\u036a\u036c\3\2\2\2\u036b\u0360"+
		"\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u036d\3\2\2\2\u036d\u036e\7\u0145\2"+
		"\2\u036e\u0379\5\u02e8\u0175\2\u036f\u0378\5\u00aeX\2\u0370\u0378\5\22"+
		"\n\2\u0371\u0378\5\26\f\2\u0372\u0378\7q\2\2\u0373\u0378\7\u0127\2\2\u0374"+
		"\u0375\7\16\2\2\u0375\u0376\7\u01a8\2\2\u0376\u0378\5\u02ae\u0158\2\u0377"+
		"\u036f\3\2\2\2\u0377\u0370\3\2\2\2\u0377\u0371\3\2\2\2\u0377\u0372\3\2"+
		"\2\2\u0377\u0373\3\2\2\2\u0377\u0374\3\2\2\2\u0378\u037b\3\2\2\2\u0379"+
		"\u0377\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u038a\3\2\2\2\u037b\u0379\3\2"+
		"\2\2\u037c\u0388\t\3\2\2\u037d\u037f\7g\2\2\u037e\u037d\3\2\2\2\u037e"+
		"\u037f\3\2\2\2\u037f\u0383\3\2\2\2\u0380\u0382\5\u00c0a\2\u0381\u0380"+
		"\3\2\2\2\u0382\u0385\3\2\2\2\u0383\u0381\3\2\2\2\u0383\u0384\3\2\2\2\u0384"+
		"\u0386\3\2\2\2\u0385\u0383\3\2\2\2\u0386\u0389\5\u010a\u0086\2\u0387\u0389"+
		"\5\u00b2Z\2\u0388\u037e\3\2\2\2\u0388\u0387\3\2\2\2\u0389\u038b\3\2\2"+
		"\2\u038a\u037c\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038c\3\2\2\2\u038c\u038d"+
		"\7\u0206\2\2\u038d\21\3\2\2\2\u038e\u0390\7\u011c\2\2\u038f\u0391\5\24"+
		"\13\2\u0390\u038f\3\2\2\2\u0390\u0391\3\2\2\2\u0391\23\3\2\2\2\u0392\u0393"+
		"\7\u01fa\2\2\u0393\u0394\7\u011f\2\2\u0394\u0395\5\u01fe\u0100\2\u0395"+
		"\u03a3\7.\2\2\u0396\u03a4\7\23\2\2\u0397\u0398\t\4\2\2\u0398\u0399\7\u01fa"+
		"\2\2\u0399\u039e\5\u02d6\u016c\2\u039a\u039b\7\u0200\2\2\u039b\u039d\5"+
		"\u02d6\u016c\2\u039c\u039a\3\2\2\2\u039d\u03a0\3\2\2\2\u039e\u039c\3\2"+
		"\2\2\u039e\u039f\3\2\2\2\u039f\u03a1\3\2\2\2\u03a0\u039e\3\2\2\2\u03a1"+
		"\u03a2\7\u01fb\2\2\u03a2\u03a4\3\2\2\2\u03a3\u0396\3\2\2\2\u03a3\u0397"+
		"\3\2\2\2\u03a4\u03a6\3\2\2\2\u03a5\u03a7\5\32\16\2\u03a6\u03a5\3\2\2\2"+
		"\u03a6\u03a7\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03a9\7\u01fb\2\2\u03a9"+
		"\25\3\2\2\2\u03aa\u03ac\7\u0144\2\2\u03ab\u03ad\5\30\r\2\u03ac\u03ab\3"+
		"\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\27\3\2\2\2\u03ae\u03af\7\u013e\2\2\u03af"+
		"\u03b0\7\u01fa\2\2\u03b0\u03b5\5\u02d8\u016d\2\u03b1\u03b2\7\u0200\2\2"+
		"\u03b2\u03b4\5\u02d8\u016d\2\u03b3\u03b1\3\2\2\2\u03b4\u03b7\3\2\2\2\u03b5"+
		"\u03b3\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b8\3\2\2\2\u03b7\u03b5\3\2"+
		"\2\2\u03b8\u03b9\7\u01fb\2\2\u03b9\31\3\2\2\2\u03ba\u03bb\t\5\2\2\u03bb"+
		"\u03bc\5\u01fe\u0100\2\u03bc\u03bd\7.\2\2\u03bd\u03be\7\u01fa\2\2\u03be"+
		"\u03c3\5\u02d6\u016c\2\u03bf\u03c0\7\u0200\2\2\u03c0\u03c2\5\u02d6\u016c"+
		"\2\u03c1\u03bf\3\2\2\2\u03c2\u03c5\3\2\2\2\u03c3\u03c1\3\2\2\2\u03c3\u03c4"+
		"\3\2\2\2\u03c4\u03c6\3\2\2\2\u03c5\u03c3\3\2\2\2\u03c6\u03c7\7\u01fb\2"+
		"\2\u03c7\33\3\2\2\2\u03c8\u03c9\7x\2\2\u03c9\u03cb\7\u011b\2\2\u03ca\u03cc"+
		"\7)\2\2\u03cb\u03ca\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd"+
		"\u03ce\5\u02ac\u0157\2\u03ce\u03cf\7\u0206\2\2\u03cf\35\3\2\2\2\u03d0"+
		"\u03d1\7\20\2\2\u03d1\u03d2\7\u011b\2\2\u03d2\u03d3\5\u02ac\u0157\2\u03d3"+
		"\u03d5\7E\2\2\u03d4\u03d6\7d\2\2\u03d5\u03d4\3\2\2\2\u03d5\u03d6\3\2\2"+
		"\2\u03d6\u03d8\3\2\2\2\u03d7\u03d9\t\6\2\2\u03d8\u03d7\3\2\2\2\u03d8\u03d9"+
		"\3\2\2\2\u03d9\u03dd\3\2\2\2\u03da\u03dc\5\u00b0Y\2\u03db\u03da\3\2\2"+
		"\2\u03dc\u03df\3\2\2\2\u03dd\u03db\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03e2"+
		"\3\2\2\2\u03df\u03dd\3\2\2\2\u03e0\u03e1\7\u0147\2\2\u03e1\u03e3\7\u0165"+
		"\2\2\u03e2\u03e0\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4"+
		"\u03e5\7\u0206\2\2\u03e5\37\3\2\2\2\u03e6\u03e9\7U\2\2\u03e7\u03e8\7\u0112"+
		"\2\2\u03e8\u03ea\7\u0140\2\2\u03e9\u03e7\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea"+
		"\u03eb\3\2\2\2\u03eb\u03ee\7\u011b\2\2\u03ec\u03ef\5$\23\2\u03ed\u03ef"+
		"\5\"\22\2\u03ee\u03ec\3\2\2\2\u03ee\u03ed\3\2\2\2\u03ee\u03ef\3\2\2\2"+
		"\u03ef\u03f0\3\2\2\2\u03f0\u03f1\7\u0206\2\2\u03f1!\3\2\2\2\u03f2\u03f3"+
		"\7)\2\2\u03f3\u03f4\5\u02ac\u0157\2\u03f4\u03f8\t\3\2\2\u03f5\u03f7\5"+
		"(\25\2\u03f6\u03f5\3\2\2\2\u03f7\u03fa\3\2\2\2\u03f8\u03f6\3\2\2\2\u03f8"+
		"\u03f9\3\2\2\2\u03f9\u0401\3\2\2\2\u03fa\u03f8\3\2\2\2\u03fb\u03fc\7!"+
		"\2\2\u03fc\u0402\5\u00e0q\2\u03fd\u03ff\7\u0081\2\2\u03fe\u0400\5\u02ac"+
		"\u0157\2\u03ff\u03fe\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0402\3\2\2\2\u0401"+
		"\u03fb\3\2\2\2\u0401\u03fd\3\2\2\2\u0402#\3\2\2\2\u0403\u0405\5\u02ac"+
		"\u0157\2\u0404\u0406\5\u00aeX\2\u0405\u0404\3\2\2\2\u0405\u0406\3\2\2"+
		"\2\u0406\u0407\3\2\2\2\u0407\u040b\t\3\2\2\u0408\u040a\5&\24\2\u0409\u0408"+
		"\3\2\2\2\u040a\u040d\3\2\2\2\u040b\u0409\3\2\2\2\u040b\u040c\3\2\2\2\u040c"+
		"\u040e\3\2\2\2\u040d\u040b\3\2\2\2\u040e\u0410\7\u0081\2\2\u040f\u0411"+
		"\5\u02ac\u0157\2\u0410\u040f\3\2\2\2\u0410\u0411\3\2\2\2\u0411%\3\2\2"+
		"\2\u0412\u041d\5\u00c2b\2\u0413\u041d\5\u00c4c\2\u0414\u041d\5\u00c6d"+
		"\2\u0415\u041d\5\u00caf\2\u0416\u041d\5\u00ccg\2\u0417\u041d\5\u00ceh"+
		"\2\u0418\u041d\5\u00d6l\2\u0419\u041d\5\60\31\2\u041a\u041d\5\20\t\2\u041b"+
		"\u041d\5\u027e\u0140\2\u041c\u0412\3\2\2\2\u041c\u0413\3\2\2\2\u041c\u0414"+
		"\3\2\2\2\u041c\u0415\3\2\2\2\u041c\u0416\3\2\2\2\u041c\u0417\3\2\2\2\u041c"+
		"\u0418\3\2\2\2\u041c\u0419\3\2\2\2\u041c\u041a\3\2\2\2\u041c\u041b\3\2"+
		"\2\2\u041d\'\3\2\2\2\u041e\u0429\5\u00c2b\2\u041f\u0429\5\u00c4c\2\u0420"+
		"\u0429\5\u00c6d\2\u0421\u0429\5\u00caf\2\u0422\u0429\5\u00ccg\2\u0423"+
		"\u0429\5\u00ceh\2\u0424\u0429\5\u00d6l\2\u0425\u0429\5.\30\2\u0426\u0429"+
		"\5\16\b\2\u0427\u0429\5\u027e\u0140\2\u0428\u041e\3\2\2\2\u0428\u041f"+
		"\3\2\2\2\u0428\u0420\3\2\2\2\u0428\u0421\3\2\2\2\u0428\u0422\3\2\2\2\u0428"+
		"\u0423\3\2\2\2\u0428\u0424\3\2\2\2\u0428\u0425\3\2\2\2\u0428\u0426\3\2"+
		"\2\2\u0428\u0427\3\2\2\2\u0429)\3\2\2\2\u042a\u042b\7x\2\2\u042b\u042c"+
		"\7\u0133\2\2\u042c\u042d\5\u02c6\u0164\2\u042d\u042e\7\u0206\2\2\u042e"+
		"+\3\2\2\2\u042f\u0430\7\20\2\2\u0430\u0431\7\u0133\2\2\u0431\u0432\5\u02c6"+
		"\u0164\2\u0432\u0434\7E\2\2\u0433\u0435\7d\2\2\u0434\u0433\3\2\2\2\u0434"+
		"\u0435\3\2\2\2\u0435\u0439\3\2\2\2\u0436\u0438\5\u00b0Y\2\u0437\u0436"+
		"\3\2\2\2\u0438\u043b\3\2\2\2\u0439\u0437\3\2\2\2\u0439\u043a\3\2\2\2\u043a"+
		"\u043e\3\2\2\2\u043b\u0439\3\2\2\2\u043c\u043d\7\u0147\2\2\u043d\u043f"+
		"\7\u0165\2\2\u043e\u043c\3\2\2\2\u043e\u043f\3\2\2\2\u043f\u0440\3\2\2"+
		"\2\u0440\u0441\7\u0206\2\2\u0441-\3\2\2\2\u0442\u0445\7U\2\2\u0443\u0444"+
		"\7\u0112\2\2\u0444\u0446\7\u0140\2\2\u0445\u0443\3\2\2\2\u0445\u0446\3"+
		"\2\2\2\u0446\u0448\3\2\2\2\u0447\u0442\3\2\2\2\u0447\u0448\3\2\2\2\u0448"+
		"\u0449\3\2\2\2\u0449\u044a\5\60\31\2\u044a/\3\2\2\2\u044b\u044c\7\u0133"+
		"\2\2\u044c\u0458\5\u02c6\u0164\2\u044d\u044e\7\u01fa\2\2\u044e\u0453\5"+
		"\u00bc_\2\u044f\u0450\7\u0200\2\2\u0450\u0452\5\u00bc_\2\u0451\u044f\3"+
		"\2\2\2\u0452\u0455\3\2\2\2\u0453\u0451\3\2\2\2\u0453\u0454\3\2\2\2\u0454"+
		"\u0456\3\2\2\2\u0455\u0453\3\2\2\2\u0456\u0457\7\u01fb\2\2\u0457\u0459"+
		"\3\2\2\2\u0458\u044d\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u046c\3\2\2\2\u045a"+
		"\u045c\5\u00aeX\2\u045b\u045a\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u045d"+
		"\3\2\2\2\u045d\u046a\t\3\2\2\u045e\u0460\7g\2\2\u045f\u045e\3\2\2\2\u045f"+
		"\u0460\3\2\2\2\u0460\u0464\3\2\2\2\u0461\u0463\5\u00c0a\2\u0462\u0461"+
		"\3\2\2\2\u0463\u0466\3\2\2\2\u0464\u0462\3\2\2\2\u0464\u0465\3\2\2\2\u0465"+
		"\u0467\3\2\2\2\u0466\u0464\3\2\2\2\u0467\u046b\5\u010a\u0086\2\u0468\u046b"+
		"\5\u00b2Z\2\u0469\u046b\7\u008f\2\2\u046a\u045f\3\2\2\2\u046a\u0468\3"+
		"\2\2\2\u046a\u0469\3\2\2\2\u046b\u046d\3\2\2\2\u046c\u045b\3\2\2\2\u046c"+
		"\u046d\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u046f\7\u0206\2\2\u046f\61\3"+
		"\2\2\2\u0470\u0471\7x\2\2\u0471\u0472\7\u0197\2\2\u0472\u0473\5\u02c8"+
		"\u0165\2\u0473\u0474\7\u0206\2\2\u0474\63\3\2\2\2\u0475\u0476\7\20\2\2"+
		"\u0476\u0477\7\u0197\2\2\u0477\u048a\5\u02c8\u0165\2\u0478\u048b\t\7\2"+
		"\2\u0479\u047a\7\u013f\2\2\u047a\u047b\7\u0190\2\2\u047b\u048b\5\u02c8"+
		"\u0165\2\u047c\u047e\7E\2\2\u047d\u047f\7d\2\2\u047e\u047d\3\2\2\2\u047e"+
		"\u047f\3\2\2\2\u047f\u0483\3\2\2\2\u0480\u0482\5\u00b0Y\2\u0481\u0480"+
		"\3\2\2\2\u0482\u0485\3\2\2\2\u0483\u0481\3\2\2\2\u0483\u0484\3\2\2\2\u0484"+
		"\u0488\3\2\2\2\u0485\u0483\3\2\2\2\u0486\u0487\7\u0147\2\2\u0487\u0489"+
		"\7\u0165\2\2\u0488\u0486\3\2\2\2\u0488\u0489\3\2\2\2\u0489\u048b\3\2\2"+
		"\2\u048a\u0478\3\2\2\2\u048a\u0479\3\2\2\2\u048a\u047c\3\2\2\2\u048b\u048c"+
		"\3\2\2\2\u048c\u048d\7\u0206\2\2\u048d\65\3\2\2\2\u048e\u0491\7U\2\2\u048f"+
		"\u0490\7\u0112\2\2\u0490\u0492\7\u0140\2\2\u0491\u048f\3\2\2\2\u0491\u0492"+
		"\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0494\7\u0197\2\2\u0494\u0498\5\u02c8"+
		"\u0165\2\u0495\u0499\5<\37\2\u0496\u0499\5@!\2\u0497\u0499\5B\"\2\u0498"+
		"\u0495\3\2\2\2\u0498\u0496\3\2\2\2\u0498\u0497\3\2\2\2\u0499\u049b\3\2"+
		"\2\2\u049a\u049c\58\35\2\u049b\u049a\3\2\2\2\u049b\u049c\3\2\2\2\u049c"+
		"\u049e\3\2\2\2\u049d\u049f\t\7\2\2\u049e\u049d\3\2\2\2\u049e\u049f\3\2"+
		"\2\2\u049f\u04a1\3\2\2\2\u04a0\u04a2\5:\36\2\u04a1\u04a0\3\2\2\2\u04a1"+
		"\u04a2\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3\u04a4\5D#\2\u04a4\u04a5\7\u0206"+
		"\2\2\u04a5\67\3\2\2\2\u04a6\u04a7\7\u009a\2\2\u04a7\u04ac\5\u02c8\u0165"+
		"\2\u04a8\u04a9\7\u0200\2\2\u04a9\u04ab\5\u02c8\u0165\2\u04aa\u04a8\3\2"+
		"\2\2\u04ab\u04ae\3\2\2\2\u04ac\u04aa\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad"+
		"9\3\2\2\2\u04ae\u04ac\3\2\2\2\u04af\u04b0\7\u01b6\2\2\u04b0\u04b1\7\u01fa"+
		"\2\2\u04b1\u04b2\5\u01fa\u00fe\2\u04b2\u04b3\7\u01fb\2\2\u04b3;\3\2\2"+
		"\2\u04b4\u04b9\7 \2\2\u04b5\u04b9\7\f\2\2\u04b6\u04b7\7\u00bb\2\2\u04b7"+
		"\u04b9\7\u010a\2\2\u04b8\u04b4\3\2\2\2\u04b8\u04b5\3\2\2\2\u04b8\u04b6"+
		"\3\2\2\2\u04b9\u04ba\3\2\2\2\u04ba\u04bc\5N(\2\u04bb\u04bd\5T+\2\u04bc"+
		"\u04bb\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\u04bf\3\2\2\2\u04be\u04c0\5>"+
		" \2\u04bf\u04be\3\2\2\2\u04bf\u04c0\3\2\2\2\u04c0=\3\2\2\2\u04c1\u04c2"+
		"\7\u009b\2\2\u04c2\u04c3\7z\2\2\u04c3\u04c4\7\u014d\2\2\u04c4?\3\2\2\2"+
		"\u04c5\u04c6\7\u009b\2\2\u04c6\u04c8\5N(\2\u04c7\u04c9\5T+\2\u04c8\u04c7"+
		"\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9A\3\2\2\2\u04ca\u04cb\t\b\2\2\u04cb"+
		"\u04d0\5L\'\2\u04cc\u04cd\7\u0112\2\2\u04cd\u04cf\5L\'\2\u04ce\u04cc\3"+
		"\2\2\2\u04cf\u04d2\3\2\2\2\u04d0\u04ce\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1"+
		"\u04d3\3\2\2\2\u04d2\u04d0\3\2\2\2\u04d3\u04db\7\u010e\2\2\u04d4\u04dc"+
		"\7^\2\2\u04d5\u04d6\5\u02a8\u0155\2\u04d6\u04d7\7\u01f3\2\2\u04d7\u04d9"+
		"\3\2\2\2\u04d8\u04d5\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04da\3\2\2\2\u04da"+
		"\u04dc\7\u0154\2\2\u04db\u04d4\3\2\2\2\u04db\u04d8\3\2\2\2\u04dcC\3\2"+
		"\2\2\u04dd\u04de\7F\2\2\u04de\u04e3\7\u0197\2\2\u04df\u04e0\7\62\2\2\u04e0"+
		"\u04e3\5\u02fe\u0180\2\u04e1\u04e3\5\u0114\u008b\2\u04e2\u04dd\3\2\2\2"+
		"\u04e2\u04df\3\2\2\2\u04e2\u04e1\3\2\2\2\u04e3E\3\2\2\2\u04e4\u04e6\5"+
		"\u02aa\u0156\2\u04e5\u04e7\5\u02de\u0170\2\u04e6\u04e5\3\2\2\2\u04e6\u04e7"+
		"\3\2\2\2\u04e7G\3\2\2\2\u04e8\u04e9\7F\2\2\u04e9\u04ed\7\u0197\2\2\u04ea"+
		"\u04ec\5\u00c0a\2\u04eb\u04ea\3\2\2\2\u04ec\u04ef\3\2\2\2\u04ed\u04eb"+
		"\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04f1\3\2\2\2\u04ef\u04ed\3\2\2\2\u04f0"+
		"\u04f2\5J&\2\u04f1\u04f0\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3\u04f1\3\2\2"+
		"\2\u04f3\u04f4\3\2\2\2\u04f4\u04f5\3\2\2\2\u04f5\u04f6\7\u0081\2\2\u04f6"+
		"\u04f7\5\u02c8\u0165\2\u04f7I\3\2\2\2\u04f8\u04f9\7 \2\2\u04f9\u04fa\7"+
		"\u0179\2\2\u04fa\u04fb\7\u00c2\2\2\u04fb\u04fc\5\u0114\u008b\2\u04fc\u04fd"+
		"\7 \2\2\u04fd\u04fe\7\u0179\2\2\u04fe\u04ff\7\u0206\2\2\u04ff\u051d\3"+
		"\2\2\2\u0500\u0501\7 \2\2\u0501\u0502\7z\2\2\u0502\u0503\7\u014d\2\2\u0503"+
		"\u0504\7\u00c2\2\2\u0504\u0505\5\u0114\u008b\2\u0505\u0506\7 \2\2\u0506"+
		"\u0507\7z\2\2\u0507\u0508\7\u014d\2\2\u0508\u0509\7\u0206\2\2\u0509\u051d"+
		"\3\2\2\2\u050a\u050b\7\f\2\2\u050b\u050c\7\u0179\2\2\u050c\u050d\7\u00c2"+
		"\2\2\u050d\u050e\5\u0114\u008b\2\u050e\u050f\7\f\2\2\u050f\u0510\7\u0179"+
		"\2\2\u0510\u0511\7\u0206\2\2\u0511\u051d\3\2\2\2\u0512\u0513\7\f\2\2\u0513"+
		"\u0514\7z\2\2\u0514\u0515\7\u014d\2\2\u0515\u0516\7\u00c2\2\2\u0516\u0517"+
		"\5\u0114\u008b\2\u0517\u0518\7\f\2\2\u0518\u0519\7z\2\2\u0519\u051a\7"+
		"\u014d\2\2\u051a\u051b\7\u0206\2\2\u051b\u051d\3\2\2\2\u051c\u04f8\3\2"+
		"\2\2\u051c\u0500\3\2\2\2\u051c\u050a\3\2\2\2\u051c\u0512\3\2\2\2\u051d"+
		"K\3\2\2\2\u051e\u0539\7\20\2\2\u051f\u0539\7\21\2\2\u0520\u0521\7\27\2"+
		"\2\u0521\u0539\7\u017c\2\2\u0522\u0539\7\32\2\2\u0523\u0539\7A\2\2\u0524"+
		"\u0539\7U\2\2\u0525\u0526\7t\2\2\u0526\u0539\7\u017c\2\2\u0527\u0539\7"+
		"x\2\2\u0528\u0539\7\u00a2\2\2\u0529\u0539\7\u00f8\2\2\u052a\u0539\7\u013f"+
		"\2\2\u052b\u0539\7\u0149\2\2\u052c\u0539\7\u019a\2\2\u052d\u0539\7c\2"+
		"\2\u052e\u0539\7\u0178\2\2\u052f\u0539\7\u0168\2\2\u0530\u0539\7a\2\2"+
		"\u0531\u0539\7\u00d9\2\2\u0532\u0539\7\u00d8\2\2\u0533\u0539\7\u0161\2"+
		"\2\u0534\u0539\7\u0183\2\2\u0535\u0539\7^\2\2\u0536\u0539\7\u0154\2\2"+
		"\u0537\u0539\7\u009a\2\2\u0538\u051e\3\2\2\2\u0538\u051f\3\2\2\2\u0538"+
		"\u0520\3\2\2\2\u0538\u0522\3\2\2\2\u0538\u0523\3\2\2\2\u0538\u0524\3\2"+
		"\2\2\u0538\u0525\3\2\2\2\u0538\u0527\3\2\2\2\u0538\u0528\3\2\2\2\u0538"+
		"\u0529\3\2\2\2\u0538\u052a\3\2\2\2\u0538\u052b\3\2\2\2\u0538\u052c\3\2"+
		"\2\2\u0538\u052d\3\2\2\2\u0538\u052e\3\2\2\2\u0538\u052f\3\2\2\2\u0538"+
		"\u0530\3\2\2\2\u0538\u0531\3\2\2\2\u0538\u0532\3\2\2\2\u0538\u0533\3\2"+
		"\2\2\u0538\u0534\3\2\2\2\u0538\u0535\3\2\2\2\u0538\u0536\3\2\2\2\u0538"+
		"\u0537\3\2\2\2\u0539M\3\2\2\2\u053a\u053f\5P)\2\u053b\u053c\7\u0112\2"+
		"\2\u053c\u053e\5P)\2\u053d\u053b\3\2\2\2\u053e\u0541\3\2\2\2\u053f\u053d"+
		"\3\2\2\2\u053f\u0540\3\2\2\2\u0540\u0542\3\2\2\2\u0541\u053f\3\2\2\2\u0542"+
		"\u0544\7\u010e\2\2\u0543\u0545\5R*\2\u0544\u0543\3\2\2\2\u0544\u0545\3"+
		"\2\2\2\u0545\u0546\3\2\2\2\u0546\u0547\5\u02d8\u016d\2\u0547O\3\2\2\2"+
		"\u0548\u0552\t\t\2\2\u0549\u054a\7\u010a\2\2\u054a\u054f\5\u02d6\u016c"+
		"\2\u054b\u054c\7\u0200\2\2\u054c\u054e\5\u02d6\u016c\2\u054d\u054b\3\2"+
		"\2\2\u054e\u0551\3\2\2\2\u054f\u054d\3\2\2\2\u054f\u0550\3\2\2\2\u0550"+
		"\u0553\3\2\2\2\u0551\u054f\3\2\2\2\u0552\u0549\3\2\2\2\u0552\u0553\3\2"+
		"\2\2\u0553Q\3\2\2\2\u0554\u0555\7\u00f4\2\2\u0555\u0556\7\u0184\2\2\u0556"+
		"\u0557\5\u02d8\u016d\2\u0557\u0558\7\u010a\2\2\u0558S\3\2\2\2\u0559\u055b"+
		"\7\u013c\2\2\u055a\u055c\5V,\2\u055b\u055a\3\2\2\2\u055c\u055d\3\2\2\2"+
		"\u055d\u055b\3\2\2\2\u055d\u055e\3\2\2\2\u055eU\3\2\2\2\u055f\u0560\t"+
		"\n\2\2\u0560\u0561\5\u028e\u0148\2\u0561W\3\2\2\2\u0562\u0563\7x\2\2\u0563"+
		"\u0565\7\u019b\2\2\u0564\u0566\7)\2\2\u0565\u0564\3\2\2\2\u0565\u0566"+
		"\3\2\2\2\u0566\u0567\3\2\2\2\u0567\u0569\5\u02be\u0160\2\u0568\u056a\t"+
		"\13\2\2\u0569\u0568\3\2\2\2\u0569\u056a\3\2\2\2\u056a\u056b\3\2\2\2\u056b"+
		"\u056c\7\u0206\2\2\u056cY\3\2\2\2\u056d\u056e\7\20\2\2\u056e\u056f\7\u019b"+
		"\2\2\u056f\u0575\5\u02be\u0160\2\u0570\u0576\5\\/\2\u0571\u0576\5^\60"+
		"\2\u0572\u0576\5`\61\2\u0573\u0576\5h\65\2\u0574\u0576\5\u008aF\2\u0575"+
		"\u0570\3\2\2\2\u0575\u0571\3\2\2\2\u0575\u0572\3\2\2\2\u0575\u0573\3\2"+
		"\2\2\u0575\u0574\3\2\2\2\u0576\u0578\3\2\2\2\u0577\u0579\5j\66\2\u0578"+
		"\u0577\3\2\2\2\u0578\u0579\3\2\2\2\u0579\u057a\3\2\2\2\u057a\u057b\7\u0206"+
		"\2\2\u057b[\3\2\2\2\u057c\u057e\7E\2\2\u057d\u057f\7d\2\2\u057e\u057d"+
		"\3\2\2\2\u057e\u057f\3\2\2\2\u057f\u0581\3\2\2\2\u0580\u0582\t\f\2\2\u0581"+
		"\u0580\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0586\3\2\2\2\u0583\u0585\5\u00b0"+
		"Y\2\u0584\u0583\3\2\2\2\u0585\u0588\3\2\2\2\u0586\u0584\3\2\2\2\u0586"+
		"\u0587\3\2\2\2\u0587\u058b\3\2\2\2\u0588\u0586\3\2\2\2\u0589\u058a\7\u0147"+
		"\2\2\u058a\u058c\7\u0165\2\2\u058b\u0589\3\2\2\2\u058b\u058c\3\2\2\2\u058c"+
		"]\3\2\2\2\u058d\u058f\7\u0140\2\2\u058e\u0590\5\u00aeX\2\u058f\u058e\3"+
		"\2\2\2\u058f\u0590\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0592\7\25\2\2\u0592"+
		"\u0593\7\u0109\2\2\u0593\u0594\7\u01fa\2\2\u0594\u0599\5\u008cG\2\u0595"+
		"\u0596\7\u0200\2\2\u0596\u0598\5\u008cG\2\u0597\u0595\3\2\2\2\u0598\u059b"+
		"\3\2\2\2\u0599\u0597\3\2\2\2\u0599\u059a\3\2\2\2\u059a\u059c\3\2\2\2\u059b"+
		"\u0599\3\2\2\2\u059c\u059d\7\u01fb\2\2\u059d_\3\2\2\2\u059e\u05a3\5b\62"+
		"\2\u059f\u05a0\7\u0200\2\2\u05a0\u05a2\5b\62\2\u05a1\u059f\3\2\2\2\u05a2"+
		"\u05a5\3\2\2\2\u05a3\u05a1\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4a\3\2\2\2"+
		"\u05a5\u05a3\3\2\2\2\u05a6\u05a9\t\r\2\2\u05a7\u05aa\5\u009cO\2\u05a8"+
		"\u05aa\5\u0094K\2\u05a9\u05a7\3\2\2\2\u05a9\u05a8\3\2\2\2\u05aac\3\2\2"+
		"\2\u05ab\u05ac\t\16\2\2\u05ac\u05b9\7\31\2\2\u05ad\u05ba\5f\64\2\u05ae"+
		"\u05af\7\u01fa\2\2\u05af\u05b4\5f\64\2\u05b0\u05b1\7\u0200\2\2\u05b1\u05b3"+
		"\5f\64\2\u05b2\u05b0\3\2\2\2\u05b3\u05b6\3\2\2\2\u05b4\u05b2\3\2\2\2\u05b4"+
		"\u05b5\3\2\2\2\u05b5\u05b7\3\2\2\2\u05b6\u05b4\3\2\2\2\u05b7\u05b8\7\u01fb"+
		"\2\2\u05b8\u05ba\3\2\2\2\u05b9\u05ad\3\2\2\2\u05b9\u05ae\3\2\2\2\u05ba"+
		"e\3\2\2\2\u05bb\u05bd\5\u02a0\u0151\2\u05bc\u05be\5\u02e8\u0175\2\u05bd"+
		"\u05bc\3\2\2\2\u05bd\u05be\3\2\2\2\u05beg\3\2\2\2\u05bf\u05c5\7\u00e9"+
		"\2\2\u05c0\u05c1\7\u00d3\2\2\u05c1\u05c6\5\u01fe\u0100\2\u05c2\u05c3\7"+
		"{\2\2\u05c3\u05c4\7\u019b\2\2\u05c4\u05c6\5\u02e8\u0175\2\u05c5\u05c0"+
		"\3\2\2\2\u05c5\u05c2\3\2\2\2\u05c6i\3\2\2\2\u05c7\u05d8\7\u00c1\2\2\u05c8"+
		"\u05d2\7\64\2\2\u05c9\u05ca\7P\2\2\u05ca\u05cb\7\u0190\2\2\u05cb\u05d3"+
		"\7\u0180\2\2\u05cc\u05ce\7\u0102\2\2\u05cd\u05cc\3\2\2\2\u05cd\u05ce\3"+
		"\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u05d0\7\u00ae\2\2\u05d0\u05d1\7\u0184"+
		"\2\2\u05d1\u05d3\7]\2\2\u05d2\u05c9\3\2\2\2\u05d2\u05cd\3\2\2\2\u05d2"+
		"\u05d3\3\2\2\2\u05d3\u05d5\3\2\2\2\u05d4\u05d6\5l\67\2\u05d5\u05d4\3\2"+
		"\2\2\u05d5\u05d6\3\2\2\2\u05d6\u05d8\3\2\2\2\u05d7\u05c7\3\2\2\2\u05d7"+
		"\u05c8\3\2\2\2\u05d8k\3\2\2\2\u05d9\u05db\7\u009d\2\2\u05da\u05d9\3\2"+
		"\2\2\u05da\u05db\3\2\2\2\u05db\u05dc\3\2\2\2\u05dc\u05dd\7\u0088\2\2\u05dd"+
		"\u05de\7\u00c0\2\2\u05de\u05df\5\u02d8\u016d\2\u05dfm\3\2\2\2\u05e0\u05e3"+
		"\7U\2\2\u05e1\u05e2\7\u0112\2\2\u05e2\u05e4\7\u0140\2\2\u05e3\u05e1\3"+
		"\2\2\2\u05e3\u05e4\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5\u05e8\7\u019b\2\2"+
		"\u05e6\u05e9\5p9\2\u05e7\u05e9\5|?\2\u05e8\u05e6\3\2\2\2\u05e8\u05e7\3"+
		"\2\2\2\u05e9\u05ea\3\2\2\2\u05ea\u05eb\7\u0206\2\2\u05ebo\3\2\2\2\u05ec"+
		"\u05ef\5\u02be\u0160\2\u05ed\u05ee\7\u010c\2\2\u05ee\u05f0\7\u01f6\2\2"+
		"\u05ef\u05ed\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u05f2\3\2\2\2\u05f1\u05f3"+
		"\5r:\2\u05f2\u05f1\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3q\3\2\2\2\u05f4\u05f6"+
		"\5\u00aeX\2\u05f5\u05f4\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\u05f9\3\2\2"+
		"\2\u05f7\u05fa\5t;\2\u05f8\u05fa\5v<\2\u05f9\u05f7\3\2\2\2\u05f9\u05f8"+
		"\3\2\2\2\u05fa\u05fc\3\2\2\2\u05fb\u05fd\5z>\2\u05fc\u05fb\3\2\2\2\u05fc"+
		"\u05fd\3\2\2\2\u05fd\u0609\3\2\2\2\u05fe\u05ff\7\u01fa\2\2\u05ff\u0604"+
		"\5\u008cG\2\u0600\u0601\7\u0200\2\2\u0601\u0603\5\u008cG\2\u0602\u0600"+
		"\3\2\2\2\u0603\u0606\3\2\2\2\u0604\u0602\3\2\2\2\u0604\u0605\3\2\2\2\u0605"+
		"\u0607\3\2\2\2\u0606\u0604\3\2\2\2\u0607\u0608\7\u01fb\2\2\u0608\u060a"+
		"\3\2\2\2\u0609\u05fe\3\2\2\2\u0609\u060a\3\2\2\2\u060a\u060e\3\2\2\2\u060b"+
		"\u060d\5\u008aF\2\u060c\u060b\3\2\2\2\u060d\u0610\3\2\2\2\u060e\u060c"+
		"\3\2\2\2\u060e\u060f\3\2\2\2\u060fs\3\2\2\2\u0610\u060e\3\2\2\2\u0611"+
		"\u0615\t\3\2\2\u0612\u0616\7\u0109\2\2\u0613\u0616\5\u00dco\2\u0614\u0616"+
		"\5x=\2\u0615\u0612\3\2\2\2\u0615\u0613\3\2\2\2\u0615\u0614\3\2\2\2\u0616"+
		"u\3\2\2\2\u0617\u0618\7\u019d\2\2\u0618\u0619\5\u02e8\u0175\2\u0619w\3"+
		"\2\2\2\u061a\u061b\7\u0184\2\2\u061b\u061c\7\u010a\2\2\u061c\u061f\5\u02e8"+
		"\u0175\2\u061d\u061e\7\u0102\2\2\u061e\u0620\7\u0104\2\2\u061f\u061d\3"+
		"\2\2\2\u061f\u0620\3\2\2\2\u0620y\3\2\2\2\u0621\u0622\7\u008f\2\2\u0622"+
		"\u0623\7\u00ec\2\2\u0623\u0624\5\u01fe\u0100\2\u0624\u0625\7\u00c8\2\2"+
		"\u0625\u0626\7\u00c5\2\2\u0626\u0627\7\u01a8\2\2\u0627\u0628\t\17\2\2"+
		"\u0628{\3\2\2\2\u0629\u062a\7)\2\2\u062a\u062b\5\u02be\u0160\2\u062b\u062c"+
		"\t\3\2\2\u062c\u0631\5~@\2\u062d\u062e\7\u0200\2\2\u062e\u0630\5~@\2\u062f"+
		"\u062d\3\2\2\2\u0630\u0633\3\2\2\2\u0631\u062f\3\2\2\2\u0631\u0632\3\2"+
		"\2\2\u0632\u0634\3\2\2\2\u0633\u0631\3\2\2\2\u0634\u0635\7\u0081\2\2\u0635"+
		"}\3\2\2\2\u0636\u0639\5\u0080A\2\u0637\u0639\5\u0082B\2\u0638\u0636\3"+
		"\2\2\2\u0638\u0637\3\2\2\2\u0639\177\3\2\2\2\u063a\u063b\t\20\2\2\u063b"+
		"\u063c\7\u00e1\2\2\u063c\u063d\5\u0086D\2\u063d\u0081\3\2\2\2\u063e\u0642"+
		"\t\21\2\2\u063f\u0643\5\u0084C\2\u0640\u0643\5\u0086D\2\u0641\u0643\5"+
		"\u0088E\2\u0642\u063f\3\2\2\2\u0642\u0640\3\2\2\2\u0642\u0641\3\2\2\2"+
		"\u0643\u0083\3\2\2\2\u0644\u0645\7\u0133\2\2\u0645\u0646\5\u02c6\u0164"+
		"\2\u0646\u0647\7\u01fa\2\2\u0647\u064c\5\u00a2R\2\u0648\u0649\7\u0200"+
		"\2\2\u0649\u064b\5\u00a2R\2\u064a\u0648\3\2\2\2\u064b\u064e\3\2\2\2\u064c"+
		"\u064a\3\2\2\2\u064c\u064d\3\2\2\2\u064d\u064f\3\2\2\2\u064e\u064c\3\2"+
		"\2\2\u064f\u0650\7\u01fb\2\2\u0650\u065e\t\3\2\2\u0651\u065f\5\u00b2Z"+
		"\2\u0652\u0654\7g\2\2\u0653\u0652\3\2\2\2\u0653\u0654\3\2\2\2\u0654\u0658"+
		"\3\2\2\2\u0655\u0657\5\u00c0a\2\u0656\u0655\3\2\2\2\u0657\u065a\3\2\2"+
		"\2\u0658\u0656\3\2\2\2\u0658\u0659\3\2\2\2\u0659\u065b\3\2\2\2\u065a\u0658"+
		"\3\2\2\2\u065b\u065c\5\u010a\u0086\2\u065c\u065d\7\u0206\2\2\u065d\u065f"+
		"\3\2\2\2\u065e\u0651\3\2\2\2\u065e\u0653\3\2\2\2\u065f\u0085\3\2\2\2\u0660"+
		"\u0661\7\u00a0\2\2\u0661\u066d\5\u02c4\u0163\2\u0662\u0663\7\u01fa\2\2"+
		"\u0663\u0668\5\u00a2R\2\u0664\u0665\7\u0200\2\2\u0665\u0667\5\u00a2R\2"+
		"\u0666\u0664\3\2\2\2\u0667\u066a\3\2\2\2\u0668\u0666\3\2\2\2\u0668\u0669"+
		"\3\2\2\2\u0669\u066b\3\2\2\2\u066a\u0668\3\2\2\2\u066b\u066c\7\u01fb\2"+
		"\2\u066c\u066e\3\2\2\2\u066d\u0662\3\2\2\2\u066d\u066e\3\2\2\2\u066e\u066f"+
		"\3\2\2\2\u066f\u0670\7\u0145\2\2\u0670\u0671\5\u02e8\u0175\2\u0671\u067f"+
		"\t\3\2\2\u0672\u0680\5\u00b2Z\2\u0673\u0675\7g\2\2\u0674\u0673\3\2\2\2"+
		"\u0674\u0675\3\2\2\2\u0675\u0679\3\2\2\2\u0676\u0678\5\u00c0a\2\u0677"+
		"\u0676\3\2\2\2\u0678\u067b\3\2\2\2\u0679\u0677\3\2\2\2\u0679\u067a\3\2"+
		"\2\2\u067a\u067c\3\2\2\2\u067b\u0679\3\2\2\2\u067c\u067d\5\u010a\u0086"+
		"\2\u067d\u067e\7\u0206\2\2\u067e\u0680\3\2\2\2\u067f\u0672\3\2\2\2\u067f"+
		"\u0674\3\2\2\2\u0680\u0087\3\2\2\2\u0681\u0683\7\u0095\2\2\u0682\u0681"+
		"\3\2\2\2\u0682\u0683\3\2\2\2\u0683\u0685\3\2\2\2\u0684\u0686\7\u00ba\2"+
		"\2\u0685\u0684\3\2\2\2\u0685\u0686\3\2\2\2\u0686\u0687\3\2\2\2\u0687\u0688"+
		"\7L\2\2\u0688\u0689\7\u00a0\2\2\u0689\u069b\5\u02e8\u0175\2\u068a\u068b"+
		"\7\u01fa\2\2\u068b\u068c\7\u015c\2\2\u068c\u068d\7\u00ac\2\2\u068d\u068e"+
		"\7\u0117\2\2\u068e\u068f\5\u02e8\u0175\2\u068f\u0690\7\u0200\2\2\u0690"+
		"\u0691\3\2\2\2\u0691\u0696\5\u00a2R\2\u0692\u0693\7\u0200\2\2\u0693\u0695"+
		"\5\u00a2R\2\u0694\u0692\3\2\2\2\u0695\u0698\3\2\2\2\u0696\u0694\3\2\2"+
		"\2\u0696\u0697\3\2\2\2\u0697\u0699\3\2\2\2\u0698\u0696\3\2\2\2\u0699\u069a"+
		"\7\u01fb\2\2\u069a\u069c\3\2\2\2\u069b\u068a\3\2\2\2\u069b\u069c\3\2\2"+
		"\2\u069c\u069d\3\2\2\2\u069d\u069e\7\u0145\2\2\u069e\u069f\7\u015c";
	private static final String _serializedATNSegment1 =
		"\2\2\u069f\u06a0\7\25\2\2\u06a0\u06a1\7\u0143\2\2\u06a1\u06af\t\3\2\2"+
		"\u06a2\u06b0\5\u00b2Z\2\u06a3\u06a5\7g\2\2\u06a4\u06a3\3\2\2\2\u06a4\u06a5"+
		"\3\2\2\2\u06a5\u06a9\3\2\2\2\u06a6\u06a8\5\u00c0a\2\u06a7\u06a6\3\2\2"+
		"\2\u06a8\u06ab\3\2\2\2\u06a9\u06a7\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa\u06ac"+
		"\3\2\2\2\u06ab\u06a9\3\2\2\2\u06ac\u06ad\5\u010a\u0086\2\u06ad\u06ae\7"+
		"\u0206\2\2\u06ae\u06b0\3\2\2\2\u06af\u06a2\3\2\2\2\u06af\u06a4\3\2\2\2"+
		"\u06b0\u0089\3\2\2\2\u06b1\u06b3\7\u0102\2\2\u06b2\u06b1\3\2\2\2\u06b2"+
		"\u06b3\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06b5\t\22\2\2\u06b5\u008b\3"+
		"\2\2\2\u06b6\u06b7\5\u02fe\u0180\2\u06b7\u06b9\5\u02e8\u0175\2\u06b8\u06ba"+
		"\5\u008eH\2\u06b9\u06b8\3\2\2\2\u06b9\u06ba\3\2\2\2\u06ba\u06bd\3\2\2"+
		"\2\u06bb\u06bd\5\u0090I\2\u06bc\u06b6\3\2\2\2\u06bc\u06bb\3\2\2\2\u06bd"+
		"\u008d\3\2\2\2\u06be\u06bf\7\u008f\2\2\u06bf\u06c0\7\u00ec\2\2\u06c0\u06c1"+
		"\5\u01fe\u0100\2\u06c1\u008f\3\2\2\2\u06c2\u06c4\5\u008aF\2\u06c3\u06c2"+
		"\3\2\2\2\u06c3\u06c4\3\2\2\2\u06c4\u06c6\3\2\2\2\u06c5\u06c7\5\u0092J"+
		"\2\u06c6\u06c5\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8\u06c6\3\2\2\2\u06c8\u06c9"+
		"\3\2\2\2\u06c9\u06cc\3\2\2\2\u06ca\u06cb\7\u0200\2\2\u06cb\u06cd\5\u009e"+
		"P\2\u06cc\u06ca\3\2\2\2\u06cc\u06cd\3\2\2\2\u06cd\u0091\3\2\2\2\u06ce"+
		"\u06d2\5\u0094K\2\u06cf\u06d2\5\u009aN\2\u06d0\u06d2\5\u009cO\2\u06d1"+
		"\u06ce\3\2\2\2\u06d1\u06cf\3\2\2\2\u06d1\u06d0\3\2\2\2\u06d2\u0093\3\2"+
		"\2\2\u06d3\u06d6\t\21\2\2\u06d4\u06d7\5\u0096L\2\u06d5\u06d7\5\u0098M"+
		"\2\u06d6\u06d4\3\2\2\2\u06d6\u06d5\3\2\2\2\u06d7\u0095\3\2\2\2\u06d8\u06d9"+
		"\7\u0133\2\2\u06d9\u06da\5\u02c6\u0164\2\u06da\u06db\7\u01fa\2\2\u06db"+
		"\u06e0\5\u00a2R\2\u06dc\u06dd\7\u0200\2\2\u06dd\u06df\5\u00a2R\2\u06de"+
		"\u06dc\3\2\2\2\u06df\u06e2\3\2\2\2\u06e0\u06de\3\2\2\2\u06e0\u06e1\3\2"+
		"\2\2\u06e1\u06e3\3\2\2\2\u06e2\u06e0\3\2\2\2\u06e3\u06e6\7\u01fb\2\2\u06e4"+
		"\u06e5\t\3\2\2\u06e5\u06e7\5\u00b2Z\2\u06e6\u06e4\3\2\2\2\u06e6\u06e7"+
		"\3\2\2\2\u06e7\u0097\3\2\2\2\u06e8\u06e9\7\u00a0\2\2\u06e9\u06f5\5\u02c4"+
		"\u0163\2\u06ea\u06eb\7\u01fa\2\2\u06eb\u06f0\5\u00a2R\2\u06ec\u06ed\7"+
		"\u0200\2\2\u06ed\u06ef\5\u00a2R\2\u06ee\u06ec\3\2\2\2\u06ef\u06f2\3\2"+
		"\2\2\u06f0\u06ee\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1\u06f3\3\2\2\2\u06f2"+
		"\u06f0\3\2\2\2\u06f3\u06f4\7\u01fb\2\2\u06f4\u06f6\3\2\2\2\u06f5\u06ea"+
		"\3\2\2\2\u06f5\u06f6\3\2\2\2\u06f6\u06f7\3\2\2\2\u06f7\u06fc\7\u0145\2"+
		"\2\u06f8\u06fd\5\u02e8\u0175\2\u06f9\u06fa\7\u015c\2\2\u06fa\u06fb\7\25"+
		"\2\2\u06fb\u06fd\7\u0143\2\2\u06fc\u06f8\3\2\2\2\u06fc\u06f9\3\2\2\2\u06fd"+
		"\u0706\3\2\2\2\u06fe\u06ff\t\3\2\2\u06ff\u0707\5\u00b2Z\2\u0700\u0702"+
		"\7\u008f\2\2\u0701\u0703\7\u01ae\2\2\u0702\u0701\3\2\2\2\u0702\u0703\3"+
		"\2\2\2\u0703\u0704\3\2\2\2\u0704\u0705\7\u00ec\2\2\u0705\u0707\5\u01fe"+
		"\u0100\2\u0706\u06fe\3\2\2\2\u0706\u0700\3\2\2\2\u0706\u0707\3\2\2\2\u0707"+
		"\u0099\3\2\2\2\u0708\u070a\7\u0095\2\2\u0709\u0708\3\2\2\2\u0709\u070a"+
		"\3\2\2\2\u070a\u070c\3\2\2\2\u070b\u070d\7\u00ba\2\2\u070c\u070b\3\2\2"+
		"\2\u070c\u070d\3\2\2\2\u070d\u070e\3\2\2\2\u070e\u070f\7L\2\2\u070f\u0710"+
		"\7\u00a0\2\2\u0710\u0722\5\u02e8\u0175\2\u0711\u0712\7\u01fa\2\2\u0712"+
		"\u0713\7\u015c\2\2\u0713\u0714\7\u00ac\2\2\u0714\u0715\7\u0117\2\2\u0715"+
		"\u0716\5\u02e8\u0175\2\u0716\u0717\7\u0200\2\2\u0717\u0718\3\2\2\2\u0718"+
		"\u071d\5\u00a2R\2\u0719\u071a\7\u0200\2\2\u071a\u071c\5\u00a2R\2\u071b"+
		"\u0719\3\2\2\2\u071c\u071f\3\2\2\2\u071d\u071b\3\2\2\2\u071d\u071e\3\2"+
		"\2\2\u071e\u0720\3\2\2\2\u071f\u071d\3\2\2\2\u0720\u0721\7\u01fb\2\2\u0721"+
		"\u0723\3\2\2\2\u0722\u0711\3\2\2\2\u0722\u0723\3\2\2\2\u0723\u0724\3\2"+
		"\2\2\u0724\u0725\7\u0145\2\2\u0725\u0726\7\u015c\2\2\u0726\u0727\7\25"+
		"\2\2\u0727\u072a\7\u0143\2\2\u0728\u0729\t\3\2\2\u0729\u072b\5\u00b2Z"+
		"\2\u072a\u0728\3\2\2\2\u072a\u072b\3\2\2\2\u072b\u009b\3\2\2\2\u072c\u072d"+
		"\t\20\2\2\u072d\u072e\7\u00e1\2\2\u072e\u072f\5\u0098M\2\u072f\u009d\3"+
		"\2\2\2\u0730\u0731\7\u012e\2\2\u0731\u0732\7\u0142\2\2\u0732\u0733\7\u01fa"+
		"\2\2\u0733\u0738\5\u00a0Q\2\u0734\u0735\7\u0200\2\2\u0735\u0737\5\u00a0"+
		"Q\2\u0736\u0734\3\2\2\2\u0737\u073a\3\2\2\2\u0738\u0736\3\2\2\2\u0738"+
		"\u0739\3\2\2\2\u0739\u073b\3\2\2\2\u073a\u0738\3\2\2\2\u073b\u073c\7\u01fb"+
		"\2\2\u073c\u009f\3\2\2\2\u073d\u0740\5\u02fe\u0180\2\u073e\u0740\7j\2"+
		"\2\u073f\u073d\3\2\2\2\u073f\u073e\3\2\2\2\u0740\u00a1\3\2\2\2\u0741\u0742"+
		"\5\u02b0\u0159\2\u0742\u0743\5\u02e8\u0175\2\u0743\u00a3\3\2\2\2\u0744"+
		"\u0745\7x\2\2\u0745\u0746\7\u015d\2\2\u0746\u0747\5\u02c0\u0161\2\u0747"+
		"\u0748\7\u0206\2\2\u0748\u00a5\3\2\2\2\u0749\u074a\7\20\2\2\u074a\u074b"+
		"\7\u015d\2\2\u074b\u074d\5\u02c0\u0161\2\u074c\u074e\5\u00aaV\2\u074d"+
		"\u074c\3\2\2\2\u074e\u074f\3\2\2\2\u074f\u074d\3\2\2\2\u074f\u0750\3\2"+
		"\2\2\u0750\u0751\3\2\2\2\u0751\u0752\7\u0206\2\2\u0752\u00a7\3\2\2\2\u0753"+
		"\u0754\7U\2\2\u0754\u0755\7\u015d\2\2\u0755\u075a\5\u02c0\u0161\2\u0756"+
		"\u0759\5\u00acW\2\u0757\u0759\5\u00aaV\2\u0758\u0756\3\2\2\2\u0758\u0757"+
		"\3\2\2\2\u0759\u075c\3\2\2\2\u075a\u0758\3\2\2\2\u075a\u075b\3\2\2\2\u075b"+
		"\u075d\3\2\2\2\u075c\u075a\3\2\2\2\u075d\u075e\7\u0206\2\2\u075e\u00a9"+
		"\3\2\2\2\u075f\u0760\7\u00af\2\2\u0760\u0761\7.\2\2\u0761\u0770\7\u01f4"+
		"\2\2\u0762\u0763\7\u00df\2\2\u0763\u0770\7\u01f4\2\2\u0764\u0770\7\u00fd"+
		"\2\2\u0765\u0766\7\u00e5\2\2\u0766\u0770\7\u01f4\2\2\u0767\u0770\7\u00fe"+
		"\2\2\u0768\u0770\7\\\2\2\u0769\u0770\7\u00fb\2\2\u076a\u076b\7\61\2\2"+
		"\u076b\u0770\7\u01f4\2\2\u076c\u0770\7\u00f9\2\2\u076d\u0770\7\u0114\2"+
		"\2\u076e\u0770\7\u0100\2\2\u076f\u075f\3\2\2\2\u076f\u0762\3\2\2\2\u076f"+
		"\u0764\3\2\2\2\u076f\u0765\3\2\2\2\u076f\u0767\3\2\2\2\u076f\u0768\3\2"+
		"\2\2\u076f\u0769\3\2\2\2\u076f\u076a\3\2\2\2\u076f\u076c\3\2\2\2\u076f"+
		"\u076d\3\2\2\2\u076f\u076e\3\2\2\2\u0770\u00ab\3\2\2\2\u0771\u0772\7\u0177"+
		"\2\2\u0772\u0773\7\u01ba\2\2\u0773\u0774\7\u01f4\2\2\u0774\u00ad\3\2\2"+
		"\2\u0775\u0776\7\33\2\2\u0776\u0777\t\23\2\2\u0777\u00af\3\2\2\2\u0778"+
		"\u0779\5\u02fe\u0180\2\u0779\u077a\7\u0211\2\2\u077a\u077b\5\u01fe\u0100"+
		"\2\u077b\u00b1\3\2\2\2\u077c\u077f\7\u00c8\2\2\u077d\u0780\5\u00b4[\2"+
		"\u077e\u0780\5\u00b6\\\2\u077f\u077d\3\2\2\2\u077f\u077e\3\2\2\2\u0780"+
		"\u00b3\3\2\2\2\u0781\u0782\7\u00c5\2\2\u0782\u0783\7\u00ec\2\2\u0783\u0784"+
		"\7\u01f6\2\2\u0784\u00b5\3\2\2\2\u0785\u0788\7\60\2\2\u0786\u0787\7\u00ec"+
		"\2\2\u0787\u0789\7\u01f6\2\2\u0788\u0786\3\2\2\2\u0788\u0789\3\2\2\2\u0789"+
		"\u078a\3\2\2\2\u078a\u078b\7\u00ce\2\2\u078b\u078d\5\u02fe\u0180\2\u078c"+
		"\u078e\5\u00b8]\2\u078d\u078c\3\2\2\2\u078d\u078e\3\2\2\2\u078e\u0791"+
		"\3\2\2\2\u078f\u0790\7\u01ba\2\2\u0790\u0792\7N\2\2\u0791\u078f\3\2\2"+
		"\2\u0791\u0792\3\2\2\2\u0792\u0794\3\2\2\2\u0793\u0795\5\u00ba^\2\u0794"+
		"\u0793\3\2\2\2\u0794\u0795\3\2\2\2\u0795\u00b7\3\2\2\2\u0796\u0797\7\r"+
		"\2\2\u0797\u0798\7\u00ac\2\2\u0798\u0799\7\u01fa\2\2\u0799\u079e\5\u01fe"+
		"\u0100\2\u079a\u079b\7\u0200\2\2\u079b\u079d\5\u01fe\u0100\2\u079c\u079a"+
		"\3\2\2\2\u079d\u07a0\3\2\2\2\u079e\u079c\3\2\2\2\u079e\u079f\3\2\2\2\u079f"+
		"\u07a1\3\2\2\2\u07a0\u079e\3\2\2\2\u07a1\u07a2\7\u01fb\2\2\u07a2\u00b9"+
		"\3\2\2\2\u07a3\u07a4\7\u011d\2\2\u07a4\u07b0\7\u01fa\2\2\u07a5\u07aa\5"+
		"\u01fe\u0100\2\u07a6\u07a7\7\u0200\2\2\u07a7\u07a9\5\u01fe\u0100\2\u07a8"+
		"\u07a6\3\2\2\2\u07a9\u07ac\3\2\2\2\u07aa\u07a8\3\2\2\2\u07aa\u07ab\3\2"+
		"\2\2\u07ab\u07b1\3\2\2\2\u07ac\u07aa\3\2\2\2\u07ad\u07ae\7\u01f3\2\2\u07ae"+
		"\u07af\7\u01f3\2\2\u07af\u07b1\7\u01f3\2\2\u07b0\u07a5\3\2\2\2\u07b0\u07ad"+
		"\3\2\2\2\u07b1\u07b2\3\2\2\2\u07b2\u07b3\7\u01fb\2\2\u07b3\u00bb\3\2\2"+
		"\2\u07b4\u07b8\5\u02b0\u0159\2\u07b5\u07b7\t\24\2\2\u07b6\u07b5\3\2\2"+
		"\2\u07b7\u07ba\3\2\2\2\u07b8\u07b6\3\2\2\2\u07b8\u07b9\3\2\2\2\u07b9\u07bc"+
		"\3\2\2\2\u07ba\u07b8\3\2\2\2\u07bb\u07bd\5\u02e8\u0175\2\u07bc\u07bb\3"+
		"\2\2\2\u07bc\u07bd\3\2\2\2\u07bd\u07bf\3\2\2\2\u07be\u07c0\5\u00be`\2"+
		"\u07bf\u07be\3\2\2\2\u07bf\u07c0\3\2\2\2\u07c0\u00bd\3\2\2\2\u07c1\u07c2"+
		"\t\25\2\2\u07c2\u07c3\5\u01fe\u0100\2\u07c3\u00bf\3\2\2\2\u07c4\u07cf"+
		"\5\u00c2b\2\u07c5\u07cf\5\u00c4c\2\u07c6\u07cf\5\u00c6d\2\u07c7\u07cf"+
		"\5\u00caf\2\u07c8\u07cf\5\u00ccg\2\u07c9\u07cf\5\u00ceh\2\u07ca\u07cf"+
		"\5\u00d6l\2\u07cb\u07cf\5.\30\2\u07cc\u07cf\5\16\b\2\u07cd\u07cf\5\u027e"+
		"\u0140\2\u07ce\u07c4\3\2\2\2\u07ce\u07c5\3\2\2\2\u07ce\u07c6\3\2\2\2\u07ce"+
		"\u07c7\3\2\2\2\u07ce\u07c8\3\2\2\2\u07ce\u07c9\3\2\2\2\u07ce\u07ca\3\2"+
		"\2\2\u07ce\u07cb\3\2\2\2\u07ce\u07cc\3\2\2\2\u07ce\u07cd\3\2\2\2\u07cf"+
		"\u00c1\3\2\2\2\u07d0\u07d2\5\u02ca\u0166\2\u07d1\u07d3\7I\2\2\u07d2\u07d1"+
		"\3\2\2\2\u07d2\u07d3\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07d7\5\u02e8\u0175"+
		"\2\u07d5\u07d6\7\u0102\2\2\u07d6\u07d8\7\u0104\2\2\u07d7\u07d5\3\2\2\2"+
		"\u07d7\u07d8\3\2\2\2\u07d8\u07da\3\2\2\2\u07d9\u07db\5\u00be`\2\u07da"+
		"\u07d9\3\2\2\2\u07da\u07db\3\2\2\2\u07db\u07dc\3\2\2\2\u07dc\u07dd\7\u0206"+
		"\2\2\u07dd\u00c3\3\2\2\2\u07de\u07df\7\u0181\2\2\u07df\u07e0\5\u02be\u0160"+
		"\2\u07e0\u07e1\7\u00c2\2\2\u07e1\u07e7\5\u02e8\u0175\2\u07e2\u07e3\7\u0135"+
		"\2\2\u07e3\u07e4\5\u01fe\u0100\2\u07e4\u07e5\7\3\2\2\u07e5\u07e6\5\u01fe"+
		"\u0100\2\u07e6\u07e8\3\2\2\2\u07e7\u07e2\3\2\2\2\u07e7\u07e8\3\2\2\2\u07e8"+
		"\u07eb\3\2\2\2\u07e9\u07ea\7\u0102\2\2\u07ea\u07ec\7\u0104\2\2\u07eb\u07e9"+
		"\3\2\2\2\u07eb\u07ec\3\2\2\2\u07ec\u07ed\3\2\2\2\u07ed\u07ee\7\u0206\2"+
		"\2\u07ee\u00c5\3\2\2\2\u07ef\u07f0\7Z\2\2\u07f0\u07fc\5\u02ce\u0168\2"+
		"\u07f1\u07f2\7\u01fa\2\2\u07f2\u07f7\5\u00c8e\2\u07f3\u07f4\7\u0200\2"+
		"\2\u07f4\u07f6\5\u00c8e\2\u07f5\u07f3\3\2\2\2\u07f6\u07f9\3\2\2\2\u07f7"+
		"\u07f5\3\2\2\2\u07f7\u07f8\3\2\2\2\u07f8\u07fa\3\2\2\2\u07f9\u07f7\3\2"+
		"\2\2\u07fa\u07fb\7\u01fb\2\2\u07fb\u07fd\3\2\2\2\u07fc\u07f1\3\2\2\2\u07fc"+
		"\u07fd\3\2\2\2\u07fd\u0800\3\2\2\2\u07fe\u07ff\7\u0145\2\2\u07ff\u0801"+
		"\5\u02e8\u0175\2\u0800\u07fe\3\2\2\2\u0800\u0801\3\2\2\2\u0801\u0804\3"+
		"\2\2\2\u0802\u0803\7\u00c2\2\2\u0803\u0805\5\u013a\u009e\2\u0804\u0802"+
		"\3\2\2\2\u0804\u0805\3\2\2\2\u0805\u0806\3\2\2\2\u0806\u0807\7\u0206\2"+
		"\2\u0807\u00c7\3\2\2\2\u0808\u080d\5\u02b0\u0159\2\u0809\u080b\7\u00ac"+
		"\2\2\u080a\u0809\3\2\2\2\u080a\u080b\3\2\2\2\u080b\u080c\3\2\2\2\u080c"+
		"\u080e\5\u02e8\u0175\2\u080d\u080a\3\2\2\2\u080d\u080e\3\2\2\2\u080e\u0810"+
		"\3\2\2\2\u080f\u0811\5\u00be`\2\u0810\u080f\3\2\2\2\u0810\u0811\3\2\2"+
		"\2\u0811\u00c9\3\2\2\2\u0812\u0813\5\u02c2\u0162\2\u0813\u0814\7\u0086"+
		"\2\2\u0814\u0815\7\u0206\2\2\u0815\u00cb\3\2\2\2\u0816\u0838\7\u012e\2"+
		"\2\u0817\u0839\7\u0160\2\2\u0818\u0839\7\36\2\2\u0819\u081a\7\u0087\2"+
		"\2\u081a\u081b\7\u01fa\2\2\u081b\u081c\5\u02c2\u0162\2\u081c\u081e\7\u0200"+
		"\2\2\u081d\u081f\7\u01ff\2\2\u081e\u081d\3\2\2\2\u081e\u081f\3\2\2\2\u081f"+
		"\u0820\3\2\2\2\u0820\u0821\5\u02fa\u017e\2\u0821\u0822\7\u01fb\2\2\u0822"+
		"\u0839\3\2\2\2\u0823\u0824\7\u00b6\2\2\u0824\u0825\7\u01fa\2\2\u0825\u0826"+
		"\5\u02fe\u0180\2\u0826\u0827\7\u0200\2\2\u0827\u0828\5\u01fe\u0100\2\u0828"+
		"\u0829\7\u01fb\2\2\u0829\u0839\3\2\2\2\u082a\u082b\7\u0142\2\2\u082b\u082e"+
		"\7\u01fa\2\2\u082c\u082f\5\u02fe\u0180\2\u082d\u082f\7j\2\2\u082e\u082c"+
		"\3\2\2\2\u082e\u082d\3\2\2\2\u082f\u0832\3\2\2\2\u0830\u0831\7\u0200\2"+
		"\2\u0831\u0833\5\u02fe\u0180\2\u0832\u0830\3\2\2\2\u0833\u0834\3\2\2\2"+
		"\u0834\u0832\3\2\2\2\u0834\u0835\3\2\2\2\u0835\u0836\3\2\2\2\u0836\u0837"+
		"\7\u01fb\2\2\u0837\u0839\3\2\2\2\u0838\u0817\3\2\2\2\u0838\u0818\3\2\2"+
		"\2\u0838\u0819\3\2\2\2\u0838\u0823\3\2\2\2\u0838\u082a\3\2\2\2\u0839\u083a"+
		"\3\2\2\2\u083a\u083b\7\u0206\2\2\u083b\u00cd\3\2\2\2\u083c\u083f\5\u00d0"+
		"i\2\u083d\u083f\5\u00d4k\2\u083e\u083c\3\2\2\2\u083e\u083d\3\2\2\2\u083f"+
		"\u00cf\3\2\2\2\u0840\u0841\7\u019b\2\2\u0841\u0842\5\u02be\u0160\2\u0842"+
		"\u0855\7\u00c2\2\2\u0843\u0844\7\u0139\2\2\u0844\u0845\7\u01fa\2\2\u0845"+
		"\u084a\5\u00d2j\2\u0846\u0847\7\u0200\2\2\u0847\u0849\5\u00d2j\2\u0848"+
		"\u0846\3\2\2\2\u0849\u084c\3\2\2\2\u084a\u0848\3\2\2\2\u084a\u084b\3\2"+
		"\2\2\u084b\u084d\3\2\2\2\u084c\u084a\3\2\2\2\u084d\u084e\7\u01fb\2\2\u084e"+
		"\u0856\3\2\2\2\u084f\u0850\7\u013a\2\2\u0850\u0853\7Z\2\2\u0851\u0852"+
		"\7\u0145\2\2\u0852\u0854\5\u02e8\u0175\2\u0853\u0851\3\2\2\2\u0853\u0854"+
		"\3\2\2\2\u0854\u0856\3\2\2\2\u0855\u0843\3\2\2\2\u0855\u084f\3\2\2\2\u0856"+
		"\u0857\3\2\2\2\u0857\u0858\7\u0206\2\2\u0858\u00d1\3\2\2\2\u0859\u085b"+
		"\5\u02d6\u016c\2\u085a\u085c\5\u02e8\u0175\2\u085b\u085a\3\2\2\2\u085b"+
		"\u085c\3\2\2\2\u085c\u085f\3\2\2\2\u085d\u085e\7\u0102\2\2\u085e\u0860"+
		"\7\u0104\2\2\u085f\u085d\3\2\2\2\u085f\u0860\3\2\2\2\u0860\u0862\3\2\2"+
		"\2\u0861\u0863\5\u00be`\2\u0862\u0861\3\2\2\2\u0862\u0863\3\2\2\2\u0863"+
		"\u00d3\3\2\2\2\u0864\u0865\5\u02d0\u0169\2\u0865\u0866\5\u02be\u0160\2"+
		"\u0866\u0867\t\26\2\2\u0867\u0868\7\u0206\2\2\u0868\u00d5\3\2\2\2\u0869"+
		"\u086c\5\u00d8m\2\u086a\u086c\5\u00dep\2\u086b\u0869\3\2\2\2\u086b\u086a"+
		"\3\2\2\2\u086c\u086d\3\2\2\2\u086d\u086e\7\u0206\2\2\u086e\u00d7\3\2\2"+
		"\2\u086f\u0870\7\u019b\2\2\u0870\u0871\5\u02be\u0160\2\u0871\u087d\7\u00c2"+
		"\2\2\u0872\u0873\7\u0184\2\2\u0873\u0874\7\u010a\2\2\u0874\u0876\5\u02e8"+
		"\u0175\2\u0875\u0877\5\u00dan\2\u0876\u0875\3\2\2\2\u0876\u0877\3\2\2"+
		"\2\u0877\u087a\3\2\2\2\u0878\u0879\7\u0102\2\2\u0879\u087b\7\u0104\2\2"+
		"\u087a\u0878\3\2\2\2\u087a\u087b\3\2\2\2\u087b\u087e\3\2\2\2\u087c\u087e"+
		"\5\u00dco\2\u087d\u0872\3\2\2\2\u087d\u087c\3\2\2\2\u087e\u00d9\3\2\2"+
		"\2\u087f\u0882\7\u00b2\2\2\u0880\u0882\7\u00b1\2\2\u0881\u087f\3\2\2\2"+
		"\u0881\u0880\3\2\2\2\u0882\u0883\3\2\2\2\u0883\u0884\7.\2\2\u0884\u0885"+
		"\5\u02e8\u0175\2\u0885\u00db\3\2\2\2\u0886\u088a\7\u01af\2\2\u0887\u0888"+
		"\7\u01b0\2\2\u0888\u088a\7\24\2\2\u0889\u0886\3\2\2\2\u0889\u0887\3\2"+
		"\2\2\u088a\u088b\3\2\2\2\u088b\u088c\7\u01fa\2\2\u088c\u088d\5\u01fe\u0100"+
		"\2\u088d\u088e\7\u01fb\2\2\u088e\u088f\7\u010a\2\2\u088f\u0892\5\u02e8"+
		"\u0175\2\u0890\u0891\7\u0102\2\2\u0891\u0893\7\u0104\2\2\u0892\u0890\3"+
		"\2\2\2\u0892\u0893\3\2\2\2\u0893\u00dd\3\2\2\2\u0894\u0895\5\u02a6\u0154"+
		"\2\u0895\u0896\5\u02e8\u0175\2\u0896\u00df\3\2\2\2\u0897\u0898\5\u00e4"+
		"s\2\u0898\u0899\t\27\2\2\u0899\u089d\3\2\2\2\u089a\u089d\5\u00e2r\2\u089b"+
		"\u089d\5\u027e\u0140\2\u089c\u0897\3\2\2\2\u089c\u089a\3\2\2\2\u089c\u089b"+
		"\3\2\2\2\u089d\u089e\3\2\2\2\u089e\u089c\3\2\2\2\u089e\u089f\3\2\2\2\u089f"+
		"\u00e1\3\2\2\2\u08a0\u08a1\7\u0208\2\2\u08a1\u08a2\7\u0208\2\2\u08a2\u08a3"+
		"\5\u02bc\u015f\2\u08a3\u08a4\7\u020e\2\2\u08a4\u08a5\7\u020e\2\2\u08a5"+
		"\u00e3\3\2\2\2\u08a6\u08a7\7U\2\2\u08a7\u08c2\5\2\2\2\u08a8\u08a9\7\20"+
		"\2\2\u08a9\u08c2\5\2\2\2\u08aa\u08ab\7\u00a2\2\2\u08ab\u08c2\5\2\2\2\u08ac"+
		"\u08ad\7\u019a\2\2\u08ad\u08c2\5\2\2\2\u08ae\u08af\7\u012e\2\2\u08af\u08c2"+
		"\5\2\2\2\u08b0\u08c2\5\u010a\u0086\2\u08b1\u08c2\5\u0116\u008c\2\u08b2"+
		"\u08c2\5\u00e6t\2\u08b3\u08c2\5\u00e8u\2\u08b4\u08c2\5\u00eav\2\u08b5"+
		"\u08c2\5\u00ecw\2\u08b6\u08c2\5\u00eex\2\u08b7\u08c2\5\u00f4{\2\u08b8"+
		"\u08c2\5\u00f8}\2\u08b9\u08c2\5\u0102\u0082\2\u08ba\u08c2\5\u0104\u0083"+
		"\2\u08bb\u08c2\5\u0106\u0084\2\u08bc\u08c2\5\u0232\u011a\2\u08bd\u08c2"+
		"\5\u0118\u008d\2\u08be\u08c2\5\u0108\u0085\2\u08bf\u08c2\5\u010e\u0088"+
		"\2\u08c0\u08c2\5\u010c\u0087\2\u08c1\u08a6\3\2\2\2\u08c1\u08a8\3\2\2\2"+
		"\u08c1\u08aa\3\2\2\2\u08c1\u08ac\3\2\2\2\u08c1\u08ae\3\2\2\2\u08c1\u08b0"+
		"\3\2\2\2\u08c1\u08b1\3\2\2\2\u08c1\u08b2\3\2\2\2\u08c1\u08b3\3\2\2\2\u08c1"+
		"\u08b4\3\2\2\2\u08c1\u08b5\3\2\2\2\u08c1\u08b6\3\2\2\2\u08c1\u08b7\3\2"+
		"\2\2\u08c1\u08b8\3\2\2\2\u08c1\u08b9\3\2\2\2\u08c1\u08ba\3\2\2\2\u08c1"+
		"\u08bb\3\2\2\2\u08c1\u08bc\3\2\2\2\u08c1\u08bd\3\2\2\2\u08c1\u08be\3\2"+
		"\2\2\u08c1\u08bf\3\2\2\2\u08c1\u08c0\3\2\2\2\u08c2\u00e5\3\2\2\2\u08c3"+
		"\u08c6\5\u02f2\u017a\2\u08c4\u08c6\5\u02f0\u0179\2\u08c5\u08c3\3\2\2\2"+
		"\u08c5\u08c4\3\2\2\2\u08c6\u08c7\3\2\2\2\u08c7\u08c8\7\u0203\2\2\u08c8"+
		"\u08c9\5\u01fe\u0100\2\u08c9\u00e7\3\2\2\2\u08ca\u08cc\7O\2\2\u08cb\u08cd"+
		"\5\u02bc\u015f\2\u08cc\u08cb\3\2\2\2\u08cc\u08cd\3\2\2\2\u08cd\u08d0\3"+
		"\2\2\2\u08ce\u08cf\7\u01b6\2\2\u08cf\u08d1\5\u01fa\u00fe\2\u08d0\u08ce"+
		"\3\2\2\2\u08d0\u08d1\3\2\2\2\u08d1\u00e9\3\2\2\2\u08d2\u08d4\7\u008d\2"+
		"\2\u08d3\u08d5\5\u02bc\u015f\2\u08d4\u08d3\3\2\2\2\u08d4\u08d5\3\2\2\2"+
		"\u08d5\u08d8\3\2\2\2\u08d6\u08d7\7\u01b6\2\2\u08d7\u08d9\5\u01fa\u00fe"+
		"\2\u08d8\u08d6\3\2\2\2\u08d8\u08d9\3\2\2\2\u08d9\u00eb\3\2\2\2\u08da\u08db"+
		"\7\u00a1\2\2\u08db\u08dc\5\u02bc\u015f\2\u08dc\u00ed\3\2\2\2\u08dd\u08de"+
		"\7\u00a9\2\2\u08de\u08df\5\u01fa\u00fe\2\u08df\u08e0\7\u0186\2\2\u08e0"+
		"\u08e4\5\u00e0q\2\u08e1\u08e3\5\u00f0y\2\u08e2\u08e1\3\2\2\2\u08e3\u08e6"+
		"\3\2\2\2\u08e4\u08e2\3\2\2\2\u08e4\u08e5\3\2\2\2\u08e5\u08e8\3\2\2\2\u08e6"+
		"\u08e4\3\2\2\2\u08e7\u08e9\5\u00f2z\2\u08e8\u08e7\3\2\2\2\u08e8\u08e9"+
		"\3\2\2\2\u08e9\u08ea\3\2\2\2\u08ea\u08eb\7\u0081\2\2\u08eb\u08ec\7\u00a9"+
		"\2\2\u08ec\u00ef\3\2\2\2\u08ed\u08ee\7}\2\2\u08ee\u08ef\5\u01fa\u00fe"+
		"\2\u08ef\u08f0\7\u0186\2\2\u08f0\u08f1\5\u00e0q\2\u08f1\u00f1\3\2\2\2"+
		"\u08f2\u08f3\7|\2\2\u08f3\u08f4\5\u00e0q\2\u08f4\u00f3\3\2\2\2\u08f5\u08f7"+
		"\5\u02bc\u015f\2\u08f6\u08f5\3\2\2\2\u08f6\u08f7\3\2\2\2\u08f7\u08fc\3"+
		"\2\2\2\u08f8\u08f9\7\u01b9\2\2\u08f9\u08fd\5\u01fa\u00fe\2\u08fa\u08fb"+
		"\7\u009b\2\2\u08fb\u08fd\5\u00f6|\2\u08fc\u08f8\3\2\2\2\u08fc\u08fa\3"+
		"\2\2\2\u08fc\u08fd\3\2\2\2\u08fd\u08fe\3\2\2\2\u08fe\u08ff\7\u00db\2\2"+
		"\u08ff\u0900\5\u00e0q\2\u0900\u0901\7\u0081\2\2\u0901\u0903\7\u00db\2"+
		"\2\u0902\u0904\5\u02bc\u015f\2\u0903\u0902\3\2\2\2\u0903\u0904\3\2\2\2"+
		"\u0904\u00f5\3\2\2\2\u0905\u0906\5\u02cc\u0167\2\u0906\u0908\7\u00ac\2"+
		"\2\u0907\u0909\7\u0148\2\2\u0908\u0907\3\2\2\2\u0908\u0909\3\2\2\2\u0909"+
		"\u090a\3\2\2\2\u090a\u090b\5\u00fe\u0080\2\u090b\u090c\7\3\2\2\u090c\u090d"+
		"\5\u0100\u0081\2\u090d\u091b\3\2\2\2\u090e\u090f\5\u02d0\u0169\2\u090f"+
		"\u0918\7\u00ac\2\2\u0910\u0912\5\u02ce\u0168\2\u0911\u0913\5\u01f8\u00fd"+
		"\2\u0912\u0911\3\2\2\2\u0912\u0913\3\2\2\2\u0913\u0919\3\2\2\2\u0914\u0915"+
		"\7\u01fa\2\2\u0915\u0916\5\u013a\u009e\2\u0916\u0917\7\u01fb\2\2\u0917"+
		"\u0919\3\2\2\2\u0918\u0910\3\2\2\2\u0918\u0914\3\2\2\2\u0919\u091b\3\2"+
		"\2\2\u091a\u0905\3\2\2\2\u091a\u090e\3\2\2\2\u091b\u00f7\3\2\2\2\u091c"+
		"\u091d\7\u009c\2\2\u091d\u091e\5\u02cc\u0167\2\u091e\u091f\7\u00ac\2\2"+
		"\u091f\u0920\5\u00fa~\2\u0920\u0923\5\u0118\u008d\2\u0921\u0922\7\u0152"+
		"\2\2\u0922\u0924\7\u0088\2\2\u0923\u0921\3\2\2\2\u0923\u0924\3\2\2\2\u0924"+
		"\u00f9\3\2\2\2\u0925\u0926\5\u00fe\u0080\2\u0926\u0927\7\3\2\2\u0927\u0928"+
		"\5\u0100\u0081\2\u0928\u0933\3\2\2\2\u0929\u092a\7\u00b4\2\2\u092a\u092b"+
		"\7\u010a\2\2\u092b\u092d\5\u02d2\u016a\2\u092c\u092e\5\u00fc\177\2\u092d"+
		"\u092c\3\2\2\2\u092d\u092e\3\2\2\2\u092e\u0933\3\2\2\2\u092f\u0930\7\u01ab"+
		"\2\2\u0930\u0931\7\u010a\2\2\u0931\u0933\5\u02cc\u0167\2\u0932\u0925\3"+
		"\2\2\2\u0932\u0929\3\2\2\2\u0932\u092f\3\2\2\2\u0933\u00fb\3\2\2\2\u0934"+
		"\u0935\7\"\2\2\u0935\u0936\5\u00fe\u0080\2\u0936\u0937\7\22\2\2\u0937"+
		"\u0938\5\u0100\u0081\2\u0938\u00fd\3\2\2\2\u0939\u093a\5\u0218\u010d\2"+
		"\u093a\u00ff\3\2\2\2\u093b\u093c\5\u0218\u010d\2\u093c\u0101\3\2\2\2\u093d"+
		"\u093e\7\u0104\2\2\u093e\u0103\3\2\2\2\u093f\u0941\7\u0134\2\2\u0940\u0942"+
		"\5\u02c2\u0162\2\u0941\u0940\3\2\2\2\u0941\u0942\3\2\2\2\u0942\u0105\3"+
		"\2\2\2\u0943\u0945\7\u0145\2\2\u0944\u0946\5\u01fa\u00fe\2\u0945\u0944"+
		"\3\2\2\2\u0945\u0946\3\2\2\2\u0946\u0107\3\2\2\2\u0947\u0949\7\62\2\2"+
		"\u0948\u0947\3\2\2\2\u0948\u0949\3\2\2\2\u0949\u094a\3\2\2\2\u094a\u094c"+
		"\5\u02aa\u0156\2\u094b\u094d\5\u02de\u0170\2\u094c\u094b\3\2\2\2\u094c"+
		"\u094d\3\2\2\2\u094d\u0109\3\2\2\2\u094e\u094f\7!\2\2\u094f\u0951\5\u00e0"+
		"q\2\u0950\u0952\5\u0110\u0089\2\u0951\u0950\3\2\2\2\u0951\u0952\3\2\2"+
		"\2\u0952\u0953\3\2\2\2\u0953\u0955\7\u0081\2\2\u0954\u0956\5\u02bc\u015f"+
		"\2\u0955\u0954\3\2\2\2\u0955\u0956\3\2\2\2\u0956\u010b\3\2\2\2\u0957\u0958"+
		"\5\u02d2\u016a\2\u0958\u0959\7\u01f3\2\2\u0959\u095a\7\u0096\2\2\u095a"+
		"\u0983\3\2\2\2\u095b\u095c\5\u02d2\u016a\2\u095c\u095d\7\u01f3\2\2\u095d"+
		"\u095e\7\u00c9\2\2\u095e\u0983\3\2\2\2\u095f\u0960\5\u02d2\u016a\2\u0960"+
		"\u0961\7\u01f3\2\2\u0961\u096a\7n\2\2\u0962\u0963\7\u01fa\2\2\u0963\u0966"+
		"\5\u01fe\u0100\2\u0964\u0965\7\u0200\2\2\u0965\u0967\5\u01fe\u0100\2\u0966"+
		"\u0964\3\2\2\2\u0966\u0967\3\2\2\2\u0967\u0968\3\2\2\2\u0968\u0969\7\u01fb"+
		"\2\2\u0969\u096b\3\2\2\2\u096a\u0962\3\2\2\2\u096a\u096b\3\2\2\2\u096b"+
		"\u0983\3\2\2\2\u096c\u096d\5\u02d2\u016a\2\u096d\u096e\7\u01f3\2\2\u096e"+
		"\u0977\7\u0090\2\2\u096f\u0970\7\u01fa\2\2\u0970\u0973\5\u02fa\u017e\2"+
		"\u0971\u0972\7\u0200\2\2\u0972\u0974\5\u02fa\u017e\2\u0973\u0971\3\2\2"+
		"\2\u0973\u0974\3\2\2\2\u0974\u0975\3\2\2\2\u0975\u0976\7\u01fb\2\2\u0976"+
		"\u0978\3\2\2\2\u0977\u096f\3\2\2\2\u0977\u0978\3\2\2\2\u0978\u0983\3\2"+
		"\2\2\u0979\u097a\5\u02d2\u016a\2\u097a\u097b\7\u01f3\2\2\u097b\u0980\7"+
		"\u0198\2\2\u097c\u097d\7\u01fa\2\2\u097d\u097e\5\u02fa\u017e\2\u097e\u097f"+
		"\7\u01fb\2\2\u097f\u0981\3\2\2\2\u0980\u097c\3\2\2\2\u0980\u0981\3\2\2"+
		"\2\u0981\u0983\3\2\2\2\u0982\u0957\3\2\2\2\u0982\u095b\3\2\2\2\u0982\u095f"+
		"\3\2\2\2\u0982\u096c\3\2\2\2\u0982\u0979\3\2\2\2\u0983\u010d\3\2\2\2\u0984"+
		"\u0985\7\u0128\2\2\u0985\u0986\7\u014d\2\2\u0986\u0987\7\u01fa\2\2\u0987"+
		"\u0988\5\u02ca\u0166\2\u0988\u0989\7\u01fb\2\2\u0989\u010f\3\2\2\2\u098a"+
		"\u098c\7\u0086\2\2\u098b\u098d\5\u0112\u008a\2\u098c\u098b\3\2\2\2\u098d"+
		"\u098e\3\2\2\2\u098e\u098c\3\2\2\2\u098e\u098f\3\2\2\2\u098f\u0111\3\2"+
		"\2\2\u0990\u0991\7\u01b6\2\2\u0991\u0996\5\u02c2\u0162\2\u0992\u0993\7"+
		"\u0112\2\2\u0993\u0995\5\u02c2\u0162\2\u0994\u0992\3\2\2\2\u0995\u0998"+
		"\3\2\2\2\u0996\u0994\3\2\2\2\u0996\u0997\3\2\2\2\u0997\u0999\3\2\2\2\u0998"+
		"\u0996\3\2\2\2\u0999\u099a\7\u0186\2\2\u099a\u099b\5\u00e0q\2\u099b\u0113"+
		"\3\2\2\2\u099c\u099e\7g\2\2\u099d\u099c\3\2\2\2\u099d\u099e\3\2\2\2\u099e"+
		"\u09a0\3\2\2\2\u099f\u09a1\5\u00c0a\2\u09a0\u099f\3\2\2\2\u09a1\u09a2"+
		"\3\2\2\2\u09a2\u09a0\3\2\2\2\u09a2\u09a3\3\2\2\2\u09a3\u09a5\3\2\2\2\u09a4"+
		"\u099d\3\2\2\2\u09a4\u09a5\3\2\2\2\u09a5\u09a6\3\2\2\2\u09a6\u09a7\5\u010a"+
		"\u0086\2\u09a7\u0115\3\2\2\2\u09a8\u09aa\7g\2\2\u09a9\u09a8\3\2\2\2\u09a9"+
		"\u09aa\3\2\2\2\u09aa\u09ac\3\2\2\2\u09ab\u09ad\5\u00c0a\2\u09ac\u09ab"+
		"\3\2\2\2\u09ad\u09ae\3\2\2\2\u09ae\u09ac\3\2\2\2\u09ae\u09af\3\2\2\2\u09af"+
		"\u09b0\3\2\2\2\u09b0\u09b1\5\u010a\u0086\2\u09b1\u0117\3\2\2\2\u09b2\u09b7"+
		"\5\u011a\u008e\2\u09b3\u09b7\5\u011e\u0090\2\u09b4\u09b7\5\u0120\u0091"+
		"\2\u09b5\u09b7\5\u012a\u0096\2\u09b6\u09b2\3\2\2\2\u09b6\u09b3\3\2\2\2"+
		"\u09b6\u09b4\3\2\2\2\u09b6\u09b5\3\2\2\2\u09b7\u0119\3\2\2\2\u09b8\u09b9"+
		"\7\u008b\2\2\u09b9\u09ba\7\u00ab\2\2\u09ba\u09c4\5\u01fe\u0100\2\u09bb"+
		"\u09bd\5\u029a\u014e\2\u09bc\u09be\5\u025a\u012e\2\u09bd\u09bc\3\2\2\2"+
		"\u09bd\u09be\3\2\2\2\u09be\u09c5\3\2\2\2\u09bf\u09c1\5\u025a\u012e\2\u09c0"+
		"\u09c2\5\u011c\u008f\2\u09c1\u09c0\3\2\2\2\u09c1\u09c2\3\2\2\2\u09c2\u09c5"+
		"\3\2\2\2\u09c3\u09c5\5\u011c\u008f\2\u09c4\u09bb\3\2\2\2\u09c4\u09bf\3"+
		"\2\2\2\u09c4\u09c3\3\2\2\2\u09c4\u09c5\3\2\2\2\u09c5\u011b\3\2\2\2\u09c6"+
		"\u09c7\t\30\2\2\u09c7\u09c8\5\u029a\u014e\2\u09c8\u011d\3\2\2\2\u09c9"+
		"\u09d1\5\u01c8\u00e5\2\u09ca\u09d1\5\u01d4\u00eb\2\u09cb\u09d1\5\u013a"+
		"\u009e\2\u09cc\u09d1\5\u01ae\u00d8\2\u09cd\u09d1\5\u01b4\u00db\2\u09ce"+
		"\u09d1\5\u01b6\u00dc\2\u09cf\u09d1\5\u0138\u009d\2\u09d0\u09c9\3\2\2\2"+
		"\u09d0\u09ca\3\2\2\2\u09d0\u09cb\3\2\2\2\u09d0\u09cc\3\2\2\2\u09d0\u09cd"+
		"\3\2\2\2\u09d0\u09ce\3\2\2\2\u09d0\u09cf\3\2\2\2\u09d1\u011f\3\2\2\2\u09d2"+
		"\u09d7\5\u0122\u0092\2\u09d3\u09d7\5\u0124\u0093\2\u09d4\u09d7\5\u0126"+
		"\u0094\2\u09d5\u09d7\5\u0128\u0095\2\u09d6\u09d2\3\2\2\2\u09d6\u09d3\3"+
		"\2\2\2\u09d6\u09d4\3\2\2\2\u09d6\u09d5\3\2\2\2\u09d7\u0121\3\2\2\2\u09d8"+
		"\u09d9\7=\2\2\u09d9\u09da\5\u02ce\u0168\2\u09da\u0123\3\2\2\2\u09db\u09dc"+
		"\7\u0110\2\2\u09dc\u09de\5\u02ce\u0168\2\u09dd\u09df\5\u01f8\u00fd\2\u09de"+
		"\u09dd\3\2\2\2\u09de\u09df\3\2\2\2\u09df\u0125\3\2\2\2\u09e0\u09e1\7\u0094"+
		"\2\2\u09e1\u09fa\5\u02ce\u0168\2\u09e2\u09e3\7\u00c0\2\2\u09e3\u09e8\5"+
		"\u02ca\u0166\2\u09e4\u09e5\7\u0200\2\2\u09e5\u09e7\5\u02ca\u0166\2\u09e6"+
		"\u09e4\3\2\2\2\u09e7\u09ea\3\2\2\2\u09e8\u09e6\3\2\2\2\u09e8\u09e9\3\2"+
		"\2\2\u09e9\u09fb\3\2\2\2\u09ea\u09e8\3\2\2\2\u09eb\u09ec\7-\2\2\u09ec"+
		"\u09ed\7?\2\2\u09ed\u09ee\7\u00c0\2\2\u09ee\u09f3\5\u02ca\u0166\2\u09ef"+
		"\u09f0\7\u0200\2\2\u09f0\u09f2\5\u02ca\u0166\2\u09f1\u09ef\3\2\2\2\u09f2"+
		"\u09f5\3\2\2\2\u09f3\u09f1\3\2\2\2\u09f3\u09f4\3\2\2\2\u09f4\u09f6\3\2"+
		"\2\2\u09f5\u09f3\3\2\2\2\u09f6\u09f7\7\u00d3\2\2\u09f7\u09f8\5\u02ca\u0166"+
		"\2\u09f8\u09fb\3\2\2\2\u09f9\u09fb\5\u02fa\u017e\2\u09fa\u09e2\3\2\2\2"+
		"\u09fa\u09eb\3\2\2\2\u09fa\u09f9\3\2\2\2\u09fb\u0127\3\2\2\2\u09fc\u09fd"+
		"\7\u0110\2\2\u09fd\u09fe\5\u02ca\u0166\2\u09fe\u0a01\7\u009b\2\2\u09ff"+
		"\u0a02\5\u013a\u009e\2\u0a00\u0a02\5\u01fe\u0100\2\u0a01\u09ff\3\2\2\2"+
		"\u0a01\u0a00\3\2\2\2\u0a02\u0a04\3\2\2\2\u0a03\u0a05\5\u025a\u012e\2\u0a04"+
		"\u0a03\3\2\2\2\u0a04\u0a05\3\2\2\2\u0a05\u0129\3\2\2\2\u0a06\u0a0c\5\u012c"+
		"\u0097\2\u0a07\u0a0c\5\u012e\u0098\2\u0a08\u0a0c\5\u0130\u0099\2\u0a09"+
		"\u0a0c\5\u0134\u009b\2\u0a0a\u0a0c\5\u0136\u009c\2\u0a0b\u0a06\3\2\2\2"+
		"\u0a0b\u0a07\3\2\2\2\u0a0b\u0a08\3\2\2\2\u0a0b\u0a09\3\2\2\2\u0a0b\u0a0a"+
		"\3\2\2\2\u0a0c\u012b\3\2\2\2\u0a0d\u0a0e\7\u0163\2\2\u0a0e\u0a1c\7\u0194"+
		"\2\2\u0a0f\u0a10\7\u0137\2\2\u0a10\u0a1d\t\31\2\2\u0a11\u0a12\7\u00c3"+
		"\2\2\u0a12\u0a16\7\u00cd\2\2\u0a13\u0a17\7\u015f\2\2\u0a14\u0a15\7\u0137"+
		"\2\2\u0a15\u0a17\7C\2\2\u0a16\u0a13\3\2\2\2\u0a16\u0a14\3\2\2\2\u0a17"+
		"\u0a1d\3\2\2\2\u0a18\u0a19\7\u01a7\2\2\u0a19\u0a1a\7\u014b\2\2\u0a1a\u0a1b"+
		"\7\u015a\2\2\u0a1b\u0a1d\5\u02a4\u0153\2\u0a1c\u0a0f\3\2\2\2\u0a1c\u0a11"+
		"\3\2\2\2\u0a1c\u0a18\3\2\2\2\u0a1c\u0a1d\3\2\2\2\u0a1d\u0a20\3\2\2\2\u0a1e"+
		"\u0a1f\7\u00ec\2\2\u0a1f\u0a21\5\u02fc\u017f\2\u0a20\u0a1e\3\2\2\2\u0a20"+
		"\u0a21\3\2\2\2\u0a21\u012d\3\2\2\2\u0a22\u0a23\7\u0163\2\2\u0a23\u0a2d"+
		"\t\32\2\2\u0a24\u0a2e\7\17\2\2\u0a25\u0a2a\5\u02ba\u015e\2\u0a26\u0a27"+
		"\7\u0200\2\2\u0a27\u0a29\5\u02ba\u015e\2\u0a28\u0a26\3\2\2\2\u0a29\u0a2c"+
		"\3\2\2\2\u0a2a\u0a28\3\2\2\2\u0a2a\u0a2b\3\2\2\2\u0a2b\u0a2e\3\2\2\2\u0a2c"+
		"\u0a2a\3\2\2\2\u0a2d\u0a24\3\2\2\2\u0a2d\u0a25\3\2\2\2\u0a2e\u0a2f\3\2"+
		"\2\2\u0a2f\u0a30\t\33\2\2\u0a30\u012f\3\2\2\2\u0a31\u0a33\7B\2\2\u0a32"+
		"\u0a34\7\u01bc\2\2\u0a33\u0a32\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u0a42"+
		"\3\2\2\2\u0a35\u0a36\7A\2\2\u0a36\u0a43\5\u01fe\u0100\2\u0a37\u0a40\7"+
		"\u009d\2\2\u0a38\u0a39\7Q\2\2\u0a39\u0a41\5\u01fe\u0100\2\u0a3a\u0a41"+
		"\7R\2\2\u0a3b\u0a3e\5\u01fe\u0100\2\u0a3c\u0a3d\7\u0200\2\2\u0a3d\u0a3f"+
		"\5\u01fe\u0100\2\u0a3e\u0a3c\3\2\2\2\u0a3e\u0a3f\3\2\2\2\u0a3f\u0a41\3"+
		"\2\2\2\u0a40\u0a38\3\2\2\2\u0a40\u0a3a\3\2\2\2\u0a40\u0a3b\3\2\2\2\u0a41"+
		"\u0a43\3\2\2\2\u0a42\u0a35\3\2\2\2\u0a42\u0a37\3\2\2\2\u0a42\u0a43\3\2"+
		"\2\2\u0a43\u0a45\3\2\2\2\u0a44\u0a46\5\u0132\u009a\2\u0a45\u0a44\3\2\2"+
		"\2\u0a45\u0a46\3\2\2\2\u0a46\u0131\3\2\2\2\u0a47\u0a49\7\u01bd\2\2\u0a48"+
		"\u0a4a\t\34\2\2\u0a49\u0a48\3\2\2\2\u0a49\u0a4a\3\2\2\2\u0a4a\u0a4c\3"+
		"\2\2\2\u0a4b\u0a4d\t\35\2\2\u0a4c\u0a4b\3\2\2\2\u0a4c\u0a4d\3\2\2\2\u0a4d"+
		"\u0133\3\2\2\2\u0a4e\u0a50\7\u014b\2\2\u0a4f\u0a51\7\u01bc\2\2\u0a50\u0a4f"+
		"\3\2\2\2\u0a50\u0a51\3\2\2\2\u0a51\u0a59\3\2\2\2\u0a52\u0a54\7\u0190\2"+
		"\2\u0a53\u0a55\7\u0153\2\2\u0a54\u0a53\3\2\2\2\u0a54\u0a55\3\2\2\2\u0a55"+
		"\u0a56\3\2\2\2\u0a56\u0a5a\5\u02a2\u0152\2\u0a57\u0a58\7\u009d\2\2\u0a58"+
		"\u0a5a\5\u02fc\u017f\2\u0a59\u0a52\3\2\2\2\u0a59\u0a57\3\2\2\2\u0a59\u0a5a"+
		"\3\2\2\2\u0a5a\u0135\3\2\2\2\u0a5b\u0a5c\7\u0153\2\2\u0a5c\u0a5d\5\u02a2"+
		"\u0152\2\u0a5d\u0137\3\2\2\2\u0a5e\u0a5f\7\u008e\2\2\u0a5f\u0a64\7\u012a"+
		"\2\2\u0a60\u0a61\7\u0163\2\2\u0a61\u0a62\7\u017a\2\2\u0a62\u0a63\7\u0211"+
		"\2\2\u0a63\u0a65\5\u02fc\u017f\2\u0a64\u0a60\3\2\2\2\u0a64\u0a65\3\2\2"+
		"\2\u0a65\u0a68\3\2\2\2\u0a66\u0a67\7\u00c0\2\2\u0a67\u0a69\5\u02d8\u016d"+
		"\2\u0a68\u0a66\3\2\2\2\u0a68\u0a69\3\2\2\2\u0a69\u0a6a\3\2\2\2\u0a6a\u0a70"+
		"\7\u009b\2\2\u0a6b\u0a71\5\u013a\u009e\2\u0a6c\u0a71\5\u01ae\u00d8\2\u0a6d"+
		"\u0a71\5\u01b4\u00db\2\u0a6e\u0a71\5\u01b6\u00dc\2\u0a6f\u0a71\5\u01c8"+
		"\u00e5\2\u0a70\u0a6b\3\2\2\2\u0a70\u0a6c\3\2\2\2\u0a70\u0a6d\3\2\2\2\u0a70"+
		"\u0a6e\3\2\2\2\u0a70\u0a6f\3\2\2\2\u0a71\u0139\3\2\2\2\u0a72\u0a74\5\u013c"+
		"\u009f\2\u0a73\u0a72\3\2\2\2\u0a73\u0a74\3\2\2\2\u0a74\u0a75\3\2\2\2\u0a75"+
		"\u0a7a\5\u0144\u00a3\2\u0a76\u0a79\5\u01a8\u00d5\2\u0a77\u0a79\5\u01a4"+
		"\u00d3\2\u0a78\u0a76\3\2\2\2\u0a78\u0a77\3\2\2\2\u0a79\u0a7c\3\2\2\2\u0a7a"+
		"\u0a78\3\2\2\2\u0a7a\u0a7b\3\2\2\2\u0a7b\u013b\3\2\2\2\u0a7c\u0a7a\3\2"+
		"\2\2\u0a7d\u0a7e\7\u01ba\2\2\u0a7e\u0a83\5\u013e\u00a0\2\u0a7f\u0a80\7"+
		"\u0200\2\2\u0a80\u0a82\5\u013e\u00a0\2\u0a81\u0a7f\3\2\2\2\u0a82\u0a85"+
		"\3\2\2\2\u0a83\u0a81\3\2\2\2\u0a83\u0a84\3\2\2\2\u0a84\u013d\3\2\2\2\u0a85"+
		"\u0a83\3\2\2\2\u0a86\u0a92\5\u02b8\u015d\2\u0a87\u0a88\7\u01fa\2\2\u0a88"+
		"\u0a8d\5\u02d6\u016c\2\u0a89\u0a8a\7\u0200\2\2\u0a8a\u0a8c\5\u02d6\u016c"+
		"\2\u0a8b\u0a89\3\2\2\2\u0a8c\u0a8f\3\2\2\2\u0a8d\u0a8b\3\2\2\2\u0a8d\u0a8e"+
		"\3\2\2\2\u0a8e\u0a90\3\2\2\2\u0a8f\u0a8d\3\2\2\2\u0a90\u0a91\7\u01fb\2"+
		"\2\u0a91\u0a93\3\2\2\2\u0a92\u0a87\3\2\2\2\u0a92\u0a93\3\2\2\2\u0a93\u0a94"+
		"\3\2\2\2\u0a94\u0a95\7\25\2\2\u0a95\u0a96\7\u01fa\2\2\u0a96\u0a98\5\u0144"+
		"\u00a3\2\u0a97\u0a99\5\u01a4\u00d3\2\u0a98\u0a97\3\2\2\2\u0a98\u0a99\3"+
		"\2\2\2\u0a99\u0a9a\3\2\2\2\u0a9a\u0a9c\7\u01fb\2\2\u0a9b\u0a9d\5\u0140"+
		"\u00a1\2\u0a9c\u0a9b\3\2\2\2\u0a9c\u0a9d\3\2\2\2\u0a9d\u0a9f\3\2\2\2\u0a9e"+
		"\u0aa0\5\u0142\u00a2\2\u0a9f\u0a9e\3\2\2\2\u0a9f\u0aa0\3\2\2\2\u0aa0\u013f"+
		"\3\2\2\2\u0aa1\u0aa2\7\u0157\2\2\u0aa2\u0aa3\t\36\2\2\u0aa3\u0aa4\7\u0096"+
		"\2\2\u0aa4\u0aa5\7.\2\2\u0aa5\u0aa7\5\u02d6\u016c\2\u0aa6\u0aa8\7\26\2"+
		"\2\u0aa7\u0aa6\3\2\2\2\u0aa7\u0aa8\3\2\2\2\u0aa8\u0aaa\3\2\2\2\u0aa9\u0aab"+
		"\7p\2\2\u0aaa\u0aa9\3\2\2\2\u0aaa\u0aab\3\2\2\2\u0aab\u0aae\3\2\2\2\u0aac"+
		"\u0aad\7\u0105\2\2\u0aad\u0aaf\7\u0096\2\2\u0aae\u0aac\3\2\2\2\u0aae\u0aaf"+
		"\3\2\2\2\u0aaf\u0ab2\3\2\2\2\u0ab0\u0ab1\7\u0105\2\2\u0ab1\u0ab3\7\u00c9"+
		"\2\2\u0ab2\u0ab0\3\2\2\2\u0ab2\u0ab3\3\2\2\2\u0ab3\u0ac6\3\2\2\2\u0ab4"+
		"\u0ab5\7\u0200\2\2\u0ab5\u0ab7\5\u02d6\u016c\2\u0ab6\u0ab8\7\26\2\2\u0ab7"+
		"\u0ab6\3\2\2\2\u0ab7\u0ab8\3\2\2\2\u0ab8\u0aba\3\2\2\2\u0ab9\u0abb\7p"+
		"\2\2\u0aba\u0ab9\3\2\2\2\u0aba\u0abb\3\2\2\2\u0abb\u0abe\3\2\2\2\u0abc"+
		"\u0abd\7\u0105\2\2\u0abd\u0abf\7\u0096\2\2\u0abe\u0abc\3\2\2\2\u0abe\u0abf"+
		"\3\2\2\2\u0abf\u0ac2\3\2\2\2\u0ac0\u0ac1\7\u0105\2\2\u0ac1\u0ac3\7\u00c9"+
		"\2\2\u0ac2\u0ac0\3\2\2\2\u0ac2\u0ac3\3\2\2\2\u0ac3\u0ac5\3\2\2\2\u0ac4"+
		"\u0ab4\3\2\2\2\u0ac5\u0ac8\3\2\2\2\u0ac6\u0ac4\3\2\2\2\u0ac6\u0ac7\3\2"+
		"\2\2\u0ac7\u0ac9\3\2\2\2\u0ac8\u0ac6\3\2\2\2\u0ac9\u0aca\7\u0163\2\2\u0aca"+
		"\u0acb\5\u02d6\u016c\2\u0acb\u0141\3\2\2\2\u0acc\u0acd\7\\\2\2\u0acd\u0ad2"+
		"\5\u02d6\u016c\2\u0ace\u0acf\7\u0200\2\2\u0acf\u0ad1\5\u02d6\u016c\2\u0ad0"+
		"\u0ace\3\2\2\2\u0ad1\u0ad4\3\2\2\2\u0ad2\u0ad0\3\2\2\2\u0ad2\u0ad3\3\2"+
		"\2\2\u0ad3\u0ad5\3\2\2\2\u0ad4\u0ad2\3\2\2\2\u0ad5\u0ad6\7\u0163\2\2\u0ad6"+
		"\u0ad7\5\u02d6\u016c\2\u0ad7\u0ad8\7\u0190\2\2\u0ad8\u0ad9\5\u01fe\u0100"+
		"\2\u0ad9\u0ada\7j\2\2\u0ada\u0adb\5\u01fe\u0100\2\u0adb\u0143\3\2\2\2"+
		"\u0adc\u0ae0\5\u0148\u00a5\2\u0add\u0adf\5\u0146\u00a4\2\u0ade\u0add\3"+
		"\2\2\2\u0adf\u0ae2\3\2\2\2\u0ae0\u0ade\3\2\2\2\u0ae0\u0ae1\3\2\2\2\u0ae1"+
		"\u0145\3\2\2\2\u0ae2\u0ae0\3\2\2\2\u0ae3\u0ae5\7\u019e\2\2\u0ae4\u0ae6"+
		"\7\17\2\2\u0ae5\u0ae4\3\2\2\2\u0ae5\u0ae6\3\2\2\2\u0ae6\u0aea\3\2\2\2"+
		"\u0ae7\u0aea\7\u00be\2\2\u0ae8\u0aea\7\u00e3\2\2\u0ae9\u0ae3\3\2\2\2\u0ae9"+
		"\u0ae7\3\2\2\2\u0ae9\u0ae8\3\2\2\2\u0aea\u0aeb\3\2\2\2\u0aeb\u0aec\5\u0148"+
		"\u00a5\2\u0aec\u0147\3\2\2\2\u0aed\u0af3\5\u014a\u00a6\2\u0aee\u0aef\7"+
		"\u01fa\2\2\u0aef\u0af0\5\u0144\u00a3\2\u0af0\u0af1\7\u01fb\2\2\u0af1\u0af3"+
		"\3\2\2\2\u0af2\u0aed\3\2\2\2\u0af2\u0aee\3\2\2\2\u0af3\u0149\3\2\2\2\u0af4"+
		"\u0af6\7\u015b\2\2\u0af5\u0af7\t\37\2\2\u0af6\u0af5\3\2\2\2\u0af6\u0af7"+
		"\3\2\2\2\u0af7\u0b01\3\2\2\2\u0af8\u0b02\7\u01fd\2\2\u0af9\u0afe\5\u014c"+
		"\u00a7\2\u0afa\u0afb\7\u0200\2\2\u0afb\u0afd\5\u014c\u00a7\2\u0afc\u0afa"+
		"\3\2\2\2\u0afd\u0b00\3\2\2\2\u0afe\u0afc\3\2\2\2\u0afe\u0aff\3\2\2\2\u0aff"+
		"\u0b02\3\2\2\2\u0b00\u0afe\3\2\2\2\u0b01\u0af8\3\2\2\2\u0b01\u0af9\3\2"+
		"\2\2\u0b02\u0b04\3\2\2\2\u0b03\u0b05\5\u029a\u014e\2\u0b04\u0b03\3\2\2"+
		"\2\u0b04\u0b05\3\2\2\2\u0b05\u0b06\3\2\2\2\u0b06\u0b08\5\u014e\u00a8\2"+
		"\u0b07\u0b09\5\u0294\u014b\2\u0b08\u0b07\3\2\2\2\u0b08\u0b09\3\2\2\2\u0b09"+
		"\u0b0b\3\2\2\2\u0b0a\u0b0c\5\u0176\u00bc\2\u0b0b\u0b0a\3\2\2\2\u0b0b\u0b0c"+
		"\3\2\2\2\u0b0c\u0b0e\3\2\2\2\u0b0d\u0b0f\5\u017a\u00be\2\u0b0e\u0b0d\3"+
		"\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u0b11\3\2\2\2\u0b10\u0b12\5\u01a4\u00d3"+
		"\2\u0b11\u0b10\3\2\2\2\u0b11\u0b12\3\2\2\2\u0b12\u0b14\3\2\2\2\u0b13\u0b15"+
		"\5\u0186\u00c4\2\u0b14\u0b13\3\2\2\2\u0b14\u0b15\3\2\2\2\u0b15\u0b17\3"+
		"\2\2\2\u0b16\u0b18\7\u0206\2\2\u0b17\u0b16\3\2\2\2\u0b17\u0b18\3\2\2\2"+
		"\u0b18\u014b\3\2\2\2\u0b19\u0b1b\5\u0150\u00a9\2\u0b1a\u0b1c\5\u028e\u0148"+
		"\2\u0b1b\u0b1a\3\2\2\2\u0b1b\u0b1c\3\2\2\2\u0b1c\u014d\3\2\2\2\u0b1d\u0b1e"+
		"\7\u009e\2\2\u0b1e\u0b1f\5\u0152\u00aa\2\u0b1f\u014f\3\2\2\2\u0b20\u0b21"+
		"\5\u02d8\u016d\2\u0b21\u0b22\7\u01f3\2\2\u0b22\u0b23\7\u01fd\2\2\u0b23"+
		"\u0b26\3\2\2\2\u0b24\u0b26\5\u01fe\u0100\2\u0b25\u0b20\3\2\2\2\u0b25\u0b24"+
		"\3\2\2\2\u0b26\u0151\3\2\2\2\u0b27\u0b2c\5\u0154\u00ab\2\u0b28\u0b29\7"+
		"\u0200\2\2\u0b29\u0b2b\5\u0154\u00ab\2\u0b2a\u0b28\3\2\2\2\u0b2b\u0b2e"+
		"\3\2\2\2\u0b2c\u0b2a\3\2\2\2\u0b2c\u0b2d\3\2\2\2\u0b2d\u0153\3\2\2\2\u0b2e"+
		"\u0b2c\3\2\2\2\u0b2f\u0b33\5\u0156\u00ac\2\u0b30\u0b32\5\u0158\u00ad\2"+
		"\u0b31\u0b30\3\2\2\2\u0b32\u0b35\3\2\2\2\u0b33\u0b31\3\2\2\2\u0b33\u0b34"+
		"\3\2\2\2\u0b34\u0b38\3\2\2\2\u0b35\u0b33\3\2\2\2\u0b36\u0b39\5\u0164\u00b3"+
		"\2\u0b37\u0b39\5\u0170\u00b9\2\u0b38\u0b36\3\2\2\2\u0b38\u0b37\3\2\2\2"+
		"\u0b38\u0b39\3\2\2\2\u0b39\u0155\3\2\2\2\u0b3a\u0b3d\5\u01e6\u00f4\2\u0b3b"+
		"\u0b3e\5\u0164\u00b3\2\u0b3c\u0b3e\5\u0170\u00b9\2\u0b3d\u0b3b\3\2\2\2"+
		"\u0b3d\u0b3c\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u0b57\3\2\2\2\u0b3f\u0b40"+
		"\7\u01fa\2\2\u0b40\u0b44\5\u0154\u00ab\2\u0b41\u0b43\5\u0146\u00a4\2\u0b42"+
		"\u0b41\3\2\2\2\u0b43\u0b46\3\2\2\2\u0b44\u0b42\3\2\2\2\u0b44\u0b45\3\2"+
		"\2\2\u0b45\u0b47\3\2\2\2\u0b46\u0b44\3\2\2\2\u0b47\u0b4a\7\u01fb\2\2\u0b48"+
		"\u0b4b\5\u0164\u00b3\2\u0b49\u0b4b\5\u0170\u00b9\2\u0b4a\u0b48\3\2\2\2"+
		"\u0b4a\u0b49\3\2\2\2\u0b4a\u0b4b\3\2\2\2\u0b4b\u0b57\3\2\2\2\u0b4c\u0b4d"+
		"\7\u010f\2\2\u0b4d\u0b4e\7\u01fa\2\2\u0b4e\u0b4f\5\u01e6\u00f4\2\u0b4f"+
		"\u0b50\7\u01fb\2\2\u0b50\u0b57\3\2\2\2\u0b51\u0b54\5\u01e6\u00f4\2\u0b52"+
		"\u0b55\5\u0164\u00b3\2\u0b53\u0b55\5\u0170\u00b9\2\u0b54\u0b52\3\2\2\2"+
		"\u0b54\u0b53\3\2\2\2\u0b54\u0b55\3\2\2\2\u0b55\u0b57\3\2\2\2\u0b56\u0b3a"+
		"\3\2\2\2\u0b56\u0b3f\3\2\2\2\u0b56\u0b4c\3\2\2\2\u0b56\u0b51\3\2\2\2\u0b57"+
		"\u0b5b\3\2\2\2\u0b58\u0b5a\5\u0162\u00b2\2\u0b59\u0b58\3\2\2\2\u0b5a\u0b5d"+
		"\3\2\2\2\u0b5b\u0b59\3\2\2\2\u0b5b\u0b5c\3\2\2\2\u0b5c\u0b5f\3\2\2\2\u0b5d"+
		"\u0b5b\3\2\2\2\u0b5e\u0b60\5\u0290\u0149\2\u0b5f\u0b5e\3\2\2\2\u0b5f\u0b60"+
		"\3\2\2\2\u0b60\u0157\3\2\2\2\u0b61\u0b63\5\u0160\u00b1\2\u0b62\u0b61\3"+
		"\2\2\2\u0b62\u0b63\3\2\2\2\u0b63\u0b65\3\2\2\2\u0b64\u0b66\t \2\2\u0b65"+
		"\u0b64\3\2\2\2\u0b65\u0b66\3\2\2\2\u0b66\u0b69\3\2\2\2\u0b67\u0b6a\7\u00b7"+
		"\2\2\u0b68\u0b6a\5\u015e\u00b0\2\u0b69\u0b67\3\2\2\2\u0b69\u0b68\3\2\2"+
		"\2\u0b69\u0b6a\3\2\2\2\u0b6a\u0b6b\3\2\2\2\u0b6b\u0b6c\7\u00c6\2\2\u0b6c"+
		"\u0b6e\5\u0156\u00ac\2\u0b6d\u0b6f\5\u0160\u00b1\2\u0b6e\u0b6d\3\2\2\2"+
		"\u0b6e\u0b6f\3\2\2\2\u0b6f\u0b74\3\2\2\2\u0b70\u0b73\5\u015a\u00ae\2\u0b71"+
		"\u0b73\5\u015c\u00af\2\u0b72\u0b70\3\2\2\2\u0b72\u0b71\3\2\2\2\u0b73\u0b76"+
		"\3\2\2\2\u0b74\u0b72\3\2\2\2\u0b74\u0b75\3\2\2\2\u0b75\u0159\3\2\2\2\u0b76"+
		"\u0b74\3\2\2\2\u0b77\u0b78\7\u010e\2\2\u0b78\u0b79\5\u01fa\u00fe\2\u0b79"+
		"\u015b\3\2\2\2\u0b7a\u0b7b\7\u01a8\2\2\u0b7b\u0b7c\7\u01fa\2\2\u0b7c\u0b81"+
		"\5\u02d6\u016c\2\u0b7d\u0b7e\7\u0200\2\2\u0b7e\u0b80\5\u02d6\u016c\2\u0b7f"+
		"\u0b7d\3\2\2\2\u0b80\u0b83\3\2\2\2\u0b81\u0b7f\3\2\2\2\u0b81\u0b82\3\2"+
		"\2\2\u0b82\u0b84\3\2\2\2\u0b83\u0b81\3\2\2\2\u0b84\u0b85\7\u01fb\2\2\u0b85"+
		"\u015d\3\2\2\2\u0b86\u0b88\t!\2\2\u0b87\u0b89\7\u0118\2\2\u0b88\u0b87"+
		"\3\2\2\2\u0b88\u0b89\3\2\2\2\u0b89\u015f\3\2\2\2\u0b8a\u0b8b\7\u011f\2"+
		"\2\u0b8b\u0b99\7.\2\2\u0b8c\u0b8d\7\u01fa\2\2\u0b8d\u0b8e\5\u0144\u00a3"+
		"\2\u0b8e\u0b8f\7\u01fb\2\2\u0b8f\u0b9a\3\2\2\2\u0b90\u0b9a\5\u01f8\u00fd"+
		"\2\u0b91\u0b96\5\u01fe\u0100\2\u0b92\u0b93\7\u0200\2\2\u0b93\u0b95\5\u01fe"+
		"\u0100\2\u0b94\u0b92\3\2\2\2\u0b95\u0b98\3\2\2\2\u0b96\u0b94\3\2\2\2\u0b96"+
		"\u0b97\3\2\2\2\u0b97\u0b9a\3\2\2\2\u0b98\u0b96\3\2\2\2\u0b99\u0b8c\3\2"+
		"\2\2\u0b99\u0b90\3\2\2\2\u0b99\u0b91\3\2\2\2\u0b9a\u0161\3\2\2\2\u0b9b"+
		"\u0b9c\7\u01b2\2\2\u0b9c\u0b9d\7\"\2\2\u0b9d\u0b9e\t\"\2\2\u0b9e\u0ba4"+
		"\5\u01fe\u0100\2\u0b9f\u0ba0\7\25\2\2\u0ba0\u0ba1\7\u010a\2\2\u0ba1\u0ba2"+
		"\t#\2\2\u0ba2\u0ba4\5\u01fe\u0100\2\u0ba3\u0b9b\3\2\2\2\u0ba3\u0b9f\3"+
		"\2\2\2\u0ba4\u0163\3\2\2\2\u0ba5\u0ba7\7\u0129\2\2\u0ba6\u0ba8\7\u01be"+
		"\2\2\u0ba7\u0ba6\3\2\2\2\u0ba7\u0ba8\3\2\2\2\u0ba8\u0ba9\3\2\2\2\u0ba9"+
		"\u0baa\7\u01fa\2\2\u0baa\u0baf\5\u0166\u00b4\2\u0bab\u0bac\7\u0200\2\2"+
		"\u0bac\u0bae\5\u0166\u00b4\2\u0bad\u0bab\3\2\2\2\u0bae\u0bb1\3\2\2\2\u0baf"+
		"\u0bad\3\2\2\2\u0baf\u0bb0\3\2\2\2\u0bb0\u0bb2\3\2\2\2\u0bb1\u0baf\3\2"+
		"\2\2\u0bb2\u0bb3\5\u0168\u00b5\2\u0bb3\u0bb4\5\u016a\u00b6\2\u0bb4\u0bb5"+
		"\7\u01fb\2\2\u0bb5\u0165\3\2\2\2\u0bb6\u0bb7\5\u02b6\u015c\2\u0bb7\u0bb8"+
		"\7\u01fa\2\2\u0bb8\u0bb9\5\u01fe\u0100\2\u0bb9\u0bbb\7\u01fb\2\2\u0bba"+
		"\u0bbc\5\u028e\u0148\2\u0bbb\u0bba\3\2\2\2\u0bbb\u0bbc\3\2\2\2\u0bbc\u0167"+
		"\3\2\2\2\u0bbd\u0bca\7\u009b\2\2\u0bbe\u0bcb\5\u02d6\u016c\2\u0bbf\u0bc0"+
		"\7\u01fa\2\2\u0bc0\u0bc5\5\u02d6\u016c\2\u0bc1\u0bc2\7\u0200\2\2\u0bc2"+
		"\u0bc4\5\u02d6\u016c\2\u0bc3\u0bc1\3\2\2\2\u0bc4\u0bc7\3\2\2\2\u0bc5\u0bc3"+
		"\3\2\2\2\u0bc5\u0bc6\3\2\2\2\u0bc6\u0bc8\3\2\2\2\u0bc7\u0bc5\3\2\2\2\u0bc8"+
		"\u0bc9\7\u01fb\2\2\u0bc9\u0bcb\3\2\2\2\u0bca\u0bbe\3\2\2\2\u0bca\u0bbf"+
		"\3\2\2\2\u0bcb\u0169\3\2\2\2\u0bcc\u0bcd\7\u00ac\2\2\u0bcd\u0bdf\7\u01fa"+
		"\2\2\u0bce\u0be0\5\u0144\u00a3\2\u0bcf\u0bd4\7\23\2\2\u0bd0\u0bd1\7\u0200"+
		"\2\2\u0bd1\u0bd3\7\23\2\2\u0bd2\u0bd0\3\2\2\2\u0bd3\u0bd6\3\2\2\2\u0bd4"+
		"\u0bd2\3\2\2\2\u0bd4\u0bd5\3\2\2\2\u0bd5\u0be0\3\2\2\2\u0bd6\u0bd4\3\2"+
		"\2\2\u0bd7\u0bdc\5\u016c\u00b7\2\u0bd8\u0bd9\7\u0200\2\2\u0bd9\u0bdb\5"+
		"\u016c\u00b7\2\u0bda\u0bd8\3\2\2\2\u0bdb\u0bde\3\2\2\2\u0bdc\u0bda\3\2"+
		"\2\2\u0bdc\u0bdd\3\2\2\2\u0bdd\u0be0\3\2\2\2\u0bde\u0bdc\3\2\2\2\u0bdf"+
		"\u0bce\3\2\2\2\u0bdf\u0bcf\3\2\2\2\u0bdf\u0bd7\3\2\2\2\u0be0\u0be1\3\2"+
		"\2\2\u0be1\u0be2\7\u01fb\2\2\u0be2\u016b\3\2\2\2\u0be3\u0be5\5\u016e\u00b8"+
		"\2\u0be4\u0be6\5\u028e\u0148\2\u0be5\u0be4\3\2\2\2\u0be5\u0be6\3\2\2\2"+
		"\u0be6\u016d\3\2\2\2\u0be7\u0bea\5\u01fe\u0100\2\u0be8\u0bea\5\u01f8\u00fd"+
		"\2\u0be9\u0be7\3\2\2\2\u0be9\u0be8\3\2\2\2\u0bea\u016f\3\2\2\2\u0beb\u0bee"+
		"\7\u01a1\2\2\u0bec\u0bed\t$\2\2\u0bed\u0bef\7\u0105\2\2\u0bee\u0bec\3"+
		"\2\2\2\u0bee\u0bef\3\2\2\2\u0bef\u0bf0\3\2\2\2\u0bf0\u0bfd\7\u01fa\2\2"+
		"\u0bf1\u0bfe\5\u02d6\u016c\2\u0bf2\u0bf3\7\u01fa\2\2\u0bf3\u0bf8\5\u02d6"+
		"\u016c\2\u0bf4\u0bf5\7\u0200\2\2\u0bf5\u0bf7\5\u02d6\u016c\2\u0bf6\u0bf4"+
		"\3\2\2\2\u0bf7\u0bfa\3\2\2\2\u0bf8\u0bf6\3\2\2\2\u0bf8\u0bf9\3\2\2\2\u0bf9"+
		"\u0bfb\3\2\2\2\u0bfa\u0bf8\3\2\2\2\u0bfb\u0bfc\7\u01fb\2\2\u0bfc\u0bfe"+
		"\3\2\2\2\u0bfd\u0bf1\3\2\2\2\u0bfd\u0bf2\3\2\2\2\u0bfe\u0bff\3\2\2\2\u0bff"+
		"\u0c00\5\u0168\u00b5\2\u0c00\u0c01\5\u0172\u00ba\2\u0c01\u0c02\7\u01fb"+
		"\2\2\u0c02\u0171\3\2\2\2\u0c03\u0c04\7\u00ac\2\2\u0c04\u0c05\7\u01fa\2"+
		"\2\u0c05\u0c0a\5\u0174\u00bb\2\u0c06\u0c07\7\u0200\2\2\u0c07\u0c09\5\u0174"+
		"\u00bb\2\u0c08\u0c06\3\2\2\2\u0c09\u0c0c\3\2\2\2\u0c0a\u0c08\3\2\2\2\u0c0a"+
		"\u0c0b\3\2\2\2\u0c0b\u0c0d\3\2\2\2\u0c0c\u0c0a\3\2\2\2\u0c0d\u0c0e\7\u01fb"+
		"\2\2\u0c0e\u0173\3\2\2\2\u0c0f\u0c1c\5\u02d6\u016c\2\u0c10\u0c11\7\u01fa"+
		"\2\2\u0c11\u0c16\5\u02d6\u016c\2\u0c12\u0c13\7\u0200\2\2\u0c13\u0c15\5"+
		"\u02d6\u016c\2\u0c14\u0c12\3\2\2\2\u0c15\u0c18\3\2\2\2\u0c16\u0c14\3\2"+
		"\2\2\u0c16\u0c17\3\2\2\2\u0c17\u0c19\3\2\2\2\u0c18\u0c16\3\2\2\2\u0c19"+
		"\u0c1a\7\u01fb\2\2\u0c1a\u0c1c\3\2\2\2\u0c1b\u0c0f\3\2\2\2\u0c1b\u0c10"+
		"\3\2\2\2\u0c1c\u0c2c\3\2\2\2\u0c1d\u0c2a\7\25\2\2\u0c1e\u0c2b\5\u02f8"+
		"\u017d\2\u0c1f\u0c20\7\u01fa\2\2\u0c20\u0c25\5\u02f8\u017d\2\u0c21\u0c22"+
		"\7\u0200\2\2\u0c22\u0c24\5\u02f8\u017d\2\u0c23\u0c21\3\2\2\2\u0c24\u0c27"+
		"\3\2\2\2\u0c25\u0c23\3\2\2\2\u0c25\u0c26\3\2\2\2\u0c26\u0c28\3\2\2\2\u0c27"+
		"\u0c25\3\2\2\2\u0c28\u0c29\7\u01fb\2\2\u0c29\u0c2b\3\2\2\2\u0c2a\u0c1e"+
		"\3\2\2\2\u0c2a\u0c1f\3\2\2\2\u0c2b\u0c2d\3\2\2\2\u0c2c\u0c1d\3\2\2\2\u0c2c"+
		"\u0c2d\3\2\2\2\u0c2d\u0175\3\2\2\2\u0c2e\u0c2f\7G\2\2\u0c2f\u0c31\7.\2"+
		"\2\u0c30\u0c32\7\u00fb\2\2\u0c31\u0c30\3\2\2\2\u0c31\u0c32\3\2\2\2\u0c32"+
		"\u0c33\3\2\2\2\u0c33\u0c35\5\u01fa\u00fe\2\u0c34\u0c36\5\u0178\u00bd\2"+
		"\u0c35\u0c34\3\2\2\2\u0c35\u0c36\3\2\2\2\u0c36\u0c40\3\2\2\2\u0c37\u0c38"+
		"\5\u0178\u00bd\2\u0c38\u0c39\7G\2\2\u0c39\u0c3b\7.\2\2\u0c3a\u0c3c\7\u00fb"+
		"\2\2\u0c3b\u0c3a\3\2\2\2\u0c3b\u0c3c\3\2\2\2\u0c3c\u0c3d\3\2\2\2\u0c3d"+
		"\u0c3e\5\u01fa\u00fe\2\u0c3e\u0c40\3\2\2\2\u0c3f\u0c2e\3\2\2\2\u0c3f\u0c37"+
		"\3\2\2\2\u0c40\u0177\3\2\2\2\u0c41\u0c42\7\u0177\2\2\u0c42\u0c43\7\u01ba"+
		"\2\2\u0c43\u0c44\5\u01fa\u00fe\2\u0c44\u0179\3\2\2\2\u0c45\u0c46\7\u00a3"+
		"\2\2\u0c46\u0c47\7.\2\2\u0c47\u0c4c\5\u017c\u00bf\2\u0c48\u0c49\7\u0200"+
		"\2\2\u0c49\u0c4b\5\u017c\u00bf\2\u0c4a\u0c48\3\2\2\2\u0c4b\u0c4e\3\2\2"+
		"\2\u0c4c\u0c4a\3\2\2\2\u0c4c\u0c4d\3\2\2\2\u0c4d\u0c50\3\2\2\2\u0c4e\u0c4c"+
		"\3\2\2\2\u0c4f\u0c51\5\u0184\u00c3\2\u0c50\u0c4f\3\2\2\2\u0c50\u0c51\3"+
		"\2\2\2\u0c51\u0c60\3\2\2\2\u0c52\u0c5d\5\u0184\u00c3\2\u0c53\u0c54\7\u00a3"+
		"\2\2\u0c54\u0c55\7.\2\2\u0c55\u0c5a\5\u017c\u00bf\2\u0c56\u0c57\7\u0200"+
		"\2\2\u0c57\u0c59\5\u017c\u00bf\2\u0c58\u0c56\3\2\2\2\u0c59\u0c5c\3\2\2"+
		"\2\u0c5a\u0c58\3\2\2\2\u0c5a\u0c5b\3\2\2\2\u0c5b\u0c5e\3\2\2\2\u0c5c\u0c5a"+
		"\3\2\2\2\u0c5d\u0c53\3\2\2\2\u0c5d\u0c5e\3\2\2\2\u0c5e\u0c60\3\2\2\2\u0c5f"+
		"\u0c45\3\2\2\2\u0c5f\u0c52\3\2\2\2\u0c60\u017b\3\2\2\2\u0c61\u0c65\5\u0180"+
		"\u00c1\2\u0c62\u0c65\5\u017e\u00c0\2\u0c63\u0c65\5\u01fe\u0100\2\u0c64"+
		"\u0c61\3\2\2\2\u0c64\u0c62\3\2\2\2\u0c64\u0c63\3\2\2\2\u0c65\u017d\3\2"+
		"\2\2\u0c66\u0c67\t%\2\2\u0c67\u0c68\7\u01fa\2\2\u0c68\u0c6d\5\u0182\u00c2"+
		"\2\u0c69\u0c6a\7\u0200\2\2\u0c6a\u0c6c\5\u0182\u00c2\2\u0c6b\u0c69\3\2"+
		"\2\2\u0c6c\u0c6f\3\2\2\2\u0c6d\u0c6b\3\2\2\2\u0c6d\u0c6e\3\2\2\2\u0c6e"+
		"\u0c70\3\2\2\2\u0c6f\u0c6d\3\2\2\2\u0c70\u0c71\7\u01fb\2\2\u0c71\u017f"+
		"\3\2\2\2\u0c72\u0c73\7\u00a4\2\2\u0c73\u0c74\7\u0164\2\2\u0c74\u0c75\7"+
		"\u01fa\2\2\u0c75\u0c7a\5\u0182\u00c2\2\u0c76\u0c77\7\u0200\2\2\u0c77\u0c79"+
		"\5\u0182\u00c2\2\u0c78\u0c76\3\2\2\2\u0c79\u0c7c\3\2\2\2\u0c7a\u0c78\3"+
		"\2\2\2\u0c7a\u0c7b\3\2\2\2\u0c7b\u0c7d\3\2\2\2\u0c7c\u0c7a\3\2\2\2\u0c7d"+
		"\u0c7e\7\u01fb\2\2\u0c7e\u0181\3\2\2\2\u0c7f\u0c83\5\u017e\u00c0\2\u0c80"+
		"\u0c83\5\u01f8\u00fd\2\u0c81\u0c83\5\u01fe\u0100\2\u0c82\u0c7f\3\2\2\2"+
		"\u0c82\u0c80\3\2\2\2\u0c82\u0c81\3\2\2\2\u0c83\u0183\3\2\2\2\u0c84\u0c85"+
		"\7\u00a6\2\2\u0c85\u0c86\5\u01fa\u00fe\2\u0c86\u0185\3\2\2\2\u0c87\u0c8b"+
		"\7\u00e8\2\2\u0c88\u0c8a\5\u0188\u00c5\2\u0c89\u0c88\3\2\2\2\u0c8a\u0c8d"+
		"\3\2\2\2\u0c8b\u0c89\3\2\2\2\u0c8b\u0c8c\3\2\2\2\u0c8c\u0c8f\3\2\2\2\u0c8d"+
		"\u0c8b\3\2\2\2\u0c8e\u0c90\5\u018a\u00c6\2\u0c8f\u0c8e\3\2\2\2\u0c8f\u0c90"+
		"\3\2\2\2\u0c90\u0c94\3\2\2\2\u0c91\u0c93\5\u018c\u00c7\2\u0c92\u0c91\3"+
		"\2\2\2\u0c93\u0c96\3\2\2\2\u0c94\u0c92\3\2\2\2\u0c94\u0c95\3\2\2\2\u0c95"+
		"\u0c97\3\2\2\2\u0c96\u0c94\3\2\2\2\u0c97\u0c98\5\u018e\u00c8\2\u0c98\u0187"+
		"\3\2\2\2\u0c99\u0c9a\t&\2\2\u0c9a\u0ca2\7\u00f0\2\2\u0c9b\u0c9f\7\u019f"+
		"\2\2\u0c9c\u0ca0\7r\2\2\u0c9d\u0c9e\7\u016c\2\2\u0c9e\u0ca0\7\u013b\2"+
		"\2\u0c9f\u0c9c\3\2\2\2\u0c9f\u0c9d\3\2\2\2\u0ca0\u0ca2\3\2\2\2\u0ca1\u0c99"+
		"\3\2\2\2\u0ca1\u0c9b\3\2\2\2\u0ca2\u0189\3\2\2\2\u0ca3\u0ca4\7\u0145\2"+
		"\2\u0ca4\u0ca5\t\'\2\2\u0ca5\u0ca6\7\u014f\2\2\u0ca6\u018b\3\2\2\2\u0ca7"+
		"\u0ca8\7\u013b\2\2\u0ca8\u0ca9\5\u02b2\u015a\2\u0ca9\u0caa\7\u010e\2\2"+
		"\u0caa\u0cab\7\u01fa\2\2\u0cab\u0cac\5\u0144\u00a3\2\u0cac\u0cad\7\u01fb"+
		"\2\2\u0cad\u0cb1\5\u0190\u00c9\2\u0cae\u0cb0\5\u0188\u00c5\2\u0caf\u0cae"+
		"\3\2\2\2\u0cb0\u0cb3\3\2\2\2\u0cb1\u0caf\3\2\2\2\u0cb1\u0cb2\3\2\2\2\u0cb2"+
		"\u018d\3\2\2\2\u0cb3\u0cb1\3\2\2\2\u0cb4\u0cb5\7\u00dc\2\2\u0cb5\u0cb7"+
		"\5\u02b4\u015b\2\u0cb6\u0cb4\3\2\2\2\u0cb6\u0cb7\3\2\2\2\u0cb7\u0cb8\3"+
		"\2\2\2\u0cb8\u0cbc\5\u0190\u00c9\2\u0cb9\u0cbb\5\u0188\u00c5\2\u0cba\u0cb9"+
		"\3\2\2\2\u0cbb\u0cbe\3\2\2\2\u0cbc\u0cba\3\2\2\2\u0cbc\u0cbd\3\2\2\2\u0cbd"+
		"\u0cbf\3\2\2\2\u0cbe\u0cbc\3\2\2\2\u0cbf\u0cc0\5\u0198\u00cd\2\u0cc0\u018f"+
		"\3\2\2\2\u0cc1\u0cc3\5\u0192\u00ca\2\u0cc2\u0cc1\3\2\2\2\u0cc2\u0cc3\3"+
		"\2\2\2\u0cc3\u0cc4\3\2\2\2\u0cc4\u0cc5\7r\2\2\u0cc5\u0cc6\7.\2\2\u0cc6"+
		"\u0cc7\5\u0194\u00cb\2\u0cc7\u0cc8\7\u00e0\2\2\u0cc8\u0cc9\5\u0194\u00cb"+
		"\2\u0cc9\u0191\3\2\2\2\u0cca\u0ccb\7\u011f\2\2\u0ccb\u0ccc\7.\2\2\u0ccc"+
		"\u0ccd\5\u0194\u00cb\2\u0ccd\u0193\3\2\2\2\u0cce\u0ccf\7\u01fa\2\2\u0ccf"+
		"\u0cd4\5\u0196\u00cc\2\u0cd0\u0cd1\7\u0200\2\2\u0cd1\u0cd3\5\u0196\u00cc"+
		"\2\u0cd2\u0cd0\3\2\2\2\u0cd3\u0cd6\3\2\2\2\u0cd4\u0cd2\3\2\2\2\u0cd4\u0cd5"+
		"\3\2\2\2\u0cd5\u0cd7\3\2\2\2\u0cd6\u0cd4\3\2\2\2\u0cd7\u0cd8\7\u01fb\2"+
		"\2\u0cd8\u0195\3\2\2\2\u0cd9\u0cdb\5\u01fe\u0100\2\u0cda\u0cdc\5\u0290"+
		"\u0149\2\u0cdb\u0cda\3\2\2\2\u0cdb\u0cdc\3\2\2\2\u0cdc\u0197\3\2\2\2\u0cdd"+
		"\u0cdf\5\u019a\u00ce\2\u0cde\u0cdd\3\2\2\2\u0cde\u0cdf\3\2\2\2\u0cdf\u0ce0"+
		"\3\2\2\2\u0ce0\u0ce1\7\u01fa\2\2\u0ce1\u0ce6\5\u019c\u00cf\2\u0ce2\u0ce3"+
		"\7\u0200\2\2\u0ce3\u0ce5\5\u019c\u00cf\2\u0ce4\u0ce2\3\2\2\2\u0ce5\u0ce8"+
		"\3\2\2\2\u0ce6\u0ce4\3\2\2\2\u0ce6\u0ce7\3\2\2\2\u0ce7\u0ce9\3\2\2\2\u0ce8"+
		"\u0ce6\3\2\2\2\u0ce9\u0cea\7\u01fb\2\2\u0cea\u0199\3\2\2\2\u0ceb\u0cf1"+
		"\7\u0150\2\2\u0cec\u0cf2\7\u01a3\2\2\u0ced\u0cef\7\u01a5\2\2\u0cee\u0cf0"+
		"\7\17\2\2\u0cef\u0cee\3\2\2\2\u0cef\u0cf0\3\2\2\2\u0cf0\u0cf2\3\2\2\2"+
		"\u0cf1\u0cec\3\2\2\2\u0cf1\u0ced\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0cf5"+
		"\3\2\2\2\u0cf3\u0cf4\t(\2\2\u0cf4\u0cf6\7\u0114\2\2\u0cf5\u0cf3\3\2\2"+
		"\2\u0cf5\u0cf6\3\2\2\2\u0cf6\u0cf8\3\2\2\2\u0cf7\u0cf9\5\u01a0\u00d1\2"+
		"\u0cf8\u0cf7\3\2\2\2\u0cf8\u0cf9\3\2\2\2\u0cf9\u019b\3\2\2\2\u0cfa\u0d00"+
		"\7\u01a3\2\2\u0cfb\u0cfd\7\u01a5\2\2\u0cfc\u0cfe\7\17\2\2\u0cfd\u0cfc"+
		"\3\2\2\2\u0cfd\u0cfe\3\2\2\2\u0cfe\u0d00\3\2\2\2\u0cff\u0cfa\3\2\2\2\u0cff"+
		"\u0cfb\3\2\2\2\u0cff\u0d00\3\2\2\2\u0d00\u0d01\3\2\2\2\u0d01\u0d03\5\u019e"+
		"\u00d0\2\u0d02\u0d04\5\u01a4\u00d3\2\u0d03\u0d02\3\2\2\2\u0d03\u0d04\3"+
		"\2\2\2\u0d04\u0d05\3\2\2\2\u0d05\u0d06\7\u0211\2\2\u0d06\u0d07\5\u01fe"+
		"\u0100\2\u0d07\u019d\3\2\2\2\u0d08\u0d09\5\u0224\u0113\2\u0d09\u019f\3"+
		"\2\2\2\u0d0a\u0d0b\7\u00c4\2\2\u0d0b\u0d0c\7\u01fa\2\2\u0d0c\u0d0d\5\u01fe"+
		"\u0100\2\u0d0d\u0d0f\7\u01fb\2\2\u0d0e\u0d10\5\u01a2\u00d2\2\u0d0f\u0d0e"+
		"\3\2\2\2\u0d0f\u0d10\3\2\2\2\u0d10\u01a1\3\2\2\2\u0d11\u0d12\7\u01a2\2"+
		"\2\u0d12\u0d13\7\u01fa\2\2\u0d13\u0d14\5\u01fa\u00fe\2\u0d14\u0d15\7\u01fb"+
		"\2\2\u0d15\u01a3\3\2\2\2\u0d16\u0d18\7\u0114\2\2\u0d17\u0d19\7\u0169\2"+
		"\2\u0d18\u0d17\3\2\2\2\u0d18\u0d19\3\2\2\2\u0d19\u0d1a\3\2\2\2\u0d1a\u0d1b"+
		"\7.\2\2\u0d1b\u0d20\5\u01a6\u00d4\2\u0d1c\u0d1d\7\u0200\2\2\u0d1d\u0d1f"+
		"\5\u01a6\u00d4\2\u0d1e\u0d1c\3\2\2\2\u0d1f\u0d22\3\2\2\2\u0d20\u0d1e\3"+
		"\2\2\2\u0d20\u0d21\3\2\2\2\u0d21\u01a5\3\2\2\2\u0d22\u0d20\3\2\2\2\u0d23"+
		"\u0d25\5\u01fe\u0100\2\u0d24\u0d26\t)\2\2\u0d25\u0d24\3\2\2\2\u0d25\u0d26"+
		"\3\2\2\2\u0d26\u0d29\3\2\2\2\u0d27\u0d28\7\u0105\2\2\u0d28\u0d2a\t*\2"+
		"\2\u0d29\u0d27\3\2\2\2\u0d29\u0d2a\3\2\2\2\u0d2a\u01a7\3\2\2\2\u0d2b\u0d2c"+
		"\7\u009b\2\2\u0d2c\u0d2e\7\u01a3\2\2\u0d2d\u0d2f\5\u01aa\u00d6\2\u0d2e"+
		"\u0d2d\3\2\2\2\u0d2e\u0d2f\3\2\2\2\u0d2f\u0d31\3\2\2\2\u0d30\u0d32\5\u01ac"+
		"\u00d7\2\u0d31\u0d30\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32\u01a9\3\2\2\2\u0d33"+
		"\u0d34\7\u010a\2\2\u0d34\u0d39\5\u02d6\u016c\2\u0d35\u0d36\7\u0200\2\2"+
		"\u0d36\u0d38\5\u02d6\u016c\2\u0d37\u0d35\3\2\2\2\u0d38\u0d3b\3\2\2\2\u0d39"+
		"\u0d37\3\2\2\2\u0d39\u0d3a\3\2\2\2\u0d3a\u01ab\3\2\2\2\u0d3b\u0d39\3\2"+
		"\2\2\u0d3c\u0d3d\7\u016e\2\2\u0d3d\u0d42\7\u00d6\2\2\u0d3e\u0d42\7\u0103"+
		"\2\2\u0d3f\u0d40\7\u01b3\2\2\u0d40\u0d42\5\u01fe\u0100\2\u0d41\u0d3c\3"+
		"\2\2\2\u0d41\u0d3e\3\2\2\2\u0d41\u0d3f\3\2\2\2\u0d42\u01ad\3\2\2\2\u0d43"+
		"\u0d44\7\u01a3\2\2\u0d44\u0d45\5\u01dc\u00ef\2\u0d45\u0d47\5\u01b0\u00d9"+
		"\2\u0d46\u0d48\5\u0294\u014b\2\u0d47\u0d46\3\2\2\2\u0d47\u0d48\3\2\2\2"+
		"\u0d48\u0d4a\3\2\2\2\u0d49\u0d4b\5\u01de\u00f0\2\u0d4a\u0d49\3\2\2\2\u0d4a"+
		"\u0d4b\3\2\2\2\u0d4b\u0d4d\3\2\2\2\u0d4c\u0d4e\5\u01e0\u00f1\2\u0d4d\u0d4c"+
		"\3\2\2\2\u0d4d\u0d4e\3\2\2\2\u0d4e\u01af\3\2\2\2\u0d4f\u0d5f\7\u0163\2"+
		"\2\u0d50\u0d55\5\u01b2\u00da\2\u0d51\u0d52\7\u0200\2\2\u0d52\u0d54\5\u01b2"+
		"\u00da\2\u0d53\u0d51\3\2\2\2\u0d54\u0d57\3\2\2\2\u0d55\u0d53\3\2\2\2\u0d55"+
		"\u0d56\3\2\2\2\u0d56\u0d60\3\2\2\2\u0d57\u0d55\3\2\2\2\u0d58\u0d59\7\u01aa"+
		"\2\2\u0d59\u0d5a\7\u01fa\2\2\u0d5a\u0d5b\5\u02fe\u0180\2\u0d5b\u0d5c\7"+
		"\u01fb\2\2\u0d5c\u0d5d\7\u0211\2\2\u0d5d\u0d5e\5\u01fe\u0100\2\u0d5e\u0d60"+
		"\3\2\2\2\u0d5f\u0d50\3\2\2\2\u0d5f\u0d58\3\2\2\2\u0d60\u01b1\3\2\2\2\u0d61"+
		"\u0d62\5\u02d6\u016c\2\u0d62\u0d63\7\u0211\2\2\u0d63\u0d64\5\u01fe\u0100"+
		"\2\u0d64\u0d73\3\2\2\2\u0d65\u0d66\7\u01fa\2\2\u0d66\u0d6b\5\u02d6\u016c"+
		"\2\u0d67\u0d68\7\u0200\2\2\u0d68\u0d6a\5\u02d6\u016c\2\u0d69\u0d67\3\2"+
		"\2\2\u0d6a\u0d6d\3\2\2\2\u0d6b\u0d69\3\2\2\2\u0d6b\u0d6c\3\2\2\2\u0d6c"+
		"\u0d6e\3\2\2\2\u0d6d\u0d6b\3\2\2\2\u0d6e\u0d6f\7\u01fb\2\2\u0d6f\u0d70"+
		"\7\u0211\2\2\u0d70\u0d71\5\u0144\u00a3\2\u0d71\u0d73\3\2\2\2\u0d72\u0d61"+
		"\3\2\2\2\u0d72\u0d65\3\2\2\2\u0d73\u01b3\3\2\2\2\u0d74\u0d76\7n\2\2\u0d75"+
		"\u0d77\7\u009e\2\2\u0d76\u0d75\3\2\2\2\u0d76\u0d77\3\2\2\2\u0d77\u0d78"+
		"\3\2\2\2\u0d78\u0d7a\5\u01dc\u00ef\2\u0d79\u0d7b\5\u0294\u014b\2\u0d7a"+
		"\u0d79\3\2\2\2\u0d7a\u0d7b\3\2\2\2\u0d7b\u0d7d\3\2\2\2\u0d7c\u0d7e\5\u01de"+
		"\u00f0\2\u0d7d\u0d7c\3\2\2\2\u0d7d\u0d7e\3\2\2\2\u0d7e\u0d80\3\2\2\2\u0d7f"+
		"\u0d81\5\u01e0\u00f1\2\u0d80\u0d7f\3\2\2\2\u0d80\u0d81\3\2\2\2\u0d81\u01b5"+
		"\3\2\2\2\u0d82\u0d85\7\u00b9\2\2\u0d83\u0d86\5\u01b8\u00dd\2\u0d84\u0d86"+
		"\5\u01ba\u00de\2\u0d85\u0d83\3\2\2\2\u0d85\u0d84\3\2\2\2\u0d86\u01b7\3"+
		"\2\2\2\u0d87\u0d8d\5\u01c4\u00e3\2\u0d88\u0d8a\5\u01c6\u00e4\2\u0d89\u0d8b"+
		"\5\u01de\u00f0\2\u0d8a\u0d89\3\2\2\2\u0d8a\u0d8b\3\2\2\2\u0d8b\u0d8e\3"+
		"\2\2\2\u0d8c\u0d8e\5\u013a\u009e\2\u0d8d\u0d88\3\2\2\2\u0d8d\u0d8c\3\2"+
		"\2\2\u0d8e\u0d90\3\2\2\2\u0d8f\u0d91\5\u01e0\u00f1\2\u0d90\u0d8f\3\2\2"+
		"\2\u0d90\u0d91\3\2\2\2\u0d91\u01b9\3\2\2\2\u0d92\u0d94\7\17\2\2\u0d93"+
		"\u0d95\5\u01bc\u00df\2\u0d94\u0d93\3\2\2\2\u0d95\u0d96\3\2\2\2\u0d96\u0d94"+
		"\3\2\2\2\u0d96\u0d97\3\2\2\2\u0d97\u0d9a\3\2\2\2\u0d98\u0d9a\5\u01be\u00e0"+
		"\2\u0d99\u0d92\3\2\2\2\u0d99\u0d98\3\2\2\2\u0d9a\u0d9b\3\2\2\2\u0d9b\u0d9c"+
		"\5\u013a\u009e\2\u0d9c\u01bb\3\2\2\2\u0d9d\u0d9f\5\u01c4\u00e3\2\u0d9e"+
		"\u0da0\5\u01c6\u00e4\2\u0d9f\u0d9e\3\2\2\2\u0d9f\u0da0\3\2\2\2\u0da0\u0da2"+
		"\3\2\2\2\u0da1\u0da3\5\u01e0\u00f1\2\u0da2\u0da1\3\2\2\2\u0da2\u0da3\3"+
		"\2\2\2\u0da3\u01bd\3\2\2\2\u0da4\u0da6\t+\2\2\u0da5\u0da4\3\2\2\2\u0da5"+
		"\u0da6\3\2\2\2\u0da6\u0da8\3\2\2\2\u0da7\u0da9\5\u01c0\u00e1\2\u0da8\u0da7"+
		"\3\2\2\2\u0da9\u0daa\3\2\2\2\u0daa\u0da8\3\2\2\2\u0daa\u0dab\3\2\2\2\u0dab"+
		"\u0dad\3\2\2\2\u0dac\u0dae\5\u01c2\u00e2\2\u0dad\u0dac\3\2\2\2\u0dad\u0dae"+
		"\3\2\2\2\u0dae\u01bf\3\2\2\2\u0daf\u0db0\7\u01b6\2\2\u0db0\u0db1\5\u01fa"+
		"\u00fe\2\u0db1\u0db3\7\u0186\2\2\u0db2\u0db4\5\u01bc\u00df\2\u0db3\u0db2"+
		"\3\2\2\2\u0db4\u0db5\3\2\2\2\u0db5\u0db3\3\2\2\2\u0db5\u0db6\3\2\2\2\u0db6"+
		"\u01c1\3\2\2\2\u0db7\u0db9\7|\2\2\u0db8\u0dba\5\u01bc\u00df\2\u0db9\u0db8"+
		"\3\2\2\2\u0dba\u0dbb\3\2\2\2\u0dbb\u0db9\3\2\2\2\u0dbb\u0dbc\3\2\2\2\u0dbc"+
		"\u01c3\3\2\2\2\u0dbd\u0dbe\7\u00c0\2\2\u0dbe\u0dca\5\u01dc\u00ef\2\u0dbf"+
		"\u0dc0\7\u01fa\2\2\u0dc0\u0dc5\5\u02d6\u016c\2\u0dc1\u0dc2\7\u0200\2\2"+
		"\u0dc2\u0dc4\5\u02d6\u016c\2\u0dc3\u0dc1\3\2\2\2\u0dc4\u0dc7\3\2\2\2\u0dc5"+
		"\u0dc3\3\2\2\2\u0dc5\u0dc6\3\2\2\2\u0dc6\u0dc8\3\2\2\2\u0dc7\u0dc5\3\2"+
		"\2\2\u0dc8\u0dc9\7\u01fb\2\2\u0dc9\u0dcb\3\2\2\2\u0dca\u0dbf\3\2\2\2\u0dca"+
		"\u0dcb\3\2\2\2\u0dcb\u01c5\3\2\2\2\u0dcc\u0dd0\7\u01ab\2\2\u0dcd\u0dd1"+
		"\5\u01f8\u00fd\2\u0dce\u0dd1\5\u02d0\u0169\2\u0dcf\u0dd1\5\u01f4\u00fb"+
		"\2\u0dd0\u0dcd\3\2\2\2\u0dd0\u0dce\3\2\2\2\u0dd0\u0dcf\3\2\2\2\u0dd1\u01c7"+
		"\3\2\2\2\u0dd2\u0dd3\7\u00e2\2\2\u0dd3\u0dd4\7\u00c0\2\2\u0dd4\u0dd6\5"+
		"\u02d8\u016d\2\u0dd5\u0dd7\5\u0290\u0149\2\u0dd6\u0dd5\3\2\2\2\u0dd6\u0dd7"+
		"\3\2\2\2\u0dd7\u0dd8\3\2\2\2\u0dd8\u0dd9\7\u01a8\2\2\u0dd9\u0dda\5\u01d2"+
		"\u00ea\2\u0dda\u0ddb\7\u010e\2\2\u0ddb\u0ddc\7\u01fa\2\2\u0ddc\u0ddd\5"+
		"\u01fa\u00fe\2\u0ddd\u0de6\7\u01fb\2\2\u0dde\u0de0\5\u01ca\u00e6\2\u0ddf"+
		"\u0de1\5\u01d0\u00e9\2\u0de0\u0ddf\3\2\2\2\u0de0\u0de1\3\2\2\2\u0de1\u0de7"+
		"\3\2\2\2\u0de2\u0de4\5\u01d0\u00e9\2\u0de3\u0de5\5\u01ca\u00e6\2\u0de4"+
		"\u0de3\3\2\2\2\u0de4\u0de5\3\2\2\2\u0de5\u0de7\3\2\2\2\u0de6\u0dde\3\2"+
		"\2\2\u0de6\u0de2\3\2\2\2\u0de6\u0de7\3\2\2\2\u0de7\u0de9\3\2\2\2\u0de8"+
		"\u0dea\5\u01e0\u00f1\2\u0de9\u0de8\3\2\2\2\u0de9\u0dea\3\2\2\2\u0dea\u01c9"+
		"\3\2\2\2\u0deb\u0dec\7\u01b6\2\2\u0dec\u0ded\7\u00de\2\2\u0ded\u0dee\7"+
		"\u0186\2\2\u0dee\u0def\7\u01a3\2\2\u0def\u0df0\7\u0163\2\2\u0df0\u0df5"+
		"\5\u01cc\u00e7\2\u0df1\u0df2\7\u0200\2\2\u0df2\u0df4\5\u01cc\u00e7\2\u0df3"+
		"\u0df1\3\2\2\2\u0df4\u0df7\3\2\2\2\u0df5\u0df3\3\2\2\2\u0df5\u0df6\3\2"+
		"\2\2\u0df6\u0df9\3\2\2\2\u0df7\u0df5\3\2\2\2\u0df8\u0dfa\5\u0294\u014b"+
		"\2\u0df9\u0df8\3\2\2\2\u0df9\u0dfa\3\2\2\2\u0dfa\u0dfc\3\2\2\2\u0dfb\u0dfd"+
		"\5\u01ce\u00e8\2\u0dfc\u0dfb\3\2\2\2\u0dfc\u0dfd\3\2\2\2\u0dfd\u01cb\3"+
		"\2\2\2\u0dfe\u0dff\5\u02d6\u016c\2\u0dff\u0e00\7\u0211\2\2\u0e00\u0e01"+
		"\5\u01fe\u0100\2\u0e01\u01cd\3\2\2\2\u0e02\u0e03\7n\2\2\u0e03\u0e04\5"+
		"\u0294\u014b\2\u0e04\u01cf\3\2\2\2\u0e05\u0e06\7\u01b6\2\2\u0e06\u0e07"+
		"\7\u0102\2\2\u0e07\u0e08\7\u00de\2\2\u0e08\u0e09\7\u0186\2\2\u0e09\u0e15"+
		"\7\u00b9\2\2\u0e0a\u0e0b\7\u01fa\2\2\u0e0b\u0e10\5\u02d6\u016c\2\u0e0c"+
		"\u0e0d\7\u0200\2\2\u0e0d\u0e0f\5\u02d6\u016c\2\u0e0e\u0e0c\3\2\2\2\u0e0f"+
		"\u0e12\3\2\2\2\u0e10\u0e0e\3\2\2\2\u0e10\u0e11\3\2\2\2\u0e11\u0e13\3\2"+
		"\2\2\u0e12\u0e10\3\2\2\2\u0e13\u0e14\7\u01fb\2\2\u0e14\u0e16\3\2\2\2\u0e15"+
		"\u0e0a\3\2\2\2\u0e15\u0e16\3\2\2\2\u0e16\u0e17\3\2\2\2\u0e17\u0e18\7\u01ab"+
		"\2\2\u0e18\u0e1a\5\u01f8\u00fd\2\u0e19\u0e1b\5\u0294\u014b\2\u0e1a\u0e19"+
		"\3\2\2\2\u0e1a\u0e1b\3\2\2\2\u0e1b\u01d1\3\2\2\2\u0e1c\u0e22\5\u02d8\u016d"+
		"\2\u0e1d\u0e1e\7\u01fa\2\2\u0e1e\u0e1f\5\u013a\u009e\2\u0e1f\u0e20\7\u01fb"+
		"\2\2\u0e20\u0e22\3\2\2\2\u0e21\u0e1c\3\2\2\2\u0e21\u0e1d\3\2\2\2\u0e22"+
		"\u0e24\3\2\2\2\u0e23\u0e25\5\u0290\u0149\2\u0e24\u0e23\3\2\2\2\u0e24\u0e25"+
		"\3\2\2\2\u0e25\u01d3\3\2\2\2\u0e26\u0e27\7\u00d5\2\2\u0e27\u0e28\7\u0184"+
		"\2\2\u0e28\u0e2d\5\u01d8\u00ed\2\u0e29\u0e2a\7\u0200\2\2\u0e2a\u0e2c\5"+
		"\u01d8\u00ed\2\u0e2b\u0e29\3\2\2\2\u0e2c\u0e2f\3\2\2\2\u0e2d\u0e2b\3\2"+
		"\2\2\u0e2d\u0e2e\3\2\2\2\u0e2e\u0e30\3\2\2\2\u0e2f\u0e2d\3\2\2\2\u0e30"+
		"\u0e31\7\u00ac\2\2\u0e31\u0e32\5\u01da\u00ee\2\u0e32\u0e34\7\u00e7\2\2"+
		"\u0e33\u0e35\5\u01d6\u00ec\2\u0e34\u0e33\3\2\2\2\u0e34\u0e35\3\2\2\2\u0e35"+
		"\u01d5\3\2\2\2\u0e36\u0e37\7\u01b3\2\2\u0e37\u0e3a\5\u01fe\u0100\2\u0e38"+
		"\u0e3a\7\u0103\2\2\u0e39\u0e36\3\2\2\2\u0e39\u0e38\3\2\2\2\u0e3a\u01d7"+
		"\3\2\2\2\u0e3b\u0e3d\5\u02d8\u016d\2\u0e3c\u0e3e\5\u028c\u0147\2\u0e3d"+
		"\u0e3c\3\2\2\2\u0e3d\u0e3e\3\2\2\2\u0e3e\u01d9\3\2\2\2\u0e3f\u0e40\7\u014d"+
		"\2\2\u0e40\u0e4c\7\u0166\2\2\u0e41\u0e42\7\u014d\2\2\u0e42\u0e4c\7\u008a"+
		"\2\2\u0e43\u0e45\7\u0166\2\2\u0e44\u0e46\7\u01a3\2\2\u0e45\u0e44\3\2\2"+
		"\2\u0e45\u0e46\3\2\2\2\u0e46\u0e4c\3\2\2\2\u0e47\u0e48\7\u0166\2\2\u0e48"+
		"\u0e49\7\u014d\2\2\u0e49\u0e4c\7\u008a\2\2\u0e4a\u0e4c\7\u008a\2\2\u0e4b"+
		"\u0e3f\3\2\2\2\u0e4b\u0e41\3\2\2\2\u0e4b\u0e43\3\2\2\2\u0e4b\u0e47\3\2"+
		"\2\2\u0e4b\u0e4a\3\2\2\2\u0e4c\u01db\3\2\2\2\u0e4d\u0e54\5\u01e6\u00f4"+
		"\2\u0e4e\u0e4f\7\u010f\2\2\u0e4f\u0e50\7\u01fa\2\2\u0e50\u0e51\5\u01e6"+
		"\u00f4\2\u0e51\u0e52\7\u01fb\2\2\u0e52\u0e54\3\2\2\2\u0e53\u0e4d\3\2\2"+
		"\2\u0e53\u0e4e\3\2\2\2\u0e54\u0e56\3\2\2\2\u0e55\u0e57\5\u0290\u0149\2"+
		"\u0e56\u0e55\3\2\2\2\u0e56\u0e57\3\2\2\2\u0e57\u01dd\3\2\2\2\u0e58\u0e59"+
		"\t\30\2\2\u0e59\u0e5e\5\u01fe\u0100\2\u0e5a\u0e5b\7\u0200\2\2\u0e5b\u0e5d"+
		"\5\u01fe\u0100\2\u0e5c\u0e5a\3\2\2\2\u0e5d\u0e60\3\2\2\2\u0e5e\u0e5c\3"+
		"\2\2\2\u0e5e\u0e5f\3\2\2\2\u0e5f\u0e61\3\2\2\2\u0e60\u0e5e\3\2\2\2\u0e61"+
		"\u0e62\5\u029a\u014e\2\u0e62\u01df\3\2\2\2\u0e63\u0e64\7\u00d7\2\2\u0e64"+
		"\u0e66\7\u0083\2\2\u0e65\u0e67\5\u01e2\u00f2\2\u0e66\u0e65\3\2\2\2\u0e66"+
		"\u0e67\3\2\2\2\u0e67\u0e69\3\2\2\2\u0e68\u0e6a\5\u0200\u0101\2\u0e69\u0e68"+
		"\3\2\2\2\u0e69\u0e6a\3\2\2\2\u0e6a\u0e6c\3\2\2\2\u0e6b\u0e6d\5\u01e4\u00f3"+
		"\2\u0e6c\u0e6b\3\2\2\2\u0e6c\u0e6d\3\2\2\2\u0e6d\u01e1\3\2\2\2\u0e6e\u0e6f"+
		"\7\u00c0\2\2\u0e6f\u0e70\5\u02d8\u016d\2\u0e70\u01e3\3\2\2\2\u0e71\u0e72"+
		"\7\u013d\2\2\u0e72\u0e75\7\u00d3\2\2\u0e73\u0e76\7\u01a0\2\2\u0e74\u0e76"+
		"\5\u0200\u0101\2\u0e75\u0e73\3\2\2\2\u0e75\u0e74\3\2\2\2\u0e76\u01e5\3"+
		"\2\2\2\u0e77\u0e84\5\u01e8\u00f5\2\u0e78\u0e79\7\u01fa\2\2\u0e79\u0e7b"+
		"\5\u013a\u009e\2\u0e7a\u0e7c\5\u01ea\u00f6\2\u0e7b\u0e7a\3\2\2\2\u0e7b"+
		"\u0e7c\3\2\2\2\u0e7c\u0e7d\3\2\2\2\u0e7d\u0e7e\7\u01fb\2\2\u0e7e\u0e84"+
		"\3\2\2\2\u0e7f\u0e81\5\u02d8\u016d\2\u0e80\u0e82\5\u01ec\u00f7\2\u0e81"+
		"\u0e80\3\2\2\2\u0e81\u0e82\3\2\2\2\u0e82\u0e84\3\2\2\2\u0e83\u0e77\3\2"+
		"\2\2\u0e83\u0e78\3\2\2\2\u0e83\u0e7f\3\2\2\2\u0e84\u01e7\3\2\2\2\u0e85"+
		"\u0e92\t,\2\2\u0e86\u0e87\7\u01fa\2\2\u0e87\u0e88\5\u0144\u00a3\2\u0e88"+
		"\u0e89\7\u01fb\2\2\u0e89\u0e93\3\2\2\2\u0e8a\u0e8b\7\u01fa\2\2\u0e8b\u0e8c"+
		"\5\u01fe\u0100\2\u0e8c\u0e90\7\u01fb\2\2\u0e8d\u0e8e\7\u01fa\2\2\u0e8e"+
		"\u0e8f\7\u01fe\2\2\u0e8f\u0e91\7\u01fb\2\2\u0e90\u0e8d\3\2\2\2\u0e90\u0e91"+
		"\3\2\2\2\u0e91\u0e93\3\2\2\2\u0e92\u0e86\3\2\2\2\u0e92\u0e8a\3\2\2\2\u0e93"+
		"\u01e9\3\2\2\2\u0e94\u0e9d\7\u01ba\2\2\u0e95\u0e96\7\u0137\2\2\u0e96\u0e9e"+
		"\7\u010f\2\2\u0e97\u0e98\7:\2\2\u0e98\u0e9b\7\u0111\2\2\u0e99\u0e9a\7"+
		"J\2\2\u0e9a\u0e9c\5\u02ba\u015e\2\u0e9b\u0e99\3\2\2\2\u0e9b\u0e9c\3\2"+
		"\2\2\u0e9c\u0e9e\3\2\2\2\u0e9d\u0e95\3\2\2\2\u0e9d\u0e97\3\2\2\2\u0e9e"+
		"\u01eb\3\2\2\2\u0e9f\u0ea1\7\u0151\2\2\u0ea0\u0ea2\7(\2\2\u0ea1\u0ea0"+
		"\3\2\2\2\u0ea1\u0ea2\3\2\2\2\u0ea2\u0ea3\3\2\2\2\u0ea3\u0ea4\7\u01fa\2"+
		"\2\u0ea4\u0ea7\5\u01fe\u0100\2\u0ea5\u0ea6\7\u0200\2\2\u0ea6\u0ea8\5\u01fe"+
		"\u0100\2\u0ea7\u0ea5\3\2\2\2\u0ea7\u0ea8\3\2\2\2\u0ea8\u0ea9\3\2\2\2\u0ea9"+
		"\u0eab\7\u01fb\2\2\u0eaa\u0eac\5\u01ee\u00f8\2\u0eab\u0eaa\3\2\2\2\u0eab"+
		"\u0eac\3\2\2\2\u0eac\u01ed\3\2\2\2\u0ead\u0eae\7\u0159\2\2\u0eae\u0eaf"+
		"\7\u01fa\2\2\u0eaf\u0eb0\5\u01fe\u0100\2\u0eb0\u0eb1\7\u01fb\2\2\u0eb1"+
		"\u01ef\3\2\2\2\u0eb2\u0eb3\7Z\2\2\u0eb3\u0eb4\7\u01fa\2\2\u0eb4\u0eb5"+
		"\5\u0144\u00a3\2\u0eb5\u0eb6\7\u01fb\2\2\u0eb6\u0ec2\3\2\2\2\u0eb7\u0eb8"+
		"\5\u02ce\u0168\2\u0eb8\u0eb9\7\u0126\2\2\u0eb9\u0ec2\3\2\2\2\u0eba\u0ebb"+
		"\5\u02ce\u0168\2\u0ebb\u0ebc\7\u0125\2\2\u0ebc\u0ec2\3\2\2\2\u0ebd\u0ebe"+
		"\5\u02ce\u0168\2\u0ebe\u0ebf\7\u0122\2\2\u0ebf\u0ec2\3\2\2\2\u0ec0\u0ec2"+
		"\5\u01f2\u00fa\2\u0ec1\u0eb2\3\2\2\2\u0ec1\u0eb7\3\2\2\2\u0ec1\u0eba\3"+
		"\2\2\2\u0ec1\u0ebd\3\2\2\2\u0ec1\u0ec0\3\2\2\2\u0ec2\u01f1\3\2\2\2\u0ec3"+
		"\u0ec4\7\u0175\2\2\u0ec4\u01f3\3\2\2\2\u0ec5\u0ec6\5\u02d2\u016a\2\u0ec6"+
		"\u0ec7\7\u01fa\2\2\u0ec7\u0ec8\5\u01fe\u0100\2\u0ec8\u0ec9\7\u01fb\2\2"+
		"\u0ec9\u01f5\3\2\2\2\u0eca\u0ecb\5\u02d2\u016a\2\u0ecb\u0ecc\7\u01f3\2"+
		"\2\u0ecc\u0ecd\7\u008c\2\2\u0ecd\u0ece\7\u01fa\2\2\u0ece\u0ecf\5\u01fe"+
		"\u0100\2\u0ecf\u0ed0\7\u01fb\2\2\u0ed0\u0ee9\3\2\2\2\u0ed1\u0ee9\5\u01f4"+
		"\u00fb\2\u0ed2\u0ed3\5\u02d2\u016a\2\u0ed3\u0ed4\7\u01f3\2\2\u0ed4\u0ed5"+
		"\7\u0132\2\2\u0ed5\u0ed6\7\u01fa\2\2\u0ed6\u0ed7\5\u02fa\u017e\2\u0ed7"+
		"\u0ed8\7\u01fb\2\2\u0ed8\u0ee9\3\2\2\2\u0ed9\u0eda\5\u02d2\u016a\2\u0eda"+
		"\u0edb\7\u01f3\2\2\u0edb\u0edc\7\u00f6\2\2\u0edc\u0edd\7\u01fa\2\2\u0edd"+
		"\u0ede\5\u02fa\u017e\2\u0ede\u0edf\7\u01fb\2\2\u0edf\u0ee9\3\2\2\2\u0ee0"+
		"\u0ee1\5\u02d2\u016a\2\u0ee1\u0ee2\7\u01f3\2\2\u0ee2\u0ee3\7T\2\2\u0ee3"+
		"\u0ee9\3\2\2\2\u0ee4\u0ee5\5\u02d2\u016a\2\u0ee5\u0ee6\7\u01f3\2\2\u0ee6"+
		"\u0ee7\7\u00d3\2\2\u0ee7\u0ee9\3\2\2\2\u0ee8\u0eca\3\2\2\2\u0ee8\u0ed1"+
		"\3\2\2\2\u0ee8\u0ed2\3\2\2\2\u0ee8\u0ed9\3\2\2\2\u0ee8\u0ee0\3\2\2\2\u0ee8"+
		"\u0ee4\3\2\2\2\u0ee9\u01f7\3\2\2\2\u0eea\u0eec\7\u01fa\2\2\u0eeb\u0eed"+
		"\5\u01fe\u0100\2\u0eec\u0eeb\3\2\2\2\u0eec\u0eed\3\2\2\2\u0eed\u0ef2\3"+
		"\2\2\2\u0eee\u0eef\7\u0200\2\2\u0eef\u0ef1\5\u01fe\u0100\2\u0ef0\u0eee"+
		"\3\2\2\2\u0ef1\u0ef4\3\2\2\2\u0ef2\u0ef0\3\2\2\2\u0ef2\u0ef3\3\2\2\2\u0ef3"+
		"\u0ef5\3\2\2\2\u0ef4\u0ef2\3\2\2\2\u0ef5\u0ef6\7\u01fb\2\2\u0ef6\u01f9"+
		"\3\2\2\2\u0ef7\u0ef8\5\u01fe\u0100\2\u0ef8\u01fb\3\2\2\2\u0ef9\u0efa\5"+
		"\u01fe\u0100\2\u0efa\u01fd\3\2\2\2\u0efb\u0f00\5\u0202\u0102\2\u0efc\u0efd"+
		"\7\u0112\2\2\u0efd\u0eff\5\u01fe\u0100\2\u0efe\u0efc\3\2\2\2\u0eff\u0f02"+
		"\3\2\2\2\u0f00\u0efe\3\2\2\2\u0f00\u0f01\3\2\2\2\u0f01\u01ff\3\2\2\2\u0f02"+
		"\u0f00\3\2\2\2\u0f03\u0f04\5\u01fe\u0100\2\u0f04\u0201\3\2\2\2\u0f05\u0f0a"+
		"\5\u0204\u0103\2\u0f06\u0f07\7\22\2\2\u0f07\u0f09\5\u0204\u0103\2\u0f08"+
		"\u0f06\3\2\2\2\u0f09\u0f0c\3\2\2\2\u0f0a\u0f08\3\2\2\2\u0f0a\u0f0b\3\2"+
		"\2\2\u0f0b\u0203\3\2\2\2\u0f0c\u0f0a\3\2\2\2\u0f0d\u0f0e\7\u0102\2\2\u0f0e"+
		"\u0f11\5\u0204\u0103\2\u0f0f\u0f11\5\u0206\u0104\2\u0f10\u0f0d\3\2\2\2"+
		"\u0f10\u0f0f\3\2\2\2\u0f11\u0205\3\2\2\2\u0f12\u0f34\5\u0208\u0105\2\u0f13"+
		"\u0f15\7\u00c2\2\2\u0f14\u0f16\7\u0102\2\2\u0f15\u0f14\3\2\2\2\u0f15\u0f16"+
		"\3\2\2\2\u0f16\u0f30\3\2\2\2\u0f17\u0f31\7\u0104\2\2\u0f18\u0f31\7\u00ed"+
		"\2\2\u0f19\u0f31\7\u0131\2\2\u0f1a\u0f31\7\u00b5\2\2\u0f1b\u0f1c\7\n\2"+
		"\2\u0f1c\u0f31\7\u0163\2\2\u0f1d\u0f31\7~\2\2\u0f1e\u0f20\7\u010a\2\2"+
		"\u0f1f\u0f21\7\u019b\2\2\u0f20\u0f1f\3\2\2\2\u0f20\u0f21\3\2\2\2\u0f21"+
		"\u0f22\3\2\2\2\u0f22\u0f24\7\u01fa\2\2\u0f23\u0f25\7\u010f\2\2\u0f24\u0f23"+
		"\3\2\2\2\u0f24\u0f25\3\2\2\2\u0f25\u0f26\3\2\2\2\u0f26\u0f2b\5\u02e8\u0175"+
		"\2\u0f27\u0f28\7\u0200\2\2\u0f28\u0f2a\5\u02e8\u0175\2\u0f29\u0f27\3\2"+
		"\2\2\u0f2a\u0f2d\3\2\2\2\u0f2b\u0f29\3\2\2\2\u0f2b\u0f2c\3\2\2\2\u0f2c"+
		"\u0f2e\3\2\2\2\u0f2d\u0f2b\3\2\2\2\u0f2e\u0f2f\7\u01fb\2\2\u0f2f\u0f31"+
		"\3\2\2\2\u0f30\u0f17\3\2\2\2\u0f30\u0f18\3\2\2\2\u0f30\u0f19\3\2\2\2\u0f30"+
		"\u0f1a\3\2\2\2\u0f30\u0f1b\3\2\2\2\u0f30\u0f1d\3\2\2\2\u0f30\u0f1e\3\2"+
		"\2\2\u0f31\u0f33\3\2\2\2\u0f32\u0f13\3\2\2\2\u0f33\u0f36\3\2\2\2\u0f34"+
		"\u0f32\3\2\2\2\u0f34\u0f35\3\2\2\2\u0f35\u0f3a\3\2\2\2\u0f36\u0f34\3\2"+
		"\2\2\u0f37\u0f3a\5\u01f0\u00f9\2\u0f38\u0f3a\5\u01f6\u00fc\2\u0f39\u0f12"+
		"\3\2\2\2\u0f39\u0f37\3\2\2\2\u0f39\u0f38\3\2\2\2\u0f3a\u0207\3\2\2\2\u0f3b"+
		"\u0f42\5\u020c\u0107\2\u0f3c\u0f3e\5\u020a\u0106\2\u0f3d\u0f3f\7\u010a"+
		"\2\2\u0f3e\u0f3d\3\2\2\2\u0f3e\u0f3f\3\2\2\2\u0f3f\u0f40\3\2\2\2\u0f40"+
		"\u0f41\5\u0218\u010d\2\u0f41\u0f43\3\2\2\2\u0f42\u0f3c\3\2\2\2\u0f42\u0f43"+
		"\3\2\2\2\u0f43\u0209\3\2\2\2\u0f44\u0f45\t-\2\2\u0f45\u020b\3\2\2\2\u0f46"+
		"\u0f52\5\u020e\u0108\2\u0f47\u0f4e\7\u0211\2\2\u0f48\u0f4e\5\u0302\u0182"+
		"\2\u0f49\u0f4e\7\u0208\2\2\u0f4a\u0f4e\7\u020e\2\2\u0f4b\u0f4e\5\u0306"+
		"\u0184\2\u0f4c\u0f4e\5\u0304\u0183\2\u0f4d\u0f47\3\2\2\2\u0f4d\u0f48\3"+
		"\2\2\2\u0f4d\u0f49\3\2\2\2\u0f4d\u0f4a\3\2\2\2\u0f4d\u0f4b\3\2\2\2\u0f4d"+
		"\u0f4c\3\2\2\2\u0f4e\u0f4f\3\2\2\2\u0f4f\u0f51\5\u020e\u0108\2\u0f50\u0f4d"+
		"\3\2\2\2\u0f51\u0f54\3\2\2\2\u0f52\u0f50\3\2\2\2\u0f52\u0f53\3\2\2\2\u0f53"+
		"\u020d\3\2\2\2\u0f54\u0f52\3\2\2\2\u0f55\u0f64\5\u0218\u010d\2\u0f56\u0f58"+
		"\7\u0102\2\2\u0f57\u0f56\3\2\2\2\u0f57\u0f58\3\2\2\2\u0f58\u0f62\3\2\2"+
		"\2\u0f59\u0f5a\7\u00ac\2\2\u0f5a\u0f63\5\u0214\u010b\2\u0f5b\u0f5c\7\""+
		"\2\2\u0f5c\u0f63\5\u0216\u010c\2\u0f5d\u0f5e\5\u0210\u0109\2\u0f5e\u0f60"+
		"\5\u0218\u010d\2\u0f5f\u0f61\5\u0212\u010a\2\u0f60\u0f5f\3\2\2\2\u0f60"+
		"\u0f61\3\2\2\2\u0f61\u0f63\3\2\2\2\u0f62\u0f59\3\2\2\2\u0f62\u0f5b\3\2"+
		"\2\2\u0f62\u0f5d\3\2\2\2\u0f63\u0f65\3\2\2\2\u0f64\u0f57\3\2\2\2\u0f64"+
		"\u0f65\3\2\2\2\u0f65\u020f\3\2\2\2\u0f66\u0f67\t.\2\2\u0f67\u0211\3\2"+
		"\2\2\u0f68\u0f69\7\u0084\2\2\u0f69\u0f6a\5\u0218\u010d\2\u0f6a\u0213\3"+
		"\2\2\2\u0f6b\u0f6c\7\u01fa\2\2\u0f6c\u0f6d\5\u0144\u00a3\2\u0f6d\u0f6e"+
		"\7\u01fb\2\2\u0f6e\u0f7e\3\2\2\2\u0f6f\u0f70\7\u01fa\2\2\u0f70\u0f75\5"+
		"\u021a\u010e\2\u0f71\u0f72\7\u0200\2\2\u0f72\u0f74\5\u021a\u010e\2\u0f73"+
		"\u0f71\3\2\2\2\u0f74\u0f77\3\2\2\2\u0f75\u0f73\3\2\2\2\u0f75\u0f76\3\2"+
		"\2\2\u0f76\u0f78\3\2\2\2\u0f77\u0f75\3\2\2\2\u0f78\u0f79\7\u01fb\2\2\u0f79"+
		"\u0f7e\3\2\2\2\u0f7a\u0f7e\5\u02f8\u017d\2\u0f7b\u0f7e\5\u02f0\u0179\2"+
		"\u0f7c\u0f7e\5\u02f2\u017a\2\u0f7d\u0f6b\3\2\2\2\u0f7d\u0f6f\3\2\2\2\u0f7d"+
		"\u0f7a\3\2\2\2\u0f7d\u0f7b\3\2\2\2\u0f7d\u0f7c\3\2\2\2\u0f7e\u0215\3\2"+
		"\2\2\u0f7f\u0f80\5\u0218\u010d\2\u0f80\u0f81\7\22\2\2\u0f81\u0f82\5\u0218"+
		"\u010d\2\u0f82\u0217\3\2\2\2\u0f83\u0f89\5\u021c\u010f\2\u0f84\u0f85\5"+
		"\u0308\u0185\2\u0f85\u0f86\5\u021c\u010f\2\u0f86\u0f88\3\2\2\2\u0f87\u0f84"+
		"\3\2\2\2\u0f88\u0f8b\3\2\2\2\u0f89\u0f87\3\2\2\2\u0f89\u0f8a\3\2\2\2\u0f8a"+
		"\u0219\3\2\2\2\u0f8b\u0f89\3\2\2\2\u0f8c\u0f8d\5\u0218\u010d\2\u0f8d\u021b"+
		"\3\2\2\2\u0f8e\u0f93\5\u021e\u0110\2\u0f8f\u0f90\t/\2\2\u0f90\u0f92\5"+
		"\u021e\u0110\2\u0f91\u0f8f\3\2\2\2\u0f92\u0f95\3\2\2\2\u0f93\u0f91\3\2"+
		"\2\2\u0f93\u0f94\3\2\2\2\u0f94\u021d\3\2\2\2\u0f95\u0f93\3\2\2\2\u0f96"+
		"\u0f9b\5\u0220\u0111\2\u0f97\u0f98\t\60\2\2\u0f98\u0f9a\5\u0220\u0111"+
		"\2\u0f99\u0f97\3\2\2\2\u0f9a\u0f9d\3\2\2\2\u0f9b\u0f99\3\2\2\2\u0f9b\u0f9c"+
		"\3\2\2\2\u0f9c\u021f\3\2\2\2\u0f9d\u0f9b\3\2\2\2\u0f9e\u0fa7\5\u0224\u0113"+
		"\2\u0f9f\u0fa4\7\30\2\2\u0fa0\u0fa5\7\u00d4\2\2\u0fa1\u0fa2\7\u0187\2"+
		"\2\u0fa2\u0fa3\7\u01d0\2\2\u0fa3\u0fa5\5\u021a\u010e\2\u0fa4\u0fa0\3\2"+
		"\2\2\u0fa4\u0fa1\3\2\2\2\u0fa5\u0fa8\3\2\2\2\u0fa6\u0fa8\5\u0222\u0112"+
		"\2\u0fa7\u0f9f\3\2\2\2\u0fa7\u0fa6\3\2\2\2\u0fa7\u0fa8\3\2\2\2\u0fa8\u0221"+
		"\3\2\2\2\u0fa9\u0fae\7`\2\2\u0faa\u0fab\7\u01fa\2\2\u0fab\u0fac\5\u021a"+
		"\u010e\2\u0fac\u0fad\7\u01fb\2\2\u0fad\u0faf\3\2\2\2\u0fae\u0faa\3\2\2"+
		"\2\u0fae\u0faf\3\2\2\2\u0faf\u0fb0\3\2\2\2\u0fb0\u0fb1\7\u0190\2\2\u0fb1"+
		"\u0fb6\7\u0158\2\2\u0fb2\u0fb3\7\u01fa\2\2\u0fb3\u0fb4\5\u021a\u010e\2"+
		"\u0fb4\u0fb5\7\u01fb\2\2\u0fb5\u0fb7\3\2\2\2\u0fb6\u0fb2\3\2\2\2\u0fb6"+
		"\u0fb7\3\2\2\2\u0fb7\u0fc2\3\2\2\2\u0fb8\u0fbd\7\u01cd\2\2\u0fb9\u0fba"+
		"\7\u01fa\2\2\u0fba\u0fbb\5\u021a\u010e\2\u0fbb\u0fbc\7\u01fb\2\2\u0fbc"+
		"\u0fbe\3\2\2\2\u0fbd\u0fb9\3\2\2\2\u0fbd\u0fbe\3\2\2\2\u0fbe\u0fbf\3\2"+
		"\2\2\u0fbf\u0fc0\7\u0190\2\2\u0fc0\u0fc2\7\u00ea\2\2\u0fc1\u0fa9\3\2\2"+
		"\2\u0fc1\u0fb8\3\2\2\2\u0fc2\u0223\3\2\2\2\u0fc3\u0fc8\5\u0230\u0119\2"+
		"\u0fc4\u0fc5\7\u0212\2\2\u0fc5\u0fc6\5\u0226\u0114\2\u0fc6\u0fc7\7\u0213"+
		"\2\2\u0fc7\u0fc9\3\2\2\2\u0fc8\u0fc4\3\2\2\2\u0fc8\u0fc9\3\2\2\2\u0fc9"+
		"\u0225\3\2\2\2\u0fca\u0fcd\7\23\2\2\u0fcb\u0fcd\5\u01fc\u00ff\2\u0fcc"+
		"\u0fca\3\2\2\2\u0fcc\u0fcb\3\2\2\2\u0fcd\u0fd5\3\2\2\2\u0fce\u0fd1\7\u0200"+
		"\2\2\u0fcf\u0fd2\7\23\2\2\u0fd0\u0fd2\5\u01fc\u00ff\2\u0fd1\u0fcf\3\2"+
		"\2\2\u0fd1\u0fd0\3\2\2\2\u0fd2\u0fd4\3\2\2\2\u0fd3\u0fce\3\2\2\2\u0fd4"+
		"\u0fd7\3\2\2\2\u0fd5\u0fd3\3\2\2\2\u0fd5\u0fd6\3\2\2\2\u0fd6\u0fe2\3\2"+
		"\2\2\u0fd7\u0fd5\3\2\2\2\u0fd8\u0fdd\5\u0228\u0115\2\u0fd9\u0fda\7\u0200"+
		"\2\2\u0fda\u0fdc\5\u0228\u0115\2\u0fdb\u0fd9\3\2\2\2\u0fdc\u0fdf\3\2\2"+
		"\2\u0fdd\u0fdb\3\2\2\2\u0fdd\u0fde\3\2\2\2\u0fde\u0fe2\3\2\2\2\u0fdf\u0fdd"+
		"\3\2\2\2\u0fe0\u0fe2\5\u022e\u0118\2\u0fe1\u0fcc\3\2\2\2\u0fe1\u0fd8\3"+
		"\2\2\2\u0fe1\u0fe0\3\2\2\2\u0fe2\u0227\3\2\2\2\u0fe3\u0fe4\7\u009b\2\2"+
		"\u0fe4\u0ff1\5\u02d6\u016c\2\u0fe5\u0fe6\7\u00ac\2\2\u0fe6\u0ff2\5\u01f8"+
		"\u00fd\2\u0fe7\u0fe9\5\u022a\u0116\2\u0fe8\u0fe7\3\2\2\2\u0fe8\u0fe9\3"+
		"\2\2\2\u0fe9\u0fea\3\2\2\2\u0fea\u0feb\7\u009e\2\2\u0feb\u0fec\5\u01fe"+
		"\u0100\2\u0fec\u0fed\7\u0190\2\2\u0fed\u0fee\5\u01fe\u0100\2\u0fee\u0fef"+
		"\5\u022c\u0117\2\u0fef\u0ff0\5\u01fe\u0100\2\u0ff0\u0ff2\3\2\2\2\u0ff1"+
		"\u0fe5\3\2\2\2\u0ff1\u0fe8\3\2\2\2\u0ff2\u0229\3\2\2\2\u0ff3\u0ff4\7\u00cf"+
		"\2\2\u0ff4\u0ff5\5\u01fe\u0100\2\u0ff5\u022b\3\2\2\2\u0ff6\u0ff7\t\61"+
		"\2\2\u0ff7\u022d\3\2\2\2\u0ff8\u0ff9\7\u009b\2\2\u0ff9\u0ffa\7\u01fa\2"+
		"\2\u0ffa\u0fff\5\u02d6\u016c\2\u0ffb\u0ffc\7\u0200\2\2\u0ffc\u0ffe\5\u02d6"+
		"\u016c\2\u0ffd\u0ffb\3\2\2\2\u0ffe\u1001\3\2\2\2\u0fff\u0ffd\3\2\2\2\u0fff"+
		"\u1000\3\2\2\2\u1000\u1002\3\2\2\2\u1001\u0fff\3\2\2\2\u1002\u1003\7\u01fb"+
		"\2\2\u1003\u1004\7\u00ac\2\2\u1004\u1011\7\u01fa\2\2\u1005\u1012\5\u0144"+
		"\u00a3\2\u1006\u1007\7\u01fa\2\2\u1007\u100c\5\u01f8\u00fd\2\u1008\u1009"+
		"\7\u0200\2\2\u1009\u100b\5\u01f8\u00fd\2\u100a\u1008\3\2\2\2\u100b\u100e"+
		"\3\2\2\2\u100c\u100a\3\2\2\2\u100c\u100d\3\2\2\2\u100d\u100f\3\2\2\2\u100e"+
		"\u100c\3\2\2\2\u100f\u1010\7\u01fb\2\2\u1010\u1012\3\2\2\2\u1011\u1005"+
		"\3\2\2\2\u1011\u1006\3\2\2\2\u1012\u1013\3\2\2\2\u1013\u1014\7\u01fb\2"+
		"\2\u1014\u022f\3\2\2\2\u1015\u1016\7\u01ff\2\2\u1016\u1028\5\u0230\u0119"+
		"\2\u1017\u1018\7\u01fe\2\2\u1018\u1028\5\u0230\u0119\2\u1019\u101a\7\u0132"+
		"\2\2\u101a\u1028\5\u0230\u0119\2\u101b\u101c\7H\2\2\u101c\u1028\5\u0230"+
		"\u0119\2\u101d\u101e\7\u00f5\2\2\u101e\u1028\5\u0230\u0119\2\u101f\u1020"+
		"\7u\2\2\u1020\u1028\5\u0230\u0119\2\u1021\u1022\7\17\2\2\u1022\u1028\5"+
		"\u0230\u0119\2\u1023\u1028\5\u0232\u011a\2\u1024\u1028\5\u0244\u0123\2"+
		"\u1025\u1028\5\u024a\u0126\2\u1026\u1028\5\u023e\u0120\2\u1027\u1015\3"+
		"\2\2\2\u1027\u1017\3\2\2\2\u1027\u1019\3\2\2\2\u1027\u101b\3\2\2\2\u1027"+
		"\u101d\3\2\2\2\u1027\u101f\3\2\2\2\u1027\u1021\3\2\2\2\u1027\u1023\3\2"+
		"\2\2\u1027\u1024\3\2\2\2\u1027\u1025\3\2\2\2\u1027\u1026\3\2\2\2\u1028"+
		"\u0231\3\2\2\2\u1029\u102c\5\u0238\u011d\2\u102a\u102c\5\u0234\u011b\2"+
		"\u102b\u1029\3\2\2\2\u102b\u102a\3\2\2\2\u102c\u0233\3\2\2\2\u102d\u102f"+
		"\5\u02bc\u015f\2\u102e\u102d\3\2\2\2\u102e\u102f\3\2\2\2\u102f\u1030\3"+
		"\2\2\2\u1030\u1031\7\65\2\2\u1031\u1033\5\u023e\u0120\2\u1032\u1034\5"+
		"\u0236\u011c\2\u1033\u1032\3\2\2\2\u1034\u1035\3\2\2\2\u1035\u1033\3\2"+
		"\2\2\u1035\u1036\3\2\2\2\u1036\u1038\3\2\2\2\u1037\u1039\5\u023c\u011f"+
		"\2\u1038\u1037\3\2\2\2\u1038\u1039\3\2\2\2\u1039\u103a\3\2\2\2\u103a\u103c"+
		"\7\u0081\2\2\u103b\u103d\7\65\2\2\u103c\u103b\3\2\2\2\u103c\u103d\3\2"+
		"\2\2\u103d\u103f\3\2\2\2\u103e\u1040\5\u02bc\u015f\2\u103f\u103e\3\2\2"+
		"\2\u103f\u1040\3\2\2\2\u1040\u0235\3\2\2\2\u1041\u1042\7\u01b6\2\2\u1042"+
		"\u1043\5\u0200\u0101\2\u1043\u1046\7\u0186\2\2\u1044\u1047\5\u00e0q\2"+
		"\u1045\u1047\5\u0200\u0101\2\u1046\u1044\3\2\2\2\u1046\u1045\3\2\2\2\u1047"+
		"\u0237\3\2\2\2\u1048\u104a\5\u02bc\u015f\2\u1049\u1048\3\2\2\2\u1049\u104a"+
		"\3\2\2\2\u104a\u104b\3\2\2\2\u104b\u104d\7\65\2\2\u104c\u104e\5\u023a"+
		"\u011e\2\u104d\u104c\3\2\2\2\u104e\u104f\3\2\2\2\u104f\u104d\3\2\2\2\u104f"+
		"\u1050\3\2\2\2\u1050\u1052\3\2\2\2\u1051\u1053\5\u023c\u011f\2\u1052\u1051"+
		"\3\2\2\2\u1052\u1053\3\2\2\2\u1053\u1054\3\2\2\2\u1054\u1056\7\u0081\2"+
		"\2\u1055\u1057\7\65\2\2\u1056\u1055\3\2\2\2\u1056\u1057\3\2\2\2\u1057"+
		"\u1059\3\2\2\2\u1058\u105a\5\u02bc\u015f\2\u1059\u1058\3\2\2\2\u1059\u105a"+
		"\3\2\2\2\u105a\u0239\3\2\2\2\u105b\u105c\7\u01b6\2\2\u105c\u105d\5\u01fc"+
		"\u00ff\2\u105d\u1060\7\u0186\2\2\u105e\u1061\5\u00e0q\2\u105f\u1061\5"+
		"\u0200\u0101\2\u1060\u105e\3\2\2\2\u1060\u105f\3\2\2\2\u1061\u023b\3\2"+
		"\2\2\u1062\u1065\7|\2\2\u1063\u1066\5\u00e0q\2\u1064\u1066\5\u0200\u0101"+
		"\2\u1065\u1063\3\2\2\2\u1065\u1064\3\2\2\2\u1066\u023d\3\2\2\2\u1067\u1068"+
		"\5\u02f6\u017c\2\u1068\u1069\5\u030a\u0186\2\u1069\u107c\3\2\2\2\u106a"+
		"\u107c\5\u02f0\u0179\2\u106b\u107c\5\u02f8\u017d\2\u106c\u107c\5\u02f2"+
		"\u017a\2\u106d\u1079\7\u01fa\2\2\u106e\u106f\5\u0144\u00a3\2\u106f\u1073"+
		"\7\u01fb\2\2\u1070\u1072\5\u0146\u00a4\2\u1071\u1070\3\2\2\2\u1072\u1075"+
		"\3\2\2\2\u1073\u1071\3\2\2\2\u1073\u1074\3\2\2\2\u1074\u107a\3\2\2\2\u1075"+
		"\u1073\3\2\2\2\u1076\u1077\5\u0240\u0121\2\u1077\u1078\7\u01fb\2\2\u1078"+
		"\u107a\3\2\2\2\u1079\u106e\3\2\2\2\u1079\u1076\3\2\2\2\u107a\u107c\3\2"+
		"\2\2\u107b\u1067\3\2\2\2\u107b\u106a\3\2\2\2\u107b\u106b\3\2\2\2\u107b"+
		"\u106c\3\2\2\2\u107b\u106d\3\2\2\2\u107c\u023f\3\2\2\2\u107d\u107f\5\u01fe"+
		"\u0100\2\u107e\u1080\5\u0242\u0122\2\u107f\u107e\3\2\2\2\u107f\u1080\3"+
		"\2\2\2\u1080\u0241\3\2\2\2\u1081\u1082\7\u0200\2\2\u1082\u1087\5\u01fe"+
		"\u0100\2\u1083\u1084\7\u0200\2\2\u1084\u1086\5\u01fe\u0100\2\u1085\u1083"+
		"\3\2\2\2\u1086\u1089\3\2\2\2\u1087\u1085\3\2\2\2\u1087\u1088\3\2\2\2\u1088"+
		"\u0243\3\2\2\2\u1089\u1087\3\2\2\2\u108a\u1093\t\62\2\2\u108b\u108c\7"+
		"\u01fa\2\2\u108c\u108d\5\u0144\u00a3\2\u108d\u108e\7\u01fb\2\2\u108e\u1094"+
		"\3\2\2\2\u108f\u1090\7\u01fa\2\2\u1090\u1091\5\u0200\u0101\2\u1091\u1092"+
		"\7\u01fb\2\2\u1092\u1094\3\2\2\2\u1093\u108b\3\2\2\2\u1093\u108f\3\2\2"+
		"\2\u1094\u0245\3\2\2\2\u1095\u1096\7\u0191\2\2\u1096\u1097\7\u01fa\2\2"+
		"\u1097\u109c\5\u01fe\u0100\2\u1098\u1099\7\u0200\2\2\u1099\u109b\5\u01fe"+
		"\u0100\2\u109a\u1098\3\2\2\2\u109b\u109e\3\2\2\2\u109c\u109a\3\2\2\2\u109c"+
		"\u109d\3\2\2\2\u109d\u109f\3\2\2\2\u109e\u109c\3\2\2\2\u109f\u10a0\7\u01fb"+
		"\2\2\u10a0\u10ae\3\2\2\2\u10a1\u10a2\7\u0192\2\2\u10a2\u10a3\7\u01fa\2"+
		"\2\u10a3\u10a8\5\u01fe\u0100\2\u10a4\u10a5\7\u0200\2\2\u10a5\u10a7\5\u01fe"+
		"\u0100\2\u10a6\u10a4\3\2\2\2\u10a7\u10aa\3\2\2\2\u10a8\u10a6\3\2\2\2\u10a8"+
		"\u10a9\3\2\2\2\u10a9\u10ab\3\2\2\2\u10aa\u10a8\3\2\2\2\u10ab\u10ac\7\u01fb"+
		"\2\2\u10ac\u10ae\3\2\2\2\u10ad\u1095\3\2\2\2\u10ad\u10a1\3\2\2\2\u10ae"+
		"\u0247\3\2\2\2\u10af\u10b0\t\63\2\2\u10b0\u10b7\7\u01fa\2\2\u10b1\u10b2"+
		"\7\u00eb\2\2\u10b2\u10b3\7\u01fa\2\2\u10b3\u10b4\5\u0144\u00a3\2\u10b4"+
		"\u10b5\7\u01fb\2\2\u10b5\u10b8\3\2\2\2\u10b6\u10b8\5\u021a\u010e\2\u10b7"+
		"\u10b1\3\2\2\2\u10b7\u10b6\3\2\2\2\u10b8\u10b9\3\2\2\2\u10b9\u10ba\7\25"+
		"\2\2\u10ba\u10bb\5\u02e8\u0175\2\u10bb\u10bc\7\u01fb\2\2\u10bc\u10bf\3"+
		"\2\2\2\u10bd\u10bf\5\u0246\u0124\2\u10be\u10af\3\2\2\2\u10be\u10bd\3\2"+
		"\2\2\u10bf\u0249\3\2\2\2\u10c0\u10c1\5\u024c\u0127\2\u10c1\u10c3\5\u02e0"+
		"\u0171\2\u10c2\u10c4\5\u0252\u012a\2\u10c3\u10c2\3\2\2\2\u10c3\u10c4\3"+
		"\2\2\2\u10c4\u11eb\3\2\2\2\u10c5\u10c6\5\u030c\u0187\2\u10c6\u10c8\5\u02e2"+
		"\u0172\2\u10c7\u10c9\5\u025a\u012e\2\u10c8\u10c7\3\2\2\2\u10c8\u10c9\3"+
		"\2\2\2\u10c9\u11eb\3\2\2\2\u10ca\u10cb\7T\2\2\u10cb\u10d1\7\u01fa\2\2"+
		"\u10cc\u10d2\7\u01fd\2\2\u10cd\u10cf\t\37\2\2\u10ce\u10cd\3\2\2\2\u10ce"+
		"\u10cf\3\2\2\2\u10cf\u10d0\3\2\2\2\u10d0\u10d2\5\u021a\u010e\2\u10d1\u10cc"+
		"\3\2\2\2\u10d1\u10ce\3\2\2\2\u10d2\u10d3\3\2\2\2\u10d3\u10d5\7\u01fb\2"+
		"\2\u10d4\u10d6\5\u0252\u012a\2\u10d5\u10d4\3\2\2\2\u10d5\u10d6\3\2\2\2"+
		"\u10d6\u11eb\3\2\2\2\u10d7\u11eb\5\u0248\u0125\2\u10d8\u10d9\7;\2\2\u10d9"+
		"\u10da\7\u01fa\2\2\u10da\u10db\5\u021a\u010e\2\u10db\u10dc\7\u01a8\2\2"+
		"\u10dc\u10dd\7\u00f2\2\2\u10dd\u10de\7\u01fb\2\2\u10de\u11eb\3\2\2\2\u10df"+
		"\u10e0\7?\2\2\u10e0\u10e2\7\u01fa\2\2\u10e1\u10e3\t\64\2\2\u10e2\u10e1"+
		"\3\2\2\2\u10e2\u10e3\3\2\2\2\u10e3\u10e4\3\2\2\2\u10e4\u10e6\5\u021a\u010e"+
		"\2\u10e5\u10e7\5\u025e\u0130\2\u10e6\u10e5\3\2\2\2\u10e6\u10e7\3\2\2\2"+
		"\u10e7\u10e8\3\2\2\2\u10e8\u10e9\7\u01fb\2\2\u10e9\u11eb\3\2\2\2\u10ea"+
		"\u10eb\5\u024e\u0128\2\u10eb\u10ed\5\u02de\u0170\2\u10ec\u10ee\5\u0260"+
		"\u0131\2\u10ed\u10ec\3\2\2\2\u10ee\u10ef\3\2\2\2\u10ef\u10ed\3\2\2\2\u10ef"+
		"\u10f0\3\2\2\2\u10f0\u11eb\3\2\2\2\u10f1\u10f2\7h\2\2\u10f2\u10f3\7\u01fa"+
		"\2\2\u10f3\u10f5\5\u021a\u010e\2\u10f4\u10f6\t\65\2\2\u10f5\u10f4\3\2"+
		"\2\2\u10f5\u10f6\3\2\2\2\u10f6\u10f7\3\2\2\2\u10f7\u10f8\7\u01fb\2\2\u10f8"+
		"\u11eb\3\2\2\2\u10f9\u10fa\7\u0091\2\2\u10fa\u10fb\7\u01fa\2\2\u10fb\u10fc"+
		"\5\u030c\u0187\2\u10fc\u10fd\7\u009e\2\2\u10fd\u10fe\5\u021a\u010e\2\u10fe"+
		"\u10ff\7\u01fb\2\2\u10ff\u11eb\3\2\2\2\u1100\u1101\t\66\2\2\u1101\u1103"+
		"\5\u02e0\u0171\2\u1102\u1104\5\u02e4\u0173\2\u1103\u1102\3\2\2\2\u1103"+
		"\u1104\3\2\2\2\u1104\u1105\3\2\2\2\u1105\u1106\5\u0252\u012a\2\u1106\u11eb"+
		"\3\2\2\2\u1107\u1108\5\u0250\u0129\2\u1108\u1109\7\u01fa\2\2\u1109\u110e"+
		"\5\u0200\u0101\2\u110a\u110b\7\u0200\2\2\u110b\u110d\5\u0200\u0101\2\u110c"+
		"\u110a\3\2\2\2\u110d\u1110\3\2\2\2\u110e\u110c\3\2\2\2\u110e\u110f\3\2"+
		"\2\2\u110f\u1112\3\2\2\2\u1110\u110e\3\2\2\2\u1111\u1113\5\u0262\u0132"+
		"\2\u1112\u1111\3\2\2\2\u1112\u1113\3\2\2\2\u1113\u1115\3\2\2\2\u1114\u1116"+
		"\5\u025a\u012e\2\u1115\u1114\3\2\2\2\u1115\u1116\3\2\2\2\u1116\u1117\3"+
		"\2\2\2\u1117\u1118\7\u01fb\2\2\u1118\u11eb\3\2\2\2\u1119\u111a\7\u0195"+
		"\2\2\u111a\u111b\7\u01fa\2\2\u111b\u111e\5\u0200\u0101\2\u111c\u111d\7"+
		"\u01a8\2\2\u111d\u111f\t\67\2\2\u111e\u111c\3\2\2\2\u111e\u111f\3\2\2"+
		"\2\u111f\u1124\3\2\2\2\u1120\u1121\7\u0200\2\2\u1121\u1123\5\u0200\u0101"+
		"\2\u1122\u1120\3\2\2\2\u1123\u1126\3\2\2\2\u1124\u1122\3\2\2\2\u1124\u1125"+
		"\3\2\2\2\u1125\u1127\3\2\2\2\u1126\u1124\3\2\2\2\u1127\u1128\7\u01fb\2"+
		"\2\u1128\u11eb\3\2\2\2\u1129\u112a\7\u0196\2\2\u112a\u112b\7\u01fa\2\2"+
		"\u112b\u112c\5\u0200\u0101\2\u112c\u112e\7\25\2\2\u112d\u112f\7\u013a"+
		"\2\2\u112e\u112d\3\2\2\2\u112e\u112f\3\2\2\2\u112f\u1130\3\2\2\2\u1130"+
		"\u1131\5\u02e8\u0175\2\u1131\u1132\7\u01fb\2\2\u1132\u11eb\3\2\2\2\u1133"+
		"\u1134\7\u0198\2\2\u1134\u113c\7\u01fa\2\2\u1135\u1137\t8\2\2\u1136\u1135"+
		"\3\2\2\2\u1136\u1137\3\2\2\2\u1137\u1139\3\2\2\2\u1138\u113a\5\u02fc\u017f"+
		"\2\u1139\u1138\3\2\2\2\u1139\u113a\3\2\2\2\u113a\u113b\3\2\2\2\u113b\u113d"+
		"\7\u009e\2\2\u113c\u1136\3\2\2\2\u113c\u113d\3\2\2\2\u113d\u113e\3\2\2"+
		"\2\u113e\u113f\5\u021a\u010e\2\u113f\u1140\7\u01fb\2\2\u1140\u11eb\3\2"+
		"\2\2\u1141\u1142\7\u01bf\2\2\u1142\u1143\7\u01fa\2\2\u1143\u1145\5\u0200"+
		"\u0101\2\u1144\u1146\5\u01a4\u00d3\2\u1145\u1144\3\2\2\2\u1145\u1146\3"+
		"\2\2\2\u1146\u1147\3\2\2\2\u1147\u114a\7\u01fb\2\2\u1148\u1149\7\u01f3"+
		"\2\2\u1149\u114b\5\u02f4\u017b\2\u114a\u1148\3\2\2\2\u114a\u114b\3\2\2"+
		"\2\u114b\u11eb\3\2\2\2\u114c\u114d\t9\2\2\u114d\u114e\7\u01fa\2\2\u114e"+
		"\u1153\5\u026e\u0138\2\u114f\u1150\7\u0200\2\2\u1150\u1152\5\u026e\u0138"+
		"\2\u1151\u114f\3\2\2\2\u1152\u1155\3\2\2\2\u1153\u1151\3\2\2\2\u1153\u1154"+
		"\3\2\2\2\u1154\u1156\3\2\2\2\u1155\u1153\3\2\2\2\u1156\u1159\7\u01fb\2"+
		"\2\u1157\u1158\7\u01f3\2\2\u1158\u115a\5\u02f4\u017b\2\u1159\u1157\3\2"+
		"\2\2\u1159\u115a\3\2\2\2\u115a\u11eb\3\2\2\2\u115b\u115c\7\u01c3\2\2\u115c"+
		"\u115e\7\u01fa\2\2\u115d\u115f\t:\2\2\u115e\u115d\3\2\2\2\u115e\u115f"+
		"\3\2\2\2\u115f\u1161\3\2\2\2\u1160\u1162\t;\2\2\u1161\u1160\3\2\2\2\u1161"+
		"\u1162\3\2\2\2\u1162\u1163\3\2\2\2\u1163\u1166\5\u0200\u0101\2\u1164\u1165"+
		"\7\u0200\2\2\u1165\u1167\5\u0266\u0134\2\u1166\u1164\3\2\2\2\u1166\u1167"+
		"\3\2\2\2\u1167\u116f\3\2\2\2\u1168\u1169\7\u0200\2\2\u1169\u116b\5\u0200"+
		"\u0101\2\u116a\u116c\5\u028e\u0148\2\u116b\u116a\3\2\2\2\u116b\u116c\3"+
		"\2\2\2\u116c\u116e\3\2\2\2\u116d\u1168\3\2\2\2\u116e\u1171\3\2\2\2\u116f"+
		"\u116d\3\2\2\2\u116f\u1170\3\2\2\2\u1170\u1172\3\2\2\2\u1171\u116f\3\2"+
		"\2\2\u1172\u1175\7\u01fb\2\2\u1173\u1174\7\u01f3\2\2\u1174\u1176\5\u02f4"+
		"\u017b\2\u1175\u1173\3\2\2\2\u1175\u1176\3\2\2\2\u1176\u11eb\3\2\2\2\u1177"+
		"\u1178\7\u01c4\2\2\u1178\u1179\7\u01fa\2\2\u1179\u117b\5\u0200\u0101\2"+
		"\u117a\u117c\5\u0264\u0133\2\u117b\u117a\3\2\2\2\u117b\u117c\3\2\2\2\u117c"+
		"\u117d\3\2\2\2\u117d\u117e\7\u01fb\2\2\u117e\u11eb\3\2\2\2\u117f\u1180"+
		"\7\u01c7\2\2\u1180\u1181\7\u01fa\2\2\u1181\u1182\t<\2\2\u1182\u1184\5"+
		"\u021a\u010e\2\u1183\u1185\7\u01b5\2\2\u1184\u1183\3\2\2\2\u1184\u1185"+
		"\3\2\2\2\u1185\u1186\3\2\2\2\u1186\u1189\7\u01fb\2\2\u1187\u1188\7\u01f3"+
		"\2\2\u1188\u118a\5\u02f4\u017b\2\u1189\u1187\3\2\2\2\u1189\u118a\3\2\2"+
		"\2\u118a\u11eb\3\2\2\2\u118b\u118c\7\u01c8\2\2\u118c\u1191\7\u01fa\2\2"+
		"\u118d\u118e\7\u00ec\2\2\u118e\u1192\5\u02fe\u0180\2\u118f\u1190\7\u0085"+
		"\2\2\u1190\u1192\5\u021a\u010e\2\u1191\u118d\3\2\2\2\u1191\u118f\3\2\2"+
		"\2\u1192\u1195\3\2\2\2\u1193\u1194\7\u0200\2\2\u1194\u1196\5\u021a\u010e"+
		"\2\u1195\u1193\3\2\2\2\u1195\u1196\3\2\2\2\u1196\u1197\3\2\2\2\u1197\u119a"+
		"\7\u01fb\2\2\u1198\u1199\7\u01f3\2\2\u1199\u119b\5\u02f4\u017b\2\u119a"+
		"\u1198\3\2\2\2\u119a\u119b\3\2\2\2\u119b\u11eb\3\2\2\2\u119c\u119d\7\u01c9"+
		"\2\2\u119d\u119e\7\u01fa\2\2\u119e\u11a0\5\u021a\u010e\2\u119f\u11a1\5"+
		"\u0264\u0133\2\u11a0\u119f\3\2\2\2\u11a0\u11a1\3\2\2\2\u11a1\u11a2\3\2"+
		"\2\2\u11a2\u11a3\7\u0146\2\2\u11a3\u11a7\7M\2\2\u11a4\u11a5\7\u0104\2"+
		"\2\u11a5\u11a6\7\u010e\2\2\u11a6\u11a8\7~\2\2\u11a7\u11a4\3\2\2\2\u11a7"+
		"\u11a8\3\2\2\2\u11a8\u11a9\3\2\2\2\u11a9\u11ac\7\u01fb\2\2\u11aa\u11ab"+
		"\7\u01f3\2\2\u11ab\u11ad\5\u02f4\u017b\2\u11ac\u11aa\3\2\2\2\u11ac\u11ad"+
		"\3\2\2\2\u11ad\u11eb\3\2\2\2\u11ae\u11af\7\u01ca\2\2\u11af\u11b0\7\u01fa"+
		"\2\2\u11b0\u11b1\5\u021a\u010e\2\u11b1\u11b4\5\u0270\u0139\2\u11b2\u11b3"+
		"\7\u0200\2\2\u11b3\u11b5\5\u0272\u013a\2\u11b4\u11b2\3\2\2\2\u11b4\u11b5"+
		"\3\2\2\2\u11b5\u11b6\3\2\2\2\u11b6\u11b9\7\u01fb\2\2\u11b7\u11b8\7\u01f3"+
		"\2\2\u11b8\u11ba\5\u02f4\u017b\2\u11b9\u11b7\3\2\2\2\u11b9\u11ba\3\2\2"+
		"\2\u11ba\u11eb\3\2\2\2\u11bb\u11bc\7\u01cb\2\2\u11bc\u11bd\7\u01fa\2\2"+
		"\u11bd\u11be\t<\2\2\u11be\u11c1\5\u021a\u010e\2\u11bf\u11c0\7\25\2\2\u11c0"+
		"\u11c2\5\u02e8\u0175\2\u11c1\u11bf\3\2\2\2\u11c1\u11c2\3\2\2\2\u11c2\u11c4"+
		"\3\2\2\2\u11c3\u11c5\5\u0274\u013b\2\u11c4\u11c3\3\2\2\2\u11c4\u11c5\3"+
		"\2\2\2\u11c5\u11c7\3\2\2\2\u11c6\u11c8\5\u0276\u013c\2\u11c7\u11c6\3\2"+
		"\2\2\u11c7\u11c8\3\2\2\2\u11c8\u11ca\3\2\2\2\u11c9\u11cb\5\u0278\u013d"+
		"\2\u11ca\u11c9\3\2\2\2\u11ca\u11cb\3\2\2\2\u11cb\u11ce\3\2\2\2\u11cc\u11cd"+
		"\t=\2\2\u11cd\u11cf\7k\2\2\u11ce\u11cc\3\2\2\2\u11ce\u11cf\3\2\2\2\u11cf"+
		"\u11d0\3\2\2\2\u11d0\u11d3\7\u01fb\2\2\u11d1\u11d2\7\u01f3\2\2\u11d2\u11d4"+
		"\5\u02f4\u017b\2\u11d3\u11d1\3\2\2\2\u11d3\u11d4\3\2\2\2\u11d4\u11eb\3"+
		"\2\2\2\u11d5\u11d6\7\u01cc\2\2\u11d6\u11d8\7\u01fa\2\2\u11d7\u11d9\5\u0268"+
		"\u0135\2\u11d8\u11d7\3\2\2\2\u11d8\u11d9\3\2\2\2\u11d9\u11da\3\2\2\2\u11da"+
		"\u11dc\5\u021a\u010e\2\u11db\u11dd\5\u0264\u0133\2\u11dc\u11db\3\2\2\2"+
		"\u11dc\u11dd\3\2\2\2\u11dd\u11e3\3\2\2\2\u11de\u11df\7@\2\2\u11df\u11e0"+
		"\5\u026a\u0136\2\u11e0\u11e1\7\u0200\2\2\u11e1\u11e2\5\u026a\u0136\2\u11e2"+
		"\u11e4\3\2\2\2\u11e3\u11de\3\2\2\2\u11e3\u11e4\3\2\2\2\u11e4\u11e5\3\2"+
		"\2\2\u11e5\u11e8\7\u01fb\2\2\u11e6\u11e7\7\u01f3\2\2\u11e7\u11e9\5\u02f4"+
		"\u017b\2\u11e8\u11e6\3\2\2\2\u11e8\u11e9\3\2\2\2\u11e9\u11eb\3\2\2\2\u11ea"+
		"\u10c0\3\2\2\2\u11ea\u10c5\3\2\2\2\u11ea\u10ca\3\2\2\2\u11ea\u10d7\3\2"+
		"\2\2\u11ea\u10d8\3\2\2\2\u11ea\u10df\3\2\2\2\u11ea\u10ea\3\2\2\2\u11ea"+
		"\u10f1\3\2\2\2\u11ea\u10f9\3\2\2\2\u11ea\u1100\3\2\2\2\u11ea\u1107\3\2"+
		"\2\2\u11ea\u1119\3\2\2\2\u11ea\u1129\3\2\2\2\u11ea\u1133\3\2\2\2\u11ea"+
		"\u1141\3\2\2\2\u11ea\u114c\3\2\2\2\u11ea\u115b\3\2\2\2\u11ea\u1177\3\2"+
		"\2\2\u11ea\u117f\3\2\2\2\u11ea\u118b\3\2\2\2\u11ea\u119c\3\2\2\2\u11ea"+
		"\u11ae\3\2\2\2\u11ea\u11bb\3\2\2\2\u11ea\u11d5\3\2\2\2\u11eb\u024b\3\2"+
		"\2\2\u11ec\u11ed\t>\2\2\u11ed\u024d\3\2\2\2\u11ee\u11ef\t?\2\2\u11ef\u024f"+
		"\3\2\2\2\u11f0\u11f1\t@\2\2\u11f1\u0251\3\2\2\2\u11f2\u11f3\7\u0119\2"+
		"\2\u11f3\u11f5\7\u01fa\2\2\u11f4\u11f6\5\u0160\u00b1\2\u11f5\u11f4\3\2"+
		"\2\2\u11f5\u11f6\3\2\2\2\u11f6\u11fb\3\2\2\2\u11f7\u11f9\5\u01a4\u00d3"+
		"\2\u11f8\u11fa\5\u0254\u012b\2\u11f9\u11f8\3\2\2\2\u11f9\u11fa\3\2\2\2"+
		"\u11fa\u11fc\3\2\2\2\u11fb\u11f7\3\2\2\2\u11fb\u11fc\3\2\2\2\u11fc\u11fd"+
		"\3\2\2\2\u11fd\u11fe\7\u01fb\2\2\u11fe\u0253\3\2\2\2\u11ff\u1206\5\u0256"+
		"\u012c\2\u1200\u1201\7\"\2\2\u1201\u1202\5\u0258\u012d\2\u1202\u1203\7"+
		"\22\2\2\u1203\u1204\5\u0258\u012d\2\u1204\u1207\3\2\2\2\u1205\u1207\5"+
		"\u0258\u012d\2\u1206\u1200\3\2\2\2\u1206\u1205\3\2\2\2\u1207\u0255\3\2"+
		"\2\2\u1208\u1209\tA\2\2\u1209\u0257\3\2\2\2\u120a\u120b\7\u019c\2\2\u120b"+
		"\u1212\7\u012f\2\2\u120c\u120d\7X\2\2\u120d\u1212\7\u014d\2\2\u120e\u120f"+
		"\5\u021a\u010e\2\u120f\u1210\tB\2\2\u1210\u1212\3\2\2\2\u1211\u120a\3"+
		"\2\2\2\u1211\u120c\3\2\2\2\u1211\u120e\3\2\2\2\u1212\u0259\3\2\2\2\u1213"+
		"\u121d\7\u01a8\2\2\u1214\u121e\7\u01fd\2\2\u1215\u121a\5\u025c\u012f\2"+
		"\u1216\u1217\7\u0200\2\2\u1217\u1219\5\u025c\u012f\2\u1218\u1216\3\2\2"+
		"\2\u1219\u121c\3\2\2\2\u121a\u1218\3\2\2\2\u121a\u121b\3\2\2\2\u121b\u121e"+
		"\3\2\2\2\u121c\u121a\3\2\2\2\u121d\u1214\3\2\2\2\u121d\u1215\3\2\2\2\u121e"+
		"\u025b\3\2\2\2\u121f\u1221\7\u00ac\2\2\u1220\u1222\7\u0117\2\2\u1221\u1220"+
		"\3\2\2\2\u1221\u1222\3\2\2\2\u1222\u1225\3\2\2\2\u1223\u1225\7\u0117\2"+
		"\2\u1224\u121f\3\2\2\2\u1224\u1223\3\2\2\2\u1224\u1225\3\2\2\2\u1225\u1226"+
		"\3\2\2\2\u1226\u1228\5\u0150\u00a9\2\u1227\u1229\5\u028e\u0148\2\u1228"+
		"\u1227\3\2\2\2\u1228\u1229\3\2\2\2\u1229\u025d\3\2\2\2\u122a\u122b\7\u0114"+
		"\2\2\u122b\u122c\7.\2\2\u122c\u122d\5\u021a\u010e\2\u122d\u025f\3\2\2"+
		"\2\u122e\u122f\7\u01bb\2\2\u122f\u1230\7\u00a3\2\2\u1230\u1231\7\u01fa"+
		"\2\2\u1231\u1232\5\u01a4\u00d3\2\u1232\u1233\7\u01fb\2\2\u1233\u1236\3"+
		"\2\2\2\u1234\u1236\5\u0252\u012a\2\u1235\u122e\3\2\2\2\u1235\u1234\3\2"+
		"\2\2\u1236\u0261\3\2\2\2\u1237\u1249\7S\2\2\u1238\u123a\7\u00e8\2\2\u1239"+
		"\u123b\7\34\2\2\u123a\u1239\3\2\2\2\u123a\u123b\3\2\2\2\u123b\u124a\3"+
		"\2\2\2\u123c\u123d\7\u01fa\2\2\u123d\u1242\5\u029e\u0150\2\u123e\u123f"+
		"\7\u0200\2\2\u123f\u1241\5\u029e\u0150\2\u1240\u123e\3\2\2\2\u1241\u1244"+
		"\3\2\2\2\u1242\u1240\3\2\2\2\u1242\u1243\3\2\2\2\u1243\u1245\3\2\2\2\u1244"+
		"\u1242\3\2\2\2\u1245\u1246\7\u01fb\2\2\u1246\u1247\7\u01ab\2\2\u1247\u1248"+
		"\5\u01f8\u00fd\2\u1248\u124a\3\2\2\2\u1249\u1238\3\2\2\2\u1249\u123c\3"+
		"\2\2\2\u124a\u0263\3\2\2\2\u124b\u124e\7\u0120\2\2\u124c\u124d\7.\2\2"+
		"\u124d\u124f\7\u01aa\2\2\u124e\u124c\3\2\2\2\u124e\u124f\3\2\2\2\u124f"+
		"\u1250\3\2\2\2\u1250\u1252\5\u0200\u0101\2\u1251\u1253\5\u028e\u0148\2"+
		"\u1252\u1251\3\2\2\2\u1252\u1253\3\2\2\2\u1253\u1254\3\2\2\2\u1254\u1255"+
		"\7\u0200\2\2\u1255\u1257\5\u0200\u0101\2\u1256\u1258\5\u028e\u0148\2\u1257"+
		"\u1256\3\2\2\2\u1257\u1258\3\2\2\2\u1258\u0265\3\2\2\2\u1259\u125a\7\u01c0"+
		"\2\2\u125a\u125c\7\u01fa\2\2\u125b\u125d\t:\2\2\u125c\u125b\3\2\2\2\u125c"+
		"\u125d\3\2\2\2\u125d\u125f\3\2\2\2\u125e\u1260\tC\2\2\u125f\u125e\3\2"+
		"\2\2\u125f\u1260\3\2\2\2\u1260\u1261\3\2\2\2\u1261\u1266\5\u026e\u0138"+
		"\2\u1262\u1263\7\u0200\2\2\u1263\u1265\5\u026e\u0138\2\u1264\u1262\3\2"+
		"\2\2\u1265\u1268\3\2\2\2\u1266\u1264\3\2\2\2\u1266\u1267\3\2\2\2\u1267"+
		"\u1269\3\2\2\2\u1268\u1266\3\2\2\2\u1269\u126a\7\u01fb\2\2\u126a\u0267"+
		"\3\2\2\2\u126b\u126c\7\u01c6\2\2\u126c\u1270\7\u01fa\2\2\u126d\u126e\5"+
		"\u021a\u010e\2\u126e\u126f\5\u028e\u0148\2\u126f\u1271\3\2\2\2\u1270\u126d"+
		"\3\2\2\2\u1270\u1271\3\2\2\2\u1271\u1278\3";
	private static final String _serializedATNSegment2 =
		"\2\2\2\u1272\u1273\7\u0200\2\2\u1273\u1274\5\u021a\u010e\2\u1274\u1275"+
		"\5\u028e\u0148\2\u1275\u1277\3\2\2\2\u1276\u1272\3\2\2\2\u1277\u127a\3"+
		"\2\2\2\u1278\u1276\3\2\2\2\u1278\u1279\3\2\2\2\u1279\u127c\3\2\2\2\u127a"+
		"\u1278\3\2\2\2\u127b\u127d\5\u026c\u0137\2\u127c\u127b\3\2\2\2\u127c\u127d"+
		"\3\2\2\2\u127d\u127e\3\2\2\2\u127e\u127f\7\u01fb\2\2\u127f\u0269\3\2\2"+
		"\2\u1280\u128b\5\u029c\u014f\2\u1281\u1282\7\u009b\2\2\u1282\u128c\7\u0115"+
		"\2\2\u1283\u1286\5\u02e8\u0175\2\u1284\u1285\7\u0121\2\2\u1285\u1287\5"+
		"\u021a\u010e\2\u1286\u1284\3\2\2\2\u1286\u1287\3\2\2\2\u1287\u1289\3\2"+
		"\2\2\u1288\u128a\5\u026c\u0137\2\u1289\u1288\3\2\2\2\u1289\u128a\3\2\2"+
		"\2\u128a\u128c\3\2\2\2\u128b\u1281\3\2\2\2\u128b\u1283\3\2\2\2\u128c\u026b"+
		"\3\2\2\2\u128d\u128e\7j\2\2\u128e\u128f\5\u021a\u010e\2\u128f\u026d\3"+
		"\2\2\2\u1290\u1297\5\u01fe\u0100\2\u1291\u1295\7\25\2\2\u1292\u1296\5"+
		"\u0300\u0181\2\u1293\u1294\7\u0085\2\2\u1294\u1296\5\u0218\u010d\2\u1295"+
		"\u1292\3\2\2\2\u1295\u1293\3\2\2\2\u1296\u1298\3\2\2\2\u1297\u1291\3\2"+
		"\2\2\u1297\u1298\3\2\2\2\u1298\u026f\3\2\2\2\u1299\u129d\7\u01b1\2\2\u129a"+
		"\u129b\7\u00f7\2\2\u129b\u129e\7\u01aa\2\2\u129c\u129e\5\u0200\u0101\2"+
		"\u129d\u129a\3\2\2\2\u129d\u129c\3\2\2\2\u129e\u0271\3\2\2\2\u129f\u12a5"+
		"\7\u0176\2\2\u12a0\u12a6\7\u01ce\2\2\u12a1\u12a3\7\u00f7\2\2\u12a2\u12a4"+
		"\7\u01aa\2\2\u12a3\u12a2\3\2\2\2\u12a3\u12a4\3\2\2\2\u12a4\u12a6\3\2\2"+
		"\2\u12a5\u12a0\3\2\2\2\u12a5\u12a1\3\2\2\2\u12a6\u0273\3\2\2\2\u12a7\u12a8"+
		"\7\u0080\2\2\u12a8\u12a9\5\u021a\u010e\2\u12a9\u0275\3\2\2\2\u12aa\u12ab"+
		"\7\u01b1\2\2\u12ab\u12ac\5\u021a\u010e\2\u12ac\u0277\3\2\2\2\u12ad\u12ae"+
		"\7\u00f7\2\2\u12ae\u12b6\7\u00b0\2\2\u12af\u12b3\7\u00b0\2\2\u12b0\u12b1"+
		"\7\u016d\2\2\u12b1\u12b2\7\u0211\2\2\u12b2\u12b4\5\u021a\u010e\2\u12b3"+
		"\u12b0\3\2\2\2\u12b3\u12b4\3\2\2\2\u12b4\u12b6\3\2\2\2\u12b5\u12ad\3\2"+
		"\2\2\u12b5\u12af\3\2\2\2\u12b6\u0279\3\2\2\2\u12b7\u12b8\5\u01fe\u0100"+
		"\2\u12b8\u027b\3\2\2\2\u12b9\u12bb\5\u00c0a\2\u12ba\u12b9\3\2\2\2\u12bb"+
		"\u12bc\3\2\2\2\u12bc\u12ba\3\2\2\2\u12bc\u12bd\3\2\2\2\u12bd\u12c1\3\2"+
		"\2\2\u12be\u12c1\5\u00e0q\2\u12bf\u12c1\5\6\4\2\u12c0\u12ba\3\2\2\2\u12c0"+
		"\u12be\3\2\2\2\u12c0\u12bf\3\2\2\2\u12c1\u027d\3\2\2\2\u12c2\u12c3\7\4"+
		"\2\2\u12c3\u12c4\5\u027a\u013e\2\u12c4\u12c6\7\5\2\2\u12c5\u12c7\5\u027c"+
		"\u013f\2\u12c6\u12c5\3\2\2\2\u12c6\u12c7\3\2\2\2\u12c7\u12d0\3\2\2\2\u12c8"+
		"\u12c9\7\7\2\2\u12c9\u12ca\5\u027a\u013e\2\u12ca\u12cc\7\5\2\2\u12cb\u12cd"+
		"\5\u027c\u013f\2\u12cc\u12cb\3\2\2\2\u12cc\u12cd\3\2\2\2\u12cd\u12cf\3"+
		"\2\2\2\u12ce\u12c8\3\2\2\2\u12cf\u12d2\3\2\2\2\u12d0\u12ce\3\2\2\2\u12d0"+
		"\u12d1\3\2\2\2\u12d1\u12d7\3\2\2\2\u12d2\u12d0\3\2\2\2\u12d3\u12d5\7\6"+
		"\2\2\u12d4\u12d6\5\u027c\u013f\2\u12d5\u12d4\3\2\2\2\u12d5\u12d6\3\2\2"+
		"\2\u12d6\u12d8\3\2\2\2\u12d7\u12d3\3\2\2\2\u12d7\u12d8\3\2\2\2\u12d8\u12d9"+
		"\3\2\2\2\u12d9\u12da\7\b\2\2\u12da\u027f\3\2\2\2\u12db\u12e2\7\u0201\2"+
		"\2\u12dc\u12e2\5\u0282\u0142\2\u12dd\u12e2\5\u0286\u0144\2\u12de\u12e2"+
		"\5\u0288\u0145\2\u12df\u12e2\5\u0284\u0143\2\u12e0\u12e2\5\u028a\u0146"+
		"\2\u12e1\u12db\3\2\2\2\u12e1\u12dc\3\2\2\2\u12e1\u12dd\3\2\2\2\u12e1\u12de"+
		"\3\2\2\2\u12e1\u12df\3\2\2\2\u12e1\u12e0\3\2\2\2\u12e2\u12e4\3\2\2\2\u12e3"+
		"\u12e5\7\u0206\2\2\u12e4\u12e3\3\2\2\2\u12e4\u12e5\3\2\2\2\u12e5\u0281"+
		"\3\2\2\2\u12e6\u12e7\7\u01b7\2\2\u12e7\u12ed\tD\2\2\u12e8\u12e9\7\u008d"+
		"\2\2\u12e9\u12ea\tE\2\2\u12ea\u12ee\tF\2\2\u12eb\u12ec\7O\2\2\u12ec\u12ee"+
		"\tG\2\2\u12ed\u12e8\3\2\2\2\u12ed\u12eb\3\2\2\2\u12ee\u0283\3\2\2\2\u12ef"+
		"\u12f0\7\u0163\2\2\u12f0\u12f6\5\u030c\u0187\2\u12f1\u12f7\7\u01f6\2\2"+
		"\u12f2\u12f7\7\u010e\2\2\u12f3\u12f7\7\u010b\2\2\u12f4\u12f7\5\u02fa\u017e"+
		"\2\u12f5\u12f7\5\u030c\u0187\2\u12f6\u12f1\3\2\2\2\u12f6\u12f2\3\2\2\2"+
		"\u12f6\u12f3\3\2\2\2\u12f6\u12f4\3\2\2\2\u12f6\u12f5\3\2\2\2\u12f7\u0285"+
		"\3\2\2\2\u12f8\u12f9\7\u008d\2\2\u12f9\u0287\3\2\2\2\u12fa\u12fb\7\u0218"+
		"\2\2\u12fb\u0289\3\2\2\2\u12fc\u12fd\7\u0219\2\2\u12fd\u028b\3\2\2\2\u12fe"+
		"\u1300\tH\2\2\u12ff\u1301\7\u009b\2\2\u1300\u12ff\3\2\2\2\u1300\u1301"+
		"\3\2\2\2\u1301\u1302\3\2\2\2\u1302\u1303\5\u01f8\u00fd\2\u1303\u028d\3"+
		"\2\2\2\u1304\u1306\7\25\2\2\u1305\u1304\3\2\2\2\u1305\u1306\3\2\2\2\u1306"+
		"\u1309\3\2\2\2\u1307\u130a\5\u02fe\u0180\2\u1308\u130a\5\u0292\u014a\2"+
		"\u1309\u1307\3\2\2\2\u1309\u1308\3\2\2\2\u130a\u130d\3\2\2\2\u130b\u130d"+
		"\7\25\2\2\u130c\u1305\3\2\2\2\u130c\u130b\3\2\2\2\u130d\u028f\3\2\2\2"+
		"\u130e\u1311\5\u02fe\u0180\2\u130f\u1311\5\u0292\u014a\2\u1310\u130e\3"+
		"\2\2\2\u1310\u130f\3\2\2\2\u1311\u0291\3\2\2\2\u1312\u1313\5\u02fc\u017f"+
		"\2\u1313\u0293\3\2\2\2\u1314\u1317\7\u01b8\2\2\u1315\u1318\5\u0296\u014c"+
		"\2\u1316\u1318\5\u01fc\u00ff\2\u1317\u1315\3\2\2\2\u1317\u1316\3\2\2\2"+
		"\u1318\u0295\3\2\2\2\u1319\u131a\7X\2\2\u131a\u131b\7\u010a\2\2\u131b"+
		"\u131c\5\u02ce\u0168\2\u131c\u0297\3\2\2\2\u131d\u1320\5\u02ca\u0166\2"+
		"\u131e\u1320\5\u01f4\u00fb\2\u131f\u131d\3\2\2\2\u131f\u131e\3\2\2\2\u1320"+
		"\u0299\3\2\2\2\u1321\u1322\7\u00c0\2\2\u1322\u1327\5\u0298\u014d\2\u1323"+
		"\u1324\7\u0200\2\2\u1324\u1326\5\u0298\u014d\2\u1325\u1323\3\2\2\2\u1326"+
		"\u1329\3\2\2\2\u1327\u1325\3\2\2\2\u1327\u1328\3\2\2\2\u1328\u1336\3\2"+
		"\2\2\u1329\u1327\3\2\2\2\u132a\u132b\7-\2\2\u132b\u132c\7?\2\2\u132c\u132d"+
		"\7\u00c0\2\2\u132d\u1332\5\u02ca\u0166\2\u132e\u132f\7\u0200\2\2\u132f"+
		"\u1331\5\u02ca\u0166\2\u1330\u132e\3\2\2\2\u1331\u1334\3\2\2\2\u1332\u1330"+
		"\3\2\2\2\u1332\u1333\3\2\2\2\u1333\u1336\3\2\2\2\u1334\u1332\3\2\2\2\u1335"+
		"\u1321\3\2\2\2\u1335\u132a\3\2\2\2\u1336\u029b\3\2\2\2\u1337\u133a\5\u02fe"+
		"\u0180\2\u1338\u133a\5\u02fc\u017f\2\u1339\u1337\3\2\2\2\u1339\u1338\3"+
		"\2\2\2\u133a\u029d\3\2\2\2\u133b\u133c\5\u02fe\u0180\2\u133c\u029f\3\2"+
		"\2\2\u133d\u133e\5\u02fe\u0180\2\u133e\u02a1\3\2\2\2\u133f\u1340\5\u02fe"+
		"\u0180\2\u1340\u02a3\3\2\2\2\u1341\u1342\5\u02fe\u0180\2\u1342\u02a5\3"+
		"\2\2\2\u1343\u1344\5\u02fe\u0180\2\u1344\u02a7\3\2\2\2\u1345\u1346\5\u02fe"+
		"\u0180\2\u1346\u02a9\3\2\2\2\u1347\u134c\5\u02fe\u0180\2\u1348\u1349\7"+
		"\u01f3\2\2\u1349\u134b\5\u0300\u0181\2\u134a\u1348\3\2\2\2\u134b\u134e"+
		"\3\2\2\2\u134c\u134a\3\2\2\2\u134c\u134d\3\2\2\2\u134d\u1351\3\2\2\2\u134e"+
		"\u134c\3\2\2\2\u134f\u1350\7\u0202\2\2\u1350\u1352\5\u02d4\u016b\2\u1351"+
		"\u134f\3\2\2\2\u1351\u1352\3\2\2\2\u1352\u02ab\3\2\2\2\u1353\u1354\5\u02a8"+
		"\u0155\2\u1354\u1355\7\u01f3\2\2\u1355\u1357\3\2\2\2\u1356\u1353\3\2\2"+
		"\2\u1356\u1357\3\2\2\2\u1357\u1358\3\2\2\2\u1358\u1359\5\u02fe\u0180\2"+
		"\u1359\u02ad\3\2\2\2\u135a\u135d\5\u02fe\u0180\2\u135b\u135c\7\u01f3\2"+
		"\2\u135c\u135e\5\u0300\u0181\2\u135d\u135b\3\2\2\2\u135d\u135e\3\2\2\2"+
		"\u135e\u02af\3\2\2\2\u135f\u1360\5\u02fe\u0180\2\u1360\u02b1\3\2\2\2\u1361"+
		"\u1362\5\u02fe\u0180\2\u1362\u02b3\3\2\2\2\u1363\u1364\5\u02fe\u0180\2"+
		"\u1364\u02b5\3\2\2\2\u1365\u136a\5\u02fe\u0180\2\u1366\u1367\7\u01f3\2"+
		"\2\u1367\u1369\5\u0300\u0181\2\u1368\u1366\3\2\2\2\u1369\u136c\3\2\2\2"+
		"\u136a\u1368\3\2\2\2\u136a\u136b\3\2\2\2\u136b\u02b7\3\2\2\2\u136c\u136a"+
		"\3\2\2\2\u136d\u136e\5\u02fe\u0180\2\u136e\u02b9\3\2\2\2\u136f\u1374\5"+
		"\u02fe\u0180\2\u1370\u1371\7\u01f3\2\2\u1371\u1373\5\u0300\u0181\2\u1372"+
		"\u1370\3\2\2\2\u1373\u1376\3\2\2\2\u1374\u1372\3\2\2\2\u1374\u1375\3\2"+
		"\2\2\u1375\u1379\3\2\2\2\u1376\u1374\3\2\2\2\u1377\u1378\7\u0202\2\2\u1378"+
		"\u137a\5\u02d4\u016b\2\u1379\u1377\3\2\2\2\u1379\u137a\3\2\2\2\u137a\u02bb"+
		"\3\2\2\2\u137b\u137c\5\u0300\u0181\2\u137c\u02bd\3\2\2\2\u137d\u1382\5"+
		"\u0300\u0181\2\u137e\u137f\7\u01f3\2\2\u137f\u1381\5\u0300\u0181\2\u1380"+
		"\u137e\3\2\2\2\u1381\u1384\3\2\2\2\u1382\u1380\3\2\2\2\u1382\u1383\3\2"+
		"\2\2\u1383\u02bf\3\2\2\2\u1384\u1382\3\2\2\2\u1385\u138a\5\u0300\u0181"+
		"\2\u1386\u1387\7\u01f3\2\2\u1387\u1389\5\u0300\u0181\2\u1388\u1386\3\2"+
		"\2\2\u1389\u138c\3\2\2\2\u138a\u1388\3\2\2\2\u138a\u138b\3\2\2\2\u138b"+
		"\u02c1\3\2\2\2\u138c\u138a\3\2\2\2\u138d\u1392\5\u02fe\u0180\2\u138e\u138f"+
		"\7\u01f3\2\2\u138f\u1391\5\u0300\u0181\2\u1390\u138e\3\2\2\2\u1391\u1394"+
		"\3\2\2\2\u1392\u1390\3\2\2\2\u1392\u1393\3\2\2\2\u1393\u02c3\3\2\2\2\u1394"+
		"\u1392\3\2\2\2\u1395\u1398\5\u02fe\u0180\2\u1396\u1397\7\u01f3\2\2\u1397"+
		"\u1399\5\u0300\u0181\2\u1398\u1396\3\2\2\2\u1398\u1399\3\2\2\2\u1399\u02c5"+
		"\3\2\2\2\u139a\u139d\5\u02fe\u0180\2\u139b\u139c\7\u01f3\2\2\u139c\u139e"+
		"\5\u0300\u0181\2\u139d\u139b\3\2\2\2\u139d\u139e\3\2\2\2\u139e\u02c7\3"+
		"\2\2\2\u139f\u13a2\5\u02fe\u0180\2\u13a0\u13a1\7\u01f3\2\2\u13a1\u13a3"+
		"\5\u0300\u0181\2\u13a2\u13a0\3\2\2\2\u13a2\u13a3\3\2\2\2\u13a3\u02c9\3"+
		"\2\2\2\u13a4\u13a5\7\u0214\2\2\u13a5\u13a7\5\u02da\u016e\2\u13a6\u13a4"+
		"\3\2\2\2\u13a6\u13a7\3\2\2\2\u13a7\u13a8\3\2\2\2\u13a8\u13ab\5\u0300\u0181"+
		"\2\u13a9\u13aa\7\u01f3\2\2\u13aa\u13ac\5\u0300\u0181\2\u13ab\u13a9\3\2"+
		"\2\2\u13ab\u13ac\3\2\2\2\u13ac\u13af\3\2\2\2\u13ad\u13af\5\u02f0\u0179"+
		"\2\u13ae\u13a6\3\2\2\2\u13ae\u13ad\3\2\2\2\u13af\u02cb\3\2\2\2\u13b0\u13b1"+
		"\5\u02fe\u0180\2\u13b1\u02cd\3\2\2\2\u13b2\u13b5\5\u02fe\u0180\2\u13b3"+
		"\u13b5\5\u02f0\u0179\2\u13b4\u13b2\3\2\2\2\u13b4\u13b3\3\2\2\2\u13b5\u02cf"+
		"\3\2\2\2\u13b6\u13b9\5\u02fe\u0180\2\u13b7\u13b9\5\u02f0\u0179\2\u13b8"+
		"\u13b6\3\2\2\2\u13b8\u13b7\3\2\2\2\u13b9\u02d1\3\2\2\2\u13ba\u13bd\5\u02fe"+
		"\u0180\2\u13bb\u13bc\7\u01f3\2\2\u13bc\u13be\5\u0300\u0181\2\u13bd\u13bb"+
		"\3\2\2\2\u13bd\u13be\3\2\2\2\u13be\u02d3\3\2\2\2\u13bf\u13c0\5\u02fe\u0180"+
		"\2\u13c0\u02d5\3\2\2\2\u13c1\u13c6\5\u02fe\u0180\2\u13c2\u13c3\7\u01f3"+
		"\2\2\u13c3\u13c5\5\u0300\u0181\2\u13c4\u13c2\3\2\2\2\u13c5\u13c8\3\2\2"+
		"\2\u13c6\u13c4\3\2\2\2\u13c6\u13c7\3\2\2\2\u13c7\u02d7\3\2\2\2\u13c8\u13c6"+
		"\3\2\2\2\u13c9\u13cc\5\u02fe\u0180\2\u13ca\u13cb\7\u01f3\2\2\u13cb\u13cd"+
		"\5\u0300\u0181\2\u13cc\u13ca\3\2\2\2\u13cc\u13cd\3\2\2\2\u13cd\u13d1\3"+
		"\2\2\2\u13ce\u13cf\7\u0202\2\2\u13cf\u13d2\5\u02d4\u016b\2\u13d0\u13d2"+
		"\5\u028c\u0147\2\u13d1\u13ce\3\2\2\2\u13d1\u13d0\3\2\2\2\u13d1\u13d2\3"+
		"\2\2\2\u13d2\u02d9\3\2\2\2\u13d3\u13d8\5\u0300\u0181\2\u13d4\u13d5\7\u01f3"+
		"\2\2\u13d5\u13d7\5\u0300\u0181\2\u13d6\u13d4\3\2\2\2\u13d7\u13da\3\2\2"+
		"\2\u13d8\u13d6\3\2\2\2\u13d8\u13d9\3\2\2\2\u13d9\u02db\3\2\2\2\u13da\u13d8"+
		"\3\2\2\2\u13db\u13dc\7\u00c7\2\2\u13dc\u13dd\7\u01fa\2\2\u13dd\u13de\7"+
		"\u01d8\2\2\u13de\u13df\t*\2\2\u13df\u13e0\5\u01a4\u00d3\2\u13e0\u13e2"+
		"\7\u01fb\2\2\u13e1\u13e3\5\u0252\u012a\2\u13e2\u13e1\3\2\2\2\u13e2\u13e3"+
		"\3\2\2\2\u13e3\u02dd\3\2\2\2\u13e4\u13e6\7\u01fa\2\2\u13e5\u13e7\5\u02e6"+
		"\u0174\2\u13e6\u13e5\3\2\2\2\u13e6\u13e7\3\2\2\2\u13e7\u13ec\3\2\2\2\u13e8"+
		"\u13e9\7\u0200\2\2\u13e9\u13eb\5\u02e6\u0174\2\u13ea\u13e8\3\2\2\2\u13eb"+
		"\u13ee\3\2\2\2\u13ec\u13ea\3\2\2\2\u13ec\u13ed\3\2\2\2\u13ed\u13ef\3\2"+
		"\2\2\u13ee\u13ec\3\2\2\2\u13ef\u13f1\7\u01fb\2\2\u13f0\u13f2\5\u02dc\u016f"+
		"\2\u13f1\u13f0\3\2\2\2\u13f1\u13f2\3\2\2\2\u13f2\u02df\3\2\2\2\u13f3\u13f8"+
		"\7\u01fa\2\2\u13f4\u13f6\5\u02e6\u0174\2\u13f5\u13f7\5\u02e4\u0173\2\u13f6"+
		"\u13f5\3\2\2\2\u13f6\u13f7\3\2\2\2\u13f7\u13f9\3\2\2\2\u13f8\u13f4\3\2"+
		"\2\2\u13f8\u13f9\3\2\2\2\u13f9\u1401\3\2\2\2\u13fa\u13fb\7\u0200\2\2\u13fb"+
		"\u13fd\5\u02e6\u0174\2\u13fc\u13fe\5\u02e4\u0173\2\u13fd\u13fc\3\2\2\2"+
		"\u13fd\u13fe\3\2\2\2\u13fe\u1400\3\2\2\2\u13ff\u13fa\3\2\2\2\u1400\u1403"+
		"\3\2\2\2\u1401\u13ff\3\2\2\2\u1401\u1402\3\2\2\2\u1402\u1404\3\2\2\2\u1403"+
		"\u1401\3\2\2\2\u1404\u1406\7\u01fb\2\2\u1405\u1407\5\u02dc\u016f\2\u1406"+
		"\u1405\3\2\2\2\u1406\u1407\3\2\2\2\u1407\u02e1\3\2\2\2\u1408\u1409\7\u01fa"+
		"\2\2\u1409\u1416\5\u02d6\u016c\2\u140a\u140d\7\u0200\2\2\u140b\u140e\5"+
		"\u02fa\u017e\2\u140c\u140e\7\u0104\2\2\u140d\u140b\3\2\2\2\u140d\u140c"+
		"\3\2\2\2\u140e\u1414\3\2\2\2\u140f\u1412\7\u0200\2\2\u1410\u1413\5\u02fa"+
		"\u017e\2\u1411\u1413\7\u0104\2\2\u1412\u1410\3\2\2\2\u1412\u1411\3\2\2"+
		"\2\u1413\u1415\3\2\2\2\u1414\u140f\3\2\2\2\u1414\u1415\3\2\2\2\u1415\u1417"+
		"\3\2\2\2\u1416\u140a\3\2\2\2\u1416\u1417\3\2\2\2\u1417\u1418\3\2\2\2\u1418"+
		"\u142c\7\u01a8\2\2\u1419\u141a\5\u02d8\u016d\2\u141a\u141b\7\u01f3\2\2"+
		"\u141b\u141c\7\u01fd\2\2\u141c\u142d\3\2\2\2\u141d\u142d\7\u01fd\2\2\u141e"+
		"\u1420\5\u01fe\u0100\2\u141f\u1421\5\u028e\u0148\2\u1420\u141f\3\2\2\2"+
		"\u1420\u1421\3\2\2\2\u1421\u1429\3\2\2\2\u1422\u1423\7\u0200\2\2\u1423"+
		"\u1425\5\u01fe\u0100\2\u1424\u1426\5\u028e\u0148\2\u1425\u1424\3\2\2\2"+
		"\u1425\u1426\3\2\2\2\u1426\u1428\3\2\2\2\u1427\u1422\3\2\2\2\u1428\u142b"+
		"\3\2\2\2\u1429\u1427\3\2\2\2\u1429\u142a\3\2\2\2\u142a\u142d\3\2\2\2\u142b"+
		"\u1429\3\2\2\2\u142c\u1419\3\2\2\2\u142c\u141d\3\2\2\2\u142c\u141e\3\2"+
		"\2\2\u142d\u142e\3\2\2\2\u142e\u1430\7\u01fb\2\2\u142f\u1431\5\u02dc\u016f"+
		"\2\u1430\u142f\3\2\2\2\u1430\u1431\3\2\2\2\u1431\u02e3\3\2\2\2\u1432\u1433"+
		"\tI\2\2\u1433\u1434\7\u0105\2\2\u1434\u02e5\3\2\2\2\u1435\u1436\5\u02fe"+
		"\u0180\2\u1436\u1437\7\u0211\2\2\u1437\u1438\7\u020e\2\2\u1438\u143a\3"+
		"\2\2\2\u1439\u1435\3\2\2\2\u1439\u143a\3\2\2\2\u143a\u143b\3\2\2\2\u143b"+
		"\u143c\5\u0200\u0101\2\u143c\u02e7\3\2\2\2\u143d\u1446\5\u02ea\u0176\2"+
		"\u143e\u1440\7\u013a\2\2\u143f\u143e\3\2\2\2\u143f\u1440\3\2\2\2\u1440"+
		"\u1441\3\2\2\2\u1441\u1443\5\u02be\u0160\2\u1442\u1444\t\26\2\2\u1443"+
		"\u1442\3\2\2\2\u1443\u1444\3\2\2\2\u1444\u1446\3\2\2\2\u1445\u143d\3\2"+
		"\2\2\u1445\u143f\3\2\2\2\u1446\u02e9\3\2\2\2\u1447\u1449\5\u02ee\u0178"+
		"\2\u1448\u144a\5\u02ec\u0177\2\u1449\u1448\3\2\2\2\u1449\u144a\3\2\2\2"+
		"\u144a\u1451\3\2\2\2\u144b\u144d\7\u01ba\2\2\u144c\u144e\7\u00d4\2\2\u144d"+
		"\u144c\3\2\2\2\u144d\u144e\3\2\2\2\u144e\u144f\3\2\2\2\u144f\u1450\7\u0187"+
		"\2\2\u1450\u1452\7\u01d0\2\2\u1451\u144b\3\2\2\2\u1451\u1452\3\2\2\2\u1452"+
		"\u1464\3\2\2\2\u1453\u1454\7\u00bf\2\2\u1454\u1459\tJ\2\2\u1455\u1456"+
		"\7\u01fa\2\2\u1456\u1457\5\u0200\u0101\2\u1457\u1458\7\u01fb\2\2\u1458"+
		"\u145a\3\2\2\2\u1459\u1455\3\2\2\2\u1459\u145a\3\2\2\2\u145a\u145b\3\2"+
		"\2\2\u145b\u145c\7\u0190\2\2\u145c\u1461\tK\2\2\u145d\u145e\7\u01fa\2"+
		"\2\u145e\u145f\5\u0200\u0101\2\u145f\u1460\7\u01fb\2\2\u1460\u1462\3\2"+
		"\2\2\u1461\u145d\3\2\2\2\u1461\u1462\3\2\2\2\u1462\u1464\3\2\2\2\u1463"+
		"\u1447\3\2\2\2\u1463\u1453\3\2\2\2\u1464\u02eb\3\2\2\2\u1465\u1466\7\u01fa"+
		"\2\2\u1466\u1469\5\u02fa\u017e\2\u1467\u1468\7\u0200\2\2\u1468\u146a\5"+
		"\u02fa\u017e\2\u1469\u1467\3\2\2\2\u1469\u146a\3\2\2\2\u146a\u146c\3\2"+
		"\2\2\u146b\u146d\tL\2\2\u146c\u146b\3\2\2\2\u146c\u146d\3\2\2\2\u146d"+
		"\u146e\3\2\2\2\u146e\u146f\7\u01fb\2\2\u146f\u02ed\3\2\2\2\u1470\u14ad"+
		"\7&\2\2\u1471\u14ad\7\u012b\2\2\u1472\u14ad\7\u00ee\2\2\u1473\u14ad\7"+
		"%\2\2\u1474\u14ad\7$\2\2\u1475\u14ad\7\u00ef\2\2\u1476\u14ad\7\u012c\2"+
		"\2\u1477\u14ad\7\u012d\2\2\u1478\u14ad\7\u016a\2\2\u1479\u14ad\7\u016b"+
		"\2\2\u147a\u14ad\7\u0108\2\2\u147b\u14ad\7e\2\2\u147c\u14ad\7\u00bd\2"+
		"\2\u147d\u14ad\7\u00bc\2\2\u147e\u14ad\7\u0107\2\2\u147f\u14ad\7\u016f"+
		"\2\2\u1480\u14ad\7\u0106\2\2\u1481\u14ad\7f\2\2\u1482\u1484\7w\2\2\u1483"+
		"\u1485\7\u0130\2\2\u1484\u1483\3\2\2\2\u1484\u1485\3\2\2\2\u1485\u14ad"+
		"\3\2\2\2\u1486\u14ad\7\u0098\2\2\u1487\u14ad\7\u0138\2\2\u1488\u14ad\7"+
		"\u00f1\2\2\u1489\u148b\7\u00da\2\2\u148a\u148c\7\u0136\2\2\u148b\u148a"+
		"\3\2\2\2\u148b\u148c\3\2\2\2\u148c\u14ad\3\2\2\2\u148d\u14ad\7\67\2\2"+
		"\u148e\u14ad\79\2\2\u148f\u14ad\7\u01ad\2\2\u1490\u14ad\7\u01ac\2\2\u1491"+
		"\u14ad\7\u017d\2\2\u1492\u14ad\7\u0136\2\2\u1493\u14ad\7*\2\2\u1494\u14ad"+
		"\7_\2\2\u1495\u14ad\7\u014e\2\2\u1496\u14ad\7\u01a6\2\2\u1497\u14ad\7"+
		"\u01cd\2\2\u1498\u14ad\7\u00ea\2\2\u1499\u14ad\7`\2\2\u149a\u14ad\7\u00a8"+
		"\2\2\u149b\u14ad\7\u00e4\2\2\u149c\u14ad\7\u0158\2\2\u149d\u14ad\7\u018d"+
		"\2\2\u149e\u14ad\7\u018e\2\2\u149f\u14ad\7\u018f\2\2\u14a0\u14ad\7\u018c"+
		"\2\2\u14a1\u14ad\7\u0188\2\2\u14a2\u14ad\7\u018b\2\2\u14a3\u14ad\7\u018a"+
		"\2\2\u14a4\u14ad\7\u0189\2\2\u14a5\u14ad\7\u01cf\2\2\u14a6\u14ad\7y\2"+
		"\2\u14a7\u14ad\7#\2\2\u14a8\u14ad\7\'\2\2\u14a9\u14ad\7<\2\2\u14aa\u14ad"+
		"\7\u00f3\2\2\u14ab\u14ad\7\u00e6\2\2\u14ac\u1470\3\2\2\2\u14ac\u1471\3"+
		"\2\2\2\u14ac\u1472\3\2\2\2\u14ac\u1473\3\2\2\2\u14ac\u1474\3\2\2\2\u14ac"+
		"\u1475\3\2\2\2\u14ac\u1476\3\2\2\2\u14ac\u1477\3\2\2\2\u14ac\u1478\3\2"+
		"\2\2\u14ac\u1479\3\2\2\2\u14ac\u147a\3\2\2\2\u14ac\u147b\3\2\2\2\u14ac"+
		"\u147c\3\2\2\2\u14ac\u147d\3\2\2\2\u14ac\u147e\3\2\2\2\u14ac\u147f\3\2"+
		"\2\2\u14ac\u1480\3\2\2\2\u14ac\u1481\3\2\2\2\u14ac\u1482\3\2\2\2\u14ac"+
		"\u1486\3\2\2\2\u14ac\u1487\3\2\2\2\u14ac\u1488\3\2\2\2\u14ac\u1489\3\2"+
		"\2\2\u14ac\u148d\3\2\2\2\u14ac\u148e\3\2\2\2\u14ac\u148f\3\2\2\2\u14ac"+
		"\u1490\3\2\2\2\u14ac\u1491\3\2\2\2\u14ac\u1492\3\2\2\2\u14ac\u1493\3\2"+
		"\2\2\u14ac\u1494\3\2\2\2\u14ac\u1495\3\2\2\2\u14ac\u1496\3\2\2\2\u14ac"+
		"\u1497\3\2\2\2\u14ac\u1498\3\2\2\2\u14ac\u1499\3\2\2\2\u14ac\u149a\3\2"+
		"\2\2\u14ac\u149b\3\2\2\2\u14ac\u149c\3\2\2\2\u14ac\u149d\3\2\2\2\u14ac"+
		"\u149e\3\2\2\2\u14ac\u149f\3\2\2\2\u14ac\u14a0\3\2\2\2\u14ac\u14a1\3\2"+
		"\2\2\u14ac\u14a2\3\2\2\2\u14ac\u14a3\3\2\2\2\u14ac\u14a4\3\2\2\2\u14ac"+
		"\u14a5\3\2\2\2\u14ac\u14a6\3\2\2\2\u14ac\u14a7\3\2\2\2\u14ac\u14a8\3\2"+
		"\2\2\u14ac\u14a9\3\2\2\2\u14ac\u14aa\3\2\2\2\u14ac\u14ab\3\2\2\2\u14ad"+
		"\u02ef\3\2\2\2\u14ae\u14b2\7\u0204\2\2\u14af\u14b0\7\u0205\2\2\u14b0\u14b2"+
		"\7\u01f4\2\2\u14b1\u14ae\3\2\2\2\u14b1\u14af\3\2\2\2\u14b2\u14bb\3\2\2"+
		"\2\u14b3\u14b5\7\u00b3\2\2\u14b4\u14b3\3\2\2\2\u14b4\u14b5\3\2\2\2\u14b5"+
		"\u14b9\3\2\2\2\u14b6\u14ba\7\u0204\2\2\u14b7\u14b8\7\u0205\2\2\u14b8\u14ba"+
		"\7\u01f4\2\2\u14b9\u14b6\3\2\2\2\u14b9\u14b7\3\2\2\2\u14ba\u14bc\3\2\2"+
		"\2\u14bb\u14b4\3\2\2\2\u14bb\u14bc\3\2\2\2\u14bc\u14c1\3\2\2\2\u14bd\u14be"+
		"\7\u01f3\2\2\u14be\u14c0\5\u02f4\u017b\2\u14bf\u14bd\3\2\2\2\u14c0\u14c3"+
		"\3\2\2\2\u14c1\u14bf\3\2\2\2\u14c1\u14c2\3\2\2\2\u14c2\u02f1\3\2\2\2\u14c3"+
		"\u14c1\3\2\2\2\u14c4\u14c9\5\u02f4\u017b\2\u14c5\u14c6\7\u01f3\2\2\u14c6"+
		"\u14c8\5\u02f4\u017b\2\u14c7\u14c5\3\2\2\2\u14c8\u14cb\3\2\2\2\u14c9\u14c7"+
		"\3\2\2\2\u14c9\u14ca\3\2\2\2\u14ca\u02f3\3\2\2\2\u14cb\u14c9\3\2\2\2\u14cc"+
		"\u14cd\7\u0214\2\2\u14cd\u14cf\5\u02da\u016e\2\u14ce\u14cc\3\2\2\2\u14ce"+
		"\u14cf\3\2\2\2\u14cf\u14d0\3\2\2\2\u14d0\u14d5\5\u0300\u0181\2\u14d1\u14d2"+
		"\7\u01f3\2\2\u14d2\u14d4\5\u0300\u0181\2\u14d3\u14d1\3\2\2\2\u14d4\u14d7"+
		"\3\2\2\2\u14d5\u14d3\3\2\2\2\u14d5\u14d6\3\2\2\2\u14d6\u14d9\3\2\2\2\u14d7"+
		"\u14d5\3\2\2\2\u14d8\u14da\5\u02de\u0170\2\u14d9\u14d8\3\2\2\2\u14d9\u14da"+
		"\3\2\2\2\u14da\u02f5\3\2\2\2\u14db\u14dc\7\u0214\2\2\u14dc\u14de\5\u02da"+
		"\u016e\2\u14dd\u14db\3\2\2\2\u14dd\u14de\3\2\2\2\u14de\u14df\3\2\2\2\u14df"+
		"\u14e4\5\u0300\u0181\2\u14e0\u14e1\7\u01f3\2\2\u14e1\u14e3\5\u0300\u0181"+
		"\2\u14e2\u14e0\3\2\2\2\u14e3\u14e6\3\2\2\2\u14e4\u14e2\3\2\2\2\u14e4\u14e5"+
		"\3\2\2\2\u14e5\u02f7\3\2\2\2\u14e6\u14e4\3\2\2\2\u14e7\u14ea\7\u0188\2"+
		"\2\u14e8\u14eb\5\u02fc\u017f\2\u14e9\u14eb\5\u02f0\u0179\2\u14ea\u14e8"+
		"\3\2\2\2\u14ea\u14e9\3\2\2\2\u14eb\u14f0\3\2\2\2\u14ec\u14ed\7\30\2\2"+
		"\u14ed\u14ee\7\u0187\2\2\u14ee\u14ef\7\u01d0\2\2\u14ef\u14f1\5\u02fc\u017f"+
		"\2\u14f0\u14ec\3\2\2\2\u14f0\u14f1\3\2\2\2\u14f1\u1526\3\2\2\2\u14f2\u14f6"+
		"\7\u00bf\2\2\u14f3\u14f7\5\u02fc\u017f\2\u14f4\u14f7\5\u02f0\u0179\2\u14f5"+
		"\u14f7\5\u02f4\u017b\2\u14f6\u14f3\3\2\2\2\u14f6\u14f4\3\2\2\2\u14f6\u14f5"+
		"\3\2\2\2\u14f7\u14f8\3\2\2\2\u14f8\u1506\tM\2\2\u14f9\u14fc\7\u01fa\2"+
		"\2\u14fa\u14fd\7\u01f4\2\2\u14fb\u14fd\5\u02f0\u0179\2\u14fc\u14fa\3\2"+
		"\2\2\u14fc\u14fb\3\2\2\2\u14fd\u1503\3\2\2\2\u14fe\u1501\7\u0200\2\2\u14ff"+
		"\u1502\7\u01f4\2\2\u1500\u1502\5\u02f0\u0179\2\u1501\u14ff\3\2\2\2\u1501"+
		"\u1500\3\2\2\2\u1502\u1504\3\2\2\2\u1503\u14fe\3\2\2\2\u1503\u1504\3\2"+
		"\2\2\u1504\u1505\3\2\2\2\u1505\u1507\7\u01fb\2\2\u1506\u14f9\3\2\2\2\u1506"+
		"\u1507\3\2\2\2\u1507\u1517\3\2\2\2\u1508\u1515\7\u0190\2\2\u1509\u1516"+
		"\7`\2\2\u150a\u1516\7\u00a8\2\2\u150b\u1516\7\u00e4\2\2\u150c\u1513\7"+
		"\u0158\2\2\u150d\u1510\7\u01fa\2\2\u150e\u1511\7\u01f4\2\2\u150f\u1511"+
		"\5\u02f0\u0179\2\u1510\u150e\3\2\2\2\u1510\u150f\3\2\2\2\u1511\u1512\3"+
		"\2\2\2\u1512\u1514\7\u01fb\2\2\u1513\u150d\3\2\2\2\u1513\u1514\3\2\2\2"+
		"\u1514\u1516\3\2\2\2\u1515\u1509\3\2\2\2\u1515\u150a\3\2\2\2\u1515\u150b"+
		"\3\2\2\2\u1515\u150c\3\2\2\2\u1516\u1518\3\2\2\2\u1517\u1508\3\2\2\2\u1517"+
		"\u1518\3\2\2\2\u1518\u1526\3\2\2\2\u1519\u1526\5\u02fa\u017e\2\u151a\u151b"+
		"\7_\2\2\u151b\u1526\5\u02fc\u017f\2\u151c\u1526\5\u02fc\u017f\2\u151d"+
		"\u1526\7\u0104\2\2\u151e\u1526\7\u0199\2\2\u151f\u1526\7\u0093\2\2\u1520"+
		"\u1526\7b\2\2\u1521\u1526\7\u0162\2\2\u1522\u1526\7\u00e5\2\2\u1523\u1526"+
		"\7\u00df\2\2\u1524\u1526\7j\2\2\u1525\u14e7\3\2\2\2\u1525\u14f2\3\2\2"+
		"\2\u1525\u1519\3\2\2\2\u1525\u151a\3\2\2\2\u1525\u151c\3\2\2\2\u1525\u151d"+
		"\3\2\2\2\u1525\u151e\3\2\2\2\u1525\u151f\3\2\2\2\u1525\u1520\3\2\2\2\u1525"+
		"\u1521\3\2\2\2\u1525\u1522\3\2\2\2\u1525\u1523\3\2\2\2\u1525\u1524\3\2"+
		"\2\2\u1526\u02f9\3\2\2\2\u1527\u1528\tN\2\2\u1528\u02fb\3\2\2\2\u1529"+
		"\u152a\tO\2\2\u152a\u02fd\3\2\2\2\u152b\u152c\7\u0214\2\2\u152c\u152e"+
		"\5\u02da\u016e\2\u152d\u152b\3\2\2\2\u152d\u152e\3\2\2\2\u152e\u152f\3"+
		"\2\2\2\u152f\u1530\5\u0300\u0181\2\u1530\u02ff\3\2\2\2\u1531\u1534\5\u030c"+
		"\u0187\2\u1532\u1534\7\u01f7\2\2\u1533\u1531\3\2\2\2\u1533\u1532\3\2\2"+
		"\2\u1534\u0301\3\2\2\2\u1535\u153d\7\u020a\2\2\u1536\u1537\7\u0208\2\2"+
		"\u1537\u153d\7\u020e\2\2\u1538\u1539\7\u020d\2\2\u1539\u153d\7\u0211\2"+
		"\2\u153a\u153b\7\u020b\2\2\u153b\u153d\7\u0211\2\2\u153c\u1535\3\2\2\2"+
		"\u153c\u1536\3\2\2\2\u153c\u1538\3\2\2\2\u153c\u153a\3\2\2\2\u153d\u0303"+
		"\3\2\2\2\u153e\u1542\7\u0209\2\2\u153f\u1540\7\u020e\2\2\u1540\u1542\7"+
		"\u0211\2\2\u1541\u153e\3\2\2\2\u1541\u153f\3\2\2\2\u1542\u0305\3\2\2\2"+
		"\u1543\u1547\7\u0207\2\2\u1544\u1545\7\u0208\2\2\u1545\u1547\7\u0211\2"+
		"\2\u1546\u1543\3\2\2\2\u1546\u1544\3\2\2\2\u1547\u0307\3\2\2\2\u1548\u154c"+
		"\7\u020f\2\2\u1549\u154a\7\u0210\2\2\u154a\u154c\7\u0210\2\2\u154b\u1548"+
		"\3\2\2\2\u154b\u1549\3\2\2\2\u154c\u0309\3\2\2\2\u154d\u154e\7\u01fa\2"+
		"\2\u154e\u154f\7\u01fe\2\2\u154f\u1550\7\u01fb\2\2\u1550\u030b\3\2\2\2"+
		"\u1551\u1552\tP\2\2\u1552\u030d\3\2\2\2\u02c9\u0311\u0316\u031e\u0320"+
		"\u033b\u0347\u034c\u0351\u0358\u035a\u0366\u036b\u0377\u0379\u037e\u0383"+
		"\u0388\u038a\u0390\u039e\u03a3\u03a6\u03ac\u03b5\u03c3\u03cb\u03d5\u03d8"+
		"\u03dd\u03e2\u03e9\u03ee\u03f8\u03ff\u0401\u0405\u040b\u0410\u041c\u0428"+
		"\u0434\u0439\u043e\u0445\u0447\u0453\u0458\u045b\u045f\u0464\u046a\u046c"+
		"\u047e\u0483\u0488\u048a\u0491\u0498\u049b\u049e\u04a1\u04ac\u04b8\u04bc"+
		"\u04bf\u04c8\u04d0\u04d8\u04db\u04e2\u04e6\u04ed\u04f3\u051c\u0538\u053f"+
		"\u0544\u054f\u0552\u055d\u0565\u0569\u0575\u0578\u057e\u0581\u0586\u058b"+
		"\u058f\u0599\u05a3\u05a9\u05b4\u05b9\u05bd\u05c5\u05cd\u05d2\u05d5\u05d7"+
		"\u05da\u05e3\u05e8\u05ef\u05f2\u05f5\u05f9\u05fc\u0604\u0609\u060e\u0615"+
		"\u061f\u0631\u0638\u0642\u064c\u0653\u0658\u065e\u0668\u066d\u0674\u0679"+
		"\u067f\u0682\u0685\u0696\u069b\u06a4\u06a9\u06af\u06b2\u06b9\u06bc\u06c3"+
		"\u06c8\u06cc\u06d1\u06d6\u06e0\u06e6\u06f0\u06f5\u06fc\u0702\u0706\u0709"+
		"\u070c\u071d\u0722\u072a\u0738\u073f\u074f\u0758\u075a\u076f\u077f\u0788"+
		"\u078d\u0791\u0794\u079e\u07aa\u07b0\u07b8\u07bc\u07bf\u07ce\u07d2\u07d7"+
		"\u07da\u07e7\u07eb\u07f7\u07fc\u0800\u0804\u080a\u080d\u0810\u081e\u082e"+
		"\u0834\u0838\u083e\u084a\u0853\u0855\u085b\u085f\u0862\u086b\u0876\u087a"+
		"\u087d\u0881\u0889\u0892\u089c\u089e\u08c1\u08c5\u08cc\u08d0\u08d4\u08d8"+
		"\u08e4\u08e8\u08f6\u08fc\u0903\u0908\u0912\u0918\u091a\u0923\u092d\u0932"+
		"\u0941\u0945\u0948\u094c\u0951\u0955\u0966\u096a\u0973\u0977\u0980\u0982"+
		"\u098e\u0996\u099d\u09a2\u09a4\u09a9\u09ae\u09b6\u09bd\u09c1\u09c4\u09d0"+
		"\u09d6\u09de\u09e8\u09f3\u09fa\u0a01\u0a04\u0a0b\u0a16\u0a1c\u0a20\u0a2a"+
		"\u0a2d\u0a33\u0a3e\u0a40\u0a42\u0a45\u0a49\u0a4c\u0a50\u0a54\u0a59\u0a64"+
		"\u0a68\u0a70\u0a73\u0a78\u0a7a\u0a83\u0a8d\u0a92\u0a98\u0a9c\u0a9f\u0aa7"+
		"\u0aaa\u0aae\u0ab2\u0ab7\u0aba\u0abe\u0ac2\u0ac6\u0ad2\u0ae0\u0ae5\u0ae9"+
		"\u0af2\u0af6\u0afe\u0b01\u0b04\u0b08\u0b0b\u0b0e\u0b11\u0b14\u0b17\u0b1b"+
		"\u0b25\u0b2c\u0b33\u0b38\u0b3d\u0b44\u0b4a\u0b54\u0b56\u0b5b\u0b5f\u0b62"+
		"\u0b65\u0b69\u0b6e\u0b72\u0b74\u0b81\u0b88\u0b96\u0b99\u0ba3\u0ba7\u0baf"+
		"\u0bbb\u0bc5\u0bca\u0bd4\u0bdc\u0bdf\u0be5\u0be9\u0bee\u0bf8\u0bfd\u0c0a"+
		"\u0c16\u0c1b\u0c25\u0c2a\u0c2c\u0c31\u0c35\u0c3b\u0c3f\u0c4c\u0c50\u0c5a"+
		"\u0c5d\u0c5f\u0c64\u0c6d\u0c7a\u0c82\u0c8b\u0c8f\u0c94\u0c9f\u0ca1\u0cb1"+
		"\u0cb6\u0cbc\u0cc2\u0cd4\u0cdb\u0cde\u0ce6\u0cef\u0cf1\u0cf5\u0cf8\u0cfd"+
		"\u0cff\u0d03\u0d0f\u0d18\u0d20\u0d25\u0d29\u0d2e\u0d31\u0d39\u0d41\u0d47"+
		"\u0d4a\u0d4d\u0d55\u0d5f\u0d6b\u0d72\u0d76\u0d7a\u0d7d\u0d80\u0d85\u0d8a"+
		"\u0d8d\u0d90\u0d96\u0d99\u0d9f\u0da2\u0da5\u0daa\u0dad\u0db5\u0dbb\u0dc5"+
		"\u0dca\u0dd0\u0dd6\u0de0\u0de4\u0de6\u0de9\u0df5\u0df9\u0dfc\u0e10\u0e15"+
		"\u0e1a\u0e21\u0e24\u0e2d\u0e34\u0e39\u0e3d\u0e45\u0e4b\u0e53\u0e56\u0e5e"+
		"\u0e66\u0e69\u0e6c\u0e75\u0e7b\u0e81\u0e83\u0e90\u0e92\u0e9b\u0e9d\u0ea1"+
		"\u0ea7\u0eab\u0ec1\u0ee8\u0eec\u0ef2\u0f00\u0f0a\u0f10\u0f15\u0f20\u0f24"+
		"\u0f2b\u0f30\u0f34\u0f39\u0f3e\u0f42\u0f4d\u0f52\u0f57\u0f60\u0f62\u0f64"+
		"\u0f75\u0f7d\u0f89\u0f93\u0f9b\u0fa4\u0fa7\u0fae\u0fb6\u0fbd\u0fc1\u0fc8"+
		"\u0fcc\u0fd1\u0fd5\u0fdd\u0fe1\u0fe8\u0ff1\u0fff\u100c\u1011\u1027\u102b"+
		"\u102e\u1035\u1038\u103c\u103f\u1046\u1049\u104f\u1052\u1056\u1059\u1060"+
		"\u1065\u1073\u1079\u107b\u107f\u1087\u1093\u109c\u10a8\u10ad\u10b7\u10be"+
		"\u10c3\u10c8\u10ce\u10d1\u10d5\u10e2\u10e6\u10ef\u10f5\u1103\u110e\u1112"+
		"\u1115\u111e\u1124\u112e\u1136\u1139\u113c\u1145\u114a\u1153\u1159\u115e"+
		"\u1161\u1166\u116b\u116f\u1175\u117b\u1184\u1189\u1191\u1195\u119a\u11a0"+
		"\u11a7\u11ac\u11b4\u11b9\u11c1\u11c4\u11c7\u11ca\u11ce\u11d3\u11d8\u11dc"+
		"\u11e3\u11e8\u11ea\u11f5\u11f9\u11fb\u1206\u1211\u121a\u121d\u1221\u1224"+
		"\u1228\u1235\u123a\u1242\u1249\u124e\u1252\u1257\u125c\u125f\u1266\u1270"+
		"\u1278\u127c\u1286\u1289\u128b\u1295\u1297\u129d\u12a3\u12a5\u12b3\u12b5"+
		"\u12bc\u12c0\u12c6\u12cc\u12d0\u12d5\u12d7\u12e1\u12e4\u12ed\u12f6\u1300"+
		"\u1305\u1309\u130c\u1310\u1317\u131f\u1327\u1332\u1335\u1339\u134c\u1351"+
		"\u1356\u135d\u136a\u1374\u1379\u1382\u138a\u1392\u1398\u139d\u13a2\u13a6"+
		"\u13ab\u13ae\u13b4\u13b8\u13bd\u13c6\u13cc\u13d1\u13d8\u13e2\u13e6\u13ec"+
		"\u13f1\u13f6\u13f8\u13fd\u1401\u1406\u140d\u1412\u1414\u1416\u1420\u1425"+
		"\u1429\u142c\u1430\u1439\u143f\u1443\u1445\u1449\u144d\u1451\u1459\u1461"+
		"\u1463\u1469\u146c\u1484\u148b\u14ac\u14b1\u14b4\u14b9\u14bb\u14c1\u14c9"+
		"\u14ce\u14d5\u14d9\u14dd\u14e4\u14ea\u14f0\u14f6\u14fc\u1501\u1503\u1506"+
		"\u1510\u1513\u1515\u1517\u1525\u152d\u1533\u153c\u1541\u1546\u154b";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}