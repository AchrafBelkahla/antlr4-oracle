// Generated from PlSql.g4 by ANTLR 4.5.2

package org.antlr.generated;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PlSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.5.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, PP_IF=2, PP_THEN=3, PP_ELSE=4, PP_ELSIF=5, PP_END=6, PP_ERROR=7, 
		SQLPLUS_PROMPT=8, SQLPLUS_CALLSCRIPT=9, A_LETTER=10, ADD=11, AFTER=12, 
		AGENT=13, AGGREGATE=14, ALL=15, ALTER=16, ANALYZE=17, AND=18, ANY=19, 
		ARRAY=20, AS=21, ASC=22, ASSOCIATE=23, ASSOCIATION_OPERATOR=24, AT=25, 
		ATTRIBUTE=26, AUDIT=27, AUTHID=28, AUTO=29, AUTOMATIC=30, AUTONOMOUS_TRANSACTION=31, 
		BATCH=32, BEFORE=33, BEGIN=34, BETWEEN=35, BFILE=36, BINARY_DOUBLE=37, 
		BINARY_FLOAT=38, BINARY_INTEGER=39, BLOB=40, BLOCK=41, BODY=42, BOOLEAN=43, 
		BOTH=44, BREADTH=45, BULK=46, BY=47, BYTE=48, C_LETTER=49, CACHE=50, CALL=51, 
		CANONICAL=52, CASCADE=53, CASE=54, CAST=55, CHAR=56, CHAR_CS=57, CHARACTER=58, 
		CHECK=59, CHR=60, CLOB=61, CLOSE=62, CLUSTER=63, COLLECT=64, COLUMNS=65, 
		COMMENT=66, COMMIT=67, COMMITTED=68, COMPATIBILITY=69, COMPILE=70, COMPOUND=71, 
		CONNECT=72, CONNECT_BY_ROOT=73, CONSTANT=74, CONSTRAINT=75, CONSTRAINTS=76, 
		CONSTRUCTOR=77, CONTENT=78, CONTEXT=79, CONTINUE=80, CONVERT=81, CORRUPT_XID=82, 
		CORRUPT_XID_ALL=83, COST=84, COUNT=85, CREATE=86, CROSS=87, CUBE=88, CURRENT=89, 
		CURRENT_USER=90, CURSOR=91, CUSTOMDATUM=92, CYCLE=93, DATA=94, DATABASE=95, 
		DATE=96, DAY=97, DB_ROLE_CHANGE=98, DBTIMEZONE=99, DDL=100, DEBUG=101, 
		DEC=102, DECIMAL=103, DECLARE=104, DECOMPOSE=105, DECREMENT=106, DEFAULT=107, 
		DEFAULTS=108, DEFERRED=109, DEFINER=110, DELETE=111, DEPTH=112, DESC=113, 
		DETERMINISTIC=114, DIMENSION=115, DISABLE=116, DISASSOCIATE=117, DISTINCT=118, 
		DOCUMENT=119, DOUBLE=120, DROP=121, DSINTERVAL_UNCONSTRAINED=122, EACH=123, 
		ELEMENT=124, ELSE=125, ELSIF=126, EMPTY=127, ENABLE=128, ENCODING=129, 
		END=130, ENTITYESCAPING=131, ERRORS=132, ESCAPE=133, EXCEPT=134, EVALNAME=135, 
		EXCEPTION=136, EXCEPTION_INIT=137, EXCEPTIONS=138, EXCLUDE=139, EXCLUSIVE=140, 
		EXECUTE=141, EXISTS=142, EXIT=143, EXPLAIN=144, EXTERNAL=145, EXTEND=146, 
		EXTRACT=147, FAILURE=148, FALSE=149, FETCH=150, FINAL=151, FIRST=152, 
		FIRST_VALUE=153, FLOAT=154, FOLLOWING=155, FOLLOWS=156, FOR=157, FORALL=158, 
		FORCE=159, FROM=160, FULL=161, FUNCTION=162, GOTO=163, GRANT=164, GROUP=165, 
		GROUPING=166, HASH=167, HAVING=168, HIDE=169, HOUR=170, IF=171, IGNORE=172, 
		IMMEDIATE=173, IN=174, INCLUDE=175, INCLUDING=176, INCREMENT=177, INDENT=178, 
		INDEX=179, INDEXED=180, INDICATOR=181, INDICES=182, INFINITE=183, INLINE=184, 
		INNER=185, INOUT=186, INSERT=187, INSTANTIABLE=188, INSTEAD=189, INT=190, 
		INTEGER=191, INTERSECT=192, INTERVAL=193, INTO=194, INVALIDATE=195, IS=196, 
		ISOLATION=197, ITERATE=198, JAVA=199, JOIN=200, KEEP=201, LANGUAGE=202, 
		LAST=203, LAST_VALUE=204, LEADING=205, LEFT=206, LEVEL=207, LIBRARY=208, 
		LIKE=209, LIKE2=210, LIKE4=211, LIKEC=212, LIMIT=213, LOCAL=214, LOCK=215, 
		LOCKED=216, LOG=217, LOGOFF=218, LOGON=219, LONG=220, LOOP=221, MAIN=222, 
		MAP=223, MATCHED=224, MAXVALUE=225, MEASURES=226, MEMBER=227, MERGE=228, 
		MINUS=229, MINUTE=230, MINVALUE=231, MLSLABEL=232, MOD=233, MODE=234, 
		MODEL=235, MODIFY=236, MONTH=237, MULTISET=238, NAME=239, NAN=240, NATURAL=241, 
		NATURALN=242, NAV=243, NCHAR=244, NCHAR_CS=245, NCLOB=246, NESTED=247, 
		NEW=248, NEXT=249, NO=250, NOAUDIT=251, NOCACHE=252, NOCOPY=253, NOCYCLE=254, 
		NOENTITYESCAPING=255, NOMAXVALUE=256, NOMINVALUE=257, NONE=258, NOORDER=259, 
		NOSCHEMACHECK=260, NOT=261, NOWAIT=262, NULL=263, NULLS=264, NUMBER=265, 
		NUMERIC=266, NVARCHAR2=267, OBJECT=268, OF=269, OFF=270, OID=271, OLD=272, 
		ON=273, ONLY=274, OPEN=275, OPTION=276, OR=277, ORADATA=278, ORDER=279, 
		ORDINALITY=280, OSERROR=281, OUT=282, OUTER=283, OVER=284, OVERRIDING=285, 
		PACKAGE=286, PARALLEL_ENABLE=287, PARAMETERS=288, PARENT=289, PARTITION=290, 
		PASSING=291, PATH=292, PERCENT_ISOPEN=293, PERCENT_ROWTYPE=294, PERCENT_TYPE=295, 
		PERCENT_FOUND=296, PERCENT_NOTFOUND=297, PERCENT_ROWCOUNT=298, PIPELINED=299, 
		PIPE=300, PIVOT=301, PLAN=302, PLS_INTEGER=303, POSITIVE=304, POSITIVEN=305, 
		PRAGMA=306, PRECEDING=307, PRECISION=308, PRESENT=309, PRIOR=310, PROCEDURE=311, 
		RAISE=312, RANGE=313, RAW=314, READ=315, REAL=316, RECORD=317, REF=318, 
		REFERENCE=319, REFERENCING=320, REJECT=321, RELIES_ON=322, RENAME=323, 
		REPLACE=324, RESPECT=325, RESTRICT_REFERENCES=326, RESULT=327, RESULT_CACHE=328, 
		RETURN=329, RETURNING=330, REUSE=331, REVERSE=332, REVOKE=333, RIGHT=334, 
		ROLLBACK=335, ROLLUP=336, ROW=337, ROWID=338, ROWS=339, RULES=340, SAMPLE=341, 
		SAVE=342, SAVEPOINT=343, SCHEMA=344, SCHEMACHECK=345, SCN=346, SEARCH=347, 
		SECOND=348, SEED=349, SEGMENT=350, SELECT=351, SELF=352, SEQUENCE=353, 
		SEQUENTIAL=354, SERIALIZABLE=355, SERIALLY_REUSABLE=356, SERVERERROR=357, 
		SESSIONTIMEZONE=358, SET=359, SETS=360, SETTINGS=361, SHARE=362, SHOW=363, 
		SHUTDOWN=364, SIBLINGS=365, SIGNTYPE=366, SIMPLE_INTEGER=367, SINGLE=368, 
		SIZE=369, SKIP_=370, SMALLINT=371, SNAPSHOT=372, SOME=373, SPECIFICATION=374, 
		SQLDATA=375, SQLERROR=376, SQL_PERCENT_ROWCOUNT=377, STANDALONE=378, START=379, 
		STARTUP=380, STATEMENT=381, STATEMENT_ID=382, STATIC=383, STATISTICS=384, 
		STRING=385, SUBMULTISET=386, SUBPARTITION=387, SUBSTITUTABLE=388, SUBTYPE=389, 
		SUCCESS=390, SUSPEND=391, TABLE=392, THE=393, THEN=394, TIME=395, TIMESTAMP=396, 
		TIMESTAMP_LTZ_UNCONSTRAINED=397, TIMESTAMP_TZ_UNCONSTRAINED=398, TIMESTAMP_UNCONSTRAINED=399, 
		TIMEZONE_ABBR=400, TIMEZONE_HOUR=401, TIMEZONE_MINUTE=402, TIMEZONE_REGION=403, 
		TO=404, TO_CHAR=405, TO_NUMBER=406, TRAILING=407, TRANSACTION=408, TRANSLATE=409, 
		TREAT=410, TRIGGER=411, TRIM=412, TRUE=413, TRUNCATE=414, TYPE=415, UNBOUNDED=416, 
		UNDER=417, UNION=418, UNIQUE=419, UNLIMITED=420, UNPIVOT=421, UNTIL=422, 
		UPDATE=423, UPDATED=424, UPSERT=425, UROWID=426, USE=427, USING=428, VALIDATE=429, 
		VALUE=430, VALUES=431, VARCHAR=432, VARCHAR2=433, VARIABLE=434, VARRAY=435, 
		VARYING=436, VERSION=437, VERSIONS=438, WAIT=439, WARNING=440, WELLFORMED=441, 
		WHEN=442, WHENEVER=443, WHERE=444, WHILE=445, WITH=446, WITHIN=447, WORK=448, 
		WRITE=449, XML=450, XMLAGG=451, XMLATTRIBUTES=452, XMLCAST=453, XMLCOLATTVAL=454, 
		XMLELEMENT=455, XMLEXISTS=456, XMLFOREST=457, XMLNAMESPACES=458, XMLPARSE=459, 
		XMLPI=460, XMLQUERY=461, XMLROOT=462, XMLSERIALIZE=463, XMLTABLE=464, 
		YEAR=465, YES=466, YMINTERVAL_UNCONSTRAINED=467, ZONE=468, PREDICTION=469, 
		PREDICTION_BOUNDS=470, PREDICTION_COST=471, PREDICTION_DETAILS=472, PREDICTION_PROBABILITY=473, 
		PREDICTION_SET=474, CUME_DIST=475, DENSE_RANK=476, LISTAGG=477, PERCENT_RANK=478, 
		PERCENTILE_CONT=479, PERCENTILE_DISC=480, RANK=481, AVG=482, CORR=483, 
		LAG=484, LEAD=485, MAX=486, MEDIAN=487, MIN=488, NTILE=489, RATIO_TO_REPORT=490, 
		ROW_NUMBER=491, SUM=492, VARIANCE=493, REGR_=494, STDDEV=495, VAR_=496, 
		COVAR_=497, PROMPT=498, NATIONAL_CHAR_STRING_LIT=499, BIT_STRING_LIT=500, 
		HEX_STRING_LIT=501, DOUBLE_PERIOD=502, PERIOD=503, UNSIGNED_INTEGER=504, 
		APPROXIMATE_NUM_LIT=505, CHAR_STRING=506, DELIMITED_ID=507, PERCENT=508, 
		AMPERSAND=509, LEFT_PAREN=510, RIGHT_PAREN=511, DOUBLE_ASTERISK=512, ASTERISK=513, 
		PLUS_SIGN=514, MINUS_SIGN=515, COMMA=516, SOLIDUS=517, AT_SIGN=518, ASSIGN_OP=519, 
		BINDVAR=520, COLON=521, SEMICOLON=522, LESS_THAN_OR_EQUALS_OP=523, LESS_THAN_OP=524, 
		GREATER_THAN_OR_EQUALS_OP=525, NOT_EQUAL_OP=526, CARRET_OPERATOR_PART=527, 
		TILDE_OPERATOR_PART=528, EXCLAMATION_OPERATOR_PART=529, GREATER_THAN_OP=530, 
		CONCATENATION_OP=531, VERTICAL_BAR=532, EQUALS_OP=533, LEFT_BRACKET=534, 
		RIGHT_BRACKET=535, INTRODUCER=536, SPACES=537, SINGLE_LINE_COMMENT=538, 
		MULTI_LINE_COMMENT=539, SQL92_RESERVED_ALL=540, SQL92_RESERVED_ALTER=541, 
		SQL92_RESERVED_AND=542, SQL92_RESERVED_ANY=543, SQL92_RESERVED_AS=544, 
		SQL92_RESERVED_ASC=545, SQL92_RESERVED_BEGIN=546, SQL92_RESERVED_BETWEEN=547, 
		SQL92_RESERVED_BY=548, SQL92_RESERVED_CASE=549, SQL92_RESERVED_CHECK=550, 
		PLSQL_RESERVED_CLUSTERS=551, PLSQL_RESERVED_COLAUTH=552, PLSQL_RESERVED_COMPRESS=553, 
		SQL92_RESERVED_CONNECT=554, PLSQL_NON_RESERVED_CONNECT_BY_ROOT=555, PLSQL_RESERVED_CRASH=556, 
		SQL92_RESERVED_CREATE=557, SQL92_RESERVED_CURRENT=558, SQL92_RESERVED_CURSOR=559, 
		SQL92_RESERVED_DATE=560, SQL92_RESERVED_DECLARE=561, SQL92_RESERVED_DEFAULT=562, 
		SQL92_RESERVED_DELETE=563, SQL92_RESERVED_DESC=564, SQL92_RESERVED_DISTINCT=565, 
		SQL92_RESERVED_DROP=566, SQL92_RESERVED_ELSE=567, SQL92_RESERVED_END=568, 
		SQL92_RESERVED_EXCEPTION=569, PLSQL_RESERVED_EXCLUSIVE=570, SQL92_RESERVED_EXISTS=571, 
		SQL92_RESERVED_FALSE=572, SQL92_RESERVED_FETCH=573, SQL92_RESERVED_FOR=574, 
		SQL92_RESERVED_FROM=575, SQL92_RESERVED_GOTO=576, SQL92_RESERVED_GRANT=577, 
		SQL92_RESERVED_GROUP=578, SQL92_RESERVED_HAVING=579, PLSQL_RESERVED_IDENTIFIED=580, 
		PLSQL_RESERVED_IF=581, SQL92_RESERVED_IN=582, PLSQL_RESERVED_INDEX=583, 
		PLSQL_RESERVED_INDEXES=584, SQL92_RESERVED_INSERT=585, SQL92_RESERVED_INTERSECT=586, 
		SQL92_RESERVED_INTO=587, SQL92_RESERVED_IS=588, SQL92_RESERVED_LIKE=589, 
		PLSQL_RESERVED_LOCK=590, PLSQL_RESERVED_MINUS=591, PLSQL_RESERVED_MODE=592, 
		PLSQL_RESERVED_NOCOMPRESS=593, SQL92_RESERVED_NOT=594, PLSQL_RESERVED_NOWAIT=595, 
		SQL92_RESERVED_NULL=596, SQL92_RESERVED_OF=597, SQL92_RESERVED_ON=598, 
		SQL92_RESERVED_OPTION=599, SQL92_RESERVED_OR=600, SQL92_RESERVED_ORDER=601, 
		SQL92_RESERVED_OVERLAPS=602, SQL92_RESERVED_PRIOR=603, SQL92_RESERVED_PROCEDURE=604, 
		SQL92_RESERVED_PUBLIC=605, PLSQL_RESERVED_RESOURCE=606, SQL92_RESERVED_REVOKE=607, 
		SQL92_RESERVED_SELECT=608, PLSQL_RESERVED_SHARE=609, SQL92_RESERVED_SIZE=610, 
		PLSQL_RESERVED_START=611, PLSQL_RESERVED_TABAUTH=612, SQL92_RESERVED_TABLE=613, 
		SQL92_RESERVED_THE=614, SQL92_RESERVED_THEN=615, SQL92_RESERVED_TO=616, 
		SQL92_RESERVED_TRUE=617, SQL92_RESERVED_UNION=618, SQL92_RESERVED_UNIQUE=619, 
		SQL92_RESERVED_UPDATE=620, SQL92_RESERVED_VALUES=621, SQL92_RESERVED_VIEW=622, 
		PLSQL_RESERVED_VIEWS=623, SQL92_RESERVED_WHEN=624, SQL92_RESERVED_WHERE=625, 
		SQL92_RESERVED_WITH=626, PLSQL_NON_RESERVED_USING=627, PLSQL_NON_RESERVED_MODEL=628, 
		PLSQL_NON_RESERVED_ELSIF=629, PLSQL_NON_RESERVED_PIVOT=630, PLSQL_NON_RESERVED_UNPIVOT=631, 
		REGULAR_ID=632, ZV=633;
	public static final int
		RULE_swallow_to_semi = 0, RULE_compilation_unit = 1, RULE_sql_script = 2, 
		RULE_unit_statement = 3, RULE_declare_wrapper = 4, RULE_is_or_as = 5, 
		RULE_drop_function = 6, RULE_alter_function = 7, RULE_create_function_body = 8, 
		RULE_function_spec = 9, RULE_parallel_enable_clause = 10, RULE_partition_by_clause = 11, 
		RULE_result_cache_clause = 12, RULE_relies_on_part = 13, RULE_streaming_clause = 14, 
		RULE_drop_package = 15, RULE_alter_package = 16, RULE_create_package = 17, 
		RULE_package_body = 18, RULE_package_spec = 19, RULE_package_obj_spec = 20, 
		RULE_package_obj_body = 21, RULE_drop_procedure = 22, RULE_alter_procedure = 23, 
		RULE_create_procedure_body = 24, RULE_procedure_spec = 25, RULE_drop_trigger = 26, 
		RULE_alter_trigger = 27, RULE_create_trigger = 28, RULE_trigger_follows_clause = 29, 
		RULE_trigger_when_clause = 30, RULE_simple_dml_trigger = 31, RULE_for_each_row = 32, 
		RULE_compound_dml_trigger = 33, RULE_non_dml_trigger = 34, RULE_trigger_body = 35, 
		RULE_routine_clause = 36, RULE_compound_trigger_block = 37, RULE_timing_point_section = 38, 
		RULE_non_dml_event = 39, RULE_dml_event_clause = 40, RULE_dml_event_element = 41, 
		RULE_dml_event_nested_clause = 42, RULE_referencing_clause = 43, RULE_referencing_element = 44, 
		RULE_drop_type = 45, RULE_alter_type = 46, RULE_compile_type_clause = 47, 
		RULE_replace_type_clause = 48, RULE_alter_method_spec = 49, RULE_alter_method_element = 50, 
		RULE_alter_attribute_definition = 51, RULE_attribute_definition = 52, 
		RULE_alter_collection_clauses = 53, RULE_dependent_handling_clause = 54, 
		RULE_dependent_exceptions_part = 55, RULE_create_type = 56, RULE_type_definition = 57, 
		RULE_object_type_def = 58, RULE_object_as_part = 59, RULE_object_under_part = 60, 
		RULE_nested_table_type_def = 61, RULE_sqlj_object_type = 62, RULE_type_body = 63, 
		RULE_type_body_elements = 64, RULE_map_order_func_declaration = 65, RULE_subprog_decl_in_type = 66, 
		RULE_proc_decl_in_type = 67, RULE_func_decl_in_type = 68, RULE_constructor_declaration = 69, 
		RULE_modifier_clause = 70, RULE_object_member_spec = 71, RULE_sqlj_object_type_attr = 72, 
		RULE_element_spec = 73, RULE_element_spec_options = 74, RULE_subprogram_spec = 75, 
		RULE_type_procedure_spec = 76, RULE_type_function_spec = 77, RULE_constructor_spec = 78, 
		RULE_map_order_function_spec = 79, RULE_pragma_clause = 80, RULE_pragma_elements = 81, 
		RULE_type_elements_parameter = 82, RULE_drop_sequence = 83, RULE_alter_sequence = 84, 
		RULE_create_sequence = 85, RULE_sequence_spec = 86, RULE_sequence_start_clause = 87, 
		RULE_invoker_rights_clause = 88, RULE_compiler_parameters_clause = 89, 
		RULE_call_spec = 90, RULE_java_spec = 91, RULE_c_spec = 92, RULE_c_agent_in_clause = 93, 
		RULE_c_parameters_clause = 94, RULE_parameter = 95, RULE_default_value_part = 96, 
		RULE_declare_spec = 97, RULE_variable_declaration = 98, RULE_subtype_declaration = 99, 
		RULE_cursor_declaration = 100, RULE_parameter_spec = 101, RULE_exception_declaration = 102, 
		RULE_pragma_declaration = 103, RULE_record_declaration = 104, RULE_record_type_dec = 105, 
		RULE_field_spec = 106, RULE_record_var_dec = 107, RULE_table_declaration = 108, 
		RULE_table_type_dec = 109, RULE_table_indexed_by_part = 110, RULE_varray_type_def = 111, 
		RULE_table_var_dec = 112, RULE_seq_of_statements = 113, RULE_label_declaration = 114, 
		RULE_statement = 115, RULE_assignment_statement = 116, RULE_continue_statement = 117, 
		RULE_exit_statement = 118, RULE_goto_statement = 119, RULE_if_statement = 120, 
		RULE_elsif_part = 121, RULE_else_part = 122, RULE_loop_statement = 123, 
		RULE_cursor_loop_param = 124, RULE_forall_statement = 125, RULE_bounds_clause = 126, 
		RULE_between_bound = 127, RULE_lower_bound = 128, RULE_upper_bound = 129, 
		RULE_null_statement = 130, RULE_raise_statement = 131, RULE_return_statement = 132, 
		RULE_function_call = 133, RULE_body = 134, RULE_collection_statement = 135, 
		RULE_pipe_row = 136, RULE_exception_clause = 137, RULE_exception_handler = 138, 
		RULE_trigger_block = 139, RULE_block = 140, RULE_sql_statement = 141, 
		RULE_execute_immediate = 142, RULE_dynamic_returning_clause = 143, RULE_data_manipulation_language_statements = 144, 
		RULE_cursor_manipulation_statements = 145, RULE_close_statement = 146, 
		RULE_open_statement = 147, RULE_fetch_statement = 148, RULE_open_for_statement = 149, 
		RULE_transaction_control_statements = 150, RULE_set_transaction_command = 151, 
		RULE_set_constraint_command = 152, RULE_commit_statement = 153, RULE_write_clause = 154, 
		RULE_rollback_statement = 155, RULE_savepoint_statement = 156, RULE_explain_statement = 157, 
		RULE_select_statement = 158, RULE_subquery_factoring_clause = 159, RULE_factoring_element = 160, 
		RULE_search_clause = 161, RULE_cycle_clause = 162, RULE_subquery = 163, 
		RULE_subquery_operation_part = 164, RULE_subquery_basic_elements = 165, 
		RULE_query_block = 166, RULE_selected_element = 167, RULE_from_clause = 168, 
		RULE_select_list_elements = 169, RULE_table_ref_list = 170, RULE_table_ref = 171, 
		RULE_table_ref_aux = 172, RULE_join_clause = 173, RULE_join_on_part = 174, 
		RULE_join_using_part = 175, RULE_outer_join_type = 176, RULE_query_partition_clause = 177, 
		RULE_flashback_query_clause = 178, RULE_pivot_clause = 179, RULE_pivot_element = 180, 
		RULE_pivot_for_clause = 181, RULE_pivot_in_clause = 182, RULE_pivot_in_clause_element = 183, 
		RULE_pivot_in_clause_elements = 184, RULE_unpivot_clause = 185, RULE_unpivot_in_clause = 186, 
		RULE_unpivot_in_elements = 187, RULE_hierarchical_query_clause = 188, 
		RULE_start_part = 189, RULE_group_by_clause = 190, RULE_group_by_elements = 191, 
		RULE_rollup_cube_clause = 192, RULE_grouping_sets_clause = 193, RULE_grouping_sets_elements = 194, 
		RULE_having_clause = 195, RULE_model_clause = 196, RULE_cell_reference_options = 197, 
		RULE_return_rows_clause = 198, RULE_reference_model = 199, RULE_main_model = 200, 
		RULE_model_column_clauses = 201, RULE_model_column_partition_part = 202, 
		RULE_model_column_list = 203, RULE_model_column = 204, RULE_model_rules_clause = 205, 
		RULE_model_rules_part = 206, RULE_model_rules_element = 207, RULE_cell_assignment = 208, 
		RULE_model_iterate_clause = 209, RULE_until_part = 210, RULE_order_by_clause = 211, 
		RULE_order_by_elements = 212, RULE_for_update_clause = 213, RULE_for_update_of_part = 214, 
		RULE_for_update_options = 215, RULE_update_statement = 216, RULE_update_set_clause = 217, 
		RULE_column_based_update_set_clause = 218, RULE_delete_statement = 219, 
		RULE_insert_statement = 220, RULE_single_table_insert = 221, RULE_multi_table_insert = 222, 
		RULE_multi_table_element = 223, RULE_conditional_insert_clause = 224, 
		RULE_conditional_insert_when_part = 225, RULE_conditional_insert_else_part = 226, 
		RULE_insert_into_clause = 227, RULE_values_clause = 228, RULE_merge_statement = 229, 
		RULE_merge_update_clause = 230, RULE_merge_element = 231, RULE_merge_update_delete_part = 232, 
		RULE_merge_insert_clause = 233, RULE_selected_tableview = 234, RULE_lock_table_statement = 235, 
		RULE_wait_nowait_part = 236, RULE_lock_table_element = 237, RULE_lock_mode = 238, 
		RULE_general_table_ref = 239, RULE_static_returning_clause = 240, RULE_error_logging_clause = 241, 
		RULE_error_logging_into_part = 242, RULE_error_logging_reject_part = 243, 
		RULE_dml_table_expression_clause = 244, RULE_table_collection_expression = 245, 
		RULE_subquery_restriction_clause = 246, RULE_sample_clause = 247, RULE_seed_part = 248, 
		RULE_cursor_expression = 249, RULE_sql_cursor_expression = 250, RULE_collection_assoc_expression = 251, 
		RULE_collection_type_expression = 252, RULE_expression_list = 253, RULE_condition = 254, 
		RULE_condition_wrapper = 255, RULE_expression = 256, RULE_expression_wrapper = 257, 
		RULE_logical_and_expression = 258, RULE_negated_expression = 259, RULE_equality_expression = 260, 
		RULE_multiset_part = 261, RULE_multiset_expression = 262, RULE_multiset_type = 263, 
		RULE_relational_expression = 264, RULE_compound_expression = 265, RULE_like_type = 266, 
		RULE_like_escape_part = 267, RULE_in_elements = 268, RULE_between_elements = 269, 
		RULE_concatenation = 270, RULE_concatenation_wrapper = 271, RULE_additive_expression = 272, 
		RULE_multiply_expression = 273, RULE_datetime_expression = 274, RULE_interval_expression = 275, 
		RULE_model_expression = 276, RULE_model_expression_element = 277, RULE_single_column_for_loop = 278, 
		RULE_for_like_part = 279, RULE_for_increment_decrement_type = 280, RULE_multi_column_for_loop = 281, 
		RULE_unary_expression = 282, RULE_case_statement = 283, RULE_simple_case_statement = 284, 
		RULE_simple_case_when_part = 285, RULE_searched_case_statement = 286, 
		RULE_searched_case_when_part = 287, RULE_case_else_part = 288, RULE_atom = 289, 
		RULE_expression_or_vector = 290, RULE_vector_expr = 291, RULE_quantified_expression = 292, 
		RULE_plsql_type_conversion = 293, RULE_sql_type_conversion = 294, RULE_xml_table_columns = 295, 
		RULE_xml_table = 296, RULE_standard_function = 297, RULE_over_clause_keyword = 298, 
		RULE_within_or_over_clause_keyword = 299, RULE_standard_prediction_function_keyword = 300, 
		RULE_over_clause = 301, RULE_windowing_clause = 302, RULE_windowing_type = 303, 
		RULE_windowing_elements = 304, RULE_using_clause = 305, RULE_using_element = 306, 
		RULE_collect_order_by_part = 307, RULE_within_or_over_part = 308, RULE_cost_matrix_clause = 309, 
		RULE_xml_passing_clause = 310, RULE_xml_attributes_clause = 311, RULE_xml_namespaces_clause = 312, 
		RULE_xml_table_column = 313, RULE_xml_general_default_part = 314, RULE_xml_multiuse_expression_element = 315, 
		RULE_xmlroot_param_version_part = 316, RULE_xmlroot_param_standalone_part = 317, 
		RULE_xmlserialize_param_enconding_part = 318, RULE_xmlserialize_param_version_part = 319, 
		RULE_xmlserialize_param_ident_part = 320, RULE_boolean_static_expression = 321, 
		RULE_preprocessor_internal_statement = 322, RULE_preprocessor_statement = 323, 
		RULE_sql_plus_command = 324, RULE_whenever_command = 325, RULE_set_command = 326, 
		RULE_exit_command = 327, RULE_prompt_command = 328, RULE_call_sql_script_command = 329, 
		RULE_partition_extension_clause = 330, RULE_column_alias = 331, RULE_table_alias = 332, 
		RULE_alias_quoted_string = 333, RULE_where_clause = 334, RULE_current_of_clause = 335, 
		RULE_into_clause_variable = 336, RULE_into_clause = 337, RULE_xml_column_name = 338, 
		RULE_cost_class_name = 339, RULE_attribute_name = 340, RULE_savepoint_name = 341, 
		RULE_rollback_segment_name = 342, RULE_table_var_name = 343, RULE_schema_name = 344, 
		RULE_routine_name = 345, RULE_package_name = 346, RULE_implementation_type_name = 347, 
		RULE_parameter_name = 348, RULE_reference_model_name = 349, RULE_main_model_name = 350, 
		RULE_aggregate_function_name = 351, RULE_query_name = 352, RULE_constraint_name = 353, 
		RULE_label_name = 354, RULE_type_name = 355, RULE_sequence_name = 356, 
		RULE_exception_name = 357, RULE_function_name = 358, RULE_procedure_name = 359, 
		RULE_trigger_name = 360, RULE_variable_name = 361, RULE_index_name = 362, 
		RULE_cursor_name = 363, RULE_record_name = 364, RULE_collection_name = 365, 
		RULE_link_name = 366, RULE_column_name = 367, RULE_tableview_name = 368, 
		RULE_char_set_name = 369, RULE_keep_clause = 370, RULE_function_argument = 371, 
		RULE_function_argument_analytic = 372, RULE_function_argument_modeling = 373, 
		RULE_respect_or_ignore_nulls = 374, RULE_argument = 375, RULE_type_spec = 376, 
		RULE_datatype = 377, RULE_precision_part = 378, RULE_native_datatype_element = 379, 
		RULE_bind_variable = 380, RULE_general_element = 381, RULE_general_element_part = 382, 
		RULE_table_element = 383, RULE_constant = 384, RULE_numeric = 385, RULE_quoted_string = 386, 
		RULE_id = 387, RULE_id_expression = 388, RULE_not_equal_op = 389, RULE_greater_than_or_equals_op = 390, 
		RULE_less_than_or_equals_op = 391, RULE_concatenation_op = 392, RULE_outer_join_sign = 393, 
		RULE_regular_id = 394;
	public static final String[] ruleNames = {
		"swallow_to_semi", "compilation_unit", "sql_script", "unit_statement", 
		"declare_wrapper", "is_or_as", "drop_function", "alter_function", "create_function_body", 
		"function_spec", "parallel_enable_clause", "partition_by_clause", "result_cache_clause", 
		"relies_on_part", "streaming_clause", "drop_package", "alter_package", 
		"create_package", "package_body", "package_spec", "package_obj_spec", 
		"package_obj_body", "drop_procedure", "alter_procedure", "create_procedure_body", 
		"procedure_spec", "drop_trigger", "alter_trigger", "create_trigger", "trigger_follows_clause", 
		"trigger_when_clause", "simple_dml_trigger", "for_each_row", "compound_dml_trigger", 
		"non_dml_trigger", "trigger_body", "routine_clause", "compound_trigger_block", 
		"timing_point_section", "non_dml_event", "dml_event_clause", "dml_event_element", 
		"dml_event_nested_clause", "referencing_clause", "referencing_element", 
		"drop_type", "alter_type", "compile_type_clause", "replace_type_clause", 
		"alter_method_spec", "alter_method_element", "alter_attribute_definition", 
		"attribute_definition", "alter_collection_clauses", "dependent_handling_clause", 
		"dependent_exceptions_part", "create_type", "type_definition", "object_type_def", 
		"object_as_part", "object_under_part", "nested_table_type_def", "sqlj_object_type", 
		"type_body", "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
		"proc_decl_in_type", "func_decl_in_type", "constructor_declaration", "modifier_clause", 
		"object_member_spec", "sqlj_object_type_attr", "element_spec", "element_spec_options", 
		"subprogram_spec", "type_procedure_spec", "type_function_spec", "constructor_spec", 
		"map_order_function_spec", "pragma_clause", "pragma_elements", "type_elements_parameter", 
		"drop_sequence", "alter_sequence", "create_sequence", "sequence_spec", 
		"sequence_start_clause", "invoker_rights_clause", "compiler_parameters_clause", 
		"call_spec", "java_spec", "c_spec", "c_agent_in_clause", "c_parameters_clause", 
		"parameter", "default_value_part", "declare_spec", "variable_declaration", 
		"subtype_declaration", "cursor_declaration", "parameter_spec", "exception_declaration", 
		"pragma_declaration", "record_declaration", "record_type_dec", "field_spec", 
		"record_var_dec", "table_declaration", "table_type_dec", "table_indexed_by_part", 
		"varray_type_def", "table_var_dec", "seq_of_statements", "label_declaration", 
		"statement", "assignment_statement", "continue_statement", "exit_statement", 
		"goto_statement", "if_statement", "elsif_part", "else_part", "loop_statement", 
		"cursor_loop_param", "forall_statement", "bounds_clause", "between_bound", 
		"lower_bound", "upper_bound", "null_statement", "raise_statement", "return_statement", 
		"function_call", "body", "collection_statement", "pipe_row", "exception_clause", 
		"exception_handler", "trigger_block", "block", "sql_statement", "execute_immediate", 
		"dynamic_returning_clause", "data_manipulation_language_statements", "cursor_manipulation_statements", 
		"close_statement", "open_statement", "fetch_statement", "open_for_statement", 
		"transaction_control_statements", "set_transaction_command", "set_constraint_command", 
		"commit_statement", "write_clause", "rollback_statement", "savepoint_statement", 
		"explain_statement", "select_statement", "subquery_factoring_clause", 
		"factoring_element", "search_clause", "cycle_clause", "subquery", "subquery_operation_part", 
		"subquery_basic_elements", "query_block", "selected_element", "from_clause", 
		"select_list_elements", "table_ref_list", "table_ref", "table_ref_aux", 
		"join_clause", "join_on_part", "join_using_part", "outer_join_type", "query_partition_clause", 
		"flashback_query_clause", "pivot_clause", "pivot_element", "pivot_for_clause", 
		"pivot_in_clause", "pivot_in_clause_element", "pivot_in_clause_elements", 
		"unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause", 
		"start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause", 
		"grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause", 
		"cell_reference_options", "return_rows_clause", "reference_model", "main_model", 
		"model_column_clauses", "model_column_partition_part", "model_column_list", 
		"model_column", "model_rules_clause", "model_rules_part", "model_rules_element", 
		"cell_assignment", "model_iterate_clause", "until_part", "order_by_clause", 
		"order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options", 
		"update_statement", "update_set_clause", "column_based_update_set_clause", 
		"delete_statement", "insert_statement", "single_table_insert", "multi_table_insert", 
		"multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
		"conditional_insert_else_part", "insert_into_clause", "values_clause", 
		"merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part", 
		"merge_insert_clause", "selected_tableview", "lock_table_statement", "wait_nowait_part", 
		"lock_table_element", "lock_mode", "general_table_ref", "static_returning_clause", 
		"error_logging_clause", "error_logging_into_part", "error_logging_reject_part", 
		"dml_table_expression_clause", "table_collection_expression", "subquery_restriction_clause", 
		"sample_clause", "seed_part", "cursor_expression", "sql_cursor_expression", 
		"collection_assoc_expression", "collection_type_expression", "expression_list", 
		"condition", "condition_wrapper", "expression", "expression_wrapper", 
		"logical_and_expression", "negated_expression", "equality_expression", 
		"multiset_part", "multiset_expression", "multiset_type", "relational_expression", 
		"compound_expression", "like_type", "like_escape_part", "in_elements", 
		"between_elements", "concatenation", "concatenation_wrapper", "additive_expression", 
		"multiply_expression", "datetime_expression", "interval_expression", "model_expression", 
		"model_expression_element", "single_column_for_loop", "for_like_part", 
		"for_increment_decrement_type", "multi_column_for_loop", "unary_expression", 
		"case_statement", "simple_case_statement", "simple_case_when_part", "searched_case_statement", 
		"searched_case_when_part", "case_else_part", "atom", "expression_or_vector", 
		"vector_expr", "quantified_expression", "plsql_type_conversion", "sql_type_conversion", 
		"xml_table_columns", "xml_table", "standard_function", "over_clause_keyword", 
		"within_or_over_clause_keyword", "standard_prediction_function_keyword", 
		"over_clause", "windowing_clause", "windowing_type", "windowing_elements", 
		"using_clause", "using_element", "collect_order_by_part", "within_or_over_part", 
		"cost_matrix_clause", "xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
		"xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
		"xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part", 
		"xmlserialize_param_version_part", "xmlserialize_param_ident_part", "boolean_static_expression", 
		"preprocessor_internal_statement", "preprocessor_statement", "sql_plus_command", 
		"whenever_command", "set_command", "exit_command", "prompt_command", "call_sql_script_command", 
		"partition_extension_clause", "column_alias", "table_alias", "alias_quoted_string", 
		"where_clause", "current_of_clause", "into_clause_variable", "into_clause", 
		"xml_column_name", "cost_class_name", "attribute_name", "savepoint_name", 
		"rollback_segment_name", "table_var_name", "schema_name", "routine_name", 
		"package_name", "implementation_type_name", "parameter_name", "reference_model_name", 
		"main_model_name", "aggregate_function_name", "query_name", "constraint_name", 
		"label_name", "type_name", "sequence_name", "exception_name", "function_name", 
		"procedure_name", "trigger_name", "variable_name", "index_name", "cursor_name", 
		"record_name", "collection_name", "link_name", "column_name", "tableview_name", 
		"char_set_name", "keep_clause", "function_argument", "function_argument_analytic", 
		"function_argument_modeling", "respect_or_ignore_nulls", "argument", "type_spec", 
		"datatype", "precision_part", "native_datatype_element", "bind_variable", 
		"general_element", "general_element_part", "table_element", "constant", 
		"numeric", "quoted_string", "id", "id_expression", "not_equal_op", "greater_than_or_equals_op", 
		"less_than_or_equals_op", "concatenation_op", "outer_join_sign", "regular_id"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'..'", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"'=>'", null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "'.'", 
		null, null, null, null, "'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", 
		"'-'", "','", "'/'", "'@'", "':='", null, "':'", "';'", "'<='", "'<'", 
		"'>='", null, "'^'", "'~'", "'!'", "'>'", "'||'", "'|'", "'='", "'['", 
		"']'", "'_'", null, null, null, "'all'", "'alter'", "'and'", "'any'", 
		"'as'", "'asc'", "'begin'", "'between'", "'by'", "'case'", "'check'", 
		"'clusters'", "'colauth'", "'compress'", "'connect'", "'connect_by_root'", 
		"'crash'", "'create'", "'current'", "'cursor'", "'date'", "'declare'", 
		"'default'", "'delete'", "'desc'", "'distinct'", "'drop'", "'else'", "'end'", 
		"'exception'", "'exclusive'", "'exists'", "'false'", "'fetch'", "'for'", 
		"'from'", "'goto'", "'grant'", "'group'", "'having'", "'identified'", 
		"'if'", "'in'", "'index'", "'indexes'", "'insert'", "'intersect'", "'into'", 
		"'is'", "'like'", "'lock'", "'minus'", "'mode'", "'nocompress'", "'not'", 
		"'nowait'", "'null'", "'of'", "'on'", "'option'", "'or'", "'order'", "'overlaps'", 
		"'prior'", "'procedure'", "'public'", "'resource'", "'revoke'", "'select'", 
		"'share'", "'size'", "'start'", "'tabauth'", "'table'", "'the'", "'then'", 
		"'to'", "'true'", "'union'", "'unique'", "'update'", "'values'", "'view'", 
		"'views'", "'when'", "'where'", "'with'", "'using'", "'model'", "'elsif'", 
		"'pivot'", "'unpivot'", null, "'@!'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, "PP_IF", "PP_THEN", "PP_ELSE", "PP_ELSIF", "PP_END", "PP_ERROR", 
		"SQLPLUS_PROMPT", "SQLPLUS_CALLSCRIPT", "A_LETTER", "ADD", "AFTER", "AGENT", 
		"AGGREGATE", "ALL", "ALTER", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", 
		"ASSOCIATE", "ASSOCIATION_OPERATOR", "AT", "ATTRIBUTE", "AUDIT", "AUTHID", 
		"AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", "BATCH", "BEFORE", "BEGIN", 
		"BETWEEN", "BFILE", "BINARY_DOUBLE", "BINARY_FLOAT", "BINARY_INTEGER", 
		"BLOB", "BLOCK", "BODY", "BOOLEAN", "BOTH", "BREADTH", "BULK", "BY", "BYTE", 
		"C_LETTER", "CACHE", "CALL", "CANONICAL", "CASCADE", "CASE", "CAST", "CHAR", 
		"CHAR_CS", "CHARACTER", "CHECK", "CHR", "CLOB", "CLOSE", "CLUSTER", "COLLECT", 
		"COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "COMPATIBILITY", "COMPILE", 
		"COMPOUND", "CONNECT", "CONNECT_BY_ROOT", "CONSTANT", "CONSTRAINT", "CONSTRAINTS", 
		"CONSTRUCTOR", "CONTENT", "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID", 
		"CORRUPT_XID_ALL", "COST", "COUNT", "CREATE", "CROSS", "CUBE", "CURRENT", 
		"CURRENT_USER", "CURSOR", "CUSTOMDATUM", "CYCLE", "DATA", "DATABASE", 
		"DATE", "DAY", "DB_ROLE_CHANGE", "DBTIMEZONE", "DDL", "DEBUG", "DEC", 
		"DECIMAL", "DECLARE", "DECOMPOSE", "DECREMENT", "DEFAULT", "DEFAULTS", 
		"DEFERRED", "DEFINER", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", "DIMENSION", 
		"DISABLE", "DISASSOCIATE", "DISTINCT", "DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", 
		"EACH", "ELEMENT", "ELSE", "ELSIF", "EMPTY", "ENABLE", "ENCODING", "END", 
		"ENTITYESCAPING", "ERRORS", "ESCAPE", "EXCEPT", "EVALNAME", "EXCEPTION", 
		"EXCEPTION_INIT", "EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", 
		"EXIT", "EXPLAIN", "EXTERNAL", "EXTEND", "EXTRACT", "FAILURE", "FALSE", 
		"FETCH", "FINAL", "FIRST", "FIRST_VALUE", "FLOAT", "FOLLOWING", "FOLLOWS", 
		"FOR", "FORALL", "FORCE", "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", 
		"GROUP", "GROUPING", "HASH", "HAVING", "HIDE", "HOUR", "IF", "IGNORE", 
		"IMMEDIATE", "IN", "INCLUDE", "INCLUDING", "INCREMENT", "INDENT", "INDEX", 
		"INDEXED", "INDICATOR", "INDICES", "INFINITE", "INLINE", "INNER", "INOUT", 
		"INSERT", "INSTANTIABLE", "INSTEAD", "INT", "INTEGER", "INTERSECT", "INTERVAL", 
		"INTO", "INVALIDATE", "IS", "ISOLATION", "ITERATE", "JAVA", "JOIN", "KEEP", 
		"LANGUAGE", "LAST", "LAST_VALUE", "LEADING", "LEFT", "LEVEL", "LIBRARY", 
		"LIKE", "LIKE2", "LIKE4", "LIKEC", "LIMIT", "LOCAL", "LOCK", "LOCKED", 
		"LOG", "LOGOFF", "LOGON", "LONG", "LOOP", "MAIN", "MAP", "MATCHED", "MAXVALUE", 
		"MEASURES", "MEMBER", "MERGE", "MINUS", "MINUTE", "MINVALUE", "MLSLABEL", 
		"MOD", "MODE", "MODEL", "MODIFY", "MONTH", "MULTISET", "NAME", "NAN", 
		"NATURAL", "NATURALN", "NAV", "NCHAR", "NCHAR_CS", "NCLOB", "NESTED", 
		"NEW", "NEXT", "NO", "NOAUDIT", "NOCACHE", "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", 
		"NOMAXVALUE", "NOMINVALUE", "NONE", "NOORDER", "NOSCHEMACHECK", "NOT", 
		"NOWAIT", "NULL", "NULLS", "NUMBER", "NUMERIC", "NVARCHAR2", "OBJECT", 
		"OF", "OFF", "OID", "OLD", "ON", "ONLY", "OPEN", "OPTION", "OR", "ORADATA", 
		"ORDER", "ORDINALITY", "OSERROR", "OUT", "OUTER", "OVER", "OVERRIDING", 
		"PACKAGE", "PARALLEL_ENABLE", "PARAMETERS", "PARENT", "PARTITION", "PASSING", 
		"PATH", "PERCENT_ISOPEN", "PERCENT_ROWTYPE", "PERCENT_TYPE", "PERCENT_FOUND", 
		"PERCENT_NOTFOUND", "PERCENT_ROWCOUNT", "PIPELINED", "PIPE", "PIVOT", 
		"PLAN", "PLS_INTEGER", "POSITIVE", "POSITIVEN", "PRAGMA", "PRECEDING", 
		"PRECISION", "PRESENT", "PRIOR", "PROCEDURE", "RAISE", "RANGE", "RAW", 
		"READ", "REAL", "RECORD", "REF", "REFERENCE", "REFERENCING", "REJECT", 
		"RELIES_ON", "RENAME", "REPLACE", "RESPECT", "RESTRICT_REFERENCES", "RESULT", 
		"RESULT_CACHE", "RETURN", "RETURNING", "REUSE", "REVERSE", "REVOKE", "RIGHT", 
		"ROLLBACK", "ROLLUP", "ROW", "ROWID", "ROWS", "RULES", "SAMPLE", "SAVE", 
		"SAVEPOINT", "SCHEMA", "SCHEMACHECK", "SCN", "SEARCH", "SECOND", "SEED", 
		"SEGMENT", "SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", 
		"SERIALLY_REUSABLE", "SERVERERROR", "SESSIONTIMEZONE", "SET", "SETS", 
		"SETTINGS", "SHARE", "SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", 
		"SINGLE", "SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", "SOME", "SPECIFICATION", 
		"SQLDATA", "SQLERROR", "SQL_PERCENT_ROWCOUNT", "STANDALONE", "START", 
		"STARTUP", "STATEMENT", "STATEMENT_ID", "STATIC", "STATISTICS", "STRING", 
		"SUBMULTISET", "SUBPARTITION", "SUBSTITUTABLE", "SUBTYPE", "SUCCESS", 
		"SUSPEND", "TABLE", "THE", "THEN", "TIME", "TIMESTAMP", "TIMESTAMP_LTZ_UNCONSTRAINED", 
		"TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", "TIMEZONE_ABBR", 
		"TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TIMEZONE_REGION", "TO", "TO_CHAR", 
		"TO_NUMBER", "TRAILING", "TRANSACTION", "TRANSLATE", "TREAT", "TRIGGER", 
		"TRIM", "TRUE", "TRUNCATE", "TYPE", "UNBOUNDED", "UNDER", "UNION", "UNIQUE", 
		"UNLIMITED", "UNPIVOT", "UNTIL", "UPDATE", "UPDATED", "UPSERT", "UROWID", 
		"USE", "USING", "VALIDATE", "VALUE", "VALUES", "VARCHAR", "VARCHAR2", 
		"VARIABLE", "VARRAY", "VARYING", "VERSION", "VERSIONS", "WAIT", "WARNING", 
		"WELLFORMED", "WHEN", "WHENEVER", "WHERE", "WHILE", "WITH", "WITHIN", 
		"WORK", "WRITE", "XML", "XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", 
		"XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
		"XMLQUERY", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", 
		"ZONE", "PREDICTION", "PREDICTION_BOUNDS", "PREDICTION_COST", "PREDICTION_DETAILS", 
		"PREDICTION_PROBABILITY", "PREDICTION_SET", "CUME_DIST", "DENSE_RANK", 
		"LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", 
		"AVG", "CORR", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", "RATIO_TO_REPORT", 
		"ROW_NUMBER", "SUM", "VARIANCE", "REGR_", "STDDEV", "VAR_", "COVAR_", 
		"PROMPT", "NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", "HEX_STRING_LIT", 
		"DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
		"CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", "LEFT_PAREN", "RIGHT_PAREN", 
		"DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", 
		"AT_SIGN", "ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", "LESS_THAN_OR_EQUALS_OP", 
		"LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", "CARRET_OPERATOR_PART", 
		"TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", "GREATER_THAN_OP", 
		"CONCATENATION_OP", "VERTICAL_BAR", "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "SQL92_RESERVED_ALL", 
		"SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", "SQL92_RESERVED_ANY", "SQL92_RESERVED_AS", 
		"SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", "SQL92_RESERVED_BETWEEN", 
		"SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", "SQL92_RESERVED_CHECK", "PLSQL_RESERVED_CLUSTERS", 
		"PLSQL_RESERVED_COLAUTH", "PLSQL_RESERVED_COMPRESS", "SQL92_RESERVED_CONNECT", 
		"PLSQL_NON_RESERVED_CONNECT_BY_ROOT", "PLSQL_RESERVED_CRASH", "SQL92_RESERVED_CREATE", 
		"SQL92_RESERVED_CURRENT", "SQL92_RESERVED_CURSOR", "SQL92_RESERVED_DATE", 
		"SQL92_RESERVED_DECLARE", "SQL92_RESERVED_DEFAULT", "SQL92_RESERVED_DELETE", 
		"SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", "SQL92_RESERVED_DROP", 
		"SQL92_RESERVED_ELSE", "SQL92_RESERVED_END", "SQL92_RESERVED_EXCEPTION", 
		"PLSQL_RESERVED_EXCLUSIVE", "SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", 
		"SQL92_RESERVED_FETCH", "SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO", 
		"SQL92_RESERVED_GRANT", "SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING", 
		"PLSQL_RESERVED_IDENTIFIED", "PLSQL_RESERVED_IF", "SQL92_RESERVED_IN", 
		"PLSQL_RESERVED_INDEX", "PLSQL_RESERVED_INDEXES", "SQL92_RESERVED_INSERT", 
		"SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", "SQL92_RESERVED_IS", 
		"SQL92_RESERVED_LIKE", "PLSQL_RESERVED_LOCK", "PLSQL_RESERVED_MINUS", 
		"PLSQL_RESERVED_MODE", "PLSQL_RESERVED_NOCOMPRESS", "SQL92_RESERVED_NOT", 
		"PLSQL_RESERVED_NOWAIT", "SQL92_RESERVED_NULL", "SQL92_RESERVED_OF", "SQL92_RESERVED_ON", 
		"SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", "SQL92_RESERVED_ORDER", 
		"SQL92_RESERVED_OVERLAPS", "SQL92_RESERVED_PRIOR", "SQL92_RESERVED_PROCEDURE", 
		"SQL92_RESERVED_PUBLIC", "PLSQL_RESERVED_RESOURCE", "SQL92_RESERVED_REVOKE", 
		"SQL92_RESERVED_SELECT", "PLSQL_RESERVED_SHARE", "SQL92_RESERVED_SIZE", 
		"PLSQL_RESERVED_START", "PLSQL_RESERVED_TABAUTH", "SQL92_RESERVED_TABLE", 
		"SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE", 
		"SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE", 
		"SQL92_RESERVED_VALUES", "SQL92_RESERVED_VIEW", "PLSQL_RESERVED_VIEWS", 
		"SQL92_RESERVED_WHEN", "SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", 
		"PLSQL_NON_RESERVED_USING", "PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_ELSIF", 
		"PLSQL_NON_RESERVED_PIVOT", "PLSQL_NON_RESERVED_UNPIVOT", "REGULAR_ID", 
		"ZV"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PlSql.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PlSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Swallow_to_semiContext extends ParserRuleContext {
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_swallow_to_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSwallow_to_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSwallow_to_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSwallow_to_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Swallow_to_semiContext swallow_to_semi() throws RecognitionException {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_swallow_to_semi);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(791); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(790);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				}
				setState(793); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << PP_IF) | (1L << PP_THEN) | (1L << PP_ELSE) | (1L << PP_ELSIF) | (1L << PP_END) | (1L << PP_ERROR) | (1L << SQLPLUS_PROMPT) | (1L << SQLPLUS_CALLSCRIPT) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << ASSOCIATION_OPERATOR) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EXCEPT - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTEND - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTERSECT - 192)) | (1L << (INTERVAL - 192)) | (1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MOD - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NEXT - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOMAXVALUE - 256)) | (1L << (NOMINVALUE - 256)) | (1L << (NONE - 256)) | (1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PERCENT_ISOPEN - 256)) | (1L << (PERCENT_ROWTYPE - 256)) | (1L << (PERCENT_TYPE - 256)) | (1L << (PERCENT_FOUND - 256)) | (1L << (PERCENT_NOTFOUND - 256)) | (1L << (PERCENT_ROWCOUNT - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIPE - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (REFERENCING - 320)) | (1L << (REJECT - 320)) | (1L << (RELIES_ON - 320)) | (1L << (RENAME - 320)) | (1L << (REPLACE - 320)) | (1L << (RESPECT - 320)) | (1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQL_PERCENT_ROWCOUNT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STATISTICS - 384)) | (1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TO_CHAR - 384)) | (1L << (TO_NUMBER - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (WORK - 448)) | (1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUM - 448)) | (1L << (VARIANCE - 448)) | (1L << (REGR_ - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (COVAR_ - 448)) | (1L << (PROMPT - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (BIT_STRING_LIT - 448)) | (1L << (HEX_STRING_LIT - 448)) | (1L << (DOUBLE_PERIOD - 448)) | (1L << (PERIOD - 448)) | (1L << (UNSIGNED_INTEGER - 448)) | (1L << (APPROXIMATE_NUM_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)) | (1L << (PERCENT - 448)) | (1L << (AMPERSAND - 448)) | (1L << (LEFT_PAREN - 448)) | (1L << (RIGHT_PAREN - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (DOUBLE_ASTERISK - 512)) | (1L << (ASTERISK - 512)) | (1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (COMMA - 512)) | (1L << (SOLIDUS - 512)) | (1L << (AT_SIGN - 512)) | (1L << (ASSIGN_OP - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (LESS_THAN_OR_EQUALS_OP - 512)) | (1L << (LESS_THAN_OP - 512)) | (1L << (GREATER_THAN_OR_EQUALS_OP - 512)) | (1L << (NOT_EQUAL_OP - 512)) | (1L << (CARRET_OPERATOR_PART - 512)) | (1L << (TILDE_OPERATOR_PART - 512)) | (1L << (EXCLAMATION_OPERATOR_PART - 512)) | (1L << (GREATER_THAN_OP - 512)) | (1L << (CONCATENATION_OP - 512)) | (1L << (VERTICAL_BAR - 512)) | (1L << (EQUALS_OP - 512)) | (1L << (LEFT_BRACKET - 512)) | (1L << (RIGHT_BRACKET - 512)) | (1L << (INTRODUCER - 512)) | (1L << (SPACES - 512)) | (1L << (SINGLE_LINE_COMMENT - 512)) | (1L << (MULTI_LINE_COMMENT - 512)) | (1L << (SQL92_RESERVED_ALL - 512)) | (1L << (SQL92_RESERVED_ALTER - 512)) | (1L << (SQL92_RESERVED_AND - 512)) | (1L << (SQL92_RESERVED_ANY - 512)) | (1L << (SQL92_RESERVED_AS - 512)) | (1L << (SQL92_RESERVED_ASC - 512)) | (1L << (SQL92_RESERVED_BEGIN - 512)) | (1L << (SQL92_RESERVED_BETWEEN - 512)) | (1L << (SQL92_RESERVED_BY - 512)) | (1L << (SQL92_RESERVED_CASE - 512)) | (1L << (SQL92_RESERVED_CHECK - 512)) | (1L << (PLSQL_RESERVED_CLUSTERS - 512)) | (1L << (PLSQL_RESERVED_COLAUTH - 512)) | (1L << (PLSQL_RESERVED_COMPRESS - 512)) | (1L << (SQL92_RESERVED_CONNECT - 512)) | (1L << (PLSQL_NON_RESERVED_CONNECT_BY_ROOT - 512)) | (1L << (PLSQL_RESERVED_CRASH - 512)) | (1L << (SQL92_RESERVED_CREATE - 512)) | (1L << (SQL92_RESERVED_CURRENT - 512)) | (1L << (SQL92_RESERVED_CURSOR - 512)) | (1L << (SQL92_RESERVED_DATE - 512)) | (1L << (SQL92_RESERVED_DECLARE - 512)) | (1L << (SQL92_RESERVED_DEFAULT - 512)) | (1L << (SQL92_RESERVED_DELETE - 512)) | (1L << (SQL92_RESERVED_DESC - 512)) | (1L << (SQL92_RESERVED_DISTINCT - 512)) | (1L << (SQL92_RESERVED_DROP - 512)) | (1L << (SQL92_RESERVED_ELSE - 512)) | (1L << (SQL92_RESERVED_END - 512)) | (1L << (SQL92_RESERVED_EXCEPTION - 512)) | (1L << (PLSQL_RESERVED_EXCLUSIVE - 512)) | (1L << (SQL92_RESERVED_EXISTS - 512)) | (1L << (SQL92_RESERVED_FALSE - 512)) | (1L << (SQL92_RESERVED_FETCH - 512)) | (1L << (SQL92_RESERVED_FOR - 512)) | (1L << (SQL92_RESERVED_FROM - 512)))) != 0) || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (SQL92_RESERVED_GOTO - 576)) | (1L << (SQL92_RESERVED_GRANT - 576)) | (1L << (SQL92_RESERVED_GROUP - 576)) | (1L << (SQL92_RESERVED_HAVING - 576)) | (1L << (PLSQL_RESERVED_IDENTIFIED - 576)) | (1L << (PLSQL_RESERVED_IF - 576)) | (1L << (SQL92_RESERVED_IN - 576)) | (1L << (PLSQL_RESERVED_INDEX - 576)) | (1L << (PLSQL_RESERVED_INDEXES - 576)) | (1L << (SQL92_RESERVED_INSERT - 576)) | (1L << (SQL92_RESERVED_INTERSECT - 576)) | (1L << (SQL92_RESERVED_INTO - 576)) | (1L << (SQL92_RESERVED_IS - 576)) | (1L << (SQL92_RESERVED_LIKE - 576)) | (1L << (PLSQL_RESERVED_LOCK - 576)) | (1L << (PLSQL_RESERVED_MINUS - 576)) | (1L << (PLSQL_RESERVED_MODE - 576)) | (1L << (PLSQL_RESERVED_NOCOMPRESS - 576)) | (1L << (SQL92_RESERVED_NOT - 576)) | (1L << (PLSQL_RESERVED_NOWAIT - 576)) | (1L << (SQL92_RESERVED_NULL - 576)) | (1L << (SQL92_RESERVED_OF - 576)) | (1L << (SQL92_RESERVED_ON - 576)) | (1L << (SQL92_RESERVED_OPTION - 576)) | (1L << (SQL92_RESERVED_OR - 576)) | (1L << (SQL92_RESERVED_ORDER - 576)) | (1L << (SQL92_RESERVED_OVERLAPS - 576)) | (1L << (SQL92_RESERVED_PRIOR - 576)) | (1L << (SQL92_RESERVED_PROCEDURE - 576)) | (1L << (SQL92_RESERVED_PUBLIC - 576)) | (1L << (PLSQL_RESERVED_RESOURCE - 576)) | (1L << (SQL92_RESERVED_REVOKE - 576)) | (1L << (SQL92_RESERVED_SELECT - 576)) | (1L << (PLSQL_RESERVED_SHARE - 576)) | (1L << (SQL92_RESERVED_SIZE - 576)) | (1L << (PLSQL_RESERVED_START - 576)) | (1L << (PLSQL_RESERVED_TABAUTH - 576)) | (1L << (SQL92_RESERVED_TABLE - 576)) | (1L << (SQL92_RESERVED_THE - 576)) | (1L << (SQL92_RESERVED_THEN - 576)) | (1L << (SQL92_RESERVED_TO - 576)) | (1L << (SQL92_RESERVED_TRUE - 576)) | (1L << (SQL92_RESERVED_UNION - 576)) | (1L << (SQL92_RESERVED_UNIQUE - 576)) | (1L << (SQL92_RESERVED_UPDATE - 576)) | (1L << (SQL92_RESERVED_VALUES - 576)) | (1L << (SQL92_RESERVED_VIEW - 576)) | (1L << (PLSQL_RESERVED_VIEWS - 576)) | (1L << (SQL92_RESERVED_WHEN - 576)) | (1L << (SQL92_RESERVED_WHERE - 576)) | (1L << (SQL92_RESERVED_WITH - 576)) | (1L << (PLSQL_NON_RESERVED_USING - 576)) | (1L << (PLSQL_NON_RESERVED_MODEL - 576)) | (1L << (PLSQL_NON_RESERVED_ELSIF - 576)) | (1L << (PLSQL_NON_RESERVED_PIVOT - 576)) | (1L << (PLSQL_NON_RESERVED_UNPIVOT - 576)) | (1L << (REGULAR_ID - 576)) | (1L << (ZV - 576)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compilation_unitContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(PlSqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compilation_unit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompilation_unit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompilation_unit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompilation_unit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compilation_unitContext compilation_unit() throws RecognitionException {
		Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_compilation_unit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ALTER || _la==BEGIN || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (CREATE - 86)) | (1L << (DECLARE - 86)) | (1L << (DELETE - 86)) | (1L << (DROP - 86)) | (1L << (EXPLAIN - 86)))) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & ((1L << (FUNCTION - 162)) | (1L << (INSERT - 162)) | (1L << (LOCK - 162)))) != 0) || _la==MERGE || _la==PROCEDURE || _la==SELECT || _la==UPDATE || _la==WITH || _la==LEFT_PAREN) {
				{
				{
				setState(795);
				unit_statement();
				}
				}
				setState(800);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(801);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_scriptContext extends ParserRuleContext {
		public List<Sql_plus_commandContext> sql_plus_command() {
			return getRuleContexts(Sql_plus_commandContext.class);
		}
		public Sql_plus_commandContext sql_plus_command(int i) {
			return getRuleContext(Sql_plus_commandContext.class,i);
		}
		public List<Preprocessor_statementContext> preprocessor_statement() {
			return getRuleContexts(Preprocessor_statementContext.class);
		}
		public Preprocessor_statementContext preprocessor_statement(int i) {
			return getRuleContext(Preprocessor_statementContext.class,i);
		}
		public TerminalNode SPACES() { return getToken(PlSqlParser.SPACES, 0); }
		public TerminalNode EOF() { return getToken(PlSqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_script; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSql_script(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSql_script(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSql_script(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_scriptContext sql_script() throws RecognitionException {
		Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_script);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(818);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << SQLPLUS_PROMPT) | (1L << SQLPLUS_CALLSCRIPT) | (1L << ALTER) | (1L << BEGIN))) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (CREATE - 86)) | (1L << (DECLARE - 86)) | (1L << (DELETE - 86)) | (1L << (DROP - 86)) | (1L << (EXIT - 86)) | (1L << (EXPLAIN - 86)))) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & ((1L << (FUNCTION - 162)) | (1L << (INSERT - 162)) | (1L << (LOCK - 162)))) != 0) || _la==MERGE || ((((_la - 311)) & ~0x3f) == 0 && ((1L << (_la - 311)) & ((1L << (PROCEDURE - 311)) | (1L << (SELECT - 311)) | (1L << (SET - 311)))) != 0) || ((((_la - 423)) & ~0x3f) == 0 && ((1L << (_la - 423)) & ((1L << (UPDATE - 423)) | (1L << (WHENEVER - 423)) | (1L << (WITH - 423)))) != 0) || _la==LEFT_PAREN || _la==SOLIDUS) {
				{
				setState(816);
				switch (_input.LA(1)) {
				case ALTER:
				case BEGIN:
				case CREATE:
				case DECLARE:
				case DELETE:
				case DROP:
				case EXPLAIN:
				case FUNCTION:
				case INSERT:
				case LOCK:
				case MERGE:
				case PROCEDURE:
				case SELECT:
				case UPDATE:
				case WITH:
				case LEFT_PAREN:
					{
					{
					setState(803);
					unit_statement();
					setState(808);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,2,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(804);
							match(SEMICOLON);
							setState(805);
							unit_statement();
							}
							} 
						}
						setState(810);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,2,_ctx);
					}
					setState(812);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
					case 1:
						{
						setState(811);
						match(SEMICOLON);
						}
						break;
					}
					}
					}
					break;
				case SQLPLUS_PROMPT:
				case SQLPLUS_CALLSCRIPT:
				case EXIT:
				case SET:
				case WHENEVER:
				case SOLIDUS:
					{
					setState(814);
					sql_plus_command();
					}
					break;
				case PP_IF:
					{
					setState(815);
					preprocessor_statement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(820);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(822);
			_la = _input.LA(1);
			if (_la==EOF || _la==SEMICOLON || _la==SPACES) {
				{
				setState(821);
				_la = _input.LA(1);
				if ( !(_la==EOF || _la==SEMICOLON || _la==SPACES) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unit_statementContext extends ParserRuleContext {
		public Alter_functionContext alter_function() {
			return getRuleContext(Alter_functionContext.class,0);
		}
		public Alter_packageContext alter_package() {
			return getRuleContext(Alter_packageContext.class,0);
		}
		public Alter_procedureContext alter_procedure() {
			return getRuleContext(Alter_procedureContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_triggerContext alter_trigger() {
			return getRuleContext(Alter_triggerContext.class,0);
		}
		public Alter_typeContext alter_type() {
			return getRuleContext(Alter_typeContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_packageContext create_package() {
			return getRuleContext(Create_packageContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_triggerContext create_trigger() {
			return getRuleContext(Create_triggerContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_packageContext drop_package() {
			return getRuleContext(Drop_packageContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUnit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUnit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUnit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unit_statementContext unit_statement() throws RecognitionException {
		Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_unit_statement);
		try {
			setState(847);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(824);
				alter_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(825);
				alter_package();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(826);
				alter_procedure();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(827);
				alter_sequence();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(828);
				alter_trigger();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(829);
				alter_type();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(830);
				create_function_body();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(831);
				create_procedure_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(832);
				create_package();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(833);
				create_sequence();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(834);
				create_trigger();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(835);
				create_type();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(836);
				drop_function();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(837);
				drop_package();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(838);
				drop_procedure();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(839);
				drop_sequence();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(840);
				drop_trigger();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(841);
				drop_type();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(842);
				data_manipulation_language_statements();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(843);
				block();
				setState(844);
				match(SEMICOLON);
				setState(845);
				match(SOLIDUS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_wrapperContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Declare_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDeclare_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDeclare_wrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDeclare_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_wrapperContext declare_wrapper() throws RecognitionException {
		Declare_wrapperContext _localctx = new Declare_wrapperContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_declare_wrapper);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(849);
			match(DECLARE);
			setState(853);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
				{
				{
				setState(850);
				declare_spec();
				}
				}
				setState(855);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Is_or_asContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Is_or_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_is_or_as; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterIs_or_as(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitIs_or_as(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitIs_or_as(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Is_or_asContext is_or_as() throws RecognitionException {
		Is_or_asContext _localctx = new Is_or_asContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_is_or_as);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(856);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_drop_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(858);
			match(DROP);
			setState(859);
			match(FUNCTION);
			setState(860);
			function_name();
			setState(861);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_functionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_functionContext alter_function() throws RecognitionException {
		Alter_functionContext _localctx = new Alter_functionContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_alter_function);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(863);
			match(ALTER);
			setState(864);
			match(FUNCTION);
			setState(865);
			function_name();
			setState(866);
			match(COMPILE);
			setState(868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				setState(867);
				match(DEBUG);
				}
				break;
			}
			setState(873);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,10,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(870);
					compiler_parameters_clause();
					}
					} 
				}
				setState(875);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,10,_ctx);
			}
			setState(878);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(876);
				match(REUSE);
				setState(877);
				match(SETTINGS);
				}
			}

			setState(880);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_bodyContext extends ParserRuleContext {
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_function_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_function_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_function_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_function_bodyContext create_function_body() throws RecognitionException {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_create_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(887);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(882);
				match(CREATE);
				setState(885);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(883);
					match(OR);
					setState(884);
					match(REPLACE);
					}
				}

				}
			}

			setState(889);
			function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(PlSqlParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(PlSqlParser.DETERMINISTIC, i);
		}
		public List<TerminalNode> PIPELINED() { return getTokens(PlSqlParser.PIPELINED); }
		public TerminalNode PIPELINED(int i) {
			return getToken(PlSqlParser.PIPELINED, i);
		}
		public List<TerminalNode> AGGREGATE() { return getTokens(PlSqlParser.AGGREGATE); }
		public TerminalNode AGGREGATE(int i) {
			return getToken(PlSqlParser.AGGREGATE, i);
		}
		public List<TerminalNode> USING() { return getTokens(PlSqlParser.USING); }
		public TerminalNode USING(int i) {
			return getToken(PlSqlParser.USING, i);
		}
		public List<Implementation_type_nameContext> implementation_type_name() {
			return getRuleContexts(Implementation_type_nameContext.class);
		}
		public Implementation_type_nameContext implementation_type_name(int i) {
			return getRuleContext(Implementation_type_nameContext.class,i);
		}
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_specContext function_spec() throws RecognitionException {
		Function_specContext _localctx = new Function_specContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(891);
			match(FUNCTION);
			setState(892);
			function_name();
			setState(904);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(893);
				match(LEFT_PAREN);
				setState(894);
				parameter();
				setState(899);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(895);
					match(COMMA);
					setState(896);
					parameter();
					}
					}
					setState(901);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(902);
				match(RIGHT_PAREN);
				}
			}

			setState(906);
			match(RETURN);
			setState(907);
			type_spec();
			setState(918);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AGGREGATE || _la==AUTHID || _la==DETERMINISTIC || ((((_la - 287)) & ~0x3f) == 0 && ((1L << (_la - 287)) & ((1L << (PARALLEL_ENABLE - 287)) | (1L << (PIPELINED - 287)) | (1L << (RESULT_CACHE - 287)))) != 0)) {
				{
				setState(916);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(908);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(909);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(910);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(911);
					match(DETERMINISTIC);
					}
					break;
				case PIPELINED:
					{
					setState(912);
					match(PIPELINED);
					}
					break;
				case AGGREGATE:
					{
					setState(913);
					match(AGGREGATE);
					setState(914);
					match(USING);
					setState(915);
					implementation_type_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(920);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(932);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(921);
				is_or_as();
				setState(930);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
				case 1:
					{
					setState(925);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
						{
						{
						setState(922);
						declare_spec();
						}
						}
						setState(927);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(928);
					body();
					}
					break;
				case 2:
					{
					setState(929);
					call_spec();
					}
					break;
				}
				}
			}

			setState(934);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parallel_enable_clauseContext extends ParserRuleContext {
		public TerminalNode PARALLEL_ENABLE() { return getToken(PlSqlParser.PARALLEL_ENABLE, 0); }
		public Partition_by_clauseContext partition_by_clause() {
			return getRuleContext(Partition_by_clauseContext.class,0);
		}
		public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_enable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterParallel_enable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitParallel_enable_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitParallel_enable_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parallel_enable_clauseContext parallel_enable_clause() throws RecognitionException {
		Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_parallel_enable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(936);
			match(PARALLEL_ENABLE);
			setState(938);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(937);
				partition_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_by_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public Streaming_clauseContext streaming_clause() {
			return getRuleContext(Streaming_clauseContext.class,0);
		}
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPartition_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPartition_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPartition_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_by_clauseContext partition_by_clause() throws RecognitionException {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_partition_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(940);
			match(LEFT_PAREN);
			setState(941);
			match(PARTITION);
			setState(942);
			expression();
			setState(943);
			match(BY);
			setState(957);
			switch (_input.LA(1)) {
			case ANY:
				{
				setState(944);
				match(ANY);
				}
				break;
			case HASH:
			case RANGE:
				{
				setState(945);
				_la = _input.LA(1);
				if ( !(_la==HASH || _la==RANGE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(946);
				match(LEFT_PAREN);
				setState(947);
				column_name();
				setState(952);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(948);
					match(COMMA);
					setState(949);
					column_name();
					}
					}
					setState(954);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(955);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(960);
			_la = _input.LA(1);
			if (_la==CLUSTER || _la==ORDER) {
				{
				setState(959);
				streaming_clause();
				}
			}

			setState(962);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_cache_clauseContext extends ParserRuleContext {
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public Relies_on_partContext relies_on_part() {
			return getRuleContext(Relies_on_partContext.class,0);
		}
		public Result_cache_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_cache_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterResult_cache_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitResult_cache_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitResult_cache_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Result_cache_clauseContext result_cache_clause() throws RecognitionException {
		Result_cache_clauseContext _localctx = new Result_cache_clauseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_result_cache_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(964);
			match(RESULT_CACHE);
			setState(966);
			_la = _input.LA(1);
			if (_la==RELIES_ON) {
				{
				setState(965);
				relies_on_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relies_on_partContext extends ParserRuleContext {
		public TerminalNode RELIES_ON() { return getToken(PlSqlParser.RELIES_ON, 0); }
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public Relies_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relies_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRelies_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRelies_on_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRelies_on_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relies_on_partContext relies_on_part() throws RecognitionException {
		Relies_on_partContext _localctx = new Relies_on_partContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_relies_on_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(968);
			match(RELIES_ON);
			setState(969);
			match(LEFT_PAREN);
			setState(970);
			tableview_name();
			setState(975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(971);
				match(COMMA);
				setState(972);
				tableview_name();
				}
				}
				setState(977);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(978);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Streaming_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode CLUSTER() { return getToken(PlSqlParser.CLUSTER, 0); }
		public Streaming_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_streaming_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStreaming_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStreaming_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStreaming_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Streaming_clauseContext streaming_clause() throws RecognitionException {
		Streaming_clauseContext _localctx = new Streaming_clauseContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_streaming_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(980);
			_la = _input.LA(1);
			if ( !(_la==CLUSTER || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(981);
			expression();
			setState(982);
			match(BY);
			setState(983);
			match(LEFT_PAREN);
			setState(984);
			column_name();
			setState(989);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(985);
				match(COMMA);
				setState(986);
				column_name();
				}
				}
				setState(991);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(992);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_packageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Drop_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_packageContext drop_package() throws RecognitionException {
		Drop_packageContext _localctx = new Drop_packageContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_drop_package);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(994);
			match(DROP);
			setState(995);
			match(PACKAGE);
			setState(997);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				setState(996);
				match(BODY);
				}
				break;
			}
			setState(999);
			package_name();
			setState(1000);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_packageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public List<TerminalNode> PACKAGE() { return getTokens(PlSqlParser.PACKAGE); }
		public TerminalNode PACKAGE(int i) {
			return getToken(PlSqlParser.PACKAGE, i);
		}
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public Alter_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_packageContext alter_package() throws RecognitionException {
		Alter_packageContext _localctx = new Alter_packageContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_alter_package);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1002);
			match(ALTER);
			setState(1003);
			match(PACKAGE);
			setState(1004);
			package_name();
			setState(1005);
			match(COMPILE);
			setState(1007);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				setState(1006);
				match(DEBUG);
				}
				break;
			}
			setState(1010);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				setState(1009);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(1015);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1012);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1017);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
			}
			setState(1020);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1018);
				match(REUSE);
				setState(1019);
				match(SETTINGS);
				}
			}

			setState(1022);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_packageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Package_specContext package_spec() {
			return getRuleContext(Package_specContext.class,0);
		}
		public Package_bodyContext package_body() {
			return getRuleContext(Package_bodyContext.class,0);
		}
		public Create_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_packageContext create_package() throws RecognitionException {
		Create_packageContext _localctx = new Create_packageContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_create_package);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1024);
			match(CREATE);
			setState(1027);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1025);
				match(OR);
				setState(1026);
				match(REPLACE);
				}
			}

			setState(1029);
			match(PACKAGE);
			setState(1032);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				setState(1030);
				package_spec();
				}
				break;
			case 2:
				{
				setState(1031);
				package_body();
				}
				break;
			}
			setState(1034);
			match(SEMICOLON);
			setState(1035);
			match(SOLIDUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<Package_obj_bodyContext> package_obj_body() {
			return getRuleContexts(Package_obj_bodyContext.class);
		}
		public Package_obj_bodyContext package_obj_body(int i) {
			return getRuleContext(Package_obj_bodyContext.class,i);
		}
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Exception_clauseContext exception_clause() {
			return getRuleContext(Exception_clauseContext.class,0);
		}
		public Package_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPackage_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPackage_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPackage_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_bodyContext package_body() throws RecognitionException {
		Package_bodyContext _localctx = new Package_bodyContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_package_body);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1037);
			match(BODY);
			setState(1038);
			package_name();
			setState(1039);
			is_or_as();
			setState(1043);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,35,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1040);
					package_obj_body();
					}
					} 
				}
				setState(1045);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,35,_ctx);
			}
			setState(1048);
			_la = _input.LA(1);
			if (_la==BEGIN) {
				{
				setState(1046);
				match(BEGIN);
				setState(1047);
				seq_of_statements();
				}
			}

			setState(1051);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(1050);
				exception_clause();
				}
			}

			setState(1053);
			match(END);
			setState(1055);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(1054);
				package_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_specContext extends ParserRuleContext {
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<Package_obj_specContext> package_obj_spec() {
			return getRuleContexts(Package_obj_specContext.class);
		}
		public Package_obj_specContext package_obj_spec(int i) {
			return getRuleContext(Package_obj_specContext.class,i);
		}
		public Package_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPackage_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPackage_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPackage_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_specContext package_spec() throws RecognitionException {
		Package_specContext _localctx = new Package_specContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_package_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1057);
			package_name();
			setState(1059);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1058);
				invoker_rights_clause();
				}
			}

			setState(1061);
			is_or_as();
			setState(1065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
				{
				{
				setState(1062);
				package_obj_spec();
				}
				}
				setState(1067);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1068);
			match(END);
			setState(1070);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(1069);
				package_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Preprocessor_statementContext preprocessor_statement() {
			return getRuleContext(Preprocessor_statementContext.class,0);
		}
		public Package_obj_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPackage_obj_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPackage_obj_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPackage_obj_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_obj_specContext package_obj_spec() throws RecognitionException {
		Package_obj_specContext _localctx = new Package_obj_specContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_package_obj_spec);
		try {
			setState(1082);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1072);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1073);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1074);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1075);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1076);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1077);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1078);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1079);
				procedure_spec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1080);
				function_spec();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1081);
				preprocessor_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_bodyContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Preprocessor_statementContext preprocessor_statement() {
			return getRuleContext(Preprocessor_statementContext.class,0);
		}
		public Package_obj_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPackage_obj_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPackage_obj_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPackage_obj_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_obj_bodyContext package_obj_body() throws RecognitionException {
		Package_obj_bodyContext _localctx = new Package_obj_bodyContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_package_obj_body);
		try {
			setState(1094);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1084);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1085);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1086);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1087);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1088);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1089);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1090);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1091);
				create_procedure_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1092);
				create_function_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1093);
				preprocessor_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_drop_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1096);
			match(DROP);
			setState(1097);
			match(PROCEDURE);
			setState(1098);
			procedure_name();
			setState(1099);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_procedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_procedureContext alter_procedure() throws RecognitionException {
		Alter_procedureContext _localctx = new Alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_alter_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1101);
			match(ALTER);
			setState(1102);
			match(PROCEDURE);
			setState(1103);
			procedure_name();
			setState(1104);
			match(COMPILE);
			setState(1106);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				setState(1105);
				match(DEBUG);
				}
				break;
			}
			setState(1111);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,45,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1108);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1113);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,45,_ctx);
			}
			setState(1116);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1114);
				match(REUSE);
				setState(1115);
				match(SETTINGS);
				}
			}

			setState(1118);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedure_bodyContext extends ParserRuleContext {
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_procedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_procedure_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_procedure_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_create_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1125);
			_la = _input.LA(1);
			if (_la==CREATE) {
				{
				setState(1120);
				match(CREATE);
				setState(1123);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1121);
					match(OR);
					setState(1122);
					match(REPLACE);
					}
				}

				}
			}

			setState(1127);
			procedure_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterProcedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitProcedure_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitProcedure_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_specContext procedure_spec() throws RecognitionException {
		Procedure_specContext _localctx = new Procedure_specContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1129);
			match(PROCEDURE);
			setState(1130);
			procedure_name();
			setState(1142);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1131);
				match(LEFT_PAREN);
				setState(1132);
				parameter();
				setState(1137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1133);
					match(COMMA);
					setState(1134);
					parameter();
					}
					}
					setState(1139);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1140);
				match(RIGHT_PAREN);
				}
			}

			setState(1159);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS) {
				{
				setState(1145);
				_la = _input.LA(1);
				if (_la==AUTHID) {
					{
					setState(1144);
					invoker_rights_clause();
					}
				}

				setState(1147);
				is_or_as();
				setState(1157);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
				case 1:
					{
					setState(1151);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
						{
						{
						setState(1148);
						declare_spec();
						}
						}
						setState(1153);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1154);
					body();
					}
					break;
				case 2:
					{
					setState(1155);
					call_spec();
					}
					break;
				case 3:
					{
					setState(1156);
					match(EXTERNAL);
					}
					break;
				}
				}
			}

			setState(1161);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_drop_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1163);
			match(DROP);
			setState(1164);
			match(TRIGGER);
			setState(1165);
			trigger_name();
			setState(1166);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_triggerContext extends ParserRuleContext {
		public Trigger_nameContext tn1;
		public Trigger_nameContext tn2;
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_triggerContext alter_trigger() throws RecognitionException {
		Alter_triggerContext _localctx = new Alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_alter_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1168);
			match(ALTER);
			setState(1169);
			match(TRIGGER);
			setState(1170);
			((Alter_triggerContext)_localctx).tn1 = trigger_name();
			setState(1189);
			switch (_input.LA(1)) {
			case DISABLE:
			case ENABLE:
				{
				setState(1171);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case RENAME:
				{
				setState(1172);
				match(RENAME);
				setState(1173);
				match(TO);
				setState(1174);
				((Alter_triggerContext)_localctx).tn2 = trigger_name();
				}
				break;
			case COMPILE:
				{
				setState(1175);
				match(COMPILE);
				setState(1177);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					setState(1176);
					match(DEBUG);
					}
					break;
				}
				setState(1182);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,56,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1179);
						compiler_parameters_clause();
						}
						} 
					}
					setState(1184);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,56,_ctx);
				}
				setState(1187);
				_la = _input.LA(1);
				if (_la==REUSE) {
					{
					setState(1185);
					match(REUSE);
					setState(1186);
					match(SETTINGS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1191);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_triggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Trigger_bodyContext trigger_body() {
			return getRuleContext(Trigger_bodyContext.class,0);
		}
		public Simple_dml_triggerContext simple_dml_trigger() {
			return getRuleContext(Simple_dml_triggerContext.class,0);
		}
		public Compound_dml_triggerContext compound_dml_trigger() {
			return getRuleContext(Compound_dml_triggerContext.class,0);
		}
		public Non_dml_triggerContext non_dml_trigger() {
			return getRuleContext(Non_dml_triggerContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Trigger_follows_clauseContext trigger_follows_clause() {
			return getRuleContext(Trigger_follows_clauseContext.class,0);
		}
		public Trigger_when_clauseContext trigger_when_clause() {
			return getRuleContext(Trigger_when_clauseContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public Create_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_triggerContext create_trigger() throws RecognitionException {
		Create_triggerContext _localctx = new Create_triggerContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_create_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1193);
			match(CREATE);
			setState(1196);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1194);
				match(OR);
				setState(1195);
				match(REPLACE);
				}
			}

			setState(1198);
			match(TRIGGER);
			setState(1199);
			trigger_name();
			setState(1203);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				setState(1200);
				simple_dml_trigger();
				}
				break;
			case 2:
				{
				setState(1201);
				compound_dml_trigger();
				}
				break;
			case 3:
				{
				setState(1202);
				non_dml_trigger();
				}
				break;
			}
			setState(1206);
			_la = _input.LA(1);
			if (_la==FOLLOWS) {
				{
				setState(1205);
				trigger_follows_clause();
				}
			}

			setState(1209);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(1208);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(1212);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(1211);
				trigger_when_clause();
				}
			}

			setState(1214);
			trigger_body();
			setState(1215);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_follows_clauseContext extends ParserRuleContext {
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_follows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTrigger_follows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTrigger_follows_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTrigger_follows_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_follows_clauseContext trigger_follows_clause() throws RecognitionException {
		Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_trigger_follows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1217);
			match(FOLLOWS);
			setState(1218);
			trigger_name();
			setState(1223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1219);
				match(COMMA);
				setState(1220);
				trigger_name();
				}
				}
				setState(1225);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_when_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTrigger_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTrigger_when_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTrigger_when_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_when_clauseContext trigger_when_clause() throws RecognitionException {
		Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_trigger_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1226);
			match(WHEN);
			setState(1227);
			match(LEFT_PAREN);
			setState(1228);
			condition();
			setState(1229);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_dml_triggerContext extends ParserRuleContext {
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(PlSqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public For_each_rowContext for_each_row() {
			return getRuleContext(For_each_rowContext.class,0);
		}
		public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSimple_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSimple_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSimple_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_dml_triggerContext simple_dml_trigger() throws RecognitionException {
		Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_simple_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1235);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(1231);
				match(BEFORE);
				}
				break;
			case AFTER:
				{
				setState(1232);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(1233);
				match(INSTEAD);
				setState(1234);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1237);
			dml_event_clause();
			setState(1239);
			_la = _input.LA(1);
			if (_la==REFERENCING) {
				{
				setState(1238);
				referencing_clause();
				}
			}

			setState(1242);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1241);
				for_each_row();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_each_rowContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(PlSqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_each_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_each_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_each_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_each_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_each_rowContext for_each_row() throws RecognitionException {
		For_each_rowContext _localctx = new For_each_rowContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_for_each_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1244);
			match(FOR);
			setState(1245);
			match(EACH);
			setState(1246);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_dml_triggerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompound_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompound_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompound_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_dml_triggerContext compound_dml_trigger() throws RecognitionException {
		Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_compound_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1248);
			match(FOR);
			setState(1249);
			dml_event_clause();
			setState(1251);
			_la = _input.LA(1);
			if (_la==REFERENCING) {
				{
				setState(1250);
				referencing_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_triggerContext extends ParserRuleContext {
		public List<Non_dml_eventContext> non_dml_event() {
			return getRuleContexts(Non_dml_eventContext.class);
		}
		public Non_dml_eventContext non_dml_event(int i) {
			return getRuleContext(Non_dml_eventContext.class,i);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Non_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNon_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNon_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNon_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_dml_triggerContext non_dml_trigger() throws RecognitionException {
		Non_dml_triggerContext _localctx = new Non_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_non_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1253);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1254);
			non_dml_event();
			setState(1259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1255);
				match(OR);
				setState(1256);
				non_dml_event();
				}
				}
				setState(1261);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1262);
			match(ON);
			setState(1270);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				setState(1263);
				match(DATABASE);
				}
				break;
			case 2:
				{
				setState(1267);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
				case 1:
					{
					setState(1264);
					schema_name();
					setState(1265);
					match(PERIOD);
					}
					break;
				}
				setState(1269);
				match(SCHEMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_bodyContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public Trigger_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTrigger_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTrigger_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTrigger_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_bodyContext trigger_body() throws RecognitionException {
		Trigger_bodyContext _localctx = new Trigger_bodyContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_trigger_body);
		try {
			setState(1277);
			switch (_input.LA(1)) {
			case COMPOUND:
				enterOuterAlt(_localctx, 1);
				{
				setState(1272);
				match(COMPOUND);
				setState(1273);
				match(TRIGGER);
				}
				break;
			case CALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1274);
				match(CALL);
				setState(1275);
				id();
				}
				break;
			case BEGIN:
			case DECLARE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1276);
				trigger_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_clauseContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Routine_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRoutine_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRoutine_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRoutine_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Routine_clauseContext routine_clause() throws RecognitionException {
		Routine_clauseContext _localctx = new Routine_clauseContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_routine_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1279);
			routine_name();
			setState(1281);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1280);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_trigger_blockContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<Timing_point_sectionContext> timing_point_section() {
			return getRuleContexts(Timing_point_sectionContext.class);
		}
		public Timing_point_sectionContext timing_point_section(int i) {
			return getRuleContext(Timing_point_sectionContext.class,i);
		}
		public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompound_trigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompound_trigger_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompound_trigger_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_trigger_blockContext compound_trigger_block() throws RecognitionException {
		Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_compound_trigger_block);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1283);
			match(COMPOUND);
			setState(1284);
			match(TRIGGER);
			setState(1288);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1285);
					declare_spec();
					}
					} 
				}
				setState(1290);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			}
			setState(1292); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1291);
				timing_point_section();
				}
				}
				setState(1294); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AFTER || _la==BEFORE );
			setState(1296);
			match(END);
			setState(1297);
			trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timing_point_sectionContext extends ParserRuleContext {
		public Token bk;
		public Token ak;
		public List<TerminalNode> STATEMENT() { return getTokens(PlSqlParser.STATEMENT); }
		public TerminalNode STATEMENT(int i) {
			return getToken(PlSqlParser.STATEMENT, i);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public List<TerminalNode> BEFORE() { return getTokens(PlSqlParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(PlSqlParser.BEFORE, i);
		}
		public List<TerminalNode> EACH() { return getTokens(PlSqlParser.EACH); }
		public TerminalNode EACH(int i) {
			return getToken(PlSqlParser.EACH, i);
		}
		public List<TerminalNode> ROW() { return getTokens(PlSqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(PlSqlParser.ROW, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(PlSqlParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(PlSqlParser.AFTER, i);
		}
		public Timing_point_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timing_point_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTiming_point_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTiming_point_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTiming_point_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Timing_point_sectionContext timing_point_section() throws RecognitionException {
		Timing_point_sectionContext _localctx = new Timing_point_sectionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_timing_point_section);
		try {
			setState(1335);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1299);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1300);
				match(STATEMENT);
				setState(1301);
				match(IS);
				setState(1302);
				trigger_block();
				setState(1303);
				match(BEFORE);
				setState(1304);
				match(STATEMENT);
				setState(1305);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1307);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1308);
				match(EACH);
				setState(1309);
				match(ROW);
				setState(1310);
				match(IS);
				setState(1311);
				trigger_block();
				setState(1312);
				match(BEFORE);
				setState(1313);
				match(EACH);
				setState(1314);
				match(ROW);
				setState(1315);
				match(SEMICOLON);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1317);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1318);
				match(STATEMENT);
				setState(1319);
				match(IS);
				setState(1320);
				trigger_block();
				setState(1321);
				match(AFTER);
				setState(1322);
				match(STATEMENT);
				setState(1323);
				match(SEMICOLON);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1325);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1326);
				match(EACH);
				setState(1327);
				match(ROW);
				setState(1328);
				match(IS);
				setState(1329);
				trigger_block();
				setState(1330);
				match(AFTER);
				setState(1331);
				match(EACH);
				setState(1332);
				match(ROW);
				setState(1333);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_eventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
		public TerminalNode ASSOCIATE() { return getToken(PlSqlParser.ASSOCIATE, 0); }
		public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
		public TerminalNode AUDIT() { return getToken(PlSqlParser.AUDIT, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(PlSqlParser.DISASSOCIATE, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
		public TerminalNode NOAUDIT() { return getToken(PlSqlParser.NOAUDIT, 0); }
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode REVOKE() { return getToken(PlSqlParser.REVOKE, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode DDL() { return getToken(PlSqlParser.DDL, 0); }
		public TerminalNode STARTUP() { return getToken(PlSqlParser.STARTUP, 0); }
		public TerminalNode SHUTDOWN() { return getToken(PlSqlParser.SHUTDOWN, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode LOGON() { return getToken(PlSqlParser.LOGON, 0); }
		public TerminalNode LOGOFF() { return getToken(PlSqlParser.LOGOFF, 0); }
		public TerminalNode SERVERERROR() { return getToken(PlSqlParser.SERVERERROR, 0); }
		public TerminalNode SUSPEND() { return getToken(PlSqlParser.SUSPEND, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public Non_dml_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNon_dml_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNon_dml_event(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNon_dml_event(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_dml_eventContext non_dml_event() throws RecognitionException {
		Non_dml_eventContext _localctx = new Non_dml_eventContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_non_dml_event);
		try {
			setState(1363);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1337);
				match(ALTER);
				}
				break;
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1338);
				match(ANALYZE);
				}
				break;
			case ASSOCIATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1339);
				match(ASSOCIATE);
				setState(1340);
				match(STATISTICS);
				}
				break;
			case AUDIT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1341);
				match(AUDIT);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1342);
				match(COMMENT);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1343);
				match(CREATE);
				}
				break;
			case DISASSOCIATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1344);
				match(DISASSOCIATE);
				setState(1345);
				match(STATISTICS);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 8);
				{
				setState(1346);
				match(DROP);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(1347);
				match(GRANT);
				}
				break;
			case NOAUDIT:
				enterOuterAlt(_localctx, 10);
				{
				setState(1348);
				match(NOAUDIT);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 11);
				{
				setState(1349);
				match(RENAME);
				}
				break;
			case REVOKE:
				enterOuterAlt(_localctx, 12);
				{
				setState(1350);
				match(REVOKE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 13);
				{
				setState(1351);
				match(TRUNCATE);
				}
				break;
			case DDL:
				enterOuterAlt(_localctx, 14);
				{
				setState(1352);
				match(DDL);
				}
				break;
			case STARTUP:
				enterOuterAlt(_localctx, 15);
				{
				setState(1353);
				match(STARTUP);
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 16);
				{
				setState(1354);
				match(SHUTDOWN);
				}
				break;
			case DB_ROLE_CHANGE:
				enterOuterAlt(_localctx, 17);
				{
				setState(1355);
				match(DB_ROLE_CHANGE);
				}
				break;
			case LOGON:
				enterOuterAlt(_localctx, 18);
				{
				setState(1356);
				match(LOGON);
				}
				break;
			case LOGOFF:
				enterOuterAlt(_localctx, 19);
				{
				setState(1357);
				match(LOGOFF);
				}
				break;
			case SERVERERROR:
				enterOuterAlt(_localctx, 20);
				{
				setState(1358);
				match(SERVERERROR);
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 21);
				{
				setState(1359);
				match(SUSPEND);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 22);
				{
				setState(1360);
				match(DATABASE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 23);
				{
				setState(1361);
				match(SCHEMA);
				}
				break;
			case FOLLOWS:
				enterOuterAlt(_localctx, 24);
				{
				setState(1362);
				match(FOLLOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_clauseContext extends ParserRuleContext {
		public List<Dml_event_elementContext> dml_event_element() {
			return getRuleContexts(Dml_event_elementContext.class);
		}
		public Dml_event_elementContext dml_event_element(int i) {
			return getRuleContext(Dml_event_elementContext.class,i);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Dml_event_nested_clauseContext dml_event_nested_clause() {
			return getRuleContext(Dml_event_nested_clauseContext.class,0);
		}
		public Dml_event_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDml_event_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDml_event_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDml_event_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_clauseContext dml_event_clause() throws RecognitionException {
		Dml_event_clauseContext _localctx = new Dml_event_clauseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_dml_event_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1365);
			dml_event_element();
			setState(1370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1366);
				match(OR);
				setState(1367);
				dml_event_element();
				}
				}
				setState(1372);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1373);
			match(ON);
			setState(1375);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				setState(1374);
				dml_event_nested_clause();
				}
				break;
			}
			setState(1377);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_elementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Dml_event_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDml_event_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDml_event_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDml_event_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_elementContext dml_event_element() throws RecognitionException {
		Dml_event_elementContext _localctx = new Dml_event_elementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_dml_event_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1379);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1389);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(1380);
				match(OF);
				setState(1381);
				column_name();
				setState(1386);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1382);
					match(COMMA);
					setState(1383);
					column_name();
					}
					}
					setState(1388);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_nested_clauseContext extends ParserRuleContext {
		public TerminalNode NESTED() { return getToken(PlSqlParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_nested_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDml_event_nested_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDml_event_nested_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDml_event_nested_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_nested_clauseContext dml_event_nested_clause() throws RecognitionException {
		Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_dml_event_nested_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1391);
			match(NESTED);
			setState(1392);
			match(TABLE);
			setState(1393);
			tableview_name();
			setState(1394);
			match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(PlSqlParser.REFERENCING, 0); }
		public List<Referencing_elementContext> referencing_element() {
			return getRuleContexts(Referencing_elementContext.class);
		}
		public Referencing_elementContext referencing_element(int i) {
			return getRuleContext(Referencing_elementContext.class,i);
		}
		public Referencing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReferencing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReferencing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReferencing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referencing_clauseContext referencing_clause() throws RecognitionException {
		Referencing_clauseContext _localctx = new Referencing_clauseContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_referencing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1396);
			match(REFERENCING);
			setState(1398); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1397);
				referencing_element();
				}
				}
				setState(1400); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 248)) & ~0x3f) == 0 && ((1L << (_la - 248)) & ((1L << (NEW - 248)) | (1L << (OLD - 248)) | (1L << (PARENT - 248)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_elementContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(PlSqlParser.OLD, 0); }
		public TerminalNode PARENT() { return getToken(PlSqlParser.PARENT, 0); }
		public Referencing_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReferencing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReferencing_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReferencing_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referencing_elementContext referencing_element() throws RecognitionException {
		Referencing_elementContext _localctx = new Referencing_elementContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_referencing_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1402);
			_la = _input.LA(1);
			if ( !(((((_la - 248)) & ~0x3f) == 0 && ((1L << (_la - 248)) & ((1L << (NEW - 248)) | (1L << (OLD - 248)) | (1L << (PARENT - 248)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1403);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode VALIDATE() { return getToken(PlSqlParser.VALIDATE, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1405);
			match(DROP);
			setState(1406);
			match(TYPE);
			setState(1408);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				setState(1407);
				match(BODY);
				}
				break;
			}
			setState(1410);
			type_name();
			setState(1412);
			_la = _input.LA(1);
			if (_la==FORCE || _la==VALIDATE) {
				{
				setState(1411);
				_la = _input.LA(1);
				if ( !(_la==FORCE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(1414);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_typeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Compile_type_clauseContext compile_type_clause() {
			return getRuleContext(Compile_type_clauseContext.class,0);
		}
		public Replace_type_clauseContext replace_type_clause() {
			return getRuleContext(Replace_type_clauseContext.class,0);
		}
		public Alter_method_specContext alter_method_spec() {
			return getRuleContext(Alter_method_specContext.class,0);
		}
		public Alter_collection_clausesContext alter_collection_clauses() {
			return getRuleContext(Alter_collection_clausesContext.class,0);
		}
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public Dependent_handling_clauseContext dependent_handling_clause() {
			return getRuleContext(Dependent_handling_clauseContext.class,0);
		}
		public Alter_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_typeContext alter_type() throws RecognitionException {
		Alter_typeContext _localctx = new Alter_typeContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_alter_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1416);
			match(ALTER);
			setState(1417);
			match(TYPE);
			setState(1418);
			type_name();
			setState(1424);
			switch (_input.LA(1)) {
			case COMPILE:
				{
				setState(1419);
				compile_type_clause();
				}
				break;
			case REPLACE:
				{
				setState(1420);
				replace_type_clause();
				}
				break;
			case ADD:
			case DROP:
				{
				setState(1421);
				alter_method_spec();
				}
				break;
			case MODIFY:
				{
				setState(1422);
				alter_collection_clauses();
				}
				break;
			case FINAL:
			case INSTANTIABLE:
			case NOT:
			case OVERRIDING:
				{
				setState(1423);
				modifier_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1427);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==INVALIDATE) {
				{
				setState(1426);
				dependent_handling_clause();
				}
			}

			setState(1429);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compile_type_clauseContext extends ParserRuleContext {
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Compile_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compile_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompile_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompile_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompile_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compile_type_clauseContext compile_type_clause() throws RecognitionException {
		Compile_type_clauseContext _localctx = new Compile_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_compile_type_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1431);
			match(COMPILE);
			setState(1433);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				setState(1432);
				match(DEBUG);
				}
				break;
			}
			setState(1436);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				setState(1435);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(1441);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,89,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1438);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1443);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,89,_ctx);
			}
			setState(1446);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1444);
				match(REUSE);
				setState(1445);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_type_clauseContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Replace_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReplace_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReplace_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReplace_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Replace_type_clauseContext replace_type_clause() throws RecognitionException {
		Replace_type_clauseContext _localctx = new Replace_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_replace_type_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1448);
			match(REPLACE);
			setState(1450);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1449);
				invoker_rights_clause();
				}
			}

			setState(1452);
			match(AS);
			setState(1453);
			match(OBJECT);
			setState(1454);
			match(LEFT_PAREN);
			setState(1455);
			object_member_spec();
			setState(1460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1456);
				match(COMMA);
				setState(1457);
				object_member_spec();
				}
				}
				setState(1462);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1463);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_specContext extends ParserRuleContext {
		public List<Alter_method_elementContext> alter_method_element() {
			return getRuleContexts(Alter_method_elementContext.class);
		}
		public Alter_method_elementContext alter_method_element(int i) {
			return getRuleContext(Alter_method_elementContext.class,i);
		}
		public Alter_method_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_method_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_method_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_method_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_method_specContext alter_method_spec() throws RecognitionException {
		Alter_method_specContext _localctx = new Alter_method_specContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_alter_method_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1465);
			alter_method_element();
			setState(1470);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1466);
				match(COMMA);
				setState(1467);
				alter_method_element();
				}
				}
				setState(1472);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_elementContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Alter_method_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_method_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_method_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_method_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_method_elementContext alter_method_element() throws RecognitionException {
		Alter_method_elementContext _localctx = new Alter_method_elementContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_alter_method_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1473);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1476);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				{
				setState(1474);
				map_order_function_spec();
				}
				break;
			case MEMBER:
			case STATIC:
				{
				setState(1475);
				subprogram_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_attribute_definitionContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTE() { return getToken(PlSqlParser.ATTRIBUTE, 0); }
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public List<Attribute_definitionContext> attribute_definition() {
			return getRuleContexts(Attribute_definitionContext.class);
		}
		public Attribute_definitionContext attribute_definition(int i) {
			return getRuleContext(Attribute_definitionContext.class,i);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_attribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_attribute_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_attribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_attribute_definitionContext alter_attribute_definition() throws RecognitionException {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_alter_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1478);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1479);
			match(ATTRIBUTE);
			setState(1492);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(1480);
				attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				setState(1481);
				match(LEFT_PAREN);
				setState(1482);
				attribute_definition();
				setState(1487);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1483);
					match(COMMA);
					setState(1484);
					attribute_definition();
					}
					}
					setState(1489);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1490);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_definitionContext extends ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAttribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAttribute_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAttribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_definitionContext attribute_definition() throws RecognitionException {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1494);
			attribute_name();
			setState(1496);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==REGULAR_ID) {
				{
				setState(1495);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_collection_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ELEMENT() { return getToken(PlSqlParser.ELEMENT, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collection_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_collection_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_collection_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_collection_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_collection_clausesContext alter_collection_clauses() throws RecognitionException {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_alter_collection_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1498);
			match(MODIFY);
			setState(1504);
			switch (_input.LA(1)) {
			case LIMIT:
				{
				setState(1499);
				match(LIMIT);
				setState(1500);
				expression();
				}
				break;
			case ELEMENT:
				{
				setState(1501);
				match(ELEMENT);
				setState(1502);
				match(TYPE);
				setState(1503);
				type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_handling_clauseContext extends ParserRuleContext {
		public TerminalNode INVALIDATE() { return getToken(PlSqlParser.INVALIDATE, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode CONVERT() { return getToken(PlSqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode INCLUDING() { return getToken(PlSqlParser.INCLUDING, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode DATA() { return getToken(PlSqlParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return getRuleContext(Dependent_exceptions_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_handling_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDependent_handling_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDependent_handling_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDependent_handling_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dependent_handling_clauseContext dependent_handling_clause() throws RecognitionException {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_dependent_handling_clause);
		int _la;
		try {
			setState(1522);
			switch (_input.LA(1)) {
			case INVALIDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1506);
				match(INVALIDATE);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1507);
				match(CASCADE);
				setState(1517);
				switch (_input.LA(1)) {
				case CONVERT:
					{
					setState(1508);
					match(CONVERT);
					setState(1509);
					match(TO);
					setState(1510);
					match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					setState(1512);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(1511);
						match(NOT);
						}
					}

					setState(1514);
					match(INCLUDING);
					setState(1515);
					match(TABLE);
					setState(1516);
					match(DATA);
					}
					break;
				case EXCEPTIONS:
				case FORCE:
				case SEMICOLON:
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1520);
				_la = _input.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					setState(1519);
					dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_exceptions_partContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_exceptions_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDependent_exceptions_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDependent_exceptions_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDependent_exceptions_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dependent_exceptions_partContext dependent_exceptions_part() throws RecognitionException {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_dependent_exceptions_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1525);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(1524);
				match(FORCE);
				}
			}

			setState(1527);
			match(EXCEPTIONS);
			setState(1528);
			match(INTO);
			setState(1529);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_definitionContext type_definition() {
			return getRuleContext(Type_definitionContext.class,0);
		}
		public Type_bodyContext type_body() {
			return getRuleContext(Type_bodyContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1531);
			match(CREATE);
			setState(1534);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1532);
				match(OR);
				setState(1533);
				match(REPLACE);
				}
			}

			setState(1536);
			match(TYPE);
			setState(1539);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				setState(1537);
				type_definition();
				}
				break;
			case 2:
				{
				setState(1538);
				type_body();
				}
				break;
			}
			setState(1541);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_definitionContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode OID() { return getToken(PlSqlParser.OID, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Object_type_defContext object_type_def() {
			return getRuleContext(Object_type_defContext.class,0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_definitionContext type_definition() throws RecognitionException {
		Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1543);
			type_name();
			setState(1546);
			_la = _input.LA(1);
			if (_la==OID) {
				{
				setState(1544);
				match(OID);
				setState(1545);
				match(CHAR_STRING);
				}
			}

			setState(1549);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				setState(1548);
				object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_defContext extends ParserRuleContext {
		public Object_as_partContext object_as_part() {
			return getRuleContext(Object_as_partContext.class,0);
		}
		public Object_under_partContext object_under_part() {
			return getRuleContext(Object_under_partContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return getRuleContext(Sqlj_object_typeContext.class,0);
		}
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public List<Modifier_clauseContext> modifier_clause() {
			return getRuleContexts(Modifier_clauseContext.class);
		}
		public Modifier_clauseContext modifier_clause(int i) {
			return getRuleContext(Modifier_clauseContext.class,i);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterObject_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitObject_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitObject_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_defContext object_type_def() throws RecognitionException {
		Object_type_defContext _localctx = new Object_type_defContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_object_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1552);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1551);
				invoker_rights_clause();
				}
			}

			setState(1556);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1554);
				object_as_part();
				}
				break;
			case UNDER:
				{
				setState(1555);
				object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1559);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(1558);
				sqlj_object_type();
				}
			}

			setState(1572);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1561);
				match(LEFT_PAREN);
				setState(1562);
				object_member_spec();
				setState(1567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1563);
					match(COMMA);
					setState(1564);
					object_member_spec();
					}
					}
					setState(1569);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1570);
				match(RIGHT_PAREN);
				}
			}

			setState(1577);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				setState(1574);
				modifier_clause();
				}
				}
				setState(1579);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_as_partContext extends ParserRuleContext {
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Nested_table_type_defContext nested_table_type_def() {
			return getRuleContext(Nested_table_type_defContext.class,0);
		}
		public Object_as_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_as_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterObject_as_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitObject_as_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitObject_as_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_as_partContext object_as_part() throws RecognitionException {
		Object_as_partContext _localctx = new Object_as_partContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_object_as_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1580);
			is_or_as();
			setState(1584);
			switch (_input.LA(1)) {
			case OBJECT:
				{
				setState(1581);
				match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(1582);
				varray_type_def();
				}
				break;
			case TABLE:
				{
				setState(1583);
				nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_under_partContext extends ParserRuleContext {
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Object_under_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_under_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterObject_under_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitObject_under_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitObject_under_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_under_partContext object_under_part() throws RecognitionException {
		Object_under_partContext _localctx = new Object_under_partContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_object_under_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1586);
			match(UNDER);
			setState(1587);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNested_table_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNested_table_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNested_table_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nested_table_type_defContext nested_table_type_def() throws RecognitionException {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_nested_table_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1589);
			match(TABLE);
			setState(1590);
			match(OF);
			setState(1591);
			type_spec();
			setState(1594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				{
				setState(1592);
				match(NOT);
				setState(1593);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_typeContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode SQLDATA() { return getToken(PlSqlParser.SQLDATA, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(PlSqlParser.CUSTOMDATUM, 0); }
		public TerminalNode ORADATA() { return getToken(PlSqlParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSqlj_object_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSqlj_object_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSqlj_object_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sqlj_object_typeContext sqlj_object_type() throws RecognitionException {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_sqlj_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1596);
			match(EXTERNAL);
			setState(1597);
			match(NAME);
			setState(1598);
			expression();
			setState(1599);
			match(LANGUAGE);
			setState(1600);
			match(JAVA);
			setState(1601);
			match(USING);
			setState(1602);
			_la = _input.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public List<Type_body_elementsContext> type_body_elements() {
			return getRuleContexts(Type_body_elementsContext.class);
		}
		public Type_body_elementsContext type_body_elements(int i) {
			return getRuleContext(Type_body_elementsContext.class,i);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public Type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_bodyContext type_body() throws RecognitionException {
		Type_bodyContext _localctx = new Type_bodyContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1604);
			match(BODY);
			setState(1605);
			type_name();
			setState(1606);
			is_or_as();
			setState(1607);
			type_body_elements();
			setState(1612);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1608);
				match(COMMA);
				setState(1609);
				type_body_elements();
				}
				}
				setState(1614);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1615);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_body_elementsContext extends ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return getRuleContext(Map_order_func_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return getRuleContext(Subprog_decl_in_typeContext.class,0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_body_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_body_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_body_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_body_elementsContext type_body_elements() throws RecognitionException {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_type_body_elements);
		try {
			setState(1619);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1617);
				map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(1618);
				subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_func_declarationContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_func_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMap_order_func_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMap_order_func_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMap_order_func_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Map_order_func_declarationContext map_order_func_declaration() throws RecognitionException {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_map_order_func_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1621);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1622);
			match(MEMBER);
			setState(1623);
			func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprog_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return getRuleContext(Proc_decl_in_typeContext.class,0);
		}
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return getRuleContext(Constructor_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprog_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubprog_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubprog_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubprog_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subprog_decl_in_typeContext subprog_decl_in_type() throws RecognitionException {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_subprog_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1625);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1629);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1626);
				proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				setState(1627);
				func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				setState(1628);
				constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterProc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitProc_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitProc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_decl_in_typeContext proc_decl_in_type() throws RecognitionException {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_proc_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1631);
			match(PROCEDURE);
			setState(1632);
			procedure_name();
			setState(1633);
			match(LEFT_PAREN);
			setState(1634);
			type_elements_parameter();
			setState(1639);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1635);
				match(COMMA);
				setState(1636);
				type_elements_parameter();
				}
				}
				setState(1641);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1642);
			match(RIGHT_PAREN);
			setState(1643);
			is_or_as();
			setState(1654);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				setState(1644);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1648);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
					{
					{
					setState(1645);
					declare_spec();
					}
					}
					setState(1650);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1651);
				body();
				setState(1652);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunc_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_decl_in_typeContext func_decl_in_type() throws RecognitionException {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_func_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1656);
			match(FUNCTION);
			setState(1657);
			function_name();
			setState(1669);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1658);
				match(LEFT_PAREN);
				setState(1659);
				type_elements_parameter();
				setState(1664);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1660);
					match(COMMA);
					setState(1661);
					type_elements_parameter();
					}
					}
					setState(1666);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1667);
				match(RIGHT_PAREN);
				}
			}

			setState(1671);
			match(RETURN);
			setState(1672);
			type_spec();
			setState(1673);
			is_or_as();
			setState(1684);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
			case 1:
				{
				setState(1674);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1678);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
					{
					{
					setState(1675);
					declare_spec();
					}
					}
					setState(1680);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1681);
				body();
				setState(1682);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_declarationContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(PlSqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(PlSqlParser.SELF, i);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConstructor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConstructor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConstructor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_constructor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1687);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1686);
				match(FINAL);
				}
			}

			setState(1690);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1689);
				match(INSTANTIABLE);
				}
			}

			setState(1692);
			match(CONSTRUCTOR);
			setState(1693);
			match(FUNCTION);
			setState(1694);
			type_spec();
			setState(1712);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1695);
				match(LEFT_PAREN);
				{
				setState(1696);
				match(SELF);
				setState(1697);
				match(IN);
				setState(1698);
				match(OUT);
				setState(1699);
				type_spec();
				setState(1700);
				match(COMMA);
				}
				setState(1702);
				type_elements_parameter();
				setState(1707);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1703);
					match(COMMA);
					setState(1704);
					type_elements_parameter();
					}
					}
					setState(1709);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1710);
				match(RIGHT_PAREN);
				}
			}

			setState(1714);
			match(RETURN);
			setState(1715);
			match(SELF);
			setState(1716);
			match(AS);
			setState(1717);
			match(RESULT);
			setState(1718);
			is_or_as();
			setState(1729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				setState(1719);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID) {
					{
					{
					setState(1720);
					declare_spec();
					}
					}
					setState(1725);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1726);
				body();
				setState(1727);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modifier_clauseContext extends ParserRuleContext {
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode OVERRIDING() { return getToken(PlSqlParser.OVERRIDING, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifier_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModifier_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModifier_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModifier_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modifier_clauseContext modifier_clause() throws RecognitionException {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_modifier_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1732);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1731);
				match(NOT);
				}
			}

			setState(1734);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_member_specContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return getRuleContext(Sqlj_object_type_attrContext.class,0);
		}
		public Element_specContext element_spec() {
			return getRuleContext(Element_specContext.class,0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_member_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterObject_member_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitObject_member_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitObject_member_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_member_specContext object_member_spec() throws RecognitionException {
		Object_member_specContext _localctx = new Object_member_specContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_object_member_spec);
		int _la;
		try {
			setState(1742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1736);
				id();
				setState(1737);
				type_spec();
				setState(1739);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(1738);
					sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1741);
				element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_type_attrContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type_attr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSqlj_object_type_attr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSqlj_object_type_attr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSqlj_object_type_attr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sqlj_object_type_attrContext sqlj_object_type_attr() throws RecognitionException {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_sqlj_object_type_attr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1744);
			match(EXTERNAL);
			setState(1745);
			match(NAME);
			setState(1746);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_specContext extends ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public List<Element_spec_optionsContext> element_spec_options() {
			return getRuleContexts(Element_spec_optionsContext.class);
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return getRuleContext(Element_spec_optionsContext.class,i);
		}
		public Pragma_clauseContext pragma_clause() {
			return getRuleContext(Pragma_clauseContext.class,0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterElement_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitElement_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitElement_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_specContext element_spec() throws RecognitionException {
		Element_specContext _localctx = new Element_specContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_element_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				setState(1748);
				modifier_clause();
				}
				break;
			}
			setState(1752); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1751);
				element_spec_options();
				}
				}
				setState(1754); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (MAP - 223)) | (1L << (MEMBER - 223)) | (1L << (ORDER - 223)))) != 0) || _la==STATIC );
			setState(1758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				setState(1756);
				match(COMMA);
				setState(1757);
				pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_spec_optionsContext extends ParserRuleContext {
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Constructor_specContext constructor_spec() {
			return getRuleContext(Constructor_specContext.class,0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterElement_spec_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitElement_spec_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitElement_spec_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_spec_optionsContext element_spec_options() throws RecognitionException {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_element_spec_options);
		try {
			setState(1763);
			switch (_input.LA(1)) {
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(1760);
				subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1761);
				constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1762);
				map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprogram_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return getRuleContext(Type_procedure_specContext.class,0);
		}
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public Subprogram_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprogram_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubprogram_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubprogram_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubprogram_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subprogram_specContext subprogram_spec() throws RecognitionException {
		Subprogram_specContext _localctx = new Subprogram_specContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_subprogram_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1765);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1768);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1766);
				type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				setState(1767);
				type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_procedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_procedure_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_procedure_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_procedure_specContext type_procedure_spec() throws RecognitionException {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_type_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1770);
			match(PROCEDURE);
			setState(1771);
			procedure_name();
			setState(1772);
			match(LEFT_PAREN);
			setState(1773);
			type_elements_parameter();
			setState(1778);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1774);
				match(COMMA);
				setState(1775);
				type_elements_parameter();
				}
				}
				setState(1780);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1781);
			match(RIGHT_PAREN);
			setState(1785);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(1782);
				is_or_as();
				setState(1783);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SELF() { return getToken(PlSqlParser.SELF, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode VARIABLE() { return getToken(PlSqlParser.VARIABLE, 0); }
		public Type_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_function_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_function_specContext type_function_spec() throws RecognitionException {
		Type_function_specContext _localctx = new Type_function_specContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_type_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1787);
			match(FUNCTION);
			setState(1788);
			function_name();
			setState(1800);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1789);
				match(LEFT_PAREN);
				setState(1790);
				type_elements_parameter();
				setState(1795);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1791);
					match(COMMA);
					setState(1792);
					type_elements_parameter();
					}
					}
					setState(1797);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1798);
				match(RIGHT_PAREN);
				}
			}

			setState(1802);
			match(RETURN);
			setState(1807);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				setState(1803);
				type_spec();
				}
				break;
			case 2:
				{
				setState(1804);
				match(SELF);
				setState(1805);
				match(AS);
				setState(1806);
				match(RESULT);
				}
				break;
			}
			setState(1818);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1809);
				is_or_as();
				setState(1810);
				call_spec();
				}
				break;
			case EXTERNAL:
				{
				setState(1812);
				match(EXTERNAL);
				setState(1814);
				_la = _input.LA(1);
				if (_la==VARIABLE) {
					{
					setState(1813);
					match(VARIABLE);
					}
				}

				setState(1816);
				match(NAME);
				setState(1817);
				expression();
				}
				break;
			case CASCADE:
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
			case INVALIDATE:
			case MAP:
			case MEMBER:
			case ORDER:
			case STATIC:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_specContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(PlSqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(PlSqlParser.SELF, i);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Is_or_asContext is_or_as() {
			return getRuleContext(Is_or_asContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public Constructor_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConstructor_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConstructor_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConstructor_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_specContext constructor_spec() throws RecognitionException {
		Constructor_specContext _localctx = new Constructor_specContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_constructor_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1821);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1820);
				match(FINAL);
				}
			}

			setState(1824);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1823);
				match(INSTANTIABLE);
				}
			}

			setState(1826);
			match(CONSTRUCTOR);
			setState(1827);
			match(FUNCTION);
			setState(1828);
			type_spec();
			setState(1846);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1829);
				match(LEFT_PAREN);
				{
				setState(1830);
				match(SELF);
				setState(1831);
				match(IN);
				setState(1832);
				match(OUT);
				setState(1833);
				type_spec();
				setState(1834);
				match(COMMA);
				}
				setState(1836);
				type_elements_parameter();
				setState(1841);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1837);
					match(COMMA);
					setState(1838);
					type_elements_parameter();
					}
					}
					setState(1843);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1844);
				match(RIGHT_PAREN);
				}
			}

			setState(1848);
			match(RETURN);
			setState(1849);
			match(SELF);
			setState(1850);
			match(AS);
			setState(1851);
			match(RESULT);
			setState(1855);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(1852);
				is_or_as();
				setState(1853);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_function_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMap_order_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMap_order_function_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMap_order_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Map_order_function_specContext map_order_function_spec() throws RecognitionException {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_map_order_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1857);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(1858);
			match(MEMBER);
			setState(1859);
			type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_clauseContext extends ParserRuleContext {
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public List<Pragma_elementsContext> pragma_elements() {
			return getRuleContexts(Pragma_elementsContext.class);
		}
		public Pragma_elementsContext pragma_elements(int i) {
			return getRuleContext(Pragma_elementsContext.class,i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPragma_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPragma_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPragma_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_clauseContext pragma_clause() throws RecognitionException {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_pragma_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1861);
			match(PRAGMA);
			setState(1862);
			match(RESTRICT_REFERENCES);
			setState(1863);
			match(LEFT_PAREN);
			setState(1864);
			pragma_elements();
			setState(1869);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1865);
				match(COMMA);
				setState(1866);
				pragma_elements();
				}
				}
				setState(1871);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1872);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_elementsContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPragma_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPragma_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPragma_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_elementsContext pragma_elements() throws RecognitionException {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_pragma_elements);
		try {
			setState(1876);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1874);
				id();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1875);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_elements_parameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_elements_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_elements_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_elements_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_elements_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_elements_parameterContext type_elements_parameter() throws RecognitionException {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_type_elements_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1878);
			parameter_name();
			setState(1879);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDrop_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDrop_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_drop_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1881);
			match(DROP);
			setState(1882);
			match(SEQUENCE);
			setState(1883);
			sequence_name();
			setState(1884);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlter_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlter_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1886);
			match(ALTER);
			setState(1887);
			match(SEQUENCE);
			setState(1888);
			sequence_name();
			setState(1890); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1889);
				sequence_spec();
				}
				}
				setState(1892); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CACHE || _la==CYCLE || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & ((1L << (INCREMENT - 177)) | (1L << (MAXVALUE - 177)) | (1L << (MINVALUE - 177)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (NOCACHE - 252)) | (1L << (NOCYCLE - 252)) | (1L << (NOMAXVALUE - 252)) | (1L << (NOMINVALUE - 252)) | (1L << (NOORDER - 252)) | (1L << (ORDER - 252)))) != 0) );
			setState(1894);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_start_clauseContext> sequence_start_clause() {
			return getRuleContexts(Sequence_start_clauseContext.class);
		}
		public Sequence_start_clauseContext sequence_start_clause(int i) {
			return getRuleContext(Sequence_start_clauseContext.class,i);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCreate_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCreate_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1896);
			match(CREATE);
			setState(1897);
			match(SEQUENCE);
			setState(1898);
			sequence_name();
			setState(1903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CACHE || _la==CYCLE || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & ((1L << (INCREMENT - 177)) | (1L << (MAXVALUE - 177)) | (1L << (MINVALUE - 177)))) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (NOCACHE - 252)) | (1L << (NOCYCLE - 252)) | (1L << (NOMAXVALUE - 252)) | (1L << (NOMINVALUE - 252)) | (1L << (NOORDER - 252)) | (1L << (ORDER - 252)))) != 0) || _la==START) {
				{
				setState(1901);
				switch (_input.LA(1)) {
				case START:
					{
					setState(1899);
					sequence_start_clause();
					}
					break;
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NOCACHE:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOORDER:
				case ORDER:
					{
					setState(1900);
					sequence_spec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1905);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1906);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_specContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(PlSqlParser.NOMAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(PlSqlParser.NOMINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public TerminalNode CACHE() { return getToken(PlSqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(PlSqlParser.NOCACHE, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(PlSqlParser.NOORDER, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSequence_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSequence_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSequence_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_specContext sequence_spec() throws RecognitionException {
		Sequence_specContext _localctx = new Sequence_specContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_sequence_spec);
		try {
			setState(1924);
			switch (_input.LA(1)) {
			case INCREMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1908);
				match(INCREMENT);
				setState(1909);
				match(BY);
				setState(1910);
				match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1911);
				match(MAXVALUE);
				setState(1912);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1913);
				match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1914);
				match(MINVALUE);
				setState(1915);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMINVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1916);
				match(NOMINVALUE);
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1917);
				match(CYCLE);
				}
				break;
			case NOCYCLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1918);
				match(NOCYCLE);
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 8);
				{
				setState(1919);
				match(CACHE);
				setState(1920);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOCACHE:
				enterOuterAlt(_localctx, 9);
				{
				setState(1921);
				match(NOCACHE);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 10);
				{
				setState(1922);
				match(ORDER);
				}
				break;
			case NOORDER:
				enterOuterAlt(_localctx, 11);
				{
				setState(1923);
				match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_start_clauseContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_start_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSequence_start_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSequence_start_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSequence_start_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_start_clauseContext sequence_start_clause() throws RecognitionException {
		Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_sequence_start_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1926);
			match(START);
			setState(1927);
			match(WITH);
			setState(1928);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Invoker_rights_clauseContext extends ParserRuleContext {
		public TerminalNode AUTHID() { return getToken(PlSqlParser.AUTHID, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlSqlParser.CURRENT_USER, 0); }
		public TerminalNode DEFINER() { return getToken(PlSqlParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invoker_rights_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInvoker_rights_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInvoker_rights_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInvoker_rights_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Invoker_rights_clauseContext invoker_rights_clause() throws RecognitionException {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_invoker_rights_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1930);
			match(AUTHID);
			setState(1931);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compiler_parameters_clauseContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compiler_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompiler_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompiler_parameters_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompiler_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compiler_parameters_clauseContext compiler_parameters_clause() throws RecognitionException {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_compiler_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1933);
			id();
			setState(1934);
			match(EQUALS_OP);
			setState(1935);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_specContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public Java_specContext java_spec() {
			return getRuleContext(Java_specContext.class,0);
		}
		public C_specContext c_spec() {
			return getRuleContext(C_specContext.class,0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCall_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCall_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCall_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Call_specContext call_spec() throws RecognitionException {
		Call_specContext _localctx = new Call_specContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_call_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1937);
			match(LANGUAGE);
			setState(1940);
			switch (_input.LA(1)) {
			case JAVA:
				{
				setState(1938);
				java_spec();
				}
				break;
			case C_LETTER:
				{
				setState(1939);
				c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Java_specContext extends ParserRuleContext {
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_java_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterJava_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitJava_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitJava_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Java_specContext java_spec() throws RecognitionException {
		Java_specContext _localctx = new Java_specContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_java_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1942);
			match(JAVA);
			setState(1943);
			match(NAME);
			setState(1944);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_specContext extends ParserRuleContext {
		public TerminalNode C_LETTER() { return getToken(PlSqlParser.C_LETTER, 0); }
		public TerminalNode LIBRARY() { return getToken(PlSqlParser.LIBRARY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return getRuleContext(C_agent_in_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode CONTEXT() { return getToken(PlSqlParser.CONTEXT, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return getRuleContext(C_parameters_clauseContext.class,0);
		}
		public C_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterC_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitC_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitC_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_specContext c_spec() throws RecognitionException {
		C_specContext _localctx = new C_specContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_c_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1946);
			match(C_LETTER);
			setState(1949);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(1947);
				match(NAME);
				setState(1948);
				match(CHAR_STRING);
				}
			}

			setState(1951);
			match(LIBRARY);
			setState(1952);
			id();
			setState(1954);
			_la = _input.LA(1);
			if (_la==AGENT) {
				{
				setState(1953);
				c_agent_in_clause();
				}
			}

			setState(1958);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1956);
				match(WITH);
				setState(1957);
				match(CONTEXT);
				}
			}

			setState(1961);
			_la = _input.LA(1);
			if (_la==PARAMETERS) {
				{
				setState(1960);
				c_parameters_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_agent_in_clauseContext extends ParserRuleContext {
		public TerminalNode AGENT() { return getToken(PlSqlParser.AGENT, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_agent_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterC_agent_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitC_agent_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitC_agent_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_agent_in_clauseContext c_agent_in_clause() throws RecognitionException {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_c_agent_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1963);
			match(AGENT);
			setState(1964);
			match(IN);
			setState(1965);
			match(LEFT_PAREN);
			setState(1966);
			expression();
			setState(1971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1967);
				match(COMMA);
				setState(1968);
				expression();
				}
				}
				setState(1973);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1974);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_parameters_clauseContext extends ParserRuleContext {
		public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterC_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitC_parameters_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitC_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_parameters_clauseContext c_parameters_clause() throws RecognitionException {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_c_parameters_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1976);
			match(PARAMETERS);
			setState(1977);
			match(LEFT_PAREN);
			setState(1989);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MOD:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_NUMBER:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(1978);
				expression();
				setState(1983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1979);
					match(COMMA);
					setState(1980);
					expression();
					}
					}
					setState(1985);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case PERIOD:
				{
				setState(1986);
				match(PERIOD);
				setState(1987);
				match(PERIOD);
				setState(1988);
				match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1991);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public List<TerminalNode> IN() { return getTokens(PlSqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PlSqlParser.IN, i);
		}
		public List<TerminalNode> OUT() { return getTokens(PlSqlParser.OUT); }
		public TerminalNode OUT(int i) {
			return getToken(PlSqlParser.OUT, i);
		}
		public List<TerminalNode> INOUT() { return getTokens(PlSqlParser.INOUT); }
		public TerminalNode INOUT(int i) {
			return getToken(PlSqlParser.INOUT, i);
		}
		public List<TerminalNode> NOCOPY() { return getTokens(PlSqlParser.NOCOPY); }
		public TerminalNode NOCOPY(int i) {
			return getToken(PlSqlParser.NOCOPY, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_parameter);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1993);
			parameter_name();
			setState(1997);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,166,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1994);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					} 
				}
				setState(1999);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,166,_ctx);
			}
			setState(2001);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2000);
				type_spec();
				}
			}

			setState(2004);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2003);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_value_partContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASSIGN_OP() { return getToken(PlSqlParser.ASSIGN_OP, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDefault_value_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDefault_value_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDefault_value_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_value_partContext default_value_part() throws RecognitionException {
		Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_default_value_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2006);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2007);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Preprocessor_statementContext preprocessor_statement() {
			return getRuleContext(Preprocessor_statementContext.class,0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDeclare_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDeclare_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDeclare_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_specContext declare_spec() throws RecognitionException {
		Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_declare_spec);
		try {
			setState(2019);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2009);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2010);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2011);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2012);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2013);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2014);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2015);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2016);
				create_procedure_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2017);
				create_function_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2018);
				preprocessor_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_declarationContext extends ParserRuleContext {
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CONSTANT() { return getToken(PlSqlParser.CONSTANT, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterVariable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitVariable_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitVariable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_declarationContext variable_declaration() throws RecognitionException {
		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_variable_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2021);
			variable_name();
			setState(2023);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				setState(2022);
				match(CONSTANT);
				}
				break;
			}
			setState(2025);
			type_spec();
			setState(2028);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2026);
				match(NOT);
				setState(2027);
				match(NULL);
				}
			}

			setState(2031);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2030);
				default_value_part();
				}
			}

			setState(2033);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subtype_declarationContext extends ParserRuleContext {
		public TerminalNode SUBTYPE() { return getToken(PlSqlParser.SUBTYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtype_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubtype_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubtype_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubtype_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subtype_declarationContext subtype_declaration() throws RecognitionException {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_subtype_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2035);
			match(SUBTYPE);
			setState(2036);
			type_name();
			setState(2037);
			match(IS);
			setState(2038);
			type_spec();
			setState(2044);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(2039);
				match(RANGE);
				setState(2040);
				expression();
				setState(2041);
				match(T__0);
				setState(2042);
				expression();
				}
			}

			setState(2048);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2046);
				match(NOT);
				setState(2047);
				match(NULL);
				}
			}

			setState(2050);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_declarationContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public List<Parameter_specContext> parameter_spec() {
			return getRuleContexts(Parameter_specContext.class);
		}
		public Parameter_specContext parameter_spec(int i) {
			return getRuleContext(Parameter_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCursor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCursor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCursor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_declarationContext cursor_declaration() throws RecognitionException {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_cursor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2052);
			match(CURSOR);
			setState(2053);
			cursor_name();
			setState(2065);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2054);
				match(LEFT_PAREN);
				setState(2055);
				parameter_spec();
				setState(2060);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2056);
					match(COMMA);
					setState(2057);
					parameter_spec();
					}
					}
					setState(2062);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2063);
				match(RIGHT_PAREN);
				}
			}

			setState(2069);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(2067);
				match(RETURN);
				setState(2068);
				type_spec();
				}
			}

			setState(2073);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(2071);
				match(IS);
				setState(2072);
				select_statement();
				}
			}

			setState(2075);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_specContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterParameter_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitParameter_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitParameter_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_specContext parameter_spec() throws RecognitionException {
		Parameter_specContext _localctx = new Parameter_specContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_parameter_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2077);
			parameter_name();
			setState(2082);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2079);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(2078);
					match(IN);
					}
				}

				setState(2081);
				type_spec();
				}
			}

			setState(2085);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2084);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_declarationContext extends ParserRuleContext {
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterException_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitException_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitException_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_declarationContext exception_declaration() throws RecognitionException {
		Exception_declarationContext _localctx = new Exception_declarationContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_exception_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2087);
			exception_name();
			setState(2088);
			match(EXCEPTION);
			setState(2089);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_declarationContext extends ParserRuleContext {
		public IdContext id1;
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(PlSqlParser.EXCEPTION_INIT, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode INLINE() { return getToken(PlSqlParser.INLINE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(PlSqlParser.MINUS_SIGN, 0); }
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPragma_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPragma_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPragma_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_declarationContext pragma_declaration() throws RecognitionException {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_pragma_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2091);
			match(PRAGMA);
			setState(2125);
			switch (_input.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				setState(2092);
				match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				setState(2093);
				match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				setState(2094);
				match(EXCEPTION_INIT);
				setState(2095);
				match(LEFT_PAREN);
				setState(2096);
				exception_name();
				setState(2097);
				match(COMMA);
				setState(2099);
				_la = _input.LA(1);
				if (_la==MINUS_SIGN) {
					{
					setState(2098);
					match(MINUS_SIGN);
					}
				}

				setState(2101);
				numeric();
				setState(2102);
				match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				setState(2104);
				match(INLINE);
				setState(2105);
				match(LEFT_PAREN);
				setState(2106);
				((Pragma_declarationContext)_localctx).id1 = id();
				setState(2107);
				match(COMMA);
				setState(2108);
				expression();
				setState(2109);
				match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				setState(2111);
				match(RESTRICT_REFERENCES);
				setState(2112);
				match(LEFT_PAREN);
				setState(2115);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CACHE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL_PERCENT_ROWCOUNT:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2113);
					id();
					}
					break;
				case DEFAULT:
					{
					setState(2114);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2119); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2117);
					match(COMMA);
					setState(2118);
					id();
					}
					}
					setState(2121); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(2123);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2127);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_declarationContext extends ParserRuleContext {
		public Record_type_decContext record_type_dec() {
			return getRuleContext(Record_type_decContext.class,0);
		}
		public Record_var_decContext record_var_dec() {
			return getRuleContext(Record_var_decContext.class,0);
		}
		public Record_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRecord_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRecord_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRecord_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_declarationContext record_declaration() throws RecognitionException {
		Record_declarationContext _localctx = new Record_declarationContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_record_declaration);
		try {
			setState(2131);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2129);
				record_type_dec();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2130);
				record_var_dec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode RECORD() { return getToken(PlSqlParser.RECORD, 0); }
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Record_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRecord_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRecord_type_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRecord_type_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_type_decContext record_type_dec() throws RecognitionException {
		Record_type_decContext _localctx = new Record_type_decContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_record_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2133);
			match(TYPE);
			setState(2134);
			type_name();
			setState(2135);
			match(IS);
			setState(2154);
			switch (_input.LA(1)) {
			case RECORD:
				{
				setState(2136);
				match(RECORD);
				setState(2137);
				match(LEFT_PAREN);
				setState(2138);
				field_spec();
				setState(2143);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2139);
					match(COMMA);
					setState(2140);
					field_spec();
					}
					}
					setState(2145);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2146);
				match(RIGHT_PAREN);
				}
				break;
			case REF:
				{
				setState(2148);
				match(REF);
				setState(2149);
				match(CURSOR);
				setState(2152);
				_la = _input.LA(1);
				if (_la==RETURN) {
					{
					setState(2150);
					match(RETURN);
					setState(2151);
					type_spec();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2156);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_specContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterField_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitField_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitField_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Field_specContext field_spec() throws RecognitionException {
		Field_specContext _localctx = new Field_specContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_field_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2158);
			column_name();
			setState(2160);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2159);
				type_spec();
				}
			}

			setState(2164);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2162);
				match(NOT);
				setState(2163);
				match(NULL);
				}
			}

			setState(2167);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2166);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_var_decContext extends ParserRuleContext {
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode PERCENT_ROWTYPE() { return getToken(PlSqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(PlSqlParser.PERCENT_TYPE, 0); }
		public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Record_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRecord_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRecord_var_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRecord_var_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_var_decContext record_var_dec() throws RecognitionException {
		Record_var_decContext _localctx = new Record_var_decContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_record_var_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2169);
			record_name();
			setState(2170);
			type_name();
			setState(2173);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(2171);
				match(AT_SIGN);
				setState(2172);
				link_name();
				}
			}

			setState(2180);
			switch (_input.LA(1)) {
			case PERCENT_ROWTYPE:
				{
				setState(2175);
				match(PERCENT_ROWTYPE);
				}
				break;
			case PERCENT_TYPE:
				{
				setState(2176);
				match(PERCENT_TYPE);
				setState(2178);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==ASSIGN_OP) {
					{
					setState(2177);
					default_value_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2182);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_declarationContext extends ParserRuleContext {
		public Table_type_decContext table_type_dec() {
			return getRuleContext(Table_type_decContext.class,0);
		}
		public Table_var_decContext table_var_dec() {
			return getRuleContext(Table_var_decContext.class,0);
		}
		public Table_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_declarationContext table_declaration() throws RecognitionException {
		Table_declarationContext _localctx = new Table_declarationContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_table_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2186);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(2184);
				table_type_dec();
				}
				break;
			case 2:
				{
				setState(2185);
				table_var_dec();
				}
				break;
			}
			setState(2188);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Table_indexed_by_partContext table_indexed_by_part() {
			return getRuleContext(Table_indexed_by_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Table_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_type_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_type_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_type_decContext table_type_dec() throws RecognitionException {
		Table_type_decContext _localctx = new Table_type_decContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_table_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2190);
			match(TYPE);
			setState(2191);
			type_name();
			setState(2192);
			match(IS);
			setState(2204);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(2193);
				match(TABLE);
				setState(2194);
				match(OF);
				setState(2195);
				type_spec();
				setState(2197);
				_la = _input.LA(1);
				if (_la==INDEX || _la==INDEXED) {
					{
					setState(2196);
					table_indexed_by_part();
					}
				}

				setState(2201);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2199);
					match(NOT);
					setState(2200);
					match(NULL);
					}
				}

				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(2203);
				varray_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_indexed_by_partContext extends ParserRuleContext {
		public Token idx1;
		public Token idx2;
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode INDEXED() { return getToken(PlSqlParser.INDEXED, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_indexed_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_indexed_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_indexed_by_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_indexed_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_indexed_by_partContext table_indexed_by_part() throws RecognitionException {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_table_indexed_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2208);
			switch (_input.LA(1)) {
			case INDEXED:
				{
				setState(2206);
				((Table_indexed_by_partContext)_localctx).idx1 = match(INDEXED);
				}
				break;
			case INDEX:
				{
				setState(2207);
				((Table_indexed_by_partContext)_localctx).idx2 = match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2210);
			match(BY);
			setState(2211);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_type_defContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode VARRAY() { return getToken(PlSqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(PlSqlParser.VARYING, 0); }
		public TerminalNode ARRAY() { return getToken(PlSqlParser.ARRAY, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterVarray_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitVarray_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitVarray_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Varray_type_defContext varray_type_def() throws RecognitionException {
		Varray_type_defContext _localctx = new Varray_type_defContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_varray_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2216);
			switch (_input.LA(1)) {
			case VARRAY:
				{
				setState(2213);
				match(VARRAY);
				}
				break;
			case VARYING:
				{
				setState(2214);
				match(VARYING);
				setState(2215);
				match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2218);
			match(LEFT_PAREN);
			setState(2219);
			expression();
			setState(2220);
			match(RIGHT_PAREN);
			setState(2221);
			match(OF);
			setState(2222);
			type_spec();
			setState(2225);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				setState(2223);
				match(NOT);
				setState(2224);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_decContext extends ParserRuleContext {
		public Table_var_nameContext table_var_name() {
			return getRuleContext(Table_var_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Table_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_var_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_var_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_var_decContext table_var_dec() throws RecognitionException {
		Table_var_decContext _localctx = new Table_var_decContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_table_var_dec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2227);
			table_var_name();
			setState(2228);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seq_of_statementsContext extends ParserRuleContext {
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Label_declarationContext> label_declaration() {
			return getRuleContexts(Label_declarationContext.class);
		}
		public Label_declarationContext label_declaration(int i) {
			return getRuleContext(Label_declarationContext.class,i);
		}
		public List<Preprocessor_statementContext> preprocessor_statement() {
			return getRuleContexts(Preprocessor_statementContext.class);
		}
		public Preprocessor_statementContext preprocessor_statement(int i) {
			return getRuleContext(Preprocessor_statementContext.class,i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSeq_of_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSeq_of_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSeq_of_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_seq_of_statements);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2235); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2235);
					switch (_input.LA(1)) {
					case A_LETTER:
					case ADD:
					case AFTER:
					case AGENT:
					case AGGREGATE:
					case ALTER:
					case ANALYZE:
					case ARRAY:
					case ASSOCIATE:
					case AT:
					case ATTRIBUTE:
					case AUDIT:
					case AUTHID:
					case AUTO:
					case AUTOMATIC:
					case AUTONOMOUS_TRANSACTION:
					case BATCH:
					case BEFORE:
					case BEGIN:
					case BFILE:
					case BINARY_DOUBLE:
					case BINARY_FLOAT:
					case BINARY_INTEGER:
					case BLOB:
					case BLOCK:
					case BODY:
					case BOOLEAN:
					case BOTH:
					case BULK:
					case BYTE:
					case C_LETTER:
					case CACHE:
					case CALL:
					case CANONICAL:
					case CASCADE:
					case CASE:
					case CAST:
					case CHAR:
					case CHAR_CS:
					case CHARACTER:
					case CHR:
					case CLOB:
					case CLOSE:
					case CLUSTER:
					case COLLECT:
					case COLUMNS:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case COMPATIBILITY:
					case COMPILE:
					case COMPOUND:
					case CONSTANT:
					case CONSTRAINT:
					case CONSTRAINTS:
					case CONSTRUCTOR:
					case CONTENT:
					case CONTEXT:
					case CONTINUE:
					case CONVERT:
					case CORRUPT_XID:
					case CORRUPT_XID_ALL:
					case COST:
					case COUNT:
					case CREATE:
					case CROSS:
					case CUBE:
					case CURRENT_USER:
					case CURSOR:
					case CUSTOMDATUM:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DAY:
					case DB_ROLE_CHANGE:
					case DBTIMEZONE:
					case DDL:
					case DEBUG:
					case DEC:
					case DECIMAL:
					case DECLARE:
					case DECOMPOSE:
					case DECREMENT:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DETERMINISTIC:
					case DIMENSION:
					case DISABLE:
					case DISASSOCIATE:
					case DOCUMENT:
					case DOUBLE:
					case DSINTERVAL_UNCONSTRAINED:
					case EACH:
					case ELEMENT:
					case EMPTY:
					case ENABLE:
					case ENCODING:
					case ENTITYESCAPING:
					case ERRORS:
					case ESCAPE:
					case EVALNAME:
					case EXCEPTION:
					case EXCEPTION_INIT:
					case EXCEPTIONS:
					case EXCLUDE:
					case EXECUTE:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case EXTRACT:
					case FAILURE:
					case FETCH:
					case FINAL:
					case FIRST:
					case FIRST_VALUE:
					case FLOAT:
					case FOLLOWING:
					case FOLLOWS:
					case FOR:
					case FORALL:
					case FORCE:
					case FULL:
					case FUNCTION:
					case GOTO:
					case GRANT:
					case GROUPING:
					case HASH:
					case HIDE:
					case HOUR:
					case IF:
					case IGNORE:
					case IMMEDIATE:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDENT:
					case INDEXED:
					case INDICATOR:
					case INDICES:
					case INFINITE:
					case INLINE:
					case INNER:
					case INOUT:
					case INSERT:
					case INSTANTIABLE:
					case INSTEAD:
					case INT:
					case INTEGER:
					case INTERVAL:
					case INVALIDATE:
					case ISOLATION:
					case ITERATE:
					case JAVA:
					case JOIN:
					case KEEP:
					case LANGUAGE:
					case LAST:
					case LAST_VALUE:
					case LEADING:
					case LEFT:
					case LEVEL:
					case LIBRARY:
					case LIKE2:
					case LIKE4:
					case LIKEC:
					case LIMIT:
					case LOCAL:
					case LOCK:
					case LOCKED:
					case LOG:
					case LOGOFF:
					case LOGON:
					case LONG:
					case LOOP:
					case MAIN:
					case MAP:
					case MATCHED:
					case MAXVALUE:
					case MEASURES:
					case MEMBER:
					case MERGE:
					case MINUTE:
					case MINVALUE:
					case MLSLABEL:
					case MODEL:
					case MODIFY:
					case MONTH:
					case NAME:
					case NAN:
					case NATURAL:
					case NATURALN:
					case NAV:
					case NCHAR:
					case NCHAR_CS:
					case NCLOB:
					case NESTED:
					case NEW:
					case NO:
					case NOAUDIT:
					case NOCOPY:
					case NOCYCLE:
					case NOENTITYESCAPING:
					case NONE:
					case NOSCHEMACHECK:
					case NULL:
					case NULLS:
					case NUMBER:
					case NUMERIC:
					case NVARCHAR2:
					case OBJECT:
					case OFF:
					case OID:
					case OLD:
					case ONLY:
					case OPEN:
					case ORADATA:
					case ORDINALITY:
					case OSERROR:
					case OUT:
					case OUTER:
					case OVER:
					case OVERRIDING:
					case PACKAGE:
					case PARALLEL_ENABLE:
					case PARAMETERS:
					case PARENT:
					case PARTITION:
					case PASSING:
					case PATH:
					case PIPELINED:
					case PIPE:
					case PLAN:
					case PLS_INTEGER:
					case POSITIVE:
					case POSITIVEN:
					case PRAGMA:
					case PRECEDING:
					case PRECISION:
					case PRESENT:
					case RAISE:
					case RANGE:
					case RAW:
					case READ:
					case REAL:
					case RECORD:
					case REF:
					case REFERENCE:
					case REFERENCING:
					case REJECT:
					case RELIES_ON:
					case RENAME:
					case REPLACE:
					case RESPECT:
					case RESTRICT_REFERENCES:
					case RESULT:
					case RESULT_CACHE:
					case RETURN:
					case RETURNING:
					case REUSE:
					case REVERSE:
					case RIGHT:
					case ROLLBACK:
					case ROLLUP:
					case ROW:
					case ROWID:
					case ROWS:
					case RULES:
					case SAMPLE:
					case SAVE:
					case SAVEPOINT:
					case SCHEMA:
					case SCHEMACHECK:
					case SCN:
					case SECOND:
					case SEED:
					case SEGMENT:
					case SELECT:
					case SELF:
					case SEQUENTIAL:
					case SERIALIZABLE:
					case SERIALLY_REUSABLE:
					case SERVERERROR:
					case SESSIONTIMEZONE:
					case SET:
					case SETS:
					case SETTINGS:
					case SHOW:
					case SHUTDOWN:
					case SIBLINGS:
					case SIGNTYPE:
					case SIMPLE_INTEGER:
					case SINGLE:
					case SKIP_:
					case SMALLINT:
					case SNAPSHOT:
					case SOME:
					case SPECIFICATION:
					case SQLDATA:
					case SQLERROR:
					case SQL_PERCENT_ROWCOUNT:
					case STANDALONE:
					case STARTUP:
					case STATEMENT:
					case STATEMENT_ID:
					case STATIC:
					case STATISTICS:
					case STRING:
					case SUBMULTISET:
					case SUBPARTITION:
					case SUBSTITUTABLE:
					case SUBTYPE:
					case SUCCESS:
					case SUSPEND:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMP_LTZ_UNCONSTRAINED:
					case TIMESTAMP_TZ_UNCONSTRAINED:
					case TIMESTAMP_UNCONSTRAINED:
					case TIMEZONE_ABBR:
					case TIMEZONE_HOUR:
					case TIMEZONE_MINUTE:
					case TIMEZONE_REGION:
					case TRAILING:
					case TRANSACTION:
					case TRANSLATE:
					case TREAT:
					case TRIGGER:
					case TRIM:
					case TRUNCATE:
					case TYPE:
					case UNBOUNDED:
					case UNDER:
					case UNLIMITED:
					case UNTIL:
					case UPDATE:
					case UPDATED:
					case UPSERT:
					case UROWID:
					case USE:
					case VALIDATE:
					case VALUE:
					case VARCHAR:
					case VARCHAR2:
					case VARIABLE:
					case VARRAY:
					case VARYING:
					case VERSION:
					case VERSIONS:
					case WAIT:
					case WARNING:
					case WELLFORMED:
					case WHENEVER:
					case WHILE:
					case WITH:
					case WITHIN:
					case WORK:
					case WRITE:
					case XML:
					case XMLAGG:
					case XMLATTRIBUTES:
					case XMLCAST:
					case XMLCOLATTVAL:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case YEAR:
					case YES:
					case YMINTERVAL_UNCONSTRAINED:
					case ZONE:
					case PREDICTION:
					case PREDICTION_BOUNDS:
					case PREDICTION_COST:
					case PREDICTION_DETAILS:
					case PREDICTION_PROBABILITY:
					case PREDICTION_SET:
					case CUME_DIST:
					case DENSE_RANK:
					case LISTAGG:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case RANK:
					case AVG:
					case CORR:
					case LAG:
					case LEAD:
					case MAX:
					case MEDIAN:
					case MIN:
					case NTILE:
					case RATIO_TO_REPORT:
					case ROW_NUMBER:
					case SUM:
					case VARIANCE:
					case REGR_:
					case STDDEV:
					case VAR_:
					case COVAR_:
					case DELIMITED_ID:
					case LEFT_PAREN:
					case BINDVAR:
					case COLON:
					case INTRODUCER:
					case REGULAR_ID:
						{
						setState(2230);
						statement();
						setState(2231);
						match(SEMICOLON);
						}
						break;
					case LESS_THAN_OP:
						{
						setState(2233);
						label_declaration();
						}
						break;
					case PP_IF:
						{
						setState(2234);
						preprocessor_statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2237); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,204,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_declarationContext extends ParserRuleContext {
		public Token ltp1;
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLabel_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLabel_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLabel_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_declarationContext label_declaration() throws RecognitionException {
		Label_declarationContext _localctx = new Label_declarationContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_label_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2239);
			((Label_declarationContext)_localctx).ltp1 = match(LESS_THAN_OP);
			setState(2240);
			match(LESS_THAN_OP);
			setState(2241);
			label_name();
			setState(2242);
			match(GREATER_THAN_OP);
			setState(2243);
			match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public Swallow_to_semiContext swallow_to_semi() {
			return getRuleContext(Swallow_to_semiContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Assignment_statementContext assignment_statement() {
			return getRuleContext(Assignment_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Forall_statementContext forall_statement() {
			return getRuleContext(Forall_statementContext.class,0);
		}
		public Null_statementContext null_statement() {
			return getRuleContext(Null_statementContext.class,0);
		}
		public Raise_statementContext raise_statement() {
			return getRuleContext(Raise_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Pipe_rowContext pipe_row() {
			return getRuleContext(Pipe_rowContext.class,0);
		}
		public Collection_statementContext collection_statement() {
			return getRuleContext(Collection_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_statement);
		try {
			setState(2272);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2245);
				match(CREATE);
				setState(2246);
				swallow_to_semi();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2247);
				match(ALTER);
				setState(2248);
				swallow_to_semi();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2249);
				match(GRANT);
				setState(2250);
				swallow_to_semi();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2251);
				match(TRUNCATE);
				setState(2252);
				swallow_to_semi();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2253);
				match(PRAGMA);
				setState(2254);
				swallow_to_semi();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2255);
				body();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2256);
				block();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2257);
				assignment_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2258);
				continue_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2259);
				exit_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2260);
				goto_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2261);
				if_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2262);
				loop_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2263);
				forall_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2264);
				null_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2265);
				raise_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2266);
				return_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2267);
				case_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2268);
				sql_statement();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2269);
				function_call();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2270);
				pipe_row();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2271);
				collection_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_statementContext extends ParserRuleContext {
		public TerminalNode ASSIGN_OP() { return getToken(PlSqlParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Collection_assoc_expressionContext collection_assoc_expression() {
			return getRuleContext(Collection_assoc_expressionContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAssignment_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAssignment_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAssignment_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_statementContext assignment_statement() throws RecognitionException {
		Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_assignment_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2277);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
			case 1:
				{
				setState(2274);
				collection_assoc_expression();
				}
				break;
			case 2:
				{
				setState(2275);
				general_element();
				}
				break;
			case 3:
				{
				setState(2276);
				bind_variable();
				}
				break;
			}
			setState(2279);
			match(ASSIGN_OP);
			setState(2280);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitContinue_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitContinue_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_continue_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2282);
			match(CONTINUE);
			setState(2284);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2283);
				label_name();
				}
			}

			setState(2288);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2286);
				match(WHEN);
				setState(2287);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_exit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2290);
			match(EXIT);
			setState(2292);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2291);
				label_name();
				}
			}

			setState(2296);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2294);
				match(WHEN);
				setState(2295);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(PlSqlParser.GOTO, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGoto_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGoto_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_goto_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2298);
			match(GOTO);
			setState(2299);
			label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(PlSqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(PlSqlParser.IF, i);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<Elsif_partContext> elsif_part() {
			return getRuleContexts(Elsif_partContext.class);
		}
		public Elsif_partContext elsif_part(int i) {
			return getRuleContext(Elsif_partContext.class,i);
		}
		public Else_partContext else_part() {
			return getRuleContext(Else_partContext.class,0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitIf_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitIf_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2301);
			match(IF);
			setState(2302);
			condition();
			setState(2303);
			match(THEN);
			setState(2304);
			seq_of_statements();
			setState(2308);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(2305);
				elsif_part();
				}
				}
				setState(2310);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2312);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2311);
				else_part();
				}
			}

			setState(2314);
			match(END);
			setState(2315);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Elsif_partContext extends ParserRuleContext {
		public TerminalNode ELSIF() { return getToken(PlSqlParser.ELSIF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elsif_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterElsif_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitElsif_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitElsif_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Elsif_partContext elsif_part() throws RecognitionException {
		Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_elsif_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2317);
			match(ELSIF);
			setState(2318);
			condition();
			setState(2319);
			match(THEN);
			setState(2320);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterElse_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitElse_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitElse_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Else_partContext else_part() throws RecognitionException {
		Else_partContext _localctx = new Else_partContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2322);
			match(ELSE);
			setState(2323);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_statementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(PlSqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(PlSqlParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public TerminalNode WHILE() { return getToken(PlSqlParser.WHILE, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return getRuleContext(Cursor_loop_paramContext.class,0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLoop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLoop_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLoop_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_loop_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				setState(2325);
				label_name();
				}
				break;
			}
			setState(2332);
			switch (_input.LA(1)) {
			case WHILE:
				{
				setState(2328);
				match(WHILE);
				setState(2329);
				condition();
				}
				break;
			case FOR:
				{
				setState(2330);
				match(FOR);
				setState(2331);
				cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2334);
			match(LOOP);
			setState(2335);
			seq_of_statements();
			setState(2336);
			match(END);
			setState(2337);
			match(LOOP);
			setState(2339);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2338);
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_loop_paramContext extends ParserRuleContext {
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode REVERSE() { return getToken(PlSqlParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_loop_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCursor_loop_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCursor_loop_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCursor_loop_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_cursor_loop_param);
		int _la;
		try {
			setState(2362);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2341);
				index_name();
				setState(2342);
				match(IN);
				setState(2344);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
				case 1:
					{
					setState(2343);
					match(REVERSE);
					}
					break;
				}
				setState(2346);
				lower_bound();
				setState(2347);
				match(T__0);
				setState(2348);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2350);
				record_name();
				setState(2351);
				match(IN);
				setState(2360);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CACHE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL_PERCENT_ROWCOUNT:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2352);
					cursor_name();
					setState(2354);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(2353);
						expression_list();
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					setState(2356);
					match(LEFT_PAREN);
					setState(2357);
					select_statement();
					setState(2358);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Forall_statementContext extends ParserRuleContext {
		public TerminalNode FORALL() { return getToken(PlSqlParser.FORALL, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Bounds_clauseContext bounds_clause() {
			return getRuleContext(Bounds_clauseContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public TerminalNode SAVE() { return getToken(PlSqlParser.SAVE, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forall_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterForall_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitForall_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitForall_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Forall_statementContext forall_statement() throws RecognitionException {
		Forall_statementContext _localctx = new Forall_statementContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_forall_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2364);
			match(FORALL);
			setState(2365);
			index_name();
			setState(2366);
			match(IN);
			setState(2367);
			bounds_clause();
			setState(2368);
			sql_statement();
			setState(2371);
			_la = _input.LA(1);
			if (_la==SAVE) {
				{
				setState(2369);
				match(SAVE);
				setState(2370);
				match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bounds_clauseContext extends ParserRuleContext {
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode INDICES() { return getToken(PlSqlParser.INDICES, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Between_boundContext between_bound() {
			return getRuleContext(Between_boundContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bounds_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBounds_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBounds_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBounds_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bounds_clauseContext bounds_clause() throws RecognitionException {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_bounds_clause);
		int _la;
		try {
			setState(2386);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2373);
				lower_bound();
				setState(2374);
				match(T__0);
				setState(2375);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2377);
				match(INDICES);
				setState(2378);
				match(OF);
				setState(2379);
				collection_name();
				setState(2381);
				_la = _input.LA(1);
				if (_la==BETWEEN) {
					{
					setState(2380);
					between_bound();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2383);
				match(VALUES);
				setState(2384);
				match(OF);
				setState(2385);
				index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_boundContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBetween_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBetween_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBetween_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_boundContext between_bound() throws RecognitionException {
		Between_boundContext _localctx = new Between_boundContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_between_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2388);
			match(BETWEEN);
			setState(2389);
			lower_bound();
			setState(2390);
			match(AND);
			setState(2391);
			upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lower_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lower_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLower_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLower_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLower_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lower_boundContext lower_bound() throws RecognitionException {
		Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_lower_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2393);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Upper_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUpper_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUpper_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUpper_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Upper_boundContext upper_bound() throws RecognitionException {
		Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_upper_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2395);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_statementContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNull_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNull_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNull_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_statementContext null_statement() throws RecognitionException {
		Null_statementContext _localctx = new Null_statementContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_null_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2397);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raise_statementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(PlSqlParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRaise_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRaise_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRaise_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Raise_statementContext raise_statement() throws RecognitionException {
		Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_raise_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2399);
			match(RAISE);
			setState(2401);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(2400);
				exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public ConditionContext cn1;
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReturn_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReturn_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2403);
			match(RETURN);
			setState(2405);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MOD - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PRIOR - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TO_CHAR - 386)) | (1L << (TO_NUMBER - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (NATIONAL_CHAR_STRING_LIT - 450)) | (1L << (UNSIGNED_INTEGER - 450)) | (1L << (APPROXIMATE_NUM_LIT - 450)) | (1L << (CHAR_STRING - 450)) | (1L << (DELIMITED_ID - 450)) | (1L << (LEFT_PAREN - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2404);
				((Return_statementContext)_localctx).cn1 = condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_function_call);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2408);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
			case 1:
				{
				setState(2407);
				match(CALL);
				}
				break;
			}
			setState(2410);
			routine_name();
			setState(2412);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				setState(2411);
				function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public Exception_clauseContext exception_clause() {
			return getRuleContext(Exception_clauseContext.class,0);
		}
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2414);
			match(BEGIN);
			setState(2415);
			seq_of_statements();
			setState(2417);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(2416);
				exception_clause();
				}
			}

			setState(2419);
			match(END);
			setState(2421);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
			case 1:
				{
				setState(2420);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_statementContext extends ParserRuleContext {
		public Collection_assoc_expressionContext collection_assoc_expression() {
			return getRuleContext(Collection_assoc_expressionContext.class,0);
		}
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode EXTEND() { return getToken(PlSqlParser.EXTEND, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public Collection_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCollection_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCollection_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCollection_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collection_statementContext collection_statement() throws RecognitionException {
		Collection_statementContext _localctx = new Collection_statementContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_collection_statement);
		int _la;
		try {
			setState(2461);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2423);
				collection_assoc_expression();
				setState(2424);
				match(PERIOD);
				setState(2425);
				match(DELETE);
				setState(2435);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(2426);
					match(LEFT_PAREN);
					setState(2432);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MOD - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PRIOR - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TO_CHAR - 386)) | (1L << (TO_NUMBER - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (NATIONAL_CHAR_STRING_LIT - 450)) | (1L << (UNSIGNED_INTEGER - 450)) | (1L << (APPROXIMATE_NUM_LIT - 450)) | (1L << (CHAR_STRING - 450)) | (1L << (DELIMITED_ID - 450)) | (1L << (LEFT_PAREN - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)))) != 0) || _la==REGULAR_ID) {
						{
						setState(2427);
						expression();
						setState(2430);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2428);
							match(COMMA);
							setState(2429);
							expression();
							}
						}

						}
					}

					setState(2434);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2437);
				collection_assoc_expression();
				setState(2438);
				match(PERIOD);
				setState(2439);
				match(EXTEND);
				setState(2449);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(2440);
					match(LEFT_PAREN);
					setState(2446);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MOD - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PRIOR - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TO_CHAR - 386)) | (1L << (TO_NUMBER - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (NATIONAL_CHAR_STRING_LIT - 450)) | (1L << (UNSIGNED_INTEGER - 450)) | (1L << (APPROXIMATE_NUM_LIT - 450)) | (1L << (CHAR_STRING - 450)) | (1L << (DELIMITED_ID - 450)) | (1L << (LEFT_PAREN - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)))) != 0) || _la==REGULAR_ID) {
						{
						setState(2441);
						expression();
						setState(2444);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2442);
							match(COMMA);
							setState(2443);
							expression();
							}
						}

						}
					}

					setState(2448);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2451);
				collection_assoc_expression();
				setState(2452);
				match(PERIOD);
				setState(2453);
				match(TRIM);
				setState(2459);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(2454);
					match(LEFT_PAREN);
					setState(2456);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MOD - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PRIOR - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TO_CHAR - 386)) | (1L << (TO_NUMBER - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (NATIONAL_CHAR_STRING_LIT - 450)) | (1L << (UNSIGNED_INTEGER - 450)) | (1L << (APPROXIMATE_NUM_LIT - 450)) | (1L << (CHAR_STRING - 450)) | (1L << (DELIMITED_ID - 450)) | (1L << (LEFT_PAREN - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)))) != 0) || _la==REGULAR_ID) {
						{
						setState(2455);
						expression();
						}
					}

					setState(2458);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pipe_rowContext extends ParserRuleContext {
		public TerminalNode PIPE() { return getToken(PlSqlParser.PIPE, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Pipe_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pipe_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPipe_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPipe_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPipe_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pipe_rowContext pipe_row() throws RecognitionException {
		Pipe_rowContext _localctx = new Pipe_rowContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_pipe_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2463);
			match(PIPE);
			setState(2464);
			match(ROW);
			setState(2465);
			match(LEFT_PAREN);
			setState(2466);
			expression();
			setState(2467);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_clauseContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public Exception_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterException_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitException_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitException_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_clauseContext exception_clause() throws RecognitionException {
		Exception_clauseContext _localctx = new Exception_clauseContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_exception_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2469);
			match(EXCEPTION);
			setState(2471); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2470);
				exception_handler();
				}
				}
				setState(2473); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_handlerContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<Exception_nameContext> exception_name() {
			return getRuleContexts(Exception_nameContext.class);
		}
		public Exception_nameContext exception_name(int i) {
			return getRuleContext(Exception_nameContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterException_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitException_handler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitException_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_handlerContext exception_handler() throws RecognitionException {
		Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_exception_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2475);
			match(WHEN);
			setState(2476);
			exception_name();
			setState(2481);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(2477);
				match(OR);
				setState(2478);
				exception_name();
				}
				}
				setState(2483);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2484);
			match(THEN);
			setState(2485);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_blockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Declare_wrapperContext declare_wrapper() {
			return getRuleContext(Declare_wrapperContext.class,0);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTrigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTrigger_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTrigger_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_blockContext trigger_block() throws RecognitionException {
		Trigger_blockContext _localctx = new Trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2488);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(2487);
				declare_wrapper();
				}
			}

			setState(2490);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Declare_wrapperContext declare_wrapper() {
			return getRuleContext(Declare_wrapperContext.class,0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2493);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(2492);
				declare_wrapper();
				}
			}

			setState(2495);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statementContext extends ParserRuleContext {
		public Execute_immediateContext execute_immediate() {
			return getRuleContext(Execute_immediateContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return getRuleContext(Cursor_manipulation_statementsContext.class,0);
		}
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSql_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSql_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_sql_statement);
		try {
			setState(2501);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2497);
				execute_immediate();
				}
				break;
			case DELETE:
			case EXPLAIN:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2498);
				data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2499);
				cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(2500);
				transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_immediateContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return getRuleContext(Dynamic_returning_clauseContext.class,0);
		}
		public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExecute_immediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExecute_immediate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExecute_immediate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_immediateContext execute_immediate() throws RecognitionException {
		Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_execute_immediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2503);
			match(EXECUTE);
			setState(2504);
			match(IMMEDIATE);
			setState(2505);
			expression();
			setState(2515);
			switch (_input.LA(1)) {
			case BULK:
			case INTO:
				{
				setState(2506);
				into_clause();
				setState(2508);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2507);
					using_clause();
					}
				}

				}
				break;
			case USING:
				{
				setState(2510);
				using_clause();
				setState(2512);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(2511);
					dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURN:
			case RETURNING:
				{
				setState(2514);
				dynamic_returning_clause();
				}
				break;
			case SAVE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_returning_clauseContext extends ParserRuleContext {
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDynamic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDynamic_returning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDynamic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_returning_clauseContext dynamic_returning_clause() throws RecognitionException {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_dynamic_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2517);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2518);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return getRuleContext(Lock_table_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterData_manipulation_language_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitData_manipulation_language_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitData_manipulation_language_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_data_manipulation_language_statements);
		try {
			setState(2527);
			switch (_input.LA(1)) {
			case MERGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2520);
				merge_statement();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2521);
				lock_table_statement();
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2522);
				select_statement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2523);
				update_statement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2524);
				delete_statement();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2525);
				insert_statement();
				}
				break;
			case EXPLAIN:
				enterOuterAlt(_localctx, 7);
				{
				setState(2526);
				explain_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_manipulation_statementsContext extends ParserRuleContext {
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		public Open_for_statementContext open_for_statement() {
			return getRuleContext(Open_for_statementContext.class,0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_manipulation_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCursor_manipulation_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCursor_manipulation_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCursor_manipulation_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_manipulation_statementsContext cursor_manipulation_statements() throws RecognitionException {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_cursor_manipulation_statements);
		try {
			setState(2533);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2529);
				close_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2530);
				open_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2531);
				fetch_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2532);
				open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PlSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterClose_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitClose_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitClose_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2535);
			match(CLOSE);
			setState(2536);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOpen_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOpen_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOpen_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2538);
			match(OPEN);
			setState(2539);
			cursor_name();
			setState(2541);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2540);
				expression_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_statementContext extends ParserRuleContext {
		public Token it1;
		public TerminalNode FETCH() { return getToken(PlSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFetch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFetch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2543);
			match(FETCH);
			setState(2544);
			cursor_name();
			setState(2572);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(2545);
				((Fetch_statementContext)_localctx).it1 = match(INTO);
				setState(2546);
				variable_name();
				setState(2551);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2547);
					match(COMMA);
					setState(2548);
					variable_name();
					}
					}
					setState(2553);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				{
				setState(2554);
				match(BULK);
				setState(2555);
				match(COLLECT);
				setState(2556);
				match(INTO);
				setState(2557);
				variable_name();
				setState(2562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2558);
					match(COMMA);
					setState(2559);
					variable_name();
					}
					}
					setState(2564);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2570);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(2565);
					match(LIMIT);
					setState(2568);
					switch (_input.LA(1)) {
					case A_LETTER:
					case ADD:
					case AFTER:
					case AGENT:
					case AGGREGATE:
					case ANALYZE:
					case ARRAY:
					case ASSOCIATE:
					case AT:
					case ATTRIBUTE:
					case AUDIT:
					case AUTHID:
					case AUTO:
					case AUTOMATIC:
					case AUTONOMOUS_TRANSACTION:
					case BATCH:
					case BEFORE:
					case BFILE:
					case BINARY_DOUBLE:
					case BINARY_FLOAT:
					case BINARY_INTEGER:
					case BLOB:
					case BLOCK:
					case BODY:
					case BOOLEAN:
					case BOTH:
					case BULK:
					case BYTE:
					case C_LETTER:
					case CACHE:
					case CALL:
					case CANONICAL:
					case CASCADE:
					case CAST:
					case CHAR:
					case CHAR_CS:
					case CHARACTER:
					case CHR:
					case CLOB:
					case CLOSE:
					case CLUSTER:
					case COLLECT:
					case COLUMNS:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case COMPATIBILITY:
					case COMPILE:
					case COMPOUND:
					case CONSTANT:
					case CONSTRAINT:
					case CONSTRAINTS:
					case CONSTRUCTOR:
					case CONTENT:
					case CONTEXT:
					case CONTINUE:
					case CONVERT:
					case CORRUPT_XID:
					case CORRUPT_XID_ALL:
					case COST:
					case COUNT:
					case CROSS:
					case CUBE:
					case CURRENT_USER:
					case CURSOR:
					case CUSTOMDATUM:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DAY:
					case DB_ROLE_CHANGE:
					case DBTIMEZONE:
					case DDL:
					case DEBUG:
					case DEC:
					case DECIMAL:
					case DECOMPOSE:
					case DECREMENT:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DETERMINISTIC:
					case DIMENSION:
					case DISABLE:
					case DISASSOCIATE:
					case DOCUMENT:
					case DOUBLE:
					case DSINTERVAL_UNCONSTRAINED:
					case EACH:
					case ELEMENT:
					case EMPTY:
					case ENABLE:
					case ENCODING:
					case ENTITYESCAPING:
					case ERRORS:
					case ESCAPE:
					case EVALNAME:
					case EXCEPTION:
					case EXCEPTION_INIT:
					case EXCEPTIONS:
					case EXCLUDE:
					case EXECUTE:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case EXTRACT:
					case FAILURE:
					case FINAL:
					case FIRST:
					case FIRST_VALUE:
					case FLOAT:
					case FOLLOWING:
					case FOLLOWS:
					case FORALL:
					case FORCE:
					case FULL:
					case FUNCTION:
					case GROUPING:
					case HASH:
					case HIDE:
					case HOUR:
					case IGNORE:
					case IMMEDIATE:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDENT:
					case INDEXED:
					case INDICATOR:
					case INDICES:
					case INFINITE:
					case INLINE:
					case INNER:
					case INOUT:
					case INSTANTIABLE:
					case INSTEAD:
					case INT:
					case INTEGER:
					case INTERVAL:
					case INVALIDATE:
					case ISOLATION:
					case ITERATE:
					case JAVA:
					case JOIN:
					case KEEP:
					case LANGUAGE:
					case LAST:
					case LAST_VALUE:
					case LEADING:
					case LEFT:
					case LEVEL:
					case LIBRARY:
					case LIKE2:
					case LIKE4:
					case LIKEC:
					case LIMIT:
					case LOCAL:
					case LOCKED:
					case LOG:
					case LOGOFF:
					case LOGON:
					case LONG:
					case LOOP:
					case MAIN:
					case MAP:
					case MATCHED:
					case MAXVALUE:
					case MEASURES:
					case MEMBER:
					case MERGE:
					case MINUTE:
					case MINVALUE:
					case MLSLABEL:
					case MODEL:
					case MODIFY:
					case MONTH:
					case NAME:
					case NAN:
					case NATURAL:
					case NATURALN:
					case NAV:
					case NCHAR:
					case NCHAR_CS:
					case NCLOB:
					case NESTED:
					case NEW:
					case NO:
					case NOAUDIT:
					case NOCOPY:
					case NOCYCLE:
					case NOENTITYESCAPING:
					case NONE:
					case NOSCHEMACHECK:
					case NULLS:
					case NUMBER:
					case NUMERIC:
					case NVARCHAR2:
					case OBJECT:
					case OFF:
					case OID:
					case OLD:
					case ONLY:
					case OPEN:
					case ORADATA:
					case ORDINALITY:
					case OSERROR:
					case OUT:
					case OUTER:
					case OVER:
					case OVERRIDING:
					case PACKAGE:
					case PARALLEL_ENABLE:
					case PARAMETERS:
					case PARENT:
					case PARTITION:
					case PASSING:
					case PATH:
					case PIPELINED:
					case PLAN:
					case PLS_INTEGER:
					case POSITIVE:
					case POSITIVEN:
					case PRAGMA:
					case PRECEDING:
					case PRECISION:
					case PRESENT:
					case RAISE:
					case RANGE:
					case RAW:
					case READ:
					case REAL:
					case RECORD:
					case REF:
					case REFERENCE:
					case REFERENCING:
					case REJECT:
					case RELIES_ON:
					case RENAME:
					case REPLACE:
					case RESPECT:
					case RESTRICT_REFERENCES:
					case RESULT:
					case RESULT_CACHE:
					case RETURN:
					case RETURNING:
					case REUSE:
					case REVERSE:
					case RIGHT:
					case ROLLBACK:
					case ROLLUP:
					case ROW:
					case ROWID:
					case ROWS:
					case RULES:
					case SAMPLE:
					case SAVE:
					case SAVEPOINT:
					case SCHEMA:
					case SCHEMACHECK:
					case SCN:
					case SECOND:
					case SEED:
					case SEGMENT:
					case SELF:
					case SEQUENTIAL:
					case SERIALIZABLE:
					case SERIALLY_REUSABLE:
					case SERVERERROR:
					case SESSIONTIMEZONE:
					case SET:
					case SETS:
					case SETTINGS:
					case SHOW:
					case SHUTDOWN:
					case SIBLINGS:
					case SIGNTYPE:
					case SIMPLE_INTEGER:
					case SINGLE:
					case SKIP_:
					case SMALLINT:
					case SNAPSHOT:
					case SOME:
					case SPECIFICATION:
					case SQLDATA:
					case SQLERROR:
					case SQL_PERCENT_ROWCOUNT:
					case STANDALONE:
					case STARTUP:
					case STATEMENT:
					case STATEMENT_ID:
					case STATIC:
					case STATISTICS:
					case STRING:
					case SUBMULTISET:
					case SUBPARTITION:
					case SUBSTITUTABLE:
					case SUBTYPE:
					case SUCCESS:
					case SUSPEND:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMP_LTZ_UNCONSTRAINED:
					case TIMESTAMP_TZ_UNCONSTRAINED:
					case TIMESTAMP_UNCONSTRAINED:
					case TIMEZONE_ABBR:
					case TIMEZONE_HOUR:
					case TIMEZONE_MINUTE:
					case TIMEZONE_REGION:
					case TRAILING:
					case TRANSACTION:
					case TRANSLATE:
					case TREAT:
					case TRIGGER:
					case TRIM:
					case TRUNCATE:
					case TYPE:
					case UNBOUNDED:
					case UNDER:
					case UNLIMITED:
					case UNTIL:
					case UPDATED:
					case UPSERT:
					case UROWID:
					case USE:
					case VALIDATE:
					case VALUE:
					case VARCHAR:
					case VARCHAR2:
					case VARIABLE:
					case VARRAY:
					case VARYING:
					case VERSION:
					case VERSIONS:
					case WAIT:
					case WARNING:
					case WELLFORMED:
					case WHENEVER:
					case WHILE:
					case WITHIN:
					case WORK:
					case WRITE:
					case XML:
					case XMLAGG:
					case XMLATTRIBUTES:
					case XMLCAST:
					case XMLCOLATTVAL:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case YEAR:
					case YES:
					case YMINTERVAL_UNCONSTRAINED:
					case ZONE:
					case PREDICTION:
					case PREDICTION_BOUNDS:
					case PREDICTION_COST:
					case PREDICTION_DETAILS:
					case PREDICTION_PROBABILITY:
					case PREDICTION_SET:
					case CUME_DIST:
					case DENSE_RANK:
					case LISTAGG:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case RANK:
					case AVG:
					case CORR:
					case LAG:
					case LEAD:
					case MAX:
					case MEDIAN:
					case MIN:
					case NTILE:
					case RATIO_TO_REPORT:
					case ROW_NUMBER:
					case SUM:
					case VARIANCE:
					case REGR_:
					case STDDEV:
					case VAR_:
					case COVAR_:
					case DELIMITED_ID:
					case BINDVAR:
					case COLON:
					case INTRODUCER:
					case REGULAR_ID:
						{
						setState(2566);
						variable_name();
						}
						break;
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(2567);
						numeric();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_for_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_for_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOpen_for_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOpen_for_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOpen_for_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_for_statementContext open_for_statement() throws RecognitionException {
		Open_for_statementContext _localctx = new Open_for_statementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_open_for_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2574);
			match(OPEN);
			setState(2575);
			variable_name();
			setState(2576);
			match(FOR);
			setState(2579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				{
				setState(2577);
				select_statement();
				}
				break;
			case 2:
				{
				setState(2578);
				expression();
				}
				break;
			}
			setState(2582);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2581);
				using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_control_statementsContext extends ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return getRuleContext(Set_transaction_commandContext.class,0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return getRuleContext(Set_constraint_commandContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_control_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTransaction_control_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTransaction_control_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTransaction_control_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_control_statementsContext transaction_control_statements() throws RecognitionException {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_transaction_control_statements);
		try {
			setState(2589);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2584);
				set_transaction_command();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2585);
				set_constraint_command();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2586);
				commit_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2587);
				rollback_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2588);
				savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlSqlParser.TRANSACTION, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode ISOLATION() { return getToken(PlSqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PlSqlParser.LEVEL, 0); }
		public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return getRuleContext(Rollback_segment_nameContext.class,0);
		}
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PlSqlParser.SERIALIZABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(PlSqlParser.COMMITTED, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSet_transaction_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSet_transaction_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSet_transaction_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_transaction_commandContext set_transaction_command() throws RecognitionException {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_set_transaction_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2591);
			match(SET);
			setState(2592);
			match(TRANSACTION);
			setState(2606);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(2593);
				match(READ);
				setState(2594);
				_la = _input.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case ISOLATION:
				{
				setState(2595);
				match(ISOLATION);
				setState(2596);
				match(LEVEL);
				setState(2600);
				switch (_input.LA(1)) {
				case SERIALIZABLE:
					{
					setState(2597);
					match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					setState(2598);
					match(READ);
					setState(2599);
					match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case USE:
				{
				setState(2602);
				match(USE);
				setState(2603);
				match(ROLLBACK);
				setState(2604);
				match(SEGMENT);
				setState(2605);
				rollback_segment_name();
				}
				break;
			case NAME:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2610);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(2608);
				match(NAME);
				setState(2609);
				quoted_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_constraint_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlSqlParser.CONSTRAINTS, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraint_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSet_constraint_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSet_constraint_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSet_constraint_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_constraint_commandContext set_constraint_command() throws RecognitionException {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_set_constraint_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2612);
			match(SET);
			setState(2613);
			_la = _input.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2623);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(2614);
				match(ALL);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2615);
				constraint_name();
				setState(2620);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2616);
					match(COMMA);
					setState(2617);
					constraint_name();
					}
					}
					setState(2622);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2625);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public Write_clauseContext write_clause() {
			return getRuleContext(Write_clauseContext.class,0);
		}
		public TerminalNode CORRUPT_XID() { return getToken(PlSqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCommit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2627);
			match(COMMIT);
			setState(2629);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2628);
				match(WORK);
				}
			}

			setState(2644);
			switch (_input.LA(1)) {
			case COMMENT:
				{
				setState(2631);
				match(COMMENT);
				setState(2632);
				expression();
				}
				break;
			case FORCE:
				{
				setState(2633);
				match(FORCE);
				setState(2642);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
				case 1:
					{
					setState(2634);
					match(CORRUPT_XID);
					setState(2635);
					expression();
					}
					break;
				case 2:
					{
					setState(2636);
					match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					setState(2637);
					expression();
					setState(2640);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2638);
						match(COMMA);
						setState(2639);
						expression();
						}
					}

					}
					break;
				}
				}
				break;
			case SAVE:
			case WRITE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2647);
			_la = _input.LA(1);
			if (_la==WRITE) {
				{
				setState(2646);
				write_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Write_clauseContext extends ParserRuleContext {
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode BATCH() { return getToken(PlSqlParser.BATCH, 0); }
		public Write_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_write_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWrite_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWrite_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWrite_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Write_clauseContext write_clause() throws RecognitionException {
		Write_clauseContext _localctx = new Write_clauseContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_write_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2649);
			match(WRITE);
			setState(2651);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(2650);
				_la = _input.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(2654);
			_la = _input.LA(1);
			if (_la==BATCH || _la==IMMEDIATE) {
				{
				setState(2653);
				_la = _input.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRollback_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRollback_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2656);
			match(ROLLBACK);
			setState(2658);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2657);
				match(WORK);
				}
			}

			setState(2667);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(2660);
				match(TO);
				setState(2662);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
				case 1:
					{
					setState(2661);
					match(SAVEPOINT);
					}
					break;
				}
				setState(2664);
				savepoint_name();
				}
				break;
			case FORCE:
				{
				setState(2665);
				match(FORCE);
				setState(2666);
				quoted_string();
				}
				break;
			case SAVE:
			case SEMICOLON:
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSavepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSavepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2669);
			match(SAVEPOINT);
			setState(2670);
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(PlSqlParser.EXPLAIN, 0); }
		public TerminalNode PLAN() { return getToken(PlSqlParser.PLAN, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(PlSqlParser.STATEMENT_ID, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExplain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExplain_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExplain_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2672);
			match(EXPLAIN);
			setState(2673);
			match(PLAN);
			setState(2678);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2674);
				match(SET);
				setState(2675);
				match(STATEMENT_ID);
				setState(2676);
				match(EQUALS_OP);
				setState(2677);
				quoted_string();
				}
			}

			setState(2682);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2680);
				match(INTO);
				setState(2681);
				tableview_name();
				}
			}

			setState(2684);
			match(FOR);
			setState(2690);
			switch (_input.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(2685);
				select_statement();
				}
				break;
			case UPDATE:
				{
				setState(2686);
				update_statement();
				}
				break;
			case DELETE:
				{
				setState(2687);
				delete_statement();
				}
				break;
			case INSERT:
				{
				setState(2688);
				insert_statement();
				}
				break;
			case MERGE:
				{
				setState(2689);
				merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return getRuleContext(Subquery_factoring_clauseContext.class,0);
		}
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		public List<Order_by_clauseContext> order_by_clause() {
			return getRuleContexts(Order_by_clauseContext.class);
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return getRuleContext(Order_by_clauseContext.class,i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2693);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2692);
				subquery_factoring_clause();
				}
			}

			setState(2695);
			subquery();
			setState(2700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==ORDER) {
				{
				setState(2698);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(2696);
					for_update_clause();
					}
					break;
				case ORDER:
					{
					setState(2697);
					order_by_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2702);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_factoring_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public List<Factoring_elementContext> factoring_element() {
			return getRuleContexts(Factoring_elementContext.class);
		}
		public Factoring_elementContext factoring_element(int i) {
			return getRuleContext(Factoring_elementContext.class,i);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubquery_factoring_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubquery_factoring_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubquery_factoring_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_subquery_factoring_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2703);
			match(WITH);
			setState(2704);
			factoring_element();
			setState(2709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2705);
				match(COMMA);
				setState(2706);
				factoring_element();
				}
				}
				setState(2711);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Factoring_elementContext extends ParserRuleContext {
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		public Factoring_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factoring_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFactoring_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFactoring_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFactoring_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Factoring_elementContext factoring_element() throws RecognitionException {
		Factoring_elementContext _localctx = new Factoring_elementContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_factoring_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2712);
			query_name();
			setState(2724);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2713);
				match(LEFT_PAREN);
				setState(2714);
				column_name();
				setState(2719);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2715);
					match(COMMA);
					setState(2716);
					column_name();
					}
					}
					setState(2721);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2722);
				match(RIGHT_PAREN);
				}
			}

			setState(2726);
			match(AS);
			setState(2727);
			match(LEFT_PAREN);
			setState(2728);
			subquery();
			setState(2730);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2729);
				order_by_clause();
				}
			}

			setState(2732);
			match(RIGHT_PAREN);
			setState(2734);
			_la = _input.LA(1);
			if (_la==SEARCH) {
				{
				setState(2733);
				search_clause();
				}
			}

			setState(2737);
			_la = _input.LA(1);
			if (_la==CYCLE) {
				{
				setState(2736);
				cycle_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_clauseContext extends ParserRuleContext {
		public TerminalNode SEARCH() { return getToken(PlSqlParser.SEARCH, 0); }
		public List<TerminalNode> FIRST() { return getTokens(PlSqlParser.FIRST); }
		public TerminalNode FIRST(int i) {
			return getToken(PlSqlParser.FIRST, i);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode DEPTH() { return getToken(PlSqlParser.DEPTH, 0); }
		public TerminalNode BREADTH() { return getToken(PlSqlParser.BREADTH, 0); }
		public List<TerminalNode> ASC() { return getTokens(PlSqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(PlSqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(PlSqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(PlSqlParser.DESC, i);
		}
		public List<TerminalNode> NULLS() { return getTokens(PlSqlParser.NULLS); }
		public TerminalNode NULLS(int i) {
			return getToken(PlSqlParser.NULLS, i);
		}
		public List<TerminalNode> LAST() { return getTokens(PlSqlParser.LAST); }
		public TerminalNode LAST(int i) {
			return getToken(PlSqlParser.LAST, i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSearch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSearch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSearch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_search_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2739);
			match(SEARCH);
			setState(2740);
			_la = _input.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2741);
			match(FIRST);
			setState(2742);
			match(BY);
			setState(2743);
			column_name();
			setState(2745);
			_la = _input.LA(1);
			if (_la==ASC) {
				{
				setState(2744);
				match(ASC);
				}
			}

			setState(2748);
			_la = _input.LA(1);
			if (_la==DESC) {
				{
				setState(2747);
				match(DESC);
				}
			}

			setState(2752);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				setState(2750);
				match(NULLS);
				setState(2751);
				match(FIRST);
				}
				break;
			}
			setState(2756);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(2754);
				match(NULLS);
				setState(2755);
				match(LAST);
				}
			}

			setState(2776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2758);
				match(COMMA);
				setState(2759);
				column_name();
				setState(2761);
				_la = _input.LA(1);
				if (_la==ASC) {
					{
					setState(2760);
					match(ASC);
					}
				}

				setState(2764);
				_la = _input.LA(1);
				if (_la==DESC) {
					{
					setState(2763);
					match(DESC);
					}
				}

				setState(2768);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					setState(2766);
					match(NULLS);
					setState(2767);
					match(FIRST);
					}
					break;
				}
				setState(2772);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(2770);
					match(NULLS);
					setState(2771);
					match(LAST);
					}
				}

				}
				}
				setState(2778);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2779);
			match(SET);
			setState(2780);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_clauseContext extends ParserRuleContext {
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCycle_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCycle_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCycle_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_cycle_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2782);
			match(CYCLE);
			setState(2783);
			column_name();
			setState(2788);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2784);
				match(COMMA);
				setState(2785);
				column_name();
				}
				}
				setState(2790);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2791);
			match(SET);
			setState(2792);
			column_name();
			setState(2793);
			match(TO);
			setState(2794);
			expression();
			setState(2795);
			match(DEFAULT);
			setState(2796);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_subquery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2798);
			subquery_basic_elements();
			setState(2802);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTERSECT || _la==MINUS || _la==UNION) {
				{
				{
				setState(2799);
				subquery_operation_part();
				}
				}
				setState(2804);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_operation_partContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public TerminalNode UNION() { return getToken(PlSqlParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(PlSqlParser.INTERSECT, 0); }
		public TerminalNode MINUS() { return getToken(PlSqlParser.MINUS, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_operation_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubquery_operation_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubquery_operation_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubquery_operation_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_subquery_operation_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2811);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(2805);
				match(UNION);
				setState(2807);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(2806);
					match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				setState(2809);
				match(INTERSECT);
				}
				break;
			case MINUS:
				{
				setState(2810);
				match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2813);
			subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_basic_elementsContext extends ParserRuleContext {
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_basic_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubquery_basic_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubquery_basic_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubquery_basic_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_basic_elementsContext subquery_basic_elements() throws RecognitionException {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_subquery_basic_elements);
		try {
			setState(2820);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2815);
				query_block();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2816);
				match(LEFT_PAREN);
				setState(2817);
				subquery();
				setState(2818);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_blockContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PlSqlParser.SELECT, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public List<Selected_elementContext> selected_element() {
			return getRuleContexts(Selected_elementContext.class);
		}
		public Selected_elementContext selected_element(int i) {
			return getRuleContext(Selected_elementContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterQuery_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitQuery_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitQuery_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_query_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2822);
			match(SELECT);
			setState(2824);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				setState(2823);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(2835);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(2826);
				match(ASTERISK);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MOD:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_NUMBER:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2827);
				selected_element();
				setState(2832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2828);
					match(COMMA);
					setState(2829);
					selected_element();
					}
					}
					setState(2834);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2838);
			_la = _input.LA(1);
			if (_la==BULK || _la==INTO) {
				{
				setState(2837);
				into_clause();
				}
			}

			setState(2840);
			from_clause();
			setState(2842);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				setState(2841);
				where_clause();
				}
				break;
			}
			setState(2845);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				setState(2844);
				hierarchical_query_clause();
				}
				break;
			}
			setState(2848);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				{
				setState(2847);
				group_by_clause();
				}
				break;
			}
			setState(2851);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				{
				setState(2850);
				order_by_clause();
				}
				break;
			}
			setState(2854);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				{
				setState(2853);
				model_clause();
				}
				break;
			}
			setState(2857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				{
				setState(2856);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Selected_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSelected_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSelected_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSelected_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selected_elementContext selected_element() throws RecognitionException {
		Selected_elementContext _localctx = new Selected_elementContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_selected_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2859);
			select_list_elements();
			setState(2861);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				{
				setState(2860);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public Table_ref_listContext table_ref_list() {
			return getRuleContext(Table_ref_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2863);
			match(FROM);
			setState(2864);
			table_ref_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elementsContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Select_list_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSelect_list_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSelect_list_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSelect_list_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_list_elementsContext select_list_elements() throws RecognitionException {
		Select_list_elementsContext _localctx = new Select_list_elementsContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_select_list_elements);
		try {
			setState(2871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2866);
				tableview_name();
				setState(2867);
				match(PERIOD);
				setState(2868);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2870);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_listContext extends ParserRuleContext {
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public Table_ref_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_ref_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_ref_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_ref_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_listContext table_ref_list() throws RecognitionException {
		Table_ref_listContext _localctx = new Table_ref_listContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_table_ref_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2873);
			table_ref();
			setState(2878);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,310,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2874);
					match(COMMA);
					setState(2875);
					table_ref();
					}
					} 
				}
				setState(2880);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,310,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Join_clauseContext> join_clause() {
			return getRuleContexts(Join_clauseContext.class);
		}
		public Join_clauseContext join_clause(int i) {
			return getRuleContext(Join_clauseContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_table_ref);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2881);
			table_ref_aux();
			setState(2885);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,311,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2882);
					join_clause();
					}
					} 
				}
				setState(2887);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,311,_ctx);
			}
			setState(2890);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				setState(2888);
				pivot_clause();
				}
				break;
			case 2:
				{
				setState(2889);
				unpivot_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_auxContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public Xml_tableContext xml_table() {
			return getRuleContext(Xml_tableContext.class,0);
		}
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_ref_aux(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_ref_aux(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_ref_aux(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_auxContext table_ref_aux() throws RecognitionException {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_table_ref_aux);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2921);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				{
				setState(2892);
				dml_table_expression_clause();
				setState(2895);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
				case 1:
					{
					setState(2893);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(2894);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2897);
				match(LEFT_PAREN);
				setState(2898);
				table_ref();
				setState(2902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INTERSECT || _la==MINUS || _la==UNION) {
					{
					{
					setState(2899);
					subquery_operation_part();
					}
					}
					setState(2904);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2905);
				match(RIGHT_PAREN);
				setState(2908);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					setState(2906);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(2907);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(2910);
				match(ONLY);
				setState(2911);
				match(LEFT_PAREN);
				setState(2912);
				dml_table_expression_clause();
				setState(2913);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				setState(2915);
				dml_table_expression_clause();
				setState(2918);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
				case 1:
					{
					setState(2916);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(2917);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 5:
				{
				setState(2920);
				xml_table();
				}
				break;
			}
			setState(2926);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,318,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2923);
					flashback_query_clause();
					}
					} 
				}
				setState(2928);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,318,_ctx);
			}
			setState(2930);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				{
				setState(2929);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(PlSqlParser.JOIN, 0); }
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Query_partition_clauseContext> query_partition_clause() {
			return getRuleContexts(Query_partition_clauseContext.class);
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return getRuleContext(Query_partition_clauseContext.class,i);
		}
		public TerminalNode INNER() { return getToken(PlSqlParser.INNER, 0); }
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public List<Join_on_partContext> join_on_part() {
			return getRuleContexts(Join_on_partContext.class);
		}
		public Join_on_partContext join_on_part(int i) {
			return getRuleContext(Join_on_partContext.class,i);
		}
		public List<Join_using_partContext> join_using_part() {
			return getRuleContexts(Join_using_partContext.class);
		}
		public Join_using_partContext join_using_part(int i) {
			return getRuleContext(Join_using_partContext.class,i);
		}
		public TerminalNode CROSS() { return getToken(PlSqlParser.CROSS, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitJoin_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitJoin_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_join_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2933);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2932);
				query_partition_clause();
				}
			}

			setState(2936);
			_la = _input.LA(1);
			if (_la==CROSS || _la==NATURAL) {
				{
				setState(2935);
				_la = _input.LA(1);
				if ( !(_la==CROSS || _la==NATURAL) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(2940);
			switch (_input.LA(1)) {
			case INNER:
				{
				setState(2938);
				match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				setState(2939);
				outer_join_type();
				}
				break;
			case JOIN:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2942);
			match(JOIN);
			setState(2943);
			table_ref_aux();
			setState(2945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				{
				setState(2944);
				query_partition_clause();
				}
				break;
			}
			setState(2951);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,325,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2949);
					switch (_input.LA(1)) {
					case ON:
						{
						setState(2947);
						join_on_part();
						}
						break;
					case USING:
						{
						setState(2948);
						join_using_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2953);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,325,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_on_partContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterJoin_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitJoin_on_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitJoin_on_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_on_partContext join_on_part() throws RecognitionException {
		Join_on_partContext _localctx = new Join_on_partContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_join_on_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2954);
			match(ON);
			setState(2955);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_using_partContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Join_using_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_using_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterJoin_using_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitJoin_using_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitJoin_using_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_using_partContext join_using_part() throws RecognitionException {
		Join_using_partContext _localctx = new Join_using_partContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_join_using_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2957);
			match(USING);
			setState(2958);
			match(LEFT_PAREN);
			setState(2959);
			column_name();
			setState(2964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2960);
				match(COMMA);
				setState(2961);
				column_name();
				}
				}
				setState(2966);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2967);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PlSqlParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(PlSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PlSqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(PlSqlParser.OUTER, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOuter_join_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOuter_join_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2969);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(2971);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(2970);
				match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterQuery_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitQuery_partition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitQuery_partition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_query_partition_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2973);
			match(PARTITION);
			setState(2974);
			match(BY);
			setState(2988);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				{
				setState(2975);
				match(LEFT_PAREN);
				setState(2976);
				subquery();
				setState(2977);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(2979);
				expression_list();
				}
				break;
			case 3:
				{
				setState(2980);
				expression();
				setState(2985);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,328,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2981);
						match(COMMA);
						setState(2982);
						expression();
						}
						} 
					}
					setState(2987);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,328,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_query_clauseContext extends ParserRuleContext {
		public TerminalNode VERSIONS() { return getToken(PlSqlParser.VERSIONS, 0); }
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SCN() { return getToken(PlSqlParser.SCN, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PlSqlParser.SNAPSHOT, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFlashback_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFlashback_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFlashback_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_flashback_query_clause);
		int _la;
		try {
			setState(2998);
			switch (_input.LA(1)) {
			case VERSIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2990);
				match(VERSIONS);
				setState(2991);
				match(BETWEEN);
				setState(2992);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(2993);
				expression();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2994);
				match(AS);
				setState(2995);
				match(OF);
				setState(2996);
				_la = _input.LA(1);
				if ( !(((((_la - 346)) & ~0x3f) == 0 && ((1L << (_la - 346)) & ((1L << (SCN - 346)) | (1L << (SNAPSHOT - 346)) | (1L << (TIMESTAMP - 346)))) != 0)) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(2997);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public TerminalNode PIVOT() { return getToken(PlSqlParser.PIVOT, 0); }
		public List<Pivot_elementContext> pivot_element() {
			return getRuleContexts(Pivot_elementContext.class);
		}
		public Pivot_elementContext pivot_element(int i) {
			return getRuleContext(Pivot_elementContext.class,i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return getRuleContext(Pivot_in_clauseContext.class,0);
		}
		public TerminalNode XML() { return getToken(PlSqlParser.XML, 0); }
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_pivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3000);
			match(PIVOT);
			setState(3002);
			_la = _input.LA(1);
			if (_la==XML) {
				{
				setState(3001);
				match(XML);
				}
			}

			setState(3004);
			match(LEFT_PAREN);
			setState(3005);
			pivot_element();
			setState(3010);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3006);
				match(COMMA);
				setState(3007);
				pivot_element();
				}
				}
				setState(3012);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3013);
			pivot_for_clause();
			setState(3014);
			pivot_in_clause();
			setState(3015);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_elementContext extends ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_elementContext pivot_element() throws RecognitionException {
		Pivot_elementContext _localctx = new Pivot_elementContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_pivot_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3017);
			aggregate_function_name();
			setState(3018);
			match(LEFT_PAREN);
			setState(3019);
			expression();
			setState(3020);
			match(RIGHT_PAREN);
			setState(3022);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (NATIONAL_CHAR_STRING_LIT - 450)) | (1L << (CHAR_STRING - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3021);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_for_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_for_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_for_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_for_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_pivot_for_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3024);
			match(FOR);
			setState(3037);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3025);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3026);
				match(LEFT_PAREN);
				setState(3027);
				column_name();
				setState(3032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3028);
					match(COMMA);
					setState(3029);
					column_name();
					}
					}
					setState(3034);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3035);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> ANY() { return getTokens(PlSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(PlSqlParser.ANY, i);
		}
		public List<Pivot_in_clause_elementContext> pivot_in_clause_element() {
			return getRuleContexts(Pivot_in_clause_elementContext.class);
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return getRuleContext(Pivot_in_clause_elementContext.class,i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_pivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3039);
			match(IN);
			setState(3040);
			match(LEFT_PAREN);
			setState(3058);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				{
				setState(3041);
				subquery();
				}
				break;
			case 2:
				{
				setState(3042);
				match(ANY);
				setState(3047);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3043);
					match(COMMA);
					setState(3044);
					match(ANY);
					}
					}
					setState(3049);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				{
				setState(3050);
				pivot_in_clause_element();
				setState(3055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3051);
					match(COMMA);
					setState(3052);
					pivot_in_clause_element();
					}
					}
					setState(3057);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(3060);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementContext extends ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return getRuleContext(Pivot_in_clause_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_in_clause_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_in_clause_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_in_clause_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clause_elementContext pivot_in_clause_element() throws RecognitionException {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_pivot_in_clause_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3062);
			pivot_in_clause_elements();
			setState(3064);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (NATIONAL_CHAR_STRING_LIT - 450)) | (1L << (CHAR_STRING - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3063);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPivot_in_clause_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPivot_in_clause_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPivot_in_clause_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clause_elementsContext pivot_in_clause_elements() throws RecognitionException {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_pivot_in_clause_elements);
		try {
			setState(3068);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3066);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3067);
				expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public TerminalNode UNPIVOT() { return getToken(PlSqlParser.UNPIVOT, 0); }
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return getRuleContext(Unpivot_in_clauseContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode INCLUDE() { return getToken(PlSqlParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(PlSqlParser.EXCLUDE, 0); }
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUnpivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUnpivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_unpivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3070);
			match(UNPIVOT);
			setState(3073);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(3071);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3072);
				match(NULLS);
				}
			}

			setState(3075);
			match(LEFT_PAREN);
			setState(3088);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3076);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3077);
				match(LEFT_PAREN);
				setState(3078);
				column_name();
				setState(3083);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3079);
					match(COMMA);
					setState(3080);
					column_name();
					}
					}
					setState(3085);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3086);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3090);
			pivot_for_clause();
			setState(3091);
			unpivot_in_clause();
			setState(3092);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public List<Unpivot_in_elementsContext> unpivot_in_elements() {
			return getRuleContexts(Unpivot_in_elementsContext.class);
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return getRuleContext(Unpivot_in_elementsContext.class,i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUnpivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUnpivot_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUnpivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_unpivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3094);
			match(IN);
			setState(3095);
			match(LEFT_PAREN);
			setState(3096);
			unpivot_in_elements();
			setState(3101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3097);
				match(COMMA);
				setState(3098);
				unpivot_in_elements();
				}
				}
				setState(3103);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3104);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_elementsContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUnpivot_in_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUnpivot_in_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUnpivot_in_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_in_elementsContext unpivot_in_elements() throws RecognitionException {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_unpivot_in_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3118);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3106);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3107);
				match(LEFT_PAREN);
				setState(3108);
				column_name();
				setState(3113);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3109);
					match(COMMA);
					setState(3110);
					column_name();
					}
					}
					setState(3115);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3116);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3135);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3120);
				match(AS);
				setState(3133);
				switch (_input.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
					{
					setState(3121);
					constant();
					}
					break;
				case LEFT_PAREN:
					{
					setState(3122);
					match(LEFT_PAREN);
					setState(3123);
					constant();
					setState(3128);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3124);
						match(COMMA);
						setState(3125);
						constant();
						}
						}
						setState(3130);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3131);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hierarchical_query_clauseContext extends ParserRuleContext {
		public TerminalNode CONNECT() { return getToken(PlSqlParser.CONNECT, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public Start_partContext start_part() {
			return getRuleContext(Start_partContext.class,0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterHierarchical_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitHierarchical_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitHierarchical_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_hierarchical_query_clause);
		try {
			setState(3154);
			switch (_input.LA(1)) {
			case CONNECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3137);
				match(CONNECT);
				setState(3138);
				match(BY);
				setState(3140);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
				case 1:
					{
					setState(3139);
					match(NOCYCLE);
					}
					break;
				}
				setState(3142);
				condition();
				setState(3144);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
				case 1:
					{
					setState(3143);
					start_part();
					}
					break;
				}
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(3146);
				start_part();
				setState(3147);
				match(CONNECT);
				setState(3148);
				match(BY);
				setState(3150);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					setState(3149);
					match(NOCYCLE);
					}
					break;
				}
				setState(3152);
				condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_partContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStart_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStart_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStart_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_partContext start_part() throws RecognitionException {
		Start_partContext _localctx = new Start_partContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_start_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3156);
			match(START);
			setState(3157);
			match(WITH);
			setState(3158);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Group_by_elementsContext> group_by_elements() {
			return getRuleContexts(Group_by_elementsContext.class);
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return getRuleContext(Group_by_elementsContext.class,i);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGroup_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGroup_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_group_by_clause);
		try {
			int _alt;
			setState(3186);
			switch (_input.LA(1)) {
			case GROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3160);
				match(GROUP);
				setState(3161);
				match(BY);
				setState(3162);
				group_by_elements();
				setState(3167);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,354,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3163);
						match(COMMA);
						setState(3164);
						group_by_elements();
						}
						} 
					}
					setState(3169);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,354,_ctx);
				}
				setState(3171);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
				case 1:
					{
					setState(3170);
					having_clause();
					}
					break;
				}
				}
				break;
			case HAVING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3173);
				having_clause();
				setState(3184);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
				case 1:
					{
					setState(3174);
					match(GROUP);
					setState(3175);
					match(BY);
					setState(3176);
					group_by_elements();
					setState(3181);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,356,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3177);
							match(COMMA);
							setState(3178);
							group_by_elements();
							}
							} 
						}
						setState(3183);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,356,_ctx);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_elementsContext extends ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGroup_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGroup_by_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGroup_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_elementsContext group_by_elements() throws RecognitionException {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_group_by_elements);
		try {
			setState(3191);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3188);
				grouping_sets_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3189);
				rollup_cube_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3190);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode ROLLUP() { return getToken(PlSqlParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRollup_cube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRollup_cube_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRollup_cube_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_rollup_cube_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3193);
			_la = _input.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3194);
			match(LEFT_PAREN);
			setState(3195);
			grouping_sets_elements();
			setState(3200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3196);
				match(COMMA);
				setState(3197);
				grouping_sets_elements();
				}
				}
				setState(3202);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3203);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(PlSqlParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PlSqlParser.SETS, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGrouping_sets_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGrouping_sets_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_grouping_sets_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3205);
			match(GROUPING);
			setState(3206);
			match(SETS);
			setState(3207);
			match(LEFT_PAREN);
			setState(3208);
			grouping_sets_elements();
			setState(3213);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3209);
				match(COMMA);
				setState(3210);
				grouping_sets_elements();
				}
				}
				setState(3215);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3216);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_elementsContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGrouping_sets_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGrouping_sets_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGrouping_sets_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_grouping_sets_elements);
		try {
			setState(3221);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3218);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3219);
				expression_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3220);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PlSqlParser.HAVING, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3223);
			match(HAVING);
			setState(3224);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_clauseContext extends ParserRuleContext {
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public Main_modelContext main_model() {
			return getRuleContext(Main_modelContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return getRuleContext(Return_rows_clauseContext.class,0);
		}
		public List<Reference_modelContext> reference_model() {
			return getRuleContexts(Reference_modelContext.class);
		}
		public Reference_modelContext reference_model(int i) {
			return getRuleContext(Reference_modelContext.class,i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_clauseContext model_clause() throws RecognitionException {
		Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_model_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3226);
			match(MODEL);
			setState(3230);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3227);
				cell_reference_options();
				}
				}
				setState(3232);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3234);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(3233);
				return_rows_clause();
				}
			}

			setState(3239);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REFERENCE) {
				{
				{
				setState(3236);
				reference_model();
				}
				}
				setState(3241);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3242);
			main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_reference_optionsContext extends ParserRuleContext {
		public TerminalNode NAV() { return getToken(PlSqlParser.NAV, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode SINGLE() { return getToken(PlSqlParser.SINGLE, 0); }
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_reference_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCell_reference_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCell_reference_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCell_reference_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_cell_reference_options);
		int _la;
		try {
			setState(3252);
			switch (_input.LA(1)) {
			case IGNORE:
			case KEEP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3244);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3245);
				match(NAV);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3246);
				match(UNIQUE);
				setState(3250);
				switch (_input.LA(1)) {
				case DIMENSION:
					{
					setState(3247);
					match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					setState(3248);
					match(SINGLE);
					setState(3249);
					match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_rows_clauseContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode UPDATED() { return getToken(PlSqlParser.UPDATED, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_rows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReturn_rows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReturn_rows_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReturn_rows_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_return_rows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3254);
			match(RETURN);
			setState(3255);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3256);
			match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_modelContext extends ParserRuleContext {
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public Reference_model_nameContext reference_model_name() {
			return getRuleContext(Reference_model_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReference_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReference_model(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReference_model(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_modelContext reference_model() throws RecognitionException {
		Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_reference_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3258);
			match(REFERENCE);
			setState(3259);
			reference_model_name();
			setState(3260);
			match(ON);
			setState(3261);
			match(LEFT_PAREN);
			setState(3262);
			subquery();
			setState(3263);
			match(RIGHT_PAREN);
			setState(3264);
			model_column_clauses();
			setState(3268);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3265);
				cell_reference_options();
				}
				}
				setState(3270);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_modelContext extends ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return getRuleContext(Model_rules_clauseContext.class,0);
		}
		public TerminalNode MAIN() { return getToken(PlSqlParser.MAIN, 0); }
		public Main_model_nameContext main_model_name() {
			return getRuleContext(Main_model_nameContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMain_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMain_model(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMain_model(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Main_modelContext main_model() throws RecognitionException {
		Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_main_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3273);
			_la = _input.LA(1);
			if (_la==MAIN) {
				{
				setState(3271);
				match(MAIN);
				setState(3272);
				main_model_name();
				}
			}

			setState(3275);
			model_column_clauses();
			setState(3279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3276);
				cell_reference_options();
				}
				}
				setState(3281);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3282);
			model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_clausesContext extends ParserRuleContext {
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Model_column_listContext> model_column_list() {
			return getRuleContexts(Model_column_listContext.class);
		}
		public Model_column_listContext model_column_list(int i) {
			return getRuleContext(Model_column_listContext.class,i);
		}
		public TerminalNode MEASURES() { return getToken(PlSqlParser.MEASURES, 0); }
		public Model_column_partition_partContext model_column_partition_part() {
			return getRuleContext(Model_column_partition_partContext.class,0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_column_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_column_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_model_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3285);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3284);
				model_column_partition_part();
				}
			}

			setState(3287);
			match(DIMENSION);
			setState(3288);
			match(BY);
			setState(3289);
			model_column_list();
			setState(3290);
			match(MEASURES);
			setState(3291);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_partition_partContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Model_column_listContext model_column_list() {
			return getRuleContext(Model_column_listContext.class,0);
		}
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_partition_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_column_partition_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_column_partition_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_column_partition_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_partition_partContext model_column_partition_part() throws RecognitionException {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_model_column_partition_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3293);
			match(PARTITION);
			setState(3294);
			match(BY);
			setState(3295);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_listContext extends ParserRuleContext {
		public List<Model_columnContext> model_column() {
			return getRuleContexts(Model_columnContext.class);
		}
		public Model_columnContext model_column(int i) {
			return getRuleContext(Model_columnContext.class,i);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_listContext model_column_list() throws RecognitionException {
		Model_column_listContext _localctx = new Model_column_listContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_model_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3297);
			match(LEFT_PAREN);
			setState(3298);
			model_column();
			setState(3303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3299);
				match(COMMA);
				setState(3300);
				model_column();
				}
				}
				setState(3305);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3306);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_columnContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_columnContext model_column() throws RecognitionException {
		Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_model_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3308);
			expression();
			setState(3310);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (NATIONAL_CHAR_STRING_LIT - 450)) | (1L << (CHAR_STRING - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3309);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_clauseContext extends ParserRuleContext {
		public List<Model_rules_elementContext> model_rules_element() {
			return getRuleContexts(Model_rules_elementContext.class);
		}
		public Model_rules_elementContext model_rules_element(int i) {
			return getRuleContext(Model_rules_elementContext.class,i);
		}
		public Model_rules_partContext model_rules_part() {
			return getRuleContext(Model_rules_partContext.class,0);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_rules_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_rules_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_rules_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_model_rules_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3313);
			_la = _input.LA(1);
			if (_la==RULES) {
				{
				setState(3312);
				model_rules_part();
				}
			}

			setState(3315);
			match(LEFT_PAREN);
			setState(3316);
			model_rules_element();
			setState(3321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3317);
				match(COMMA);
				setState(3318);
				model_rules_element();
				}
				}
				setState(3323);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3324);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_partContext extends ParserRuleContext {
		public TerminalNode RULES() { return getToken(PlSqlParser.RULES, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return getRuleContext(Model_iterate_clauseContext.class,0);
		}
		public TerminalNode AUTOMATIC() { return getToken(PlSqlParser.AUTOMATIC, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(PlSqlParser.SEQUENTIAL, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_rules_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_rules_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_rules_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_partContext model_rules_part() throws RecognitionException {
		Model_rules_partContext _localctx = new Model_rules_partContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_model_rules_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3326);
			match(RULES);
			setState(3332);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(3327);
				match(UPDATE);
				}
				break;
			case UPSERT:
				{
				setState(3328);
				match(UPSERT);
				setState(3330);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3329);
					match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3336);
			_la = _input.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				setState(3334);
				_la = _input.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(3335);
				match(ORDER);
				}
			}

			setState(3339);
			_la = _input.LA(1);
			if (_la==ITERATE) {
				{
				setState(3338);
				model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_elementContext extends ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_rules_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_rules_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_rules_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_elementContext model_rules_element() throws RecognitionException {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_model_rules_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				{
				setState(3341);
				match(UPDATE);
				}
				break;
			case 2:
				{
				setState(3342);
				match(UPSERT);
				setState(3344);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					setState(3343);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
			setState(3348);
			cell_assignment();
			setState(3350);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3349);
				order_by_clause();
				}
			}

			setState(3352);
			match(EQUALS_OP);
			setState(3353);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_assignmentContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCell_assignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCell_assignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCell_assignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cell_assignmentContext cell_assignment() throws RecognitionException {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_cell_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3355);
			model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_iterate_clauseContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(PlSqlParser.ITERATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Until_partContext until_part() {
			return getRuleContext(Until_partContext.class,0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_iterate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_iterate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_iterate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_iterate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_iterate_clauseContext model_iterate_clause() throws RecognitionException {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_model_iterate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3357);
			match(ITERATE);
			setState(3358);
			match(LEFT_PAREN);
			setState(3359);
			expression();
			setState(3360);
			match(RIGHT_PAREN);
			setState(3362);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3361);
				until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Until_partContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(PlSqlParser.UNTIL, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Until_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_until_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUntil_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUntil_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUntil_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Until_partContext until_part() throws RecognitionException {
		Until_partContext _localctx = new Until_partContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_until_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3364);
			match(UNTIL);
			setState(3365);
			match(LEFT_PAREN);
			setState(3366);
			condition();
			setState(3367);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Order_by_elementsContext> order_by_elements() {
			return getRuleContexts(Order_by_elementsContext.class);
		}
		public Order_by_elementsContext order_by_elements(int i) {
			return getRuleContext(Order_by_elementsContext.class,i);
		}
		public TerminalNode SIBLINGS() { return getToken(PlSqlParser.SIBLINGS, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3369);
			match(ORDER);
			setState(3371);
			_la = _input.LA(1);
			if (_la==SIBLINGS) {
				{
				setState(3370);
				match(SIBLINGS);
				}
			}

			setState(3373);
			match(BY);
			setState(3374);
			order_by_elements();
			setState(3379);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,385,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3375);
					match(COMMA);
					setState(3376);
					order_by_elements();
					}
					} 
				}
				setState(3381);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,385,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(PlSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PlSqlParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOrder_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOrder_by_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOrder_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_elementsContext order_by_elements() throws RecognitionException {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_order_by_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3382);
			expression();
			setState(3384);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
			case 1:
				{
				setState(3383);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(3388);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				{
				setState(3386);
				match(NULLS);
				setState(3387);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public For_update_of_partContext for_update_of_part() {
			return getRuleContext(For_update_of_partContext.class,0);
		}
		public For_update_optionsContext for_update_options() {
			return getRuleContext(For_update_optionsContext.class,0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_for_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3390);
			match(FOR);
			setState(3391);
			match(UPDATE);
			setState(3393);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(3392);
				for_update_of_part();
				}
			}

			setState(3396);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==SKIP_ || _la==WAIT) {
				{
				setState(3395);
				for_update_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_of_partContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public For_update_of_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_of_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_update_of_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_update_of_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_update_of_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_of_partContext for_update_of_part() throws RecognitionException {
		For_update_of_partContext _localctx = new For_update_of_partContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_for_update_of_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3398);
			match(OF);
			setState(3399);
			column_name();
			setState(3404);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3400);
				match(COMMA);
				setState(3401);
				column_name();
				}
				}
				setState(3406);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_optionsContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(PlSqlParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(PlSqlParser.LOCKED, 0); }
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_update_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_update_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_update_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_update_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_optionsContext for_update_options() throws RecognitionException {
		For_update_optionsContext _localctx = new For_update_optionsContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_for_update_options);
		try {
			setState(3412);
			switch (_input.LA(1)) {
			case SKIP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3407);
				match(SKIP_);
				setState(3408);
				match(LOCKED);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3409);
				match(NOWAIT);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3410);
				match(WAIT);
				setState(3411);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3414);
			match(UPDATE);
			setState(3415);
			general_table_ref();
			setState(3416);
			update_set_clause();
			setState(3418);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3417);
				where_clause();
				}
			}

			setState(3421);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(3420);
				static_returning_clause();
				}
			}

			setState(3424);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3423);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_set_clauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public List<Column_based_update_set_clauseContext> column_based_update_set_clause() {
			return getRuleContexts(Column_based_update_set_clauseContext.class);
		}
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return getRuleContext(Column_based_update_set_clauseContext.class,i);
		}
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUpdate_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUpdate_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUpdate_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_set_clauseContext update_set_clause() throws RecognitionException {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_update_set_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3426);
			match(SET);
			setState(3442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				setState(3427);
				column_based_update_set_clause();
				setState(3432);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3428);
					match(COMMA);
					setState(3429);
					column_based_update_set_clause();
					}
					}
					setState(3434);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(3435);
				match(VALUE);
				setState(3436);
				match(LEFT_PAREN);
				setState(3437);
				id();
				setState(3438);
				match(RIGHT_PAREN);
				setState(3439);
				match(EQUALS_OP);
				setState(3440);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_based_update_set_clauseContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_based_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterColumn_based_update_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitColumn_based_update_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitColumn_based_update_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_based_update_set_clauseContext column_based_update_set_clause() throws RecognitionException {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_column_based_update_set_clause);
		int _la;
		try {
			setState(3461);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3444);
				column_name();
				setState(3445);
				match(EQUALS_OP);
				setState(3446);
				expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3448);
				match(LEFT_PAREN);
				setState(3449);
				column_name();
				setState(3454);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3450);
					match(COMMA);
					setState(3451);
					column_name();
					}
					}
					setState(3456);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3457);
				match(RIGHT_PAREN);
				setState(3458);
				match(EQUALS_OP);
				setState(3459);
				subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3463);
			match(DELETE);
			setState(3465);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3464);
				match(FROM);
				}
			}

			setState(3467);
			general_table_ref();
			setState(3469);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3468);
				where_clause();
				}
			}

			setState(3472);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(3471);
				static_returning_clause();
				}
			}

			setState(3475);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3474);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3477);
			match(INSERT);
			setState(3480);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(3478);
				single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(3479);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_table_insertContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSingle_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSingle_table_insert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSingle_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_single_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3482);
			insert_into_clause();
			setState(3488);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(3483);
				values_clause();
				setState(3485);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(3484);
					static_returning_clause();
					}
				}

				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(3487);
				select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3491);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3490);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_insertContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return getRuleContext(Conditional_insert_clauseContext.class,0);
		}
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMulti_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMulti_table_insert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMulti_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_multi_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3500);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
			case 1:
				{
				setState(3493);
				match(ALL);
				setState(3495); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3494);
					multi_table_element();
					}
					}
					setState(3497); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				setState(3499);
				conditional_insert_clause();
				}
				break;
			}
			setState(3502);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_elementContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMulti_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMulti_table_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMulti_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_table_elementContext multi_table_element() throws RecognitionException {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_multi_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3504);
			insert_into_clause();
			setState(3506);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(3505);
				values_clause();
				}
			}

			setState(3509);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3508);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_clauseContext extends ParserRuleContext {
		public List<Conditional_insert_when_partContext> conditional_insert_when_part() {
			return getRuleContexts(Conditional_insert_when_partContext.class);
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return getRuleContext(Conditional_insert_when_partContext.class,i);
		}
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return getRuleContext(Conditional_insert_else_partContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConditional_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConditional_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConditional_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_conditional_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3512);
			_la = _input.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				setState(3511);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(3515); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3514);
				conditional_insert_when_part();
				}
				}
				setState(3517); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(3520);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3519);
				conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConditional_insert_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConditional_insert_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConditional_insert_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_when_partContext conditional_insert_when_part() throws RecognitionException {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_conditional_insert_when_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3522);
			match(WHEN);
			setState(3523);
			condition();
			setState(3524);
			match(THEN);
			setState(3526); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3525);
				multi_table_element();
				}
				}
				setState(3528); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConditional_insert_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConditional_insert_else_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConditional_insert_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_else_partContext conditional_insert_else_part() throws RecognitionException {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_conditional_insert_else_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3530);
			match(ELSE);
			setState(3532); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3531);
				multi_table_element();
				}
				}
				setState(3534); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInsert_into_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInsert_into_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInsert_into_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_insert_into_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3536);
			match(INTO);
			setState(3537);
			general_table_ref();
			setState(3549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				setState(3538);
				match(LEFT_PAREN);
				setState(3539);
				column_name();
				setState(3544);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3540);
					match(COMMA);
					setState(3541);
					column_name();
					}
					}
					setState(3546);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3547);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Collection_assoc_expressionContext collection_assoc_expression() {
			return getRuleContext(Collection_assoc_expressionContext.class,0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitValues_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitValues_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_values_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3551);
			match(VALUES);
			setState(3555);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				setState(3552);
				expression_list();
				}
				break;
			case 2:
				{
				setState(3553);
				record_name();
				}
				break;
			case 3:
				{
				setState(3554);
				collection_assoc_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Selected_tableviewContext selected_tableview() {
			return getRuleContext(Selected_tableviewContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3557);
			match(MERGE);
			setState(3558);
			match(INTO);
			setState(3559);
			tableview_name();
			setState(3561);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (NATIONAL_CHAR_STRING_LIT - 450)) | (1L << (CHAR_STRING - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3560);
				table_alias();
				}
			}

			setState(3563);
			match(USING);
			setState(3564);
			selected_tableview();
			setState(3565);
			match(ON);
			setState(3566);
			match(LEFT_PAREN);
			setState(3567);
			condition();
			setState(3568);
			match(RIGHT_PAREN);
			setState(3577);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				{
				setState(3569);
				merge_update_clause();
				setState(3571);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3570);
					merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(3573);
				merge_insert_clause();
				setState(3575);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3574);
					merge_update_clause();
					}
				}

				}
				break;
			}
			setState(3580);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3579);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public List<Merge_elementContext> merge_element() {
			return getRuleContexts(Merge_elementContext.class);
		}
		public Merge_elementContext merge_element(int i) {
			return getRuleContext(Merge_elementContext.class,i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext merge_update_delete_part() {
			return getRuleContext(Merge_update_delete_partContext.class,0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMerge_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMerge_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMerge_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_merge_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3582);
			match(WHEN);
			setState(3583);
			match(MATCHED);
			setState(3584);
			match(THEN);
			setState(3585);
			match(UPDATE);
			setState(3586);
			match(SET);
			setState(3587);
			merge_element();
			setState(3592);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3588);
				match(COMMA);
				setState(3589);
				merge_element();
				}
				}
				setState(3594);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3596);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3595);
				where_clause();
				}
			}

			setState(3599);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
			case 1:
				{
				setState(3598);
				merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_elementContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMerge_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMerge_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMerge_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_elementContext merge_element() throws RecognitionException {
		Merge_elementContext _localctx = new Merge_elementContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_merge_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3601);
			column_name();
			setState(3602);
			match(EQUALS_OP);
			setState(3603);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_delete_partContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_delete_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMerge_update_delete_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMerge_update_delete_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMerge_update_delete_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_delete_partContext merge_update_delete_part() throws RecognitionException {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_merge_update_delete_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3605);
			match(DELETE);
			setState(3606);
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMerge_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMerge_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMerge_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3608);
			match(WHEN);
			setState(3609);
			match(NOT);
			setState(3610);
			match(MATCHED);
			setState(3611);
			match(THEN);
			setState(3612);
			match(INSERT);
			setState(3624);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3613);
				match(LEFT_PAREN);
				setState(3614);
				column_name();
				setState(3619);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3615);
					match(COMMA);
					setState(3616);
					column_name();
					}
					}
					setState(3621);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3622);
				match(RIGHT_PAREN);
				}
			}

			setState(3626);
			match(VALUES);
			setState(3627);
			expression_list();
			setState(3629);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3628);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_tableviewContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_tableview; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSelected_tableview(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSelected_tableview(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSelected_tableview(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selected_tableviewContext selected_tableview() throws RecognitionException {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_selected_tableview);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3636);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3631);
				tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3632);
				match(LEFT_PAREN);
				setState(3633);
				select_statement();
				setState(3634);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3639);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (NATIONAL_CHAR_STRING_LIT - 450)) | (1L << (CHAR_STRING - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3638);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_statementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(PlSqlParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public List<Lock_table_elementContext> lock_table_element() {
			return getRuleContexts(Lock_table_elementContext.class);
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return getRuleContext(Lock_table_elementContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(PlSqlParser.MODE, 0); }
		public Wait_nowait_partContext wait_nowait_part() {
			return getRuleContext(Wait_nowait_partContext.class,0);
		}
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLock_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLock_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLock_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_table_statementContext lock_table_statement() throws RecognitionException {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_lock_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3641);
			match(LOCK);
			setState(3642);
			match(TABLE);
			setState(3643);
			lock_table_element();
			setState(3648);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3644);
				match(COMMA);
				setState(3645);
				lock_table_element();
				}
				}
				setState(3650);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3651);
			match(IN);
			setState(3652);
			lock_mode();
			setState(3653);
			match(MODE);
			setState(3655);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(3654);
				wait_nowait_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Wait_nowait_partContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wait_nowait_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWait_nowait_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWait_nowait_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWait_nowait_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Wait_nowait_partContext wait_nowait_part() throws RecognitionException {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_wait_nowait_part);
		try {
			setState(3660);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3657);
				match(WAIT);
				setState(3658);
				expression();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3659);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_elementContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLock_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLock_table_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLock_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_table_elementContext lock_table_element() throws RecognitionException {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_lock_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3662);
			tableview_name();
			setState(3664);
			_la = _input.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				setState(3663);
				partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode SHARE() { return getToken(PlSqlParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PlSqlParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLock_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLock_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLock_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_lock_mode);
		int _la;
		try {
			setState(3678);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3666);
				match(ROW);
				setState(3667);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3668);
				match(ROW);
				setState(3669);
				match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3670);
				match(SHARE);
				setState(3672);
				_la = _input.LA(1);
				if (_la==UPDATE) {
					{
					setState(3671);
					match(UPDATE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3674);
				match(SHARE);
				setState(3675);
				match(ROW);
				setState(3676);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3677);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_table_refContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGeneral_table_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGeneral_table_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGeneral_table_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_table_refContext general_table_ref() throws RecognitionException {
		General_table_refContext _localctx = new General_table_refContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_general_table_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3686);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				setState(3680);
				dml_table_expression_clause();
				}
				break;
			case 2:
				{
				setState(3681);
				match(ONLY);
				setState(3682);
				match(LEFT_PAREN);
				setState(3683);
				dml_table_expression_clause();
				setState(3684);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(3688);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_returning_clauseContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStatic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStatic_returning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStatic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Static_returning_clauseContext static_returning_clause() throws RecognitionException {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_static_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3691);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3692);
			expression();
			setState(3697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3693);
				match(COMMA);
				setState(3694);
				expression();
				}
				}
				setState(3699);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3700);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
		public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return getRuleContext(Error_logging_into_partContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return getRuleContext(Error_logging_reject_partContext.class,0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterError_logging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitError_logging_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitError_logging_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_error_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3702);
			match(LOG);
			setState(3703);
			match(ERRORS);
			setState(3705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				setState(3704);
				error_logging_into_part();
				}
				break;
			}
			setState(3708);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
			case 1:
				{
				setState(3707);
				expression_wrapper();
				}
				break;
			}
			setState(3711);
			_la = _input.LA(1);
			if (_la==REJECT) {
				{
				setState(3710);
				error_logging_reject_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_into_partContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_into_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterError_logging_into_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitError_logging_into_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitError_logging_into_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_into_partContext error_logging_into_part() throws RecognitionException {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_error_logging_into_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3713);
			match(INTO);
			setState(3714);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_reject_partContext extends ParserRuleContext {
		public TerminalNode REJECT() { return getToken(PlSqlParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_reject_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterError_logging_reject_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitError_logging_reject_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitError_logging_reject_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_reject_partContext error_logging_reject_part() throws RecognitionException {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_error_logging_reject_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3716);
			match(REJECT);
			setState(3717);
			match(LIMIT);
			setState(3720);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
			case 1:
				{
				setState(3718);
				match(UNLIMITED);
				}
				break;
			case 2:
				{
				setState(3719);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_table_expression_clauseContext extends ParserRuleContext {
		public Table_collection_expressionContext table_collection_expression() {
			return getRuleContext(Table_collection_expressionContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDml_table_expression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDml_table_expression_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDml_table_expression_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_dml_table_expression_clause);
		int _la;
		try {
			setState(3734);
			switch (_input.LA(1)) {
			case TABLE:
			case THE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3722);
				table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3723);
				match(LEFT_PAREN);
				setState(3724);
				select_statement();
				setState(3726);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3725);
					subquery_restriction_clause();
					}
				}

				setState(3728);
				match(RIGHT_PAREN);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(3730);
				tableview_name();
				setState(3732);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
				case 1:
					{
					setState(3731);
					sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_collection_expressionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode THE() { return getToken(PlSqlParser.THE, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_collection_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_collection_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_collection_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_collection_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_collection_expressionContext table_collection_expression() throws RecognitionException {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_table_collection_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3736);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(3749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				{
				setState(3737);
				match(LEFT_PAREN);
				setState(3738);
				subquery();
				setState(3739);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(3741);
				match(LEFT_PAREN);
				setState(3742);
				expression();
				setState(3743);
				match(RIGHT_PAREN);
				setState(3747);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
				case 1:
					{
					setState(3744);
					match(LEFT_PAREN);
					setState(3745);
					match(PLUS_SIGN);
					setState(3746);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_restriction_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode CHECK() { return getToken(PlSqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PlSqlParser.OPTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_restriction_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSubquery_restriction_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSubquery_restriction_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSubquery_restriction_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_restriction_clauseContext subquery_restriction_clause() throws RecognitionException {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_subquery_restriction_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3751);
			match(WITH);
			setState(3760);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(3752);
				match(READ);
				setState(3753);
				match(ONLY);
				}
				break;
			case CHECK:
				{
				setState(3754);
				match(CHECK);
				setState(3755);
				match(OPTION);
				setState(3758);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(3756);
					match(CONSTRAINT);
					setState(3757);
					constraint_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_clauseContext extends ParserRuleContext {
		public TerminalNode SAMPLE() { return getToken(PlSqlParser.SAMPLE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BLOCK() { return getToken(PlSqlParser.BLOCK, 0); }
		public Seed_partContext seed_part() {
			return getRuleContext(Seed_partContext.class,0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSample_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSample_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3762);
			match(SAMPLE);
			setState(3764);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(3763);
				match(BLOCK);
				}
			}

			setState(3766);
			match(LEFT_PAREN);
			setState(3767);
			expression();
			setState(3770);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3768);
				match(COMMA);
				setState(3769);
				expression();
				}
			}

			setState(3772);
			match(RIGHT_PAREN);
			setState(3774);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				setState(3773);
				seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seed_partContext extends ParserRuleContext {
		public TerminalNode SEED() { return getToken(PlSqlParser.SEED, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Seed_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seed_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSeed_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSeed_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSeed_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seed_partContext seed_part() throws RecognitionException {
		Seed_partContext _localctx = new Seed_partContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_seed_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3776);
			match(SEED);
			setState(3777);
			match(LEFT_PAREN);
			setState(3778);
			expression();
			setState(3779);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_expressionContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode PERCENT_NOTFOUND() { return getToken(PlSqlParser.PERCENT_NOTFOUND, 0); }
		public TerminalNode PERCENT_FOUND() { return getToken(PlSqlParser.PERCENT_FOUND, 0); }
		public TerminalNode PERCENT_ISOPEN() { return getToken(PlSqlParser.PERCENT_ISOPEN, 0); }
		public TerminalNode PERCENT_ROWCOUNT() { return getToken(PlSqlParser.PERCENT_ROWCOUNT, 0); }
		public Sql_cursor_expressionContext sql_cursor_expression() {
			return getRuleContext(Sql_cursor_expressionContext.class,0);
		}
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCursor_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCursor_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_expressionContext cursor_expression() throws RecognitionException {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_cursor_expression);
		try {
			setState(3799);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3781);
				match(CURSOR);
				setState(3782);
				match(LEFT_PAREN);
				setState(3783);
				subquery();
				setState(3784);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3786);
				cursor_name();
				setState(3787);
				match(PERCENT_NOTFOUND);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3789);
				cursor_name();
				setState(3790);
				match(PERCENT_FOUND);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3792);
				cursor_name();
				setState(3793);
				match(PERCENT_ISOPEN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3795);
				cursor_name();
				setState(3796);
				match(PERCENT_ROWCOUNT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3798);
				sql_cursor_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_cursor_expressionContext extends ParserRuleContext {
		public TerminalNode SQL_PERCENT_ROWCOUNT() { return getToken(PlSqlParser.SQL_PERCENT_ROWCOUNT, 0); }
		public Sql_cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSql_cursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSql_cursor_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSql_cursor_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_cursor_expressionContext sql_cursor_expression() throws RecognitionException {
		Sql_cursor_expressionContext _localctx = new Sql_cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_sql_cursor_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3801);
			match(SQL_PERCENT_ROWCOUNT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_assoc_expressionContext extends ParserRuleContext {
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public Collection_assoc_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_assoc_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCollection_assoc_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCollection_assoc_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCollection_assoc_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collection_assoc_expressionContext collection_assoc_expression() throws RecognitionException {
		Collection_assoc_expressionContext _localctx = new Collection_assoc_expressionContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_collection_assoc_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3803);
			collection_name();
			setState(3810);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,456,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3804);
					match(LEFT_PAREN);
					setState(3805);
					expression();
					setState(3806);
					match(RIGHT_PAREN);
					}
					} 
				}
				setState(3812);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,456,_ctx);
			}
			setState(3815);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				{
				setState(3813);
				match(PERIOD);
				setState(3814);
				variable_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_type_expressionContext extends ParserRuleContext {
		public Collection_assoc_expressionContext collection_assoc_expression() {
			return getRuleContext(Collection_assoc_expressionContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public TerminalNode EXISTS() { return getToken(PlSqlParser.EXISTS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode PRIOR() { return getToken(PlSqlParser.PRIOR, 0); }
		public TerminalNode NEXT() { return getToken(PlSqlParser.NEXT, 0); }
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public Collection_type_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_type_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCollection_type_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCollection_type_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCollection_type_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collection_type_expressionContext collection_type_expression() throws RecognitionException {
		Collection_type_expressionContext _localctx = new Collection_type_expressionContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_collection_type_expression);
		try {
			setState(3855);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3817);
				collection_assoc_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3818);
				collection_assoc_expression();
				setState(3819);
				match(PERIOD);
				setState(3820);
				match(FIRST);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3822);
				collection_assoc_expression();
				setState(3823);
				match(PERIOD);
				setState(3824);
				match(LAST);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3826);
				collection_assoc_expression();
				setState(3827);
				match(PERIOD);
				setState(3828);
				match(EXISTS);
				setState(3829);
				match(LEFT_PAREN);
				setState(3830);
				expression();
				setState(3831);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3833);
				collection_assoc_expression();
				setState(3834);
				match(PERIOD);
				setState(3835);
				match(PRIOR);
				setState(3836);
				match(LEFT_PAREN);
				setState(3837);
				expression();
				setState(3838);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3840);
				collection_assoc_expression();
				setState(3841);
				match(PERIOD);
				setState(3842);
				match(NEXT);
				setState(3843);
				match(LEFT_PAREN);
				setState(3844);
				expression();
				setState(3845);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3847);
				collection_assoc_expression();
				setState(3848);
				match(PERIOD);
				setState(3849);
				match(COUNT);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3851);
				collection_assoc_expression();
				setState(3852);
				match(PERIOD);
				setState(3853);
				match(LIMIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExpression_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExpression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3857);
			match(LEFT_PAREN);
			setState(3859);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MOD - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PRIOR - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TO_CHAR - 386)) | (1L << (TO_NUMBER - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (NATIONAL_CHAR_STRING_LIT - 450)) | (1L << (UNSIGNED_INTEGER - 450)) | (1L << (APPROXIMATE_NUM_LIT - 450)) | (1L << (CHAR_STRING - 450)) | (1L << (DELIMITED_ID - 450)) | (1L << (LEFT_PAREN - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)))) != 0) || _la==REGULAR_ID) {
				{
				setState(3858);
				expression();
				}
			}

			setState(3865);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3861);
				match(COMMA);
				setState(3862);
				expression();
				}
				}
				setState(3867);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3868);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3870);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_wrapperContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Condition_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCondition_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCondition_wrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCondition_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Condition_wrapperContext condition_wrapper() throws RecognitionException {
		Condition_wrapperContext _localctx = new Condition_wrapperContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_condition_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3872);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Logical_and_expressionContext logical_and_expression() {
			return getRuleContext(Logical_and_expressionContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3874);
			logical_and_expression();
			}
			setState(3879);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,461,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3875);
					match(OR);
					setState(3876);
					expression();
					}
					} 
				}
				setState(3881);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,461,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_wrapperContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExpression_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExpression_wrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExpression_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_wrapperContext expression_wrapper() throws RecognitionException {
		Expression_wrapperContext _localctx = new Expression_wrapperContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_expression_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3882);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logical_and_expressionContext extends ParserRuleContext {
		public List<Negated_expressionContext> negated_expression() {
			return getRuleContexts(Negated_expressionContext.class);
		}
		public Negated_expressionContext negated_expression(int i) {
			return getRuleContext(Negated_expressionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(PlSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(PlSqlParser.AND, i);
		}
		public Logical_and_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_and_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLogical_and_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLogical_and_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLogical_and_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Logical_and_expressionContext logical_and_expression() throws RecognitionException {
		Logical_and_expressionContext _localctx = new Logical_and_expressionContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_logical_and_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3884);
			negated_expression();
			setState(3889);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,462,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3885);
					match(AND);
					setState(3886);
					negated_expression();
					}
					} 
				}
				setState(3891);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,462,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Negated_expressionContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Negated_expressionContext negated_expression() {
			return getRuleContext(Negated_expressionContext.class,0);
		}
		public Equality_expressionContext equality_expression() {
			return getRuleContext(Equality_expressionContext.class,0);
		}
		public Negated_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_negated_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNegated_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNegated_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNegated_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Negated_expressionContext negated_expression() throws RecognitionException {
		Negated_expressionContext _localctx = new Negated_expressionContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_negated_expression);
		try {
			setState(3895);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3892);
				match(NOT);
				setState(3893);
				negated_expression();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MOD:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_NUMBER:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3894);
				equality_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Equality_expressionContext extends ParserRuleContext {
		public Collection_type_expressionContext collection_type_expression() {
			return getRuleContext(Collection_type_expressionContext.class,0);
		}
		public Multiset_expressionContext multiset_expression() {
			return getRuleContext(Multiset_expressionContext.class,0);
		}
		public List<TerminalNode> IS() { return getTokens(PlSqlParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(PlSqlParser.IS, i);
		}
		public List<TerminalNode> NULL() { return getTokens(PlSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PlSqlParser.NULL, i);
		}
		public List<TerminalNode> NAN() { return getTokens(PlSqlParser.NAN); }
		public TerminalNode NAN(int i) {
			return getToken(PlSqlParser.NAN, i);
		}
		public List<TerminalNode> PRESENT() { return getTokens(PlSqlParser.PRESENT); }
		public TerminalNode PRESENT(int i) {
			return getToken(PlSqlParser.PRESENT, i);
		}
		public List<TerminalNode> INFINITE() { return getTokens(PlSqlParser.INFINITE); }
		public TerminalNode INFINITE(int i) {
			return getToken(PlSqlParser.INFINITE, i);
		}
		public List<TerminalNode> A_LETTER() { return getTokens(PlSqlParser.A_LETTER); }
		public TerminalNode A_LETTER(int i) {
			return getToken(PlSqlParser.A_LETTER, i);
		}
		public List<TerminalNode> SET() { return getTokens(PlSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(PlSqlParser.SET, i);
		}
		public List<TerminalNode> EMPTY() { return getTokens(PlSqlParser.EMPTY); }
		public TerminalNode EMPTY(int i) {
			return getToken(PlSqlParser.EMPTY, i);
		}
		public List<TerminalNode> OF() { return getTokens(PlSqlParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(PlSqlParser.OF, i);
		}
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public List<TerminalNode> NOT() { return getTokens(PlSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(PlSqlParser.NOT, i);
		}
		public List<TerminalNode> TYPE() { return getTokens(PlSqlParser.TYPE); }
		public TerminalNode TYPE(int i) {
			return getToken(PlSqlParser.TYPE, i);
		}
		public List<TerminalNode> ONLY() { return getTokens(PlSqlParser.ONLY); }
		public TerminalNode ONLY(int i) {
			return getToken(PlSqlParser.ONLY, i);
		}
		public Cursor_expressionContext cursor_expression() {
			return getRuleContext(Cursor_expressionContext.class,0);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equality_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterEquality_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitEquality_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitEquality_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Equality_expressionContext equality_expression() throws RecognitionException {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_equality_expression);
		int _la;
		try {
			int _alt;
			setState(3936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3897);
				collection_type_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3898);
				multiset_expression();
				setState(3932);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,469,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3899);
						match(IS);
						setState(3901);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(3900);
							match(NOT);
							}
						}

						setState(3928);
						switch (_input.LA(1)) {
						case NULL:
							{
							setState(3903);
							match(NULL);
							}
							break;
						case NAN:
							{
							setState(3904);
							match(NAN);
							}
							break;
						case PRESENT:
							{
							setState(3905);
							match(PRESENT);
							}
							break;
						case INFINITE:
							{
							setState(3906);
							match(INFINITE);
							}
							break;
						case A_LETTER:
							{
							setState(3907);
							match(A_LETTER);
							setState(3908);
							match(SET);
							}
							break;
						case EMPTY:
							{
							setState(3909);
							match(EMPTY);
							}
							break;
						case OF:
							{
							setState(3910);
							match(OF);
							setState(3912);
							_la = _input.LA(1);
							if (_la==TYPE) {
								{
								setState(3911);
								match(TYPE);
								}
							}

							setState(3914);
							match(LEFT_PAREN);
							setState(3916);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
							case 1:
								{
								setState(3915);
								match(ONLY);
								}
								break;
							}
							setState(3918);
							type_spec();
							setState(3923);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==COMMA) {
								{
								{
								setState(3919);
								match(COMMA);
								setState(3920);
								type_spec();
								}
								}
								setState(3925);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							setState(3926);
							match(RIGHT_PAREN);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						} 
					}
					setState(3934);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,469,_ctx);
				}
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3935);
				cursor_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_partContext extends ParserRuleContext {
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Collection_assoc_expressionContext collection_assoc_expression() {
			return getRuleContext(Collection_assoc_expressionContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Multiset_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMultiset_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMultiset_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMultiset_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiset_partContext multiset_part() throws RecognitionException {
		Multiset_partContext _localctx = new Multiset_partContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_multiset_part);
		try {
			setState(3941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3938);
				collection_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3939);
				collection_assoc_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3940);
				function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_expressionContext extends ParserRuleContext {
		public List<Multiset_partContext> multiset_part() {
			return getRuleContexts(Multiset_partContext.class);
		}
		public Multiset_partContext multiset_part(int i) {
			return getRuleContext(Multiset_partContext.class,i);
		}
		public List<TerminalNode> MULTISET() { return getTokens(PlSqlParser.MULTISET); }
		public TerminalNode MULTISET(int i) {
			return getToken(PlSqlParser.MULTISET, i);
		}
		public List<TerminalNode> EXCEPT() { return getTokens(PlSqlParser.EXCEPT); }
		public TerminalNode EXCEPT(int i) {
			return getToken(PlSqlParser.EXCEPT, i);
		}
		public List<TerminalNode> INTERSECT() { return getTokens(PlSqlParser.INTERSECT); }
		public TerminalNode INTERSECT(int i) {
			return getToken(PlSqlParser.INTERSECT, i);
		}
		public List<TerminalNode> UNION() { return getTokens(PlSqlParser.UNION); }
		public TerminalNode UNION(int i) {
			return getToken(PlSqlParser.UNION, i);
		}
		public List<TerminalNode> ALL() { return getTokens(PlSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(PlSqlParser.ALL, i);
		}
		public List<TerminalNode> DISTINCT() { return getTokens(PlSqlParser.DISTINCT); }
		public TerminalNode DISTINCT(int i) {
			return getToken(PlSqlParser.DISTINCT, i);
		}
		public Relational_expressionContext relational_expression() {
			return getRuleContext(Relational_expressionContext.class,0);
		}
		public Multiset_typeContext multiset_type() {
			return getRuleContext(Multiset_typeContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMultiset_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMultiset_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMultiset_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiset_expressionContext multiset_expression() throws RecognitionException {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_multiset_expression);
		int _la;
		try {
			setState(3966);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3943);
				multiset_part();
				setState(3950); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3944);
					match(MULTISET);
					setState(3945);
					_la = _input.LA(1);
					if ( !(_la==EXCEPT || _la==INTERSECT || _la==UNION) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(3947);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(3946);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
					}

					setState(3949);
					multiset_part();
					}
					}
					setState(3952); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==MULTISET );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(3954);
				relational_expression();
				setState(3964);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
				case 1:
					{
					setState(3956);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(3955);
						match(NOT);
						}
					}

					setState(3958);
					multiset_type();
					setState(3960);
					_la = _input.LA(1);
					if (_la==OF) {
						{
						setState(3959);
						match(OF);
						}
					}

					setState(3962);
					concatenation();
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PlSqlParser.SUBMULTISET, 0); }
		public Multiset_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMultiset_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMultiset_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMultiset_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiset_typeContext multiset_type() throws RecognitionException {
		Multiset_typeContext _localctx = new Multiset_typeContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_multiset_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3968);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_expressionContext extends ParserRuleContext {
		public List<Compound_expressionContext> compound_expression() {
			return getRuleContexts(Compound_expressionContext.class);
		}
		public Compound_expressionContext compound_expression(int i) {
			return getRuleContext(Compound_expressionContext.class,i);
		}
		public List<Not_equal_opContext> not_equal_op() {
			return getRuleContexts(Not_equal_opContext.class);
		}
		public Not_equal_opContext not_equal_op(int i) {
			return getRuleContext(Not_equal_opContext.class,i);
		}
		public List<Less_than_or_equals_opContext> less_than_or_equals_op() {
			return getRuleContexts(Less_than_or_equals_opContext.class);
		}
		public Less_than_or_equals_opContext less_than_or_equals_op(int i) {
			return getRuleContext(Less_than_or_equals_opContext.class,i);
		}
		public List<Greater_than_or_equals_opContext> greater_than_or_equals_op() {
			return getRuleContexts(Greater_than_or_equals_opContext.class);
		}
		public Greater_than_or_equals_opContext greater_than_or_equals_op(int i) {
			return getRuleContext(Greater_than_or_equals_opContext.class,i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRelational_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRelational_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRelational_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_expressionContext relational_expression() throws RecognitionException {
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_relational_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3970);
			compound_expression();
			setState(3982);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3977);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
					case 1:
						{
						setState(3971);
						match(EQUALS_OP);
						}
						break;
					case 2:
						{
						setState(3972);
						not_equal_op();
						}
						break;
					case 3:
						{
						setState(3973);
						match(LESS_THAN_OP);
						}
						break;
					case 4:
						{
						setState(3974);
						match(GREATER_THAN_OP);
						}
						break;
					case 5:
						{
						setState(3975);
						less_than_or_equals_op();
						}
						break;
					case 6:
						{
						setState(3976);
						greater_than_or_equals_op();
						}
						break;
					}
					setState(3979);
					compound_expression();
					}
					} 
				}
				setState(3984);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_expressionContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public In_elementsContext in_elements() {
			return getRuleContext(In_elementsContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public Between_elementsContext between_elements() {
			return getRuleContext(Between_elementsContext.class,0);
		}
		public Like_typeContext like_type() {
			return getRuleContext(Like_typeContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Like_escape_partContext like_escape_part() {
			return getRuleContext(Like_escape_partContext.class,0);
		}
		public Compound_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCompound_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCompound_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCompound_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_expressionContext compound_expression() throws RecognitionException {
		Compound_expressionContext _localctx = new Compound_expressionContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_compound_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3985);
			concatenation();
			setState(4000);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
			case 1:
				{
				setState(3987);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3986);
					match(NOT);
					}
				}

				setState(3998);
				switch (_input.LA(1)) {
				case IN:
					{
					setState(3989);
					match(IN);
					setState(3990);
					in_elements();
					}
					break;
				case BETWEEN:
					{
					setState(3991);
					match(BETWEEN);
					setState(3992);
					between_elements();
					}
					break;
				case LIKE:
				case LIKE2:
				case LIKE4:
				case LIKEC:
					{
					setState(3993);
					like_type();
					setState(3994);
					concatenation();
					setState(3996);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
					case 1:
						{
						setState(3995);
						like_escape_part();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_typeContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(PlSqlParser.LIKE, 0); }
		public TerminalNode LIKEC() { return getToken(PlSqlParser.LIKEC, 0); }
		public TerminalNode LIKE2() { return getToken(PlSqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(PlSqlParser.LIKE4, 0); }
		public Like_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLike_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLike_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLike_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_typeContext like_type() throws RecognitionException {
		Like_typeContext _localctx = new Like_typeContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_like_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4002);
			_la = _input.LA(1);
			if ( !(((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (LIKE - 209)) | (1L << (LIKE2 - 209)) | (1L << (LIKE4 - 209)) | (1L << (LIKEC - 209)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_escape_partContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(PlSqlParser.ESCAPE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Like_escape_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_escape_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLike_escape_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLike_escape_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLike_escape_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_escape_partContext like_escape_part() throws RecognitionException {
		Like_escape_partContext _localctx = new Like_escape_partContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_like_escape_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4004);
			match(ESCAPE);
			setState(4005);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_elementsContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public In_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterIn_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitIn_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitIn_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_elementsContext in_elements() throws RecognitionException {
		In_elementsContext _localctx = new In_elementsContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_in_elements);
		int _la;
		try {
			setState(4025);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4007);
				match(LEFT_PAREN);
				setState(4008);
				subquery();
				setState(4009);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4011);
				match(LEFT_PAREN);
				setState(4012);
				concatenation_wrapper();
				setState(4017);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4013);
					match(COMMA);
					setState(4014);
					concatenation_wrapper();
					}
					}
					setState(4019);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4020);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4022);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4023);
				bind_variable();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4024);
				general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_elementsContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBetween_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBetween_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBetween_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_elementsContext between_elements() throws RecognitionException {
		Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_between_elements);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4027);
			concatenation();
			setState(4028);
			match(AND);
			setState(4029);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcatenationContext extends ParserRuleContext {
		public List<Additive_expressionContext> additive_expression() {
			return getRuleContexts(Additive_expressionContext.class);
		}
		public Additive_expressionContext additive_expression(int i) {
			return getRuleContext(Additive_expressionContext.class,i);
		}
		public List<Concatenation_opContext> concatenation_op() {
			return getRuleContexts(Concatenation_opContext.class);
		}
		public Concatenation_opContext concatenation_op(int i) {
			return getRuleContext(Concatenation_opContext.class,i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConcatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConcatenation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConcatenation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConcatenationContext concatenation() throws RecognitionException {
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_concatenation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4031);
			additive_expression();
			setState(4037);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,486,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4032);
					concatenation_op();
					setState(4033);
					additive_expression();
					}
					} 
				}
				setState(4039);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,486,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Concatenation_wrapperContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Concatenation_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConcatenation_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConcatenation_wrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConcatenation_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Concatenation_wrapperContext concatenation_wrapper() throws RecognitionException {
		Concatenation_wrapperContext _localctx = new Concatenation_wrapperContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_concatenation_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4040);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Additive_expressionContext extends ParserRuleContext {
		public List<Multiply_expressionContext> multiply_expression() {
			return getRuleContexts(Multiply_expressionContext.class);
		}
		public Multiply_expressionContext multiply_expression(int i) {
			return getRuleContext(Multiply_expressionContext.class,i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_additive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAdditive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAdditive_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAdditive_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Additive_expressionContext additive_expression() throws RecognitionException {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_additive_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4042);
			multiply_expression();
			setState(4047);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,487,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4043);
					_la = _input.LA(1);
					if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(4044);
					multiply_expression();
					}
					} 
				}
				setState(4049);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,487,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiply_expressionContext extends ParserRuleContext {
		public List<Datetime_expressionContext> datetime_expression() {
			return getRuleContexts(Datetime_expressionContext.class);
		}
		public Datetime_expressionContext datetime_expression(int i) {
			return getRuleContext(Datetime_expressionContext.class,i);
		}
		public List<TerminalNode> MOD() { return getTokens(PlSqlParser.MOD); }
		public TerminalNode MOD(int i) {
			return getToken(PlSqlParser.MOD, i);
		}
		public Multiply_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiply_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMultiply_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMultiply_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMultiply_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiply_expressionContext multiply_expression() throws RecognitionException {
		Multiply_expressionContext _localctx = new Multiply_expressionContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_multiply_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4050);
			datetime_expression();
			setState(4055);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,488,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4051);
					_la = _input.LA(1);
					if ( !(_la==MOD || _la==ASTERISK || _la==SOLIDUS) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(4052);
					datetime_expression();
					}
					} 
				}
				setState(4057);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,488,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_expressionContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Datetime_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDatetime_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDatetime_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDatetime_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_expressionContext datetime_expression() throws RecognitionException {
		Datetime_expressionContext _localctx = new Datetime_expressionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_datetime_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4058);
			model_expression();
			setState(4067);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				{
				setState(4059);
				match(AT);
				setState(4064);
				switch (_input.LA(1)) {
				case LOCAL:
					{
					setState(4060);
					match(LOCAL);
					}
					break;
				case TIME:
					{
					setState(4061);
					match(TIME);
					setState(4062);
					match(ZONE);
					setState(4063);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(4066);
				interval_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_expressionContext extends ParserRuleContext {
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInterval_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInterval_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInterval_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_interval_expression);
		int _la;
		try {
			setState(4093);
			switch (_input.LA(1)) {
			case DAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4069);
				match(DAY);
				setState(4074);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4070);
					match(LEFT_PAREN);
					setState(4071);
					concatenation_wrapper();
					setState(4072);
					match(RIGHT_PAREN);
					}
				}

				setState(4076);
				match(TO);
				setState(4077);
				match(SECOND);
				setState(4082);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
				case 1:
					{
					setState(4078);
					match(LEFT_PAREN);
					setState(4079);
					concatenation_wrapper();
					setState(4080);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4084);
				match(YEAR);
				setState(4089);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4085);
					match(LEFT_PAREN);
					setState(4086);
					concatenation_wrapper();
					setState(4087);
					match(RIGHT_PAREN);
					}
				}

				setState(4091);
				match(TO);
				setState(4092);
				match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		public Model_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_expressionContext model_expression() throws RecognitionException {
		Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_model_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4095);
			unary_expression();
			setState(4100);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
			case 1:
				{
				setState(4096);
				match(LEFT_BRACKET);
				setState(4097);
				model_expression_element();
				setState(4098);
				match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expression_elementContext extends ParserRuleContext {
		public List<TerminalNode> ANY() { return getTokens(PlSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(PlSqlParser.ANY, i);
		}
		public List<Condition_wrapperContext> condition_wrapper() {
			return getRuleContexts(Condition_wrapperContext.class);
		}
		public Condition_wrapperContext condition_wrapper(int i) {
			return getRuleContext(Condition_wrapperContext.class,i);
		}
		public List<Single_column_for_loopContext> single_column_for_loop() {
			return getRuleContexts(Single_column_for_loopContext.class);
		}
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return getRuleContext(Single_column_for_loopContext.class,i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterModel_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitModel_expression_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitModel_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_expression_elementContext model_expression_element() throws RecognitionException {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_model_expression_element);
		int _la;
		try {
			setState(4125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4104);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
				case 1:
					{
					setState(4102);
					match(ANY);
					}
					break;
				case 2:
					{
					setState(4103);
					condition_wrapper();
					}
					break;
				}
				setState(4113);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4106);
					match(COMMA);
					setState(4109);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
					case 1:
						{
						setState(4107);
						match(ANY);
						}
						break;
					case 2:
						{
						setState(4108);
						condition_wrapper();
						}
						break;
					}
					}
					}
					setState(4115);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4116);
				single_column_for_loop();
				setState(4121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4117);
					match(COMMA);
					setState(4118);
					single_column_for_loop();
					}
					}
					setState(4123);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4124);
				multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_column_for_loopContext extends ParserRuleContext {
		public ExpressionContext ex1;
		public ExpressionContext ex2;
		public ExpressionContext ex3;
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public For_increment_decrement_typeContext for_increment_decrement_type() {
			return getRuleContext(For_increment_decrement_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public For_like_partContext for_like_part() {
			return getRuleContext(For_like_partContext.class,0);
		}
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSingle_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSingle_column_for_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSingle_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_single_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4127);
			match(FOR);
			setState(4128);
			column_name();
			setState(4141);
			switch (_input.LA(1)) {
			case IN:
				{
				setState(4129);
				match(IN);
				setState(4130);
				expression_list();
				}
				break;
			case FROM:
			case LIKE:
				{
				setState(4132);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(4131);
					for_like_part();
					}
				}

				setState(4134);
				match(FROM);
				setState(4135);
				((Single_column_for_loopContext)_localctx).ex1 = expression();
				setState(4136);
				match(TO);
				setState(4137);
				((Single_column_for_loopContext)_localctx).ex2 = expression();
				setState(4138);
				for_increment_decrement_type();
				setState(4139);
				((Single_column_for_loopContext)_localctx).ex3 = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_like_partContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(PlSqlParser.LIKE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_like_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_like_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_like_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_like_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_like_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_like_partContext for_like_part() throws RecognitionException {
		For_like_partContext _localctx = new For_like_partContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_for_like_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4143);
			match(LIKE);
			setState(4144);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_increment_decrement_typeContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode DECREMENT() { return getToken(PlSqlParser.DECREMENT, 0); }
		public For_increment_decrement_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_increment_decrement_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFor_increment_decrement_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFor_increment_decrement_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFor_increment_decrement_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_increment_decrement_typeContext for_increment_decrement_type() throws RecognitionException {
		For_increment_decrement_typeContext _localctx = new For_increment_decrement_typeContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_for_increment_decrement_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4146);
			_la = _input.LA(1);
			if ( !(_la==DECREMENT || _la==INCREMENT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_column_for_loopContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMulti_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMulti_column_for_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMulti_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_multi_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4148);
			match(FOR);
			setState(4149);
			match(LEFT_PAREN);
			setState(4150);
			column_name();
			setState(4155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4151);
				match(COMMA);
				setState(4152);
				column_name();
				}
				}
				setState(4157);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4158);
			match(RIGHT_PAREN);
			setState(4159);
			match(IN);
			setState(4160);
			match(LEFT_PAREN);
			setState(4173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
			case 1:
				{
				setState(4161);
				subquery();
				}
				break;
			case 2:
				{
				setState(4162);
				match(LEFT_PAREN);
				setState(4163);
				expression_list();
				setState(4168);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4164);
					match(COMMA);
					setState(4165);
					expression_list();
					}
					}
					setState(4170);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4171);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4175);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode PRIOR() { return getToken(PlSqlParser.PRIOR, 0); }
		public TerminalNode CONNECT_BY_ROOT() { return getToken(PlSqlParser.CONNECT_BY_ROOT, 0); }
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Quantified_expressionContext quantified_expression() {
			return getRuleContext(Quantified_expressionContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUnary_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUnary_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUnary_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_unary_expression);
		try {
			setState(4195);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4177);
				match(MINUS_SIGN);
				setState(4178);
				unary_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4179);
				match(PLUS_SIGN);
				setState(4180);
				unary_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4181);
				match(PRIOR);
				setState(4182);
				unary_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4183);
				match(CONNECT_BY_ROOT);
				setState(4184);
				unary_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4185);
				match(NEW);
				setState(4186);
				unary_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4187);
				match(DISTINCT);
				setState(4188);
				unary_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4189);
				match(ALL);
				setState(4190);
				unary_expression();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4191);
				case_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4192);
				quantified_expression();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4193);
				standard_function();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4194);
				atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_statementContext extends ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return getRuleContext(Searched_case_statementContext.class,0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return getRuleContext(Simple_case_statementContext.class,0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCase_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCase_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCase_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_case_statement);
		try {
			setState(4199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4197);
				searched_case_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4198);
				simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(PlSqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PlSqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Simple_case_when_partContext> simple_case_when_part() {
			return getRuleContexts(Simple_case_when_partContext.class);
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return getRuleContext(Simple_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSimple_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSimple_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSimple_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_simple_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4202);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4201);
				label_name();
				}
			}

			setState(4204);
			((Simple_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4205);
			expression();
			setState(4207); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4206);
				simple_case_when_part();
				}
				}
				setState(4209); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4212);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4211);
				case_else_part();
				}
			}

			setState(4214);
			match(END);
			setState(4216);
			_la = _input.LA(1);
			if (_la==CASE) {
				{
				setState(4215);
				match(CASE);
				}
			}

			setState(4219);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
			case 1:
				{
				setState(4218);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSimple_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSimple_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSimple_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_simple_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4221);
			match(WHEN);
			setState(4222);
			expression_wrapper();
			setState(4223);
			match(THEN);
			setState(4226);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
			case 1:
				{
				setState(4224);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4225);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(PlSqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PlSqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Searched_case_when_partContext> searched_case_when_part() {
			return getRuleContexts(Searched_case_when_partContext.class);
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return getRuleContext(Searched_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSearched_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSearched_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSearched_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_searched_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4229);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4228);
				label_name();
				}
			}

			setState(4231);
			((Searched_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4233); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4232);
				searched_case_when_part();
				}
				}
				setState(4235); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4238);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4237);
				case_else_part();
				}
			}

			setState(4240);
			match(END);
			setState(4242);
			_la = _input.LA(1);
			if (_la==CASE) {
				{
				setState(4241);
				match(CASE);
				}
			}

			setState(4245);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
			case 1:
				{
				setState(4244);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSearched_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSearched_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSearched_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_searched_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4247);
			match(WHEN);
			setState(4248);
			condition_wrapper();
			setState(4249);
			match(THEN);
			setState(4252);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
			case 1:
				{
				setState(4250);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4251);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCase_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCase_else_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCase_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_else_partContext case_else_part() throws RecognitionException {
		Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_case_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4254);
			match(ELSE);
			setState(4257);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
			case 1:
				{
				setState(4255);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4256);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AtomContext extends ParserRuleContext {
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_or_vectorContext expression_or_vector() {
			return getRuleContext(Expression_or_vectorContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public Collection_type_expressionContext collection_type_expression() {
			return getRuleContext(Collection_type_expressionContext.class,0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_atom);
		try {
			int _alt;
			setState(4280);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4259);
				table_element();
				setState(4260);
				outer_join_sign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4262);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4263);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4264);
				general_element();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4265);
				match(LEFT_PAREN);
				setState(4277);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
				case 1:
					{
					setState(4266);
					subquery();
					setState(4267);
					match(RIGHT_PAREN);
					setState(4271);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,521,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(4268);
							subquery_operation_part();
							}
							} 
						}
						setState(4273);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,521,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(4274);
					expression_or_vector();
					setState(4275);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4279);
				collection_type_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_or_vectorContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Vector_exprContext vector_expr() {
			return getRuleContext(Vector_exprContext.class,0);
		}
		public Expression_or_vectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_or_vector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExpression_or_vector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExpression_or_vector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExpression_or_vector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_or_vectorContext expression_or_vector() throws RecognitionException {
		Expression_or_vectorContext _localctx = new Expression_or_vectorContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_expression_or_vector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4282);
			expression();
			setState(4284);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4283);
				vector_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vector_exprContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Vector_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vector_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterVector_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitVector_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitVector_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vector_exprContext vector_expr() throws RecognitionException {
		Vector_exprContext _localctx = new Vector_exprContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_vector_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4286);
			match(COMMA);
			setState(4287);
			expression();
			setState(4292);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4288);
				match(COMMA);
				setState(4289);
				expression();
				}
				}
				setState(4294);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_expressionContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(PlSqlParser.SOME, 0); }
		public TerminalNode EXISTS() { return getToken(PlSqlParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterQuantified_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitQuantified_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitQuantified_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quantified_expressionContext quantified_expression() throws RecognitionException {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_quantified_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4295);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(4311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				{
				setState(4296);
				match(LEFT_PAREN);
				setState(4297);
				subquery();
				setState(4298);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4300);
				match(LEFT_PAREN);
				setState(4301);
				expression();
				setState(4306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4302);
					match(COMMA);
					setState(4303);
					expression();
					}
					}
					setState(4308);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4309);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Plsql_type_conversionContext extends ParserRuleContext {
		public TerminalNode TO_CHAR() { return getToken(PlSqlParser.TO_CHAR, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode TO_NUMBER() { return getToken(PlSqlParser.TO_NUMBER, 0); }
		public Plsql_type_conversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plsql_type_conversion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPlsql_type_conversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPlsql_type_conversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPlsql_type_conversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Plsql_type_conversionContext plsql_type_conversion() throws RecognitionException {
		Plsql_type_conversionContext _localctx = new Plsql_type_conversionContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_plsql_type_conversion);
		int _la;
		try {
			setState(4337);
			switch (_input.LA(1)) {
			case TO_CHAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4313);
				match(TO_CHAR);
				setState(4314);
				match(LEFT_PAREN);
				setState(4315);
				expression();
				setState(4320);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4316);
					match(COMMA);
					setState(4317);
					expression();
					}
					}
					setState(4322);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4323);
				match(RIGHT_PAREN);
				}
				break;
			case TO_NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4325);
				match(TO_NUMBER);
				setState(4326);
				match(LEFT_PAREN);
				setState(4327);
				expression();
				setState(4332);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4328);
					match(COMMA);
					setState(4329);
					expression();
					}
					}
					setState(4334);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4335);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_type_conversionContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PlSqlParser.CAST, 0); }
		public TerminalNode XMLCAST() { return getToken(PlSqlParser.XMLCAST, 0); }
		public TerminalNode MULTISET() { return getToken(PlSqlParser.MULTISET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Plsql_type_conversionContext plsql_type_conversion() {
			return getRuleContext(Plsql_type_conversionContext.class,0);
		}
		public Sql_type_conversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_type_conversion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSql_type_conversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSql_type_conversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSql_type_conversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_type_conversionContext sql_type_conversion() throws RecognitionException {
		Sql_type_conversionContext _localctx = new Sql_type_conversionContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_sql_type_conversion);
		int _la;
		try {
			setState(4354);
			switch (_input.LA(1)) {
			case CAST:
			case XMLCAST:
				enterOuterAlt(_localctx, 1);
				{
				setState(4339);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4340);
				match(LEFT_PAREN);
				setState(4347);
				switch (_input.LA(1)) {
				case MULTISET:
					{
					setState(4341);
					match(MULTISET);
					setState(4342);
					match(LEFT_PAREN);
					setState(4343);
					subquery();
					setState(4344);
					match(RIGHT_PAREN);
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CACHE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MOD:
				case MODEL:
				case MODIFY:
				case MONTH:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL_PERCENT_ROWCOUNT:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CHAR:
				case TO_NUMBER:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4346);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4349);
				match(AS);
				setState(4350);
				type_spec();
				setState(4351);
				match(RIGHT_PAREN);
				}
				break;
			case TO_CHAR:
			case TO_NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4353);
				plsql_type_conversion();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_table_columnsContext extends ParserRuleContext {
		public TerminalNode COLUMNS() { return getToken(PlSqlParser.COLUMNS, 0); }
		public List<Xml_table_columnContext> xml_table_column() {
			return getRuleContexts(Xml_table_columnContext.class);
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return getRuleContext(Xml_table_columnContext.class,i);
		}
		public Xml_table_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_table_columns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_table_columns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_table_columns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_table_columnsContext xml_table_columns() throws RecognitionException {
		Xml_table_columnsContext _localctx = new Xml_table_columnsContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_xml_table_columns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4356);
			match(COLUMNS);
			setState(4357);
			xml_table_column();
			setState(4362);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4358);
				match(COMMA);
				setState(4359);
				xml_table_column();
				}
				}
				setState(4364);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_tableContext extends ParserRuleContext {
		public TerminalNode XMLTABLE() { return getToken(PlSqlParser.XMLTABLE, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return getRuleContext(Xml_namespaces_clauseContext.class,0);
		}
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		public Xml_table_columnsContext xml_table_columns() {
			return getRuleContext(Xml_table_columnsContext.class,0);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public Xml_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_tableContext xml_table() throws RecognitionException {
		Xml_tableContext _localctx = new Xml_tableContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_xml_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4365);
			match(XMLTABLE);
			setState(4366);
			match(LEFT_PAREN);
			setState(4370);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				{
				setState(4367);
				xml_namespaces_clause();
				setState(4368);
				match(COMMA);
				}
				break;
			}
			setState(4372);
			concatenation_wrapper();
			setState(4374);
			_la = _input.LA(1);
			if (_la==PASSING) {
				{
				setState(4373);
				xml_passing_clause();
				}
			}

			setState(4377);
			_la = _input.LA(1);
			if (_la==COLUMNS) {
				{
				setState(4376);
				xml_table_columns();
				}
			}

			setState(4379);
			match(RIGHT_PAREN);
			setState(4382);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(4380);
				match(PERIOD);
				setState(4381);
				general_element_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_functionContext extends ParserRuleContext {
		public Over_clause_keywordContext over_clause_keyword() {
			return getRuleContext(Over_clause_keywordContext.class,0);
		}
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return getRuleContext(Function_argument_modelingContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Sql_type_conversionContext sql_type_conversion() {
			return getRuleContext(Sql_type_conversionContext.class,0);
		}
		public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public Collect_order_by_partContext collect_order_by_part() {
			return getRuleContext(Collect_order_by_partContext.class,0);
		}
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return getRuleContext(Within_or_over_clause_keywordContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public List<Within_or_over_partContext> within_or_over_part() {
			return getRuleContexts(Within_or_over_partContext.class);
		}
		public Within_or_over_partContext within_or_over_part(int i) {
			return getRuleContext(Within_or_over_partContext.class,i);
		}
		public TerminalNode DECOMPOSE() { return getToken(PlSqlParser.DECOMPOSE, 0); }
		public TerminalNode CANONICAL() { return getToken(PlSqlParser.CANONICAL, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(PlSqlParser.COMPATIBILITY, 0); }
		public TerminalNode EXTRACT() { return getToken(PlSqlParser.EXTRACT, 0); }
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(PlSqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(PlSqlParser.LAST_VALUE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return getRuleContext(Respect_or_ignore_nullsContext.class,0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return getRuleContext(Standard_prediction_function_keywordContext.class,0);
		}
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return getRuleContext(Cost_matrix_clauseContext.class,0);
		}
		public TerminalNode MOD() { return getToken(PlSqlParser.MOD, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
		public TerminalNode CHAR_CS() { return getToken(PlSqlParser.CHAR_CS, 0); }
		public TerminalNode TREAT() { return getToken(PlSqlParser.TREAT, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
		public TerminalNode XMLAGG() { return getToken(PlSqlParser.XMLAGG, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode XMLCOLATTVAL() { return getToken(PlSqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLFOREST() { return getToken(PlSqlParser.XMLFOREST, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PlSqlParser.XMLELEMENT, 0); }
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return getRuleContext(Xml_attributes_clauseContext.class,0);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode XMLEXISTS() { return getToken(PlSqlParser.XMLEXISTS, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(PlSqlParser.XMLPARSE, 0); }
		public TerminalNode DOCUMENT() { return getToken(PlSqlParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(PlSqlParser.CONTENT, 0); }
		public TerminalNode WELLFORMED() { return getToken(PlSqlParser.WELLFORMED, 0); }
		public TerminalNode XMLPI() { return getToken(PlSqlParser.XMLPI, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode XMLQUERY() { return getToken(PlSqlParser.XMLQUERY, 0); }
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
		public TerminalNode XMLROOT() { return getToken(PlSqlParser.XMLROOT, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return getRuleContext(Xmlroot_param_version_partContext.class,0);
		}
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return getRuleContext(Xmlroot_param_standalone_partContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(PlSqlParser.XMLSERIALIZE, 0); }
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return getRuleContext(Xmlserialize_param_enconding_partContext.class,0);
		}
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return getRuleContext(Xmlserialize_param_version_partContext.class,0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return getRuleContext(Xmlserialize_param_ident_partContext.class,0);
		}
		public TerminalNode DEFAULTS() { return getToken(PlSqlParser.DEFAULTS, 0); }
		public TerminalNode HIDE() { return getToken(PlSqlParser.HIDE, 0); }
		public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
		public Xml_tableContext xml_table() {
			return getRuleContext(Xml_tableContext.class,0);
		}
		public Standard_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStandard_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStandard_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStandard_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_functionContext standard_function() throws RecognitionException {
		Standard_functionContext _localctx = new Standard_functionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_standard_function);
		int _la;
		try {
			int _alt;
			setState(4672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4384);
				over_clause_keyword();
				setState(4385);
				function_argument_analytic();
				setState(4387);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
				case 1:
					{
					setState(4386);
					over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4389);
				regular_id();
				setState(4390);
				function_argument_modeling();
				setState(4392);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
				case 1:
					{
					setState(4391);
					using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4394);
				match(COUNT);
				setState(4395);
				match(LEFT_PAREN);
				setState(4401);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(4396);
					match(ASTERISK);
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CACHE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MOD:
				case MODEL:
				case MODIFY:
				case MONTH:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL_PERCENT_ROWCOUNT:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TO_CHAR:
				case TO_NUMBER:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4398);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
					case 1:
						{
						setState(4397);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					}
					setState(4400);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4403);
				match(RIGHT_PAREN);
				setState(4405);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
				case 1:
					{
					setState(4404);
					over_clause();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4407);
				sql_type_conversion();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4408);
				match(CHR);
				setState(4409);
				match(LEFT_PAREN);
				setState(4410);
				concatenation_wrapper();
				setState(4411);
				match(USING);
				setState(4412);
				match(NCHAR_CS);
				setState(4413);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4415);
				match(COLLECT);
				setState(4416);
				match(LEFT_PAREN);
				setState(4418);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
				case 1:
					{
					setState(4417);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(4420);
				concatenation_wrapper();
				setState(4422);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4421);
					collect_order_by_part();
					}
				}

				setState(4424);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4426);
				within_or_over_clause_keyword();
				setState(4427);
				function_argument();
				setState(4429); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4428);
						within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4431); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,545,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4433);
				match(DECOMPOSE);
				setState(4434);
				match(LEFT_PAREN);
				setState(4435);
				concatenation_wrapper();
				setState(4437);
				_la = _input.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					setState(4436);
					_la = _input.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(4439);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4441);
				match(EXTRACT);
				setState(4442);
				match(LEFT_PAREN);
				setState(4443);
				regular_id();
				setState(4444);
				match(FROM);
				setState(4445);
				concatenation_wrapper();
				setState(4446);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4448);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4449);
				function_argument_analytic();
				setState(4451);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(4450);
					respect_or_ignore_nulls();
					}
				}

				setState(4453);
				over_clause();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4455);
				standard_prediction_function_keyword();
				setState(4456);
				match(LEFT_PAREN);
				setState(4457);
				expression_wrapper();
				setState(4462);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4458);
					match(COMMA);
					setState(4459);
					expression_wrapper();
					}
					}
					setState(4464);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4466);
				_la = _input.LA(1);
				if (_la==COST) {
					{
					setState(4465);
					cost_matrix_clause();
					}
				}

				setState(4469);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4468);
					using_clause();
					}
				}

				setState(4471);
				match(RIGHT_PAREN);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4473);
				match(MOD);
				setState(4474);
				match(LEFT_PAREN);
				setState(4475);
				expression();
				setState(4476);
				match(COMMA);
				setState(4477);
				expression();
				setState(4478);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4480);
				match(TRANSLATE);
				setState(4481);
				match(LEFT_PAREN);
				setState(4482);
				expression_wrapper();
				setState(4485);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4483);
					match(USING);
					setState(4484);
					_la = _input.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				setState(4491);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4487);
					match(COMMA);
					setState(4488);
					expression_wrapper();
					}
					}
					setState(4493);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4494);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4496);
				match(TREAT);
				setState(4497);
				match(LEFT_PAREN);
				setState(4498);
				expression_wrapper();
				setState(4499);
				match(AS);
				setState(4501);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
				case 1:
					{
					setState(4500);
					match(REF);
					}
					break;
				}
				setState(4503);
				type_spec();
				setState(4504);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4506);
				match(TRIM);
				setState(4507);
				match(LEFT_PAREN);
				setState(4515);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
				case 1:
					{
					setState(4509);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
					case 1:
						{
						setState(4508);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						} else {
							consume();
						}
						}
						break;
					}
					setState(4512);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MOD - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PRIOR - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TO_CHAR - 386)) | (1L << (TO_NUMBER - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (NATIONAL_CHAR_STRING_LIT - 450)) | (1L << (UNSIGNED_INTEGER - 450)) | (1L << (APPROXIMATE_NUM_LIT - 450)) | (1L << (CHAR_STRING - 450)) | (1L << (DELIMITED_ID - 450)) | (1L << (LEFT_PAREN - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)))) != 0) || _la==REGULAR_ID) {
						{
						setState(4511);
						expression_wrapper();
						}
					}

					setState(4514);
					match(FROM);
					}
					break;
				}
				setState(4517);
				expression_wrapper();
				setState(4518);
				match(RIGHT_PAREN);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4520);
				match(XMLAGG);
				setState(4521);
				match(LEFT_PAREN);
				setState(4522);
				expression_wrapper();
				setState(4524);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4523);
					order_by_clause();
					}
				}

				setState(4526);
				match(RIGHT_PAREN);
				setState(4529);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4527);
					match(PERIOD);
					setState(4528);
					general_element_part();
					}
				}

				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4531);
				_la = _input.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4532);
				match(LEFT_PAREN);
				setState(4533);
				xml_multiuse_expression_element();
				setState(4538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4534);
					match(COMMA);
					setState(4535);
					xml_multiuse_expression_element();
					}
					}
					setState(4540);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4541);
				match(RIGHT_PAREN);
				setState(4544);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4542);
					match(PERIOD);
					setState(4543);
					general_element_part();
					}
				}

				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4546);
				match(XMLELEMENT);
				setState(4547);
				match(LEFT_PAREN);
				setState(4549);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
				case 1:
					{
					setState(4548);
					_la = _input.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(4552);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,562,_ctx) ) {
				case 1:
					{
					setState(4551);
					_la = _input.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
					break;
				}
				setState(4554);
				expression_wrapper();
				setState(4557);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
				case 1:
					{
					setState(4555);
					match(COMMA);
					setState(4556);
					xml_attributes_clause();
					}
					break;
				}
				setState(4566);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4559);
					match(COMMA);
					setState(4560);
					expression_wrapper();
					setState(4562);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (NATIONAL_CHAR_STRING_LIT - 450)) | (1L << (CHAR_STRING - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						setState(4561);
						column_alias();
						}
					}

					}
					}
					setState(4568);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4569);
				match(RIGHT_PAREN);
				setState(4572);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4570);
					match(PERIOD);
					setState(4571);
					general_element_part();
					}
				}

				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4574);
				match(XMLEXISTS);
				setState(4575);
				match(LEFT_PAREN);
				setState(4576);
				expression_wrapper();
				setState(4578);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4577);
					xml_passing_clause();
					}
				}

				setState(4580);
				match(RIGHT_PAREN);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4582);
				match(XMLPARSE);
				setState(4583);
				match(LEFT_PAREN);
				setState(4584);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4585);
				concatenation_wrapper();
				setState(4587);
				_la = _input.LA(1);
				if (_la==WELLFORMED) {
					{
					setState(4586);
					match(WELLFORMED);
					}
				}

				setState(4589);
				match(RIGHT_PAREN);
				setState(4592);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4590);
					match(PERIOD);
					setState(4591);
					general_element_part();
					}
				}

				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(4594);
				match(XMLPI);
				setState(4595);
				match(LEFT_PAREN);
				setState(4600);
				switch (_input.LA(1)) {
				case NAME:
					{
					setState(4596);
					match(NAME);
					setState(4597);
					id();
					}
					break;
				case EVALNAME:
					{
					setState(4598);
					match(EVALNAME);
					setState(4599);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4604);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4602);
					match(COMMA);
					setState(4603);
					concatenation_wrapper();
					}
				}

				setState(4606);
				match(RIGHT_PAREN);
				setState(4609);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4607);
					match(PERIOD);
					setState(4608);
					general_element_part();
					}
				}

				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(4611);
				match(XMLQUERY);
				setState(4612);
				match(LEFT_PAREN);
				setState(4613);
				concatenation_wrapper();
				setState(4615);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4614);
					xml_passing_clause();
					}
				}

				setState(4617);
				match(RETURNING);
				setState(4618);
				match(CONTENT);
				setState(4622);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(4619);
					match(NULL);
					setState(4620);
					match(ON);
					setState(4621);
					match(EMPTY);
					}
				}

				setState(4624);
				match(RIGHT_PAREN);
				setState(4627);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4625);
					match(PERIOD);
					setState(4626);
					general_element_part();
					}
				}

				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(4629);
				match(XMLROOT);
				setState(4630);
				match(LEFT_PAREN);
				setState(4631);
				concatenation_wrapper();
				setState(4634);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
				case 1:
					{
					setState(4632);
					match(COMMA);
					setState(4633);
					xmlroot_param_version_part();
					}
					break;
				}
				setState(4638);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4636);
					match(COMMA);
					setState(4637);
					xmlroot_param_standalone_part();
					}
				}

				setState(4640);
				match(RIGHT_PAREN);
				setState(4643);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4641);
					match(PERIOD);
					setState(4642);
					general_element_part();
					}
				}

				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(4645);
				match(XMLSERIALIZE);
				setState(4646);
				match(LEFT_PAREN);
				setState(4647);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4648);
				concatenation_wrapper();
				setState(4651);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4649);
					match(AS);
					setState(4650);
					type_spec();
					}
				}

				setState(4654);
				_la = _input.LA(1);
				if (_la==ENCODING) {
					{
					setState(4653);
					xmlserialize_param_enconding_part();
					}
				}

				setState(4657);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(4656);
					xmlserialize_param_version_part();
					}
				}

				setState(4660);
				_la = _input.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					setState(4659);
					xmlserialize_param_ident_part();
					}
				}

				setState(4664);
				_la = _input.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					setState(4662);
					_la = _input.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					setState(4663);
					match(DEFAULTS);
					}
				}

				setState(4666);
				match(RIGHT_PAREN);
				setState(4669);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(4667);
					match(PERIOD);
					setState(4668);
					general_element_part();
					}
				}

				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(4671);
				xml_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(PlSqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(PlSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(PlSqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(PlSqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(PlSqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(PlSqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(PlSqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PlSqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(PlSqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(PlSqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(PlSqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(PlSqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(PlSqlParser.COVAR_, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOver_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOver_clause_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOver_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clause_keywordContext over_clause_keyword() throws RecognitionException {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4674);
			_la = _input.LA(1);
			if ( !(((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (AVG - 482)) | (1L << (CORR - 482)) | (1L << (LAG - 482)) | (1L << (LEAD - 482)) | (1L << (MAX - 482)) | (1L << (MEDIAN - 482)) | (1L << (MIN - 482)) | (1L << (NTILE - 482)) | (1L << (RATIO_TO_REPORT - 482)) | (1L << (ROW_NUMBER - 482)) | (1L << (SUM - 482)) | (1L << (VARIANCE - 482)) | (1L << (REGR_ - 482)) | (1L << (STDDEV - 482)) | (1L << (VAR_ - 482)) | (1L << (COVAR_ - 482)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode CUME_DIST() { return getToken(PlSqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(PlSqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PlSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PlSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PlSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(PlSqlParser.RANK, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWithin_or_over_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWithin_or_over_clause_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWithin_or_over_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_or_over_clause_keywordContext within_or_over_clause_keyword() throws RecognitionException {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4676);
			_la = _input.LA(1);
			if ( !(((((_la - 475)) & ~0x3f) == 0 && ((1L << (_la - 475)) & ((1L << (CUME_DIST - 475)) | (1L << (DENSE_RANK - 475)) | (1L << (LISTAGG - 475)) | (1L << (PERCENT_RANK - 475)) | (1L << (PERCENTILE_CONT - 475)) | (1L << (PERCENTILE_DISC - 475)) | (1L << (RANK - 475)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_prediction_function_keywordContext extends ParserRuleContext {
		public TerminalNode PREDICTION() { return getToken(PlSqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(PlSqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(PlSqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(PlSqlParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_prediction_function_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterStandard_prediction_function_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitStandard_prediction_function_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitStandard_prediction_function_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_prediction_function_keywordContext standard_prediction_function_keyword() throws RecognitionException {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4678);
			_la = _input.LA(1);
			if ( !(((((_la - 469)) & ~0x3f) == 0 && ((1L << (_la - 469)) & ((1L << (PREDICTION - 469)) | (1L << (PREDICTION_BOUNDS - 469)) | (1L << (PREDICTION_COST - 469)) | (1L << (PREDICTION_DETAILS - 469)) | (1L << (PREDICTION_PROBABILITY - 469)) | (1L << (PREDICTION_SET - 469)))) != 0)) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(PlSqlParser.OVER, 0); }
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Windowing_clauseContext windowing_clause() {
			return getRuleContext(Windowing_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4680);
			match(OVER);
			setState(4681);
			match(LEFT_PAREN);
			setState(4683);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4682);
				query_partition_clause();
				}
			}

			setState(4689);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4685);
				order_by_clause();
				setState(4687);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(4686);
					windowing_clause();
					}
				}

				}
			}

			setState(4691);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_clauseContext extends ParserRuleContext {
		public Windowing_typeContext windowing_type() {
			return getRuleContext(Windowing_typeContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public List<Windowing_elementsContext> windowing_elements() {
			return getRuleContexts(Windowing_elementsContext.class);
		}
		public Windowing_elementsContext windowing_elements(int i) {
			return getRuleContext(Windowing_elementsContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWindowing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWindowing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWindowing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_clauseContext windowing_clause() throws RecognitionException {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_windowing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4693);
			windowing_type();
			setState(4700);
			switch (_input.LA(1)) {
			case BETWEEN:
				{
				setState(4694);
				match(BETWEEN);
				setState(4695);
				windowing_elements();
				setState(4696);
				match(AND);
				setState(4697);
				windowing_elements();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MOD:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_NUMBER:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4699);
				windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_typeContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWindowing_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWindowing_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWindowing_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_typeContext windowing_type() throws RecognitionException {
		Windowing_typeContext _localctx = new Windowing_typeContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_windowing_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4702);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_elementsContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(PlSqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PlSqlParser.PRECEDING, 0); }
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public TerminalNode FOLLOWING() { return getToken(PlSqlParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWindowing_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWindowing_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWindowing_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_elementsContext windowing_elements() throws RecognitionException {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_windowing_elements);
		int _la;
		try {
			setState(4711);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4704);
				match(UNBOUNDED);
				setState(4705);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4706);
				match(CURRENT);
				setState(4707);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4708);
				concatenation_wrapper();
				setState(4709);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public List<Using_elementContext> using_element() {
			return getRuleContexts(Using_elementContext.class);
		}
		public Using_elementContext using_element(int i) {
			return getRuleContext(Using_elementContext.class,i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUsing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_using_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4713);
			match(USING);
			setState(4723);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(4714);
				match(ASTERISK);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MOD:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_NUMBER:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4715);
				using_element();
				setState(4720);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,591,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4716);
						match(COMMA);
						setState(4717);
						using_element();
						}
						} 
					}
					setState(4722);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,591,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Using_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterUsing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitUsing_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitUsing_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_elementContext using_element() throws RecognitionException {
		Using_elementContext _localctx = new Using_elementContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_using_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
			case 1:
				{
				setState(4725);
				match(IN);
				setState(4727);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
				case 1:
					{
					setState(4726);
					match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(4729);
				match(OUT);
				}
				break;
			}
			setState(4732);
			select_list_elements();
			setState(4734);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
			case 1:
				{
				setState(4733);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collect_order_by_partContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collect_order_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCollect_order_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCollect_order_by_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCollect_order_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collect_order_by_partContext collect_order_by_part() throws RecognitionException {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_collect_order_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4736);
			match(ORDER);
			setState(4737);
			match(BY);
			setState(4738);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_partContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(PlSqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWithin_or_over_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWithin_or_over_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWithin_or_over_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_or_over_partContext within_or_over_part() throws RecognitionException {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_within_or_over_part);
		try {
			setState(4747);
			switch (_input.LA(1)) {
			case WITHIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4740);
				match(WITHIN);
				setState(4741);
				match(GROUP);
				setState(4742);
				match(LEFT_PAREN);
				setState(4743);
				order_by_clause();
				setState(4744);
				match(RIGHT_PAREN);
				}
				break;
			case OVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4746);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_matrix_clauseContext extends ParserRuleContext {
		public TerminalNode COST() { return getToken(PlSqlParser.COST, 0); }
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public List<Cost_class_nameContext> cost_class_name() {
			return getRuleContexts(Cost_class_nameContext.class);
		}
		public Cost_class_nameContext cost_class_name(int i) {
			return getRuleContext(Cost_class_nameContext.class,i);
		}
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_matrix_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCost_matrix_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCost_matrix_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCost_matrix_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cost_matrix_clauseContext cost_matrix_clause() throws RecognitionException {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_cost_matrix_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4749);
			match(COST);
			setState(4767);
			switch (_input.LA(1)) {
			case MODEL:
				{
				setState(4750);
				match(MODEL);
				setState(4752);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(4751);
					match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(4754);
				match(LEFT_PAREN);
				setState(4755);
				cost_class_name();
				setState(4760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4756);
					match(COMMA);
					setState(4757);
					cost_class_name();
					}
					}
					setState(4762);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4763);
				match(RIGHT_PAREN);
				setState(4764);
				match(VALUES);
				setState(4765);
				expression_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_passing_clauseContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(PlSqlParser.PASSING, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_passing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_passing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_passing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_passing_clauseContext xml_passing_clause() throws RecognitionException {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_xml_passing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4769);
			match(PASSING);
			setState(4772);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(4770);
				match(BY);
				setState(4771);
				match(VALUE);
				}
			}

			setState(4774);
			expression_wrapper();
			setState(4776);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
			case 1:
				{
				setState(4775);
				column_alias();
				}
				break;
			}
			setState(4785);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4778);
				match(COMMA);
				setState(4779);
				expression_wrapper();
				setState(4781);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
				case 1:
					{
					setState(4780);
					column_alias();
					}
					break;
				}
				}
				}
				setState(4787);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributes_clauseContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(PlSqlParser.XMLATTRIBUTES, 0); }
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(PlSqlParser.SCHEMACHECK, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(PlSqlParser.NOSCHEMACHECK, 0); }
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_attributes_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_attributes_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attributes_clauseContext xml_attributes_clause() throws RecognitionException {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_xml_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4788);
			match(XMLATTRIBUTES);
			setState(4789);
			match(LEFT_PAREN);
			setState(4791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,604,_ctx) ) {
			case 1:
				{
				setState(4790);
				_la = _input.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(4794);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
			case 1:
				{
				setState(4793);
				_la = _input.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			}
			setState(4796);
			xml_multiuse_expression_element();
			setState(4801);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4797);
				match(COMMA);
				setState(4798);
				xml_multiuse_expression_element();
				}
				}
				setState(4803);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4804);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespaces_clauseContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(PlSqlParser.XMLNAMESPACES, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespaces_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_namespaces_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_namespaces_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_namespaces_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_namespaces_clauseContext xml_namespaces_clause() throws RecognitionException {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_xml_namespaces_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4806);
			match(XMLNAMESPACES);
			setState(4807);
			match(LEFT_PAREN);
			setState(4819);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
			case 1:
				{
				setState(4808);
				concatenation_wrapper();
				setState(4809);
				column_alias();
				setState(4816);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4810);
					match(COMMA);
					setState(4811);
					concatenation_wrapper();
					setState(4812);
					column_alias();
					}
					}
					setState(4818);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(4822);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4821);
				xml_general_default_part();
				}
			}

			setState(4824);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_table_columnContext extends ParserRuleContext {
		public Xml_column_nameContext xml_column_name() {
			return getRuleContext(Xml_column_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(PlSqlParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode PATH() { return getToken(PlSqlParser.PATH, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_table_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_table_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_table_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_table_columnContext xml_table_column() throws RecognitionException {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_xml_table_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4826);
			xml_column_name();
			setState(4837);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(4827);
				match(FOR);
				setState(4828);
				match(ORDINALITY);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(4829);
				type_spec();
				setState(4832);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(4830);
					match(PATH);
					setState(4831);
					concatenation_wrapper();
					}
				}

				setState(4835);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(4834);
					xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_general_default_partContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_general_default_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_general_default_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_general_default_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_general_default_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_general_default_partContext xml_general_default_part() throws RecognitionException {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_xml_general_default_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4839);
			match(DEFAULT);
			setState(4840);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_multiuse_expression_elementContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_multiuse_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_multiuse_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_multiuse_expression_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_multiuse_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_multiuse_expression_elementContext xml_multiuse_expression_element() throws RecognitionException {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4842);
			expression();
			setState(4849);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4843);
				match(AS);
				setState(4847);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
				case 1:
					{
					setState(4844);
					id_expression();
					}
					break;
				case 2:
					{
					setState(4845);
					match(EVALNAME);
					setState(4846);
					concatenation();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXmlroot_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXmlroot_param_version_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXmlroot_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlroot_param_version_partContext xmlroot_param_version_part() throws RecognitionException {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_xmlroot_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4851);
			match(VERSION);
			setState(4855);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
			case 1:
				{
				setState(4852);
				match(NO);
				setState(4853);
				match(VALUE);
				}
				break;
			case 2:
				{
				setState(4854);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_standalone_partContext extends ParserRuleContext {
		public TerminalNode STANDALONE() { return getToken(PlSqlParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(PlSqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_standalone_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXmlroot_param_standalone_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXmlroot_param_standalone_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXmlroot_param_standalone_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() throws RecognitionException {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4857);
			match(STANDALONE);
			setState(4863);
			switch (_input.LA(1)) {
			case YES:
				{
				setState(4858);
				match(YES);
				}
				break;
			case NO:
				{
				setState(4859);
				match(NO);
				setState(4861);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4860);
					match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
		public TerminalNode ENCODING() { return getToken(PlSqlParser.ENCODING, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_enconding_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXmlserialize_param_enconding_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXmlserialize_param_enconding_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXmlserialize_param_enconding_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() throws RecognitionException {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_xmlserialize_param_enconding_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4865);
			match(ENCODING);
			setState(4866);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXmlserialize_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXmlserialize_param_version_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXmlserialize_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_version_partContext xmlserialize_param_version_part() throws RecognitionException {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_xmlserialize_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4868);
			match(VERSION);
			setState(4869);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_ident_partContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode INDENT() { return getToken(PlSqlParser.INDENT, 0); }
		public TerminalNode SIZE() { return getToken(PlSqlParser.SIZE, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_ident_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXmlserialize_param_ident_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXmlserialize_param_ident_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXmlserialize_param_ident_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() throws RecognitionException {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			setState(4879);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(4871);
				match(NO);
				setState(4872);
				match(INDENT);
				}
				break;
			case INDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4873);
				match(INDENT);
				setState(4877);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(4874);
					match(SIZE);
					setState(4875);
					match(EQUALS_OP);
					setState(4876);
					concatenation_wrapper();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_static_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Boolean_static_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_static_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBoolean_static_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBoolean_static_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBoolean_static_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Boolean_static_expressionContext boolean_static_expression() throws RecognitionException {
		Boolean_static_expressionContext _localctx = new Boolean_static_expressionContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_boolean_static_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4881);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Preprocessor_internal_statementContext extends ParserRuleContext {
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Sql_scriptContext sql_script() {
			return getRuleContext(Sql_scriptContext.class,0);
		}
		public Preprocessor_internal_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preprocessor_internal_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPreprocessor_internal_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPreprocessor_internal_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPreprocessor_internal_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Preprocessor_internal_statementContext preprocessor_internal_statement() throws RecognitionException {
		Preprocessor_internal_statementContext _localctx = new Preprocessor_internal_statementContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_preprocessor_internal_statement);
		int _la;
		try {
			setState(4890);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4884); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4883);
					declare_spec();
					}
					}
					setState(4886); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PP_IF) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (BINDVAR - 520)) | (1L << (COLON - 520)) | (1L << (INTRODUCER - 520)))) != 0) || _la==REGULAR_ID );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4888);
				seq_of_statements();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4889);
				sql_script();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Preprocessor_statementContext extends ParserRuleContext {
		public TerminalNode PP_IF() { return getToken(PlSqlParser.PP_IF, 0); }
		public List<Boolean_static_expressionContext> boolean_static_expression() {
			return getRuleContexts(Boolean_static_expressionContext.class);
		}
		public Boolean_static_expressionContext boolean_static_expression(int i) {
			return getRuleContext(Boolean_static_expressionContext.class,i);
		}
		public List<TerminalNode> PP_THEN() { return getTokens(PlSqlParser.PP_THEN); }
		public TerminalNode PP_THEN(int i) {
			return getToken(PlSqlParser.PP_THEN, i);
		}
		public TerminalNode PP_END() { return getToken(PlSqlParser.PP_END, 0); }
		public List<Preprocessor_internal_statementContext> preprocessor_internal_statement() {
			return getRuleContexts(Preprocessor_internal_statementContext.class);
		}
		public Preprocessor_internal_statementContext preprocessor_internal_statement(int i) {
			return getRuleContext(Preprocessor_internal_statementContext.class,i);
		}
		public List<TerminalNode> PP_ELSIF() { return getTokens(PlSqlParser.PP_ELSIF); }
		public TerminalNode PP_ELSIF(int i) {
			return getToken(PlSqlParser.PP_ELSIF, i);
		}
		public TerminalNode PP_ELSE() { return getToken(PlSqlParser.PP_ELSE, 0); }
		public Preprocessor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preprocessor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPreprocessor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPreprocessor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPreprocessor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Preprocessor_statementContext preprocessor_statement() throws RecognitionException {
		Preprocessor_statementContext _localctx = new Preprocessor_statementContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_preprocessor_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4892);
			match(PP_IF);
			setState(4893);
			boolean_static_expression();
			setState(4894);
			match(PP_THEN);
			setState(4896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
			case 1:
				{
				setState(4895);
				preprocessor_internal_statement();
				}
				break;
			}
			setState(4906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PP_ELSIF) {
				{
				{
				setState(4898);
				match(PP_ELSIF);
				setState(4899);
				boolean_static_expression();
				setState(4900);
				match(PP_THEN);
				setState(4902);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
				case 1:
					{
					setState(4901);
					preprocessor_internal_statement();
					}
					break;
				}
				}
				}
				setState(4908);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4913);
			_la = _input.LA(1);
			if (_la==PP_ELSE) {
				{
				setState(4909);
				match(PP_ELSE);
				setState(4911);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,625,_ctx) ) {
				case 1:
					{
					setState(4910);
					preprocessor_internal_statement();
					}
					break;
				}
				}
			}

			setState(4915);
			match(PP_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_plus_commandContext extends ParserRuleContext {
		public Whenever_commandContext whenever_command() {
			return getRuleContext(Whenever_commandContext.class,0);
		}
		public Exit_commandContext exit_command() {
			return getRuleContext(Exit_commandContext.class,0);
		}
		public Prompt_commandContext prompt_command() {
			return getRuleContext(Prompt_commandContext.class,0);
		}
		public Set_commandContext set_command() {
			return getRuleContext(Set_commandContext.class,0);
		}
		public Call_sql_script_commandContext call_sql_script_command() {
			return getRuleContext(Call_sql_script_commandContext.class,0);
		}
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_plus_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSql_plus_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSql_plus_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSql_plus_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_plus_commandContext sql_plus_command() throws RecognitionException {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_sql_plus_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4923);
			switch (_input.LA(1)) {
			case SOLIDUS:
				{
				setState(4917);
				match(SOLIDUS);
				}
				break;
			case WHENEVER:
				{
				setState(4918);
				whenever_command();
				}
				break;
			case EXIT:
				{
				setState(4919);
				exit_command();
				}
				break;
			case SQLPLUS_PROMPT:
				{
				setState(4920);
				prompt_command();
				}
				break;
			case SET:
				{
				setState(4921);
				set_command();
				}
				break;
			case SQLPLUS_CALLSCRIPT:
				{
				setState(4922);
				call_sql_script_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Whenever_commandContext extends ParserRuleContext {
		public TerminalNode WHENEVER() { return getToken(PlSqlParser.WHENEVER, 0); }
		public TerminalNode SQLERROR() { return getToken(PlSqlParser.SQLERROR, 0); }
		public TerminalNode OSERROR() { return getToken(PlSqlParser.OSERROR, 0); }
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public TerminalNode SUCCESS() { return getToken(PlSqlParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(PlSqlParser.FAILURE, 0); }
		public TerminalNode WARNING() { return getToken(PlSqlParser.WARNING, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode NONE() { return getToken(PlSqlParser.NONE, 0); }
		public Whenever_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenever_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWhenever_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWhenever_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWhenever_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Whenever_commandContext whenever_command() throws RecognitionException {
		Whenever_commandContext _localctx = new Whenever_commandContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_whenever_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4925);
			match(WHENEVER);
			setState(4926);
			_la = _input.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(4932);
			switch (_input.LA(1)) {
			case EXIT:
				{
				setState(4927);
				match(EXIT);
				setState(4928);
				_la = _input.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(4929);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			case CONTINUE:
				{
				setState(4930);
				match(CONTINUE);
				setState(4931);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Set_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSet_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSet_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSet_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_commandContext set_command() throws RecognitionException {
		Set_commandContext _localctx = new Set_commandContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_set_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4934);
			match(SET);
			setState(4935);
			regular_id();
			setState(4941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
			case 1:
				{
				setState(4936);
				match(CHAR_STRING);
				}
				break;
			case 2:
				{
				setState(4937);
				match(ON);
				}
				break;
			case 3:
				{
				setState(4938);
				match(OFF);
				}
				break;
			case 4:
				{
				setState(4939);
				numeric();
				}
				break;
			case 5:
				{
				setState(4940);
				regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_commandContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public Exit_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterExit_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitExit_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitExit_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_commandContext exit_command() throws RecognitionException {
		Exit_commandContext _localctx = new Exit_commandContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_exit_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4943);
			match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prompt_commandContext extends ParserRuleContext {
		public TerminalNode SQLPLUS_PROMPT() { return getToken(PlSqlParser.SQLPLUS_PROMPT, 0); }
		public Prompt_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prompt_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPrompt_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPrompt_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPrompt_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prompt_commandContext prompt_command() throws RecognitionException {
		Prompt_commandContext _localctx = new Prompt_commandContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_prompt_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4945);
			match(SQLPLUS_PROMPT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_sql_script_commandContext extends ParserRuleContext {
		public TerminalNode SQLPLUS_CALLSCRIPT() { return getToken(PlSqlParser.SQLPLUS_CALLSCRIPT, 0); }
		public Call_sql_script_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_sql_script_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCall_sql_script_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCall_sql_script_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCall_sql_script_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Call_sql_script_commandContext call_sql_script_command() throws RecognitionException {
		Call_sql_script_commandContext _localctx = new Call_sql_script_commandContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_call_sql_script_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4947);
			match(SQLPLUS_CALLSCRIPT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_extension_clauseContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_extension_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPartition_extension_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPartition_extension_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPartition_extension_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_partition_extension_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4949);
			_la = _input.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(4951);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4950);
				match(FOR);
				}
			}

			setState(4953);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitColumn_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitColumn_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_column_alias);
		int _la;
		try {
			setState(4963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4956);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4955);
					match(AS);
					}
				}

				setState(4960);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CACHE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL_PERCENT_ROWCOUNT:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4958);
					id();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(4959);
					alias_quoted_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4962);
				match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4967);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4965);
				id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				{
				setState(4966);
				alias_quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_quoted_stringContext extends ParserRuleContext {
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Alias_quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAlias_quoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAlias_quoted_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAlias_quoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alias_quoted_stringContext alias_quoted_string() throws RecognitionException {
		Alias_quoted_stringContext _localctx = new Alias_quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_alias_quoted_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4969);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PlSqlParser.WHERE, 0); }
		public Current_of_clauseContext current_of_clause() {
			return getRuleContext(Current_of_clauseContext.class,0);
		}
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4971);
			match(WHERE);
			setState(4974);
			switch (_input.LA(1)) {
			case CURRENT:
				{
				setState(4972);
				current_of_clause();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MOD:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TO_CHAR:
			case TO_NUMBER:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4973);
				condition_wrapper();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_of_clauseContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Current_of_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_of_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCurrent_of_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCurrent_of_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCurrent_of_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Current_of_clauseContext current_of_clause() throws RecognitionException {
		Current_of_clauseContext _localctx = new Current_of_clauseContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_current_of_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4976);
			match(CURRENT);
			setState(4977);
			match(OF);
			setState(4978);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clause_variableContext extends ParserRuleContext {
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public Collection_assoc_expressionContext collection_assoc_expression() {
			return getRuleContext(Collection_assoc_expressionContext.class,0);
		}
		public Into_clause_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInto_clause_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInto_clause_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInto_clause_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clause_variableContext into_clause_variable() throws RecognitionException {
		Into_clause_variableContext _localctx = new Into_clause_variableContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_into_clause_variable);
		try {
			setState(4982);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4980);
				variable_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4981);
				collection_assoc_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public List<Into_clause_variableContext> into_clause_variable() {
			return getRuleContexts(Into_clause_variableContext.class);
		}
		public Into_clause_variableContext into_clause_variable(int i) {
			return getRuleContext(Into_clause_variableContext.class,i);
		}
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_into_clause);
		int _la;
		try {
			setState(5004);
			switch (_input.LA(1)) {
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(4984);
				match(INTO);
				setState(4985);
				into_clause_variable();
				setState(4990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4986);
					match(COMMA);
					setState(4987);
					into_clause_variable();
					}
					}
					setState(4992);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				enterOuterAlt(_localctx, 2);
				{
				setState(4993);
				match(BULK);
				setState(4994);
				match(COLLECT);
				setState(4995);
				match(INTO);
				setState(4996);
				into_clause_variable();
				setState(5001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4997);
					match(COMMA);
					setState(4998);
					into_clause_variable();
					}
					}
					setState(5003);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_column_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterXml_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitXml_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitXml_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_column_nameContext xml_column_name() throws RecognitionException {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_xml_column_name);
		try {
			setState(5008);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5006);
				id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5007);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_class_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_class_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCost_class_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCost_class_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCost_class_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cost_class_nameContext cost_class_name() throws RecognitionException {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_cost_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5010);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAttribute_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAttribute_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAttribute_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5012);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSavepoint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSavepoint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSavepoint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_nameContext savepoint_name() throws RecognitionException {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_savepoint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5014);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_segment_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_segment_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRollback_segment_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRollback_segment_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRollback_segment_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_segment_nameContext rollback_segment_name() throws RecognitionException {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_rollback_segment_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5016);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_var_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_var_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_var_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_var_nameContext table_var_name() throws RecognitionException {
		Table_var_nameContext _localctx = new Table_var_nameContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_table_var_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5018);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSchema_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSchema_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5020);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRoutine_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRoutine_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRoutine_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_routine_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5022);
			id();
			setState(5027);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5023);
				match(PERIOD);
				setState(5024);
				id_expression();
				}
				}
				setState(5029);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5032);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(5030);
				match(AT_SIGN);
				setState(5031);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPackage_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPackage_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPackage_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_nameContext package_name() throws RecognitionException {
		Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_package_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5037);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
			case 1:
				{
				setState(5034);
				schema_name();
				setState(5035);
				match(PERIOD);
				}
				break;
			}
			setState(5039);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_type_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterImplementation_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitImplementation_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitImplementation_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implementation_type_nameContext implementation_type_name() throws RecognitionException {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_implementation_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5041);
			id();
			setState(5044);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5042);
				match(PERIOD);
				setState(5043);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitParameter_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitParameter_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5046);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_model_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterReference_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitReference_model_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitReference_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_model_nameContext reference_model_name() throws RecognitionException {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_reference_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5048);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_model_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterMain_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitMain_model_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitMain_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Main_model_nameContext main_model_name() throws RecognitionException {
		Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_main_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5050);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_function_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterAggregate_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitAggregate_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitAggregate_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_aggregate_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5052);
			id();
			setState(5057);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5053);
				match(PERIOD);
				setState(5054);
				id_expression();
				}
				}
				setState(5059);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterQuery_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitQuery_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitQuery_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_nameContext query_name() throws RecognitionException {
		Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_query_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5060);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConstraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConstraint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConstraint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_constraint_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5062);
			id();
			setState(5067);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5063);
				match(PERIOD);
				setState(5064);
				id_expression();
				}
				}
				setState(5069);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5072);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(5070);
				match(AT_SIGN);
				setState(5071);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLabel_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLabel_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLabel_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_nameContext label_name() throws RecognitionException {
		Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_label_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5074);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5076);
			id_expression();
			setState(5081);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5077);
				match(PERIOD);
				setState(5078);
				id_expression();
				}
				}
				setState(5083);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Sequence_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterSequence_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitSequence_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitSequence_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_nameContext sequence_name() throws RecognitionException {
		Sequence_nameContext _localctx = new Sequence_nameContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_sequence_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5084);
			id_expression();
			setState(5089);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5085);
				match(PERIOD);
				setState(5086);
				id_expression();
				}
				}
				setState(5091);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterException_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitException_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitException_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_nameContext exception_name() throws RecognitionException {
		Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_exception_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5092);
			id();
			setState(5097);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5093);
				match(PERIOD);
				setState(5094);
				id_expression();
				}
				}
				setState(5099);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5100);
			id();
			setState(5103);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5101);
				match(PERIOD);
				setState(5102);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterProcedure_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitProcedure_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitProcedure_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_procedure_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5105);
			id();
			setState(5108);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5106);
				match(PERIOD);
				setState(5107);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTrigger_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTrigger_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTrigger_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_nameContext trigger_name() throws RecognitionException {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_trigger_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5110);
			id();
			setState(5113);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5111);
				match(PERIOD);
				setState(5112);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterVariable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitVariable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitVariable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_nameContext variable_name() throws RecognitionException {
		Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_variable_name);
		int _la;
		try {
			setState(5125);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5117);
				_la = _input.LA(1);
				if (_la==INTRODUCER) {
					{
					setState(5115);
					match(INTRODUCER);
					setState(5116);
					char_set_name();
					}
				}

				setState(5119);
				id_expression();
				setState(5122);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
				case 1:
					{
					setState(5120);
					match(PERIOD);
					setState(5121);
					id_expression();
					}
					break;
				}
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5124);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitIndex_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitIndex_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5127);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_cursor_name);
		try {
			setState(5131);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5129);
				id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5130);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRecord_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRecord_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRecord_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_record_name);
		try {
			setState(5135);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5133);
				id();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5134);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterCollection_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitCollection_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitCollection_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collection_nameContext collection_name() throws RecognitionException {
		Collection_nameContext _localctx = new Collection_nameContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_collection_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5137);
			id();
			setState(5140);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,659,_ctx) ) {
			case 1:
				{
				setState(5138);
				match(PERIOD);
				setState(5139);
				id_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Link_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_link_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLink_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLink_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLink_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Link_nameContext link_name() throws RecognitionException {
		Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_link_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5142);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitColumn_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitColumn_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_column_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5144);
			id();
			setState(5149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5145);
				match(PERIOD);
				setState(5146);
				id_expression();
				}
				}
				setState(5151);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tableview_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableview_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTableview_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTableview_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tableview_nameContext tableview_name() throws RecognitionException {
		Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5152);
			id();
			setState(5155);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				{
				setState(5153);
				match(PERIOD);
				setState(5154);
				id_expression();
				}
				break;
			}
			setState(5160);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
			case 1:
				{
				setState(5157);
				match(AT_SIGN);
				setState(5158);
				link_name();
				}
				break;
			case 2:
				{
				setState(5159);
				partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_set_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Char_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterChar_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitChar_set_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitChar_set_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Char_set_nameContext char_set_name() throws RecognitionException {
		Char_set_nameContext _localctx = new Char_set_nameContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_char_set_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5162);
			id_expression();
			setState(5167);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5163);
				match(PERIOD);
				setState(5164);
				id_expression();
				}
				}
				setState(5169);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Keep_clauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keep_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterKeep_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitKeep_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitKeep_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Keep_clauseContext keep_clause() throws RecognitionException {
		Keep_clauseContext _localctx = new Keep_clauseContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_keep_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5170);
			match(KEEP);
			setState(5171);
			match(LEFT_PAREN);
			setState(5172);
			match(DENSE_RANK);
			setState(5173);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(5174);
			order_by_clause();
			setState(5175);
			match(RIGHT_PAREN);
			setState(5177);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
			case 1:
				{
				setState(5176);
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argumentContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argumentContext function_argument() throws RecognitionException {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_function_argument);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5179);
			match(LEFT_PAREN);
			setState(5181);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MOD - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PRIOR - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TO_CHAR - 386)) | (1L << (TO_NUMBER - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (NATIONAL_CHAR_STRING_LIT - 450)) | (1L << (UNSIGNED_INTEGER - 450)) | (1L << (APPROXIMATE_NUM_LIT - 450)) | (1L << (CHAR_STRING - 450)) | (1L << (DELIMITED_ID - 450)) | (1L << (LEFT_PAREN - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)))) != 0) || _la==REGULAR_ID) {
				{
				setState(5180);
				argument();
				}
			}

			setState(5187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5183);
				match(COMMA);
				setState(5184);
				argument();
				}
				}
				setState(5189);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5190);
			match(RIGHT_PAREN);
			setState(5192);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
			case 1:
				{
				setState(5191);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_analyticContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<Respect_or_ignore_nullsContext> respect_or_ignore_nulls() {
			return getRuleContexts(Respect_or_ignore_nullsContext.class);
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return getRuleContext(Respect_or_ignore_nullsContext.class,i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_analytic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_argument_analytic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_argument_analytic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_argument_analytic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argument_analyticContext function_argument_analytic() throws RecognitionException {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_function_argument_analytic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5194);
			match(LEFT_PAREN);
			setState(5199);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MOD - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NOT - 258)) | (1L << (NULL - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PRIOR - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TO_CHAR - 386)) | (1L << (TO_NUMBER - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUE - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (NATIONAL_CHAR_STRING_LIT - 450)) | (1L << (UNSIGNED_INTEGER - 450)) | (1L << (APPROXIMATE_NUM_LIT - 450)) | (1L << (CHAR_STRING - 450)) | (1L << (DELIMITED_ID - 450)) | (1L << (LEFT_PAREN - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (PLUS_SIGN - 514)) | (1L << (MINUS_SIGN - 514)) | (1L << (BINDVAR - 514)) | (1L << (COLON - 514)) | (1L << (INTRODUCER - 514)))) != 0) || _la==REGULAR_ID) {
				{
				setState(5195);
				argument();
				setState(5197);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5196);
					respect_or_ignore_nulls();
					}
				}

				}
			}

			setState(5208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5201);
				match(COMMA);
				setState(5202);
				argument();
				setState(5204);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5203);
					respect_or_ignore_nulls();
					}
				}

				}
				}
				setState(5210);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5211);
			match(RIGHT_PAREN);
			setState(5213);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
			case 1:
				{
				setState(5212);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_modelingContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(PlSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PlSqlParser.NULL, i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_modeling; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterFunction_argument_modeling(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitFunction_argument_modeling(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitFunction_argument_modeling(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argument_modelingContext function_argument_modeling() throws RecognitionException {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_function_argument_modeling);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5215);
			match(LEFT_PAREN);
			setState(5216);
			column_name();
			setState(5229);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5217);
				match(COMMA);
				setState(5220);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					setState(5218);
					numeric();
					}
					break;
				case NULL:
					{
					setState(5219);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5227);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5222);
					match(COMMA);
					setState(5225);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(5223);
						numeric();
						}
						break;
					case NULL:
						{
						setState(5224);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(5231);
			match(USING);
			setState(5251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
			case 1:
				{
				setState(5232);
				tableview_name();
				setState(5233);
				match(PERIOD);
				setState(5234);
				match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(5236);
				match(ASTERISK);
				}
				break;
			case 3:
				{
				setState(5237);
				expression();
				setState(5239);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (NATIONAL_CHAR_STRING_LIT - 450)) | (1L << (CHAR_STRING - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					setState(5238);
					column_alias();
					}
				}

				setState(5248);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5241);
					match(COMMA);
					setState(5242);
					expression();
					setState(5244);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)) | (1L << (NATIONAL_CHAR_STRING_LIT - 450)) | (1L << (CHAR_STRING - 450)) | (1L << (DELIMITED_ID - 450)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						setState(5243);
						column_alias();
						}
					}

					}
					}
					setState(5250);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(5253);
			match(RIGHT_PAREN);
			setState(5255);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
			case 1:
				{
				setState(5254);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Respect_or_ignore_nullsContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode RESPECT() { return getToken(PlSqlParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respect_or_ignore_nulls; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRespect_or_ignore_nulls(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRespect_or_ignore_nulls(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRespect_or_ignore_nulls(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Respect_or_ignore_nullsContext respect_or_ignore_nulls() throws RecognitionException {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5257);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			setState(5258);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ASSOCIATION_OPERATOR() { return getToken(PlSqlParser.ASSOCIATION_OPERATOR, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5263);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
			case 1:
				{
				setState(5260);
				id();
				setState(5261);
				match(ASSOCIATION_OPERATOR);
				}
				break;
			}
			setState(5265);
			expression_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_specContext extends ParserRuleContext {
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public TerminalNode PERCENT_ROWTYPE() { return getToken(PlSqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(PlSqlParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterType_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitType_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitType_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_specContext type_spec() throws RecognitionException {
		Type_specContext _localctx = new Type_specContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_type_spec);
		int _la;
		try {
			setState(5279);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5267);
				datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5269);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,683,_ctx) ) {
				case 1:
					{
					setState(5268);
					match(REF);
					}
					break;
				}
				setState(5271);
				type_name();
				setState(5274);
				_la = _input.LA(1);
				if (_la==AT_SIGN) {
					{
					setState(5272);
					match(AT_SIGN);
					setState(5273);
					link_name();
					}
				}

				setState(5277);
				_la = _input.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					setState(5276);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					} else {
						consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatatypeContext extends ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitDatatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitDatatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_datatype);
		int _la;
		try {
			setState(5309);
			switch (_input.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INT:
			case INTEGER:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR:
			case VARCHAR2:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 1);
				{
				setState(5281);
				native_datatype_element();
				setState(5283);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
				case 1:
					{
					setState(5282);
					precision_part();
					}
					break;
				}
				setState(5291);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(5285);
					match(WITH);
					setState(5287);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(5286);
						match(LOCAL);
						}
					}

					setState(5289);
					match(TIME);
					setState(5290);
					match(ZONE);
					}
				}

				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5293);
				match(INTERVAL);
				setState(5294);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(5299);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5295);
					match(LEFT_PAREN);
					setState(5296);
					expression_wrapper();
					setState(5297);
					match(RIGHT_PAREN);
					}
				}

				setState(5301);
				match(TO);
				setState(5302);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(5307);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,691,_ctx) ) {
				case 1:
					{
					setState(5303);
					match(LEFT_PAREN);
					setState(5304);
					expression_wrapper();
					setState(5305);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_partContext extends ParserRuleContext {
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode BYTE() { return getToken(PlSqlParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterPrecision_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitPrecision_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitPrecision_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5311);
			match(LEFT_PAREN);
			setState(5312);
			numeric();
			setState(5315);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5313);
				match(COMMA);
				setState(5314);
				numeric();
				}
			}

			setState(5318);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(5317);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				}
			}

			setState(5320);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Native_datatype_elementContext extends ParserRuleContext {
		public TerminalNode BINARY_INTEGER() { return getToken(PlSqlParser.BINARY_INTEGER, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(PlSqlParser.PLS_INTEGER, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(PlSqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(PlSqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode NATURALN() { return getToken(PlSqlParser.NATURALN, 0); }
		public TerminalNode POSITIVE() { return getToken(PlSqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(PlSqlParser.POSITIVEN, 0); }
		public TerminalNode SIGNTYPE() { return getToken(PlSqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(PlSqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode NVARCHAR2() { return getToken(PlSqlParser.NVARCHAR2, 0); }
		public TerminalNode DEC() { return getToken(PlSqlParser.DEC, 0); }
		public TerminalNode INTEGER() { return getToken(PlSqlParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(PlSqlParser.INT, 0); }
		public TerminalNode NUMERIC() { return getToken(PlSqlParser.NUMERIC, 0); }
		public TerminalNode SMALLINT() { return getToken(PlSqlParser.SMALLINT, 0); }
		public TerminalNode NUMBER() { return getToken(PlSqlParser.NUMBER, 0); }
		public TerminalNode DECIMAL() { return getToken(PlSqlParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(PlSqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(PlSqlParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(PlSqlParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(PlSqlParser.REAL, 0); }
		public TerminalNode NCHAR() { return getToken(PlSqlParser.NCHAR, 0); }
		public TerminalNode LONG() { return getToken(PlSqlParser.LONG, 0); }
		public TerminalNode RAW() { return getToken(PlSqlParser.RAW, 0); }
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR2() { return getToken(PlSqlParser.VARCHAR2, 0); }
		public TerminalNode VARCHAR() { return getToken(PlSqlParser.VARCHAR, 0); }
		public TerminalNode STRING() { return getToken(PlSqlParser.STRING, 0); }
		public TerminalNode BOOLEAN() { return getToken(PlSqlParser.BOOLEAN, 0); }
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
		public TerminalNode UROWID() { return getToken(PlSqlParser.UROWID, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(PlSqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(PlSqlParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PlSqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(PlSqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(PlSqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode BFILE() { return getToken(PlSqlParser.BFILE, 0); }
		public TerminalNode BLOB() { return getToken(PlSqlParser.BLOB, 0); }
		public TerminalNode CLOB() { return getToken(PlSqlParser.CLOB, 0); }
		public TerminalNode NCLOB() { return getToken(PlSqlParser.NCLOB, 0); }
		public TerminalNode MLSLABEL() { return getToken(PlSqlParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNative_datatype_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNative_datatype_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNative_datatype_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_native_datatype_element);
		int _la;
		try {
			setState(5382);
			switch (_input.LA(1)) {
			case BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5322);
				match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5323);
				match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5324);
				match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(5325);
				match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5326);
				match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				enterOuterAlt(_localctx, 6);
				{
				setState(5327);
				match(NATURALN);
				}
				break;
			case POSITIVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5328);
				match(POSITIVE);
				}
				break;
			case POSITIVEN:
				enterOuterAlt(_localctx, 8);
				{
				setState(5329);
				match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5330);
				match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				enterOuterAlt(_localctx, 10);
				{
				setState(5331);
				match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				enterOuterAlt(_localctx, 11);
				{
				setState(5332);
				match(NVARCHAR2);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 12);
				{
				setState(5333);
				match(DEC);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 13);
				{
				setState(5334);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 14);
				{
				setState(5335);
				match(INT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 15);
				{
				setState(5336);
				match(NUMERIC);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 16);
				{
				setState(5337);
				match(SMALLINT);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 17);
				{
				setState(5338);
				match(NUMBER);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 18);
				{
				setState(5339);
				match(DECIMAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 19);
				{
				setState(5340);
				match(DOUBLE);
				setState(5342);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5341);
					match(PRECISION);
					}
				}

				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 20);
				{
				setState(5344);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 21);
				{
				setState(5345);
				match(REAL);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 22);
				{
				setState(5346);
				match(NCHAR);
				}
				break;
			case LONG:
				enterOuterAlt(_localctx, 23);
				{
				setState(5347);
				match(LONG);
				setState(5349);
				_la = _input.LA(1);
				if (_la==RAW) {
					{
					setState(5348);
					match(RAW);
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(5351);
				match(CHAR);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 25);
				{
				setState(5352);
				match(CHARACTER);
				}
				break;
			case VARCHAR2:
				enterOuterAlt(_localctx, 26);
				{
				setState(5353);
				match(VARCHAR2);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 27);
				{
				setState(5354);
				match(VARCHAR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 28);
				{
				setState(5355);
				match(STRING);
				}
				break;
			case RAW:
				enterOuterAlt(_localctx, 29);
				{
				setState(5356);
				match(RAW);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 30);
				{
				setState(5357);
				match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 31);
				{
				setState(5358);
				match(DATE);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 32);
				{
				setState(5359);
				match(ROWID);
				}
				break;
			case UROWID:
				enterOuterAlt(_localctx, 33);
				{
				setState(5360);
				match(UROWID);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 34);
				{
				setState(5361);
				match(YEAR);
				}
				break;
			case MONTH:
				enterOuterAlt(_localctx, 35);
				{
				setState(5362);
				match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 36);
				{
				setState(5363);
				match(DAY);
				}
				break;
			case HOUR:
				enterOuterAlt(_localctx, 37);
				{
				setState(5364);
				match(HOUR);
				}
				break;
			case MINUTE:
				enterOuterAlt(_localctx, 38);
				{
				setState(5365);
				match(MINUTE);
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 39);
				{
				setState(5366);
				match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				enterOuterAlt(_localctx, 40);
				{
				setState(5367);
				match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 41);
				{
				setState(5368);
				match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				enterOuterAlt(_localctx, 42);
				{
				setState(5369);
				match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				enterOuterAlt(_localctx, 43);
				{
				setState(5370);
				match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 44);
				{
				setState(5371);
				match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				enterOuterAlt(_localctx, 45);
				{
				setState(5372);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 46);
				{
				setState(5373);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 47);
				{
				setState(5374);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 48);
				{
				setState(5375);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 49);
				{
				setState(5376);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				enterOuterAlt(_localctx, 50);
				{
				setState(5377);
				match(BFILE);
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 51);
				{
				setState(5378);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 52);
				{
				setState(5379);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 53);
				{
				setState(5380);
				match(NCLOB);
				}
				break;
			case MLSLABEL:
				enterOuterAlt(_localctx, 54);
				{
				setState(5381);
				match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bind_variableContext extends ParserRuleContext {
		public List<TerminalNode> BINDVAR() { return getTokens(PlSqlParser.BINDVAR); }
		public TerminalNode BINDVAR(int i) {
			return getToken(PlSqlParser.BINDVAR, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public TerminalNode INDICATOR() { return getToken(PlSqlParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterBind_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitBind_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitBind_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_bind_variable);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5387);
			switch (_input.LA(1)) {
			case BINDVAR:
				{
				setState(5384);
				match(BINDVAR);
				}
				break;
			case COLON:
				{
				setState(5385);
				match(COLON);
				setState(5386);
				match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5397);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,701,_ctx) ) {
			case 1:
				{
				setState(5390);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(5389);
					match(INDICATOR);
					}
				}

				setState(5395);
				switch (_input.LA(1)) {
				case BINDVAR:
					{
					setState(5392);
					match(BINDVAR);
					}
					break;
				case COLON:
					{
					setState(5393);
					match(COLON);
					setState(5394);
					match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(5403);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,702,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5399);
					match(PERIOD);
					setState(5400);
					general_element_part();
					}
					} 
				}
				setState(5405);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,702,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_elementContext extends ParserRuleContext {
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public General_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGeneral_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGeneral_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGeneral_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_elementContext general_element() throws RecognitionException {
		General_elementContext _localctx = new General_elementContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_general_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5406);
			general_element_part();
			setState(5411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5407);
				match(PERIOD);
				setState(5408);
				general_element_part();
				}
				}
				setState(5413);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_element_partContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public General_element_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGeneral_element_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGeneral_element_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGeneral_element_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_element_partContext general_element_part() throws RecognitionException {
		General_element_partContext _localctx = new General_element_partContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_general_element_part);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5416);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5414);
				match(INTRODUCER);
				setState(5415);
				char_set_name();
				}
			}

			setState(5418);
			id_expression();
			setState(5423);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,705,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5419);
					match(PERIOD);
					setState(5420);
					id_expression();
					}
					} 
				}
				setState(5425);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,705,_ctx);
			}
			setState(5427);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
			case 1:
				{
				setState(5426);
				function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitTable_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitTable_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5431);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5429);
				match(INTRODUCER);
				setState(5430);
				char_set_name();
				}
			}

			setState(5433);
			id_expression();
			setState(5438);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5434);
				match(PERIOD);
				setState(5435);
				id_expression();
				}
				}
				setState(5440);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public List<Bind_variableContext> bind_variable() {
			return getRuleContexts(Bind_variableContext.class);
		}
		public Bind_variableContext bind_variable(int i) {
			return getRuleContext(Bind_variableContext.class,i);
		}
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public List<TerminalNode> DAY() { return getTokens(PlSqlParser.DAY); }
		public TerminalNode DAY(int i) {
			return getToken(PlSqlParser.DAY, i);
		}
		public List<TerminalNode> HOUR() { return getTokens(PlSqlParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(PlSqlParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(PlSqlParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(PlSqlParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(PlSqlParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(PlSqlParser.SECOND, i);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public TerminalNode TRUE() { return getToken(PlSqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PlSqlParser.FALSE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(PlSqlParser.DBTIMEZONE, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_constant);
		int _la;
		try {
			setState(5503);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5441);
				match(TIMESTAMP);
				setState(5444);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5442);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5443);
					bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5450);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,710,_ctx) ) {
				case 1:
					{
					setState(5446);
					match(AT);
					setState(5447);
					match(TIME);
					setState(5448);
					match(ZONE);
					setState(5449);
					quoted_string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5452);
				match(INTERVAL);
				setState(5456);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5453);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5454);
					bind_variable();
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CACHE:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case SQL_PERCENT_ROWCOUNT:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5455);
					general_element_part();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5458);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				} else {
					consume();
				}
				setState(5472);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
				case 1:
					{
					setState(5459);
					match(LEFT_PAREN);
					setState(5462);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(5460);
						match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						setState(5461);
						bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5469);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5464);
						match(COMMA);
						setState(5467);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(5465);
							match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							setState(5466);
							bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(5471);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5489);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
				case 1:
					{
					setState(5474);
					match(TO);
					setState(5487);
					switch (_input.LA(1)) {
					case DAY:
						{
						setState(5475);
						match(DAY);
						}
						break;
					case HOUR:
						{
						setState(5476);
						match(HOUR);
						}
						break;
					case MINUTE:
						{
						setState(5477);
						match(MINUTE);
						}
						break;
					case SECOND:
						{
						setState(5478);
						match(SECOND);
						setState(5485);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,717,_ctx) ) {
						case 1:
							{
							setState(5479);
							match(LEFT_PAREN);
							setState(5482);
							switch (_input.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								setState(5480);
								match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								setState(5481);
								bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5484);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5491);
				numeric();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5492);
				match(DATE);
				setState(5493);
				quoted_string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(5494);
				quoted_string();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(5495);
				match(NULL);
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5496);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5497);
				match(FALSE);
				}
				break;
			case DBTIMEZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5498);
				match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				enterOuterAlt(_localctx, 10);
				{
				setState(5499);
				match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5500);
				match(MINVALUE);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 12);
				{
				setState(5501);
				match(MAXVALUE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 13);
				{
				setState(5502);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(PlSqlParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_numeric);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5505);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quoted_stringContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(PlSqlParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterQuoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitQuoted_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitQuoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quoted_stringContext quoted_string() throws RecognitionException {
		Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_quoted_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5507);
			_la = _input.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5511);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5509);
				match(INTRODUCER);
				setState(5510);
				char_set_name();
				}
			}

			setState(5513);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_expressionContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode DELIMITED_ID() { return getToken(PlSqlParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterId_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitId_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitId_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_id_expression);
		try {
			setState(5517);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CACHE:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case SQL_PERCENT_ROWCOUNT:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5515);
				regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5516);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Not_equal_opContext extends ParserRuleContext {
		public TerminalNode NOT_EQUAL_OP() { return getToken(PlSqlParser.NOT_EQUAL_OP, 0); }
		public Not_equal_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not_equal_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterNot_equal_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitNot_equal_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitNot_equal_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Not_equal_opContext not_equal_op() throws RecognitionException {
		Not_equal_opContext _localctx = new Not_equal_opContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_not_equal_op);
		try {
			setState(5526);
			switch (_input.LA(1)) {
			case NOT_EQUAL_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5519);
				match(NOT_EQUAL_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5520);
				match(LESS_THAN_OP);
				setState(5521);
				match(GREATER_THAN_OP);
				}
				break;
			case EXCLAMATION_OPERATOR_PART:
				enterOuterAlt(_localctx, 3);
				{
				setState(5522);
				match(EXCLAMATION_OPERATOR_PART);
				setState(5523);
				match(EQUALS_OP);
				}
				break;
			case CARRET_OPERATOR_PART:
				enterOuterAlt(_localctx, 4);
				{
				setState(5524);
				match(CARRET_OPERATOR_PART);
				setState(5525);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Greater_than_or_equals_opContext extends ParserRuleContext {
		public Greater_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_greater_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterGreater_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitGreater_than_or_equals_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitGreater_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Greater_than_or_equals_opContext greater_than_or_equals_op() throws RecognitionException {
		Greater_than_or_equals_opContext _localctx = new Greater_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_greater_than_or_equals_op);
		try {
			setState(5531);
			switch (_input.LA(1)) {
			case GREATER_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5528);
				match(GREATER_THAN_OR_EQUALS_OP);
				}
				break;
			case GREATER_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5529);
				match(GREATER_THAN_OP);
				setState(5530);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Less_than_or_equals_opContext extends ParserRuleContext {
		public Less_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_less_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterLess_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitLess_than_or_equals_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitLess_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Less_than_or_equals_opContext less_than_or_equals_op() throws RecognitionException {
		Less_than_or_equals_opContext _localctx = new Less_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_less_than_or_equals_op);
		try {
			setState(5536);
			switch (_input.LA(1)) {
			case LESS_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5533);
				match(LESS_THAN_OR_EQUALS_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5534);
				match(LESS_THAN_OP);
				setState(5535);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Concatenation_opContext extends ParserRuleContext {
		public Concatenation_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterConcatenation_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitConcatenation_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitConcatenation_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Concatenation_opContext concatenation_op() throws RecognitionException {
		Concatenation_opContext _localctx = new Concatenation_opContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_concatenation_op);
		try {
			setState(5541);
			switch (_input.LA(1)) {
			case CONCATENATION_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5538);
				match(CONCATENATION_OP);
				}
				break;
			case VERTICAL_BAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5539);
				match(VERTICAL_BAR);
				setState(5540);
				match(VERTICAL_BAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_signContext extends ParserRuleContext {
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterOuter_join_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitOuter_join_sign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitOuter_join_sign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5543);
			match(LEFT_PAREN);
			setState(5544);
			match(PLUS_SIGN);
			setState(5545);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_idContext extends ParserRuleContext {
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public TerminalNode A_LETTER() { return getToken(PlSqlParser.A_LETTER, 0); }
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode AGENT() { return getToken(PlSqlParser.AGENT, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlSqlParser.AGGREGATE, 0); }
		public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
		public TerminalNode ARRAY() { return getToken(PlSqlParser.ARRAY, 0); }
		public TerminalNode ASSOCIATE() { return getToken(PlSqlParser.ASSOCIATE, 0); }
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PlSqlParser.ATTRIBUTE, 0); }
		public TerminalNode AUDIT() { return getToken(PlSqlParser.AUDIT, 0); }
		public TerminalNode AUTHID() { return getToken(PlSqlParser.AUTHID, 0); }
		public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
		public TerminalNode AUTOMATIC() { return getToken(PlSqlParser.AUTOMATIC, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode BATCH() { return getToken(PlSqlParser.BATCH, 0); }
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode BFILE() { return getToken(PlSqlParser.BFILE, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(PlSqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(PlSqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(PlSqlParser.BINARY_INTEGER, 0); }
		public TerminalNode BLOB() { return getToken(PlSqlParser.BLOB, 0); }
		public TerminalNode BLOCK() { return getToken(PlSqlParser.BLOCK, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode BOOLEAN() { return getToken(PlSqlParser.BOOLEAN, 0); }
		public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode BYTE() { return getToken(PlSqlParser.BYTE, 0); }
		public TerminalNode C_LETTER() { return getToken(PlSqlParser.C_LETTER, 0); }
		public TerminalNode CACHE() { return getToken(PlSqlParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public TerminalNode CANONICAL() { return getToken(PlSqlParser.CANONICAL, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode CAST() { return getToken(PlSqlParser.CAST, 0); }
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode CHAR_CS() { return getToken(PlSqlParser.CHAR_CS, 0); }
		public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
		public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
		public TerminalNode CLOB() { return getToken(PlSqlParser.CLOB, 0); }
		public TerminalNode CLOSE() { return getToken(PlSqlParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PlSqlParser.CLUSTER, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public TerminalNode COLUMNS() { return getToken(PlSqlParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PlSqlParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(PlSqlParser.COMPATIBILITY, 0); }
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode CONSTANT() { return getToken(PlSqlParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlSqlParser.CONSTRAINTS, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode CONTENT() { return getToken(PlSqlParser.CONTENT, 0); }
		public TerminalNode CONTEXT() { return getToken(PlSqlParser.CONTEXT, 0); }
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public TerminalNode CONVERT() { return getToken(PlSqlParser.CONVERT, 0); }
		public TerminalNode CORRUPT_XID() { return getToken(PlSqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COST() { return getToken(PlSqlParser.COST, 0); }
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public TerminalNode CROSS() { return getToken(PlSqlParser.CROSS, 0); }
		public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlSqlParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(PlSqlParser.CUSTOMDATUM, 0); }
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(PlSqlParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(PlSqlParser.DBTIMEZONE, 0); }
		public TerminalNode DDL() { return getToken(PlSqlParser.DDL, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public TerminalNode DEC() { return getToken(PlSqlParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(PlSqlParser.DECIMAL, 0); }
		public TerminalNode DECOMPOSE() { return getToken(PlSqlParser.DECOMPOSE, 0); }
		public TerminalNode DECREMENT() { return getToken(PlSqlParser.DECREMENT, 0); }
		public TerminalNode DEFAULTS() { return getToken(PlSqlParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(PlSqlParser.DEFINER, 0); }
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(PlSqlParser.DETERMINISTIC, 0); }
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(PlSqlParser.DISASSOCIATE, 0); }
		public TerminalNode DOCUMENT() { return getToken(PlSqlParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(PlSqlParser.DOUBLE, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode EACH() { return getToken(PlSqlParser.EACH, 0); }
		public TerminalNode ELEMENT() { return getToken(PlSqlParser.ELEMENT, 0); }
		public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(PlSqlParser.ENCODING, 0); }
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(PlSqlParser.ESCAPE, 0); }
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(PlSqlParser.EXCEPTION_INIT, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public TerminalNode EXCLUDE() { return getToken(PlSqlParser.EXCLUDE, 0); }
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(PlSqlParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(PlSqlParser.EXTRACT, 0); }
		public TerminalNode FAILURE() { return getToken(PlSqlParser.FAILURE, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(PlSqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLOAT() { return getToken(PlSqlParser.FLOAT, 0); }
		public TerminalNode FOLLOWING() { return getToken(PlSqlParser.FOLLOWING, 0); }
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public TerminalNode FORALL() { return getToken(PlSqlParser.FORALL, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode FULL() { return getToken(PlSqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public TerminalNode GROUPING() { return getToken(PlSqlParser.GROUPING, 0); }
		public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
		public TerminalNode HIDE() { return getToken(PlSqlParser.HIDE, 0); }
		public TerminalNode HOUR() { return getToken(PlSqlParser.HOUR, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode INCLUDE() { return getToken(PlSqlParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(PlSqlParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode INDENT() { return getToken(PlSqlParser.INDENT, 0); }
		public TerminalNode INDEXED() { return getToken(PlSqlParser.INDEXED, 0); }
		public TerminalNode INDICATOR() { return getToken(PlSqlParser.INDICATOR, 0); }
		public TerminalNode INDICES() { return getToken(PlSqlParser.INDICES, 0); }
		public TerminalNode INFINITE() { return getToken(PlSqlParser.INFINITE, 0); }
		public TerminalNode INLINE() { return getToken(PlSqlParser.INLINE, 0); }
		public TerminalNode INNER() { return getToken(PlSqlParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(PlSqlParser.INOUT, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public TerminalNode INSTEAD() { return getToken(PlSqlParser.INSTEAD, 0); }
		public TerminalNode INT() { return getToken(PlSqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(PlSqlParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode INVALIDATE() { return getToken(PlSqlParser.INVALIDATE, 0); }
		public TerminalNode ISOLATION() { return getToken(PlSqlParser.ISOLATION, 0); }
		public TerminalNode ITERATE() { return getToken(PlSqlParser.ITERATE, 0); }
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode JOIN() { return getToken(PlSqlParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(PlSqlParser.LAST_VALUE, 0); }
		public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
		public TerminalNode LEFT() { return getToken(PlSqlParser.LEFT, 0); }
		public TerminalNode LEVEL() { return getToken(PlSqlParser.LEVEL, 0); }
		public TerminalNode LIBRARY() { return getToken(PlSqlParser.LIBRARY, 0); }
		public TerminalNode LIKE2() { return getToken(PlSqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(PlSqlParser.LIKE4, 0); }
		public TerminalNode LIKEC() { return getToken(PlSqlParser.LIKEC, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode LOCKED() { return getToken(PlSqlParser.LOCKED, 0); }
		public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
		public TerminalNode LOGOFF() { return getToken(PlSqlParser.LOGOFF, 0); }
		public TerminalNode LOGON() { return getToken(PlSqlParser.LOGON, 0); }
		public TerminalNode LONG() { return getToken(PlSqlParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(PlSqlParser.LOOP, 0); }
		public TerminalNode MAIN() { return getToken(PlSqlParser.MAIN, 0); }
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode MEASURES() { return getToken(PlSqlParser.MEASURES, 0); }
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode MINUTE() { return getToken(PlSqlParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode MLSLABEL() { return getToken(PlSqlParser.MLSLABEL, 0); }
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode NAN() { return getToken(PlSqlParser.NAN, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public TerminalNode NATURALN() { return getToken(PlSqlParser.NATURALN, 0); }
		public TerminalNode NAV() { return getToken(PlSqlParser.NAV, 0); }
		public TerminalNode NCHAR() { return getToken(PlSqlParser.NCHAR, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
		public TerminalNode NCLOB() { return getToken(PlSqlParser.NCLOB, 0); }
		public TerminalNode NESTED() { return getToken(PlSqlParser.NESTED, 0); }
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode NOAUDIT() { return getToken(PlSqlParser.NOAUDIT, 0); }
		public TerminalNode NOCOPY() { return getToken(PlSqlParser.NOCOPY, 0); }
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NONE() { return getToken(PlSqlParser.NONE, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(PlSqlParser.NOSCHEMACHECK, 0); }
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(PlSqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(PlSqlParser.NUMERIC, 0); }
		public TerminalNode NVARCHAR2() { return getToken(PlSqlParser.NVARCHAR2, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public TerminalNode OID() { return getToken(PlSqlParser.OID, 0); }
		public TerminalNode OLD() { return getToken(PlSqlParser.OLD, 0); }
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public TerminalNode ORADATA() { return getToken(PlSqlParser.ORADATA, 0); }
		public TerminalNode ORDINALITY() { return getToken(PlSqlParser.ORDINALITY, 0); }
		public TerminalNode OSERROR() { return getToken(PlSqlParser.OSERROR, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(PlSqlParser.OUTER, 0); }
		public TerminalNode OVER() { return getToken(PlSqlParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(PlSqlParser.OVERRIDING, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public TerminalNode PARALLEL_ENABLE() { return getToken(PlSqlParser.PARALLEL_ENABLE, 0); }
		public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
		public TerminalNode PARENT() { return getToken(PlSqlParser.PARENT, 0); }
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(PlSqlParser.PASSING, 0); }
		public TerminalNode PATH() { return getToken(PlSqlParser.PATH, 0); }
		public TerminalNode PIPELINED() { return getToken(PlSqlParser.PIPELINED, 0); }
		public TerminalNode PLAN() { return getToken(PlSqlParser.PLAN, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(PlSqlParser.PLS_INTEGER, 0); }
		public TerminalNode POSITIVE() { return getToken(PlSqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(PlSqlParser.POSITIVEN, 0); }
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode PRECEDING() { return getToken(PlSqlParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(PlSqlParser.PRECISION, 0); }
		public TerminalNode PRESENT() { return getToken(PlSqlParser.PRESENT, 0); }
		public TerminalNode RAISE() { return getToken(PlSqlParser.RAISE, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public TerminalNode RAW() { return getToken(PlSqlParser.RAW, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode REAL() { return getToken(PlSqlParser.REAL, 0); }
		public TerminalNode RECORD() { return getToken(PlSqlParser.RECORD, 0); }
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public TerminalNode REFERENCING() { return getToken(PlSqlParser.REFERENCING, 0); }
		public TerminalNode REJECT() { return getToken(PlSqlParser.REJECT, 0); }
		public TerminalNode RELIES_ON() { return getToken(PlSqlParser.RELIES_ON, 0); }
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public TerminalNode RESPECT() { return getToken(PlSqlParser.RESPECT, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode REVERSE() { return getToken(PlSqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(PlSqlParser.RIGHT, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PlSqlParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode RULES() { return getToken(PlSqlParser.RULES, 0); }
		public TerminalNode SAMPLE() { return getToken(PlSqlParser.SAMPLE, 0); }
		public TerminalNode SAVE() { return getToken(PlSqlParser.SAVE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(PlSqlParser.SCHEMACHECK, 0); }
		public TerminalNode SCN() { return getToken(PlSqlParser.SCN, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public TerminalNode SEED() { return getToken(PlSqlParser.SEED, 0); }
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public TerminalNode SELF() { return getToken(PlSqlParser.SELF, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(PlSqlParser.SEQUENTIAL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PlSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode SERVERERROR() { return getToken(PlSqlParser.SERVERERROR, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode SETS() { return getToken(PlSqlParser.SETS, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
		public TerminalNode SHUTDOWN() { return getToken(PlSqlParser.SHUTDOWN, 0); }
		public TerminalNode SIBLINGS() { return getToken(PlSqlParser.SIBLINGS, 0); }
		public TerminalNode SIGNTYPE() { return getToken(PlSqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(PlSqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode SINGLE() { return getToken(PlSqlParser.SINGLE, 0); }
		public TerminalNode SKIP_() { return getToken(PlSqlParser.SKIP_, 0); }
		public TerminalNode SMALLINT() { return getToken(PlSqlParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PlSqlParser.SNAPSHOT, 0); }
		public TerminalNode SOME() { return getToken(PlSqlParser.SOME, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public TerminalNode SQLDATA() { return getToken(PlSqlParser.SQLDATA, 0); }
		public TerminalNode SQLERROR() { return getToken(PlSqlParser.SQLERROR, 0); }
		public TerminalNode SQL_PERCENT_ROWCOUNT() { return getToken(PlSqlParser.SQL_PERCENT_ROWCOUNT, 0); }
		public TerminalNode STANDALONE() { return getToken(PlSqlParser.STANDALONE, 0); }
		public TerminalNode STARTUP() { return getToken(PlSqlParser.STARTUP, 0); }
		public TerminalNode STATEMENT() { return getToken(PlSqlParser.STATEMENT, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(PlSqlParser.STATEMENT_ID, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
		public TerminalNode STRING() { return getToken(PlSqlParser.STRING, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PlSqlParser.SUBMULTISET, 0); }
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode SUBTYPE() { return getToken(PlSqlParser.SUBTYPE, 0); }
		public TerminalNode SUCCESS() { return getToken(PlSqlParser.SUCCESS, 0); }
		public TerminalNode SUSPEND() { return getToken(PlSqlParser.SUSPEND, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(PlSqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PlSqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(PlSqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlSqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
		public TerminalNode TREAT() { return getToken(PlSqlParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PlSqlParser.UNBOUNDED, 0); }
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public TerminalNode UNTIL() { return getToken(PlSqlParser.UNTIL, 0); }
		public TerminalNode UPDATED() { return getToken(PlSqlParser.UPDATED, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public TerminalNode UROWID() { return getToken(PlSqlParser.UROWID, 0); }
		public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
		public TerminalNode VALIDATE() { return getToken(PlSqlParser.VALIDATE, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public TerminalNode VARCHAR() { return getToken(PlSqlParser.VARCHAR, 0); }
		public TerminalNode VARCHAR2() { return getToken(PlSqlParser.VARCHAR2, 0); }
		public TerminalNode VARIABLE() { return getToken(PlSqlParser.VARIABLE, 0); }
		public TerminalNode VARRAY() { return getToken(PlSqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(PlSqlParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public TerminalNode VERSIONS() { return getToken(PlSqlParser.VERSIONS, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public TerminalNode WARNING() { return getToken(PlSqlParser.WARNING, 0); }
		public TerminalNode WELLFORMED() { return getToken(PlSqlParser.WELLFORMED, 0); }
		public TerminalNode WHENEVER() { return getToken(PlSqlParser.WHENEVER, 0); }
		public TerminalNode WHILE() { return getToken(PlSqlParser.WHILE, 0); }
		public TerminalNode WITHIN() { return getToken(PlSqlParser.WITHIN, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(PlSqlParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(PlSqlParser.XMLAGG, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PlSqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCAST() { return getToken(PlSqlParser.XMLCAST, 0); }
		public TerminalNode XMLCOLATTVAL() { return getToken(PlSqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PlSqlParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PlSqlParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PlSqlParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(PlSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(PlSqlParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(PlSqlParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(PlSqlParser.XMLQUERY, 0); }
		public TerminalNode XMLROOT() { return getToken(PlSqlParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PlSqlParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(PlSqlParser.XMLTABLE, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(PlSqlParser.YES, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode PREDICTION() { return getToken(PlSqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(PlSqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(PlSqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(PlSqlParser.PREDICTION_SET, 0); }
		public TerminalNode CUME_DIST() { return getToken(PlSqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(PlSqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PlSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PlSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PlSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(PlSqlParser.RANK, 0); }
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(PlSqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(PlSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(PlSqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(PlSqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(PlSqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(PlSqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(PlSqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PlSqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(PlSqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(PlSqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(PlSqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(PlSqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(PlSqlParser.COVAR_, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).enterRegular_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlListener ) ((PlSqlListener)listener).exitRegular_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlVisitor ) return ((PlSqlVisitor<? extends T>)visitor).visitRegular_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_regular_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5547);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLLECT - 64)) | (1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENABLE - 128)) | (1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INTERVAL - 193)) | (1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NONE - 258)) | (1L << (NOSCHEMACHECK - 258)) | (1L << (NULLS - 258)) | (1L << (NUMBER - 258)) | (1L << (NUMERIC - 258)) | (1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RELIES_ON - 322)) | (1L << (RENAME - 322)) | (1L << (REPLACE - 322)) | (1L << (RESPECT - 322)) | (1L << (RESTRICT_REFERENCES - 322)) | (1L << (RESULT - 322)) | (1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (SQL_PERCENT_ROWCOUNT - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (SUBMULTISET - 386)) | (1L << (SUBPARTITION - 386)) | (1L << (SUBSTITUTABLE - 386)) | (1L << (SUBTYPE - 386)) | (1L << (SUCCESS - 386)) | (1L << (SUSPEND - 386)) | (1L << (TIME - 386)) | (1L << (TIMESTAMP - 386)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 386)) | (1L << (TIMESTAMP_UNCONSTRAINED - 386)) | (1L << (TIMEZONE_ABBR - 386)) | (1L << (TIMEZONE_HOUR - 386)) | (1L << (TIMEZONE_MINUTE - 386)) | (1L << (TIMEZONE_REGION - 386)) | (1L << (TRAILING - 386)) | (1L << (TRANSACTION - 386)) | (1L << (TRANSLATE - 386)) | (1L << (TREAT - 386)) | (1L << (TRIGGER - 386)) | (1L << (TRIM - 386)) | (1L << (TRUNCATE - 386)) | (1L << (TYPE - 386)) | (1L << (UNBOUNDED - 386)) | (1L << (UNDER - 386)) | (1L << (UNLIMITED - 386)) | (1L << (UNTIL - 386)) | (1L << (UPDATED - 386)) | (1L << (UPSERT - 386)) | (1L << (UROWID - 386)) | (1L << (USE - 386)) | (1L << (VALIDATE - 386)) | (1L << (VALUE - 386)) | (1L << (VARCHAR - 386)) | (1L << (VARCHAR2 - 386)) | (1L << (VARIABLE - 386)) | (1L << (VARRAY - 386)) | (1L << (VARYING - 386)) | (1L << (VERSION - 386)) | (1L << (VERSIONS - 386)) | (1L << (WAIT - 386)) | (1L << (WARNING - 386)) | (1L << (WELLFORMED - 386)) | (1L << (WHENEVER - 386)) | (1L << (WHILE - 386)) | (1L << (WITHIN - 386)) | (1L << (WORK - 386)) | (1L << (WRITE - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (XML - 450)) | (1L << (XMLAGG - 450)) | (1L << (XMLATTRIBUTES - 450)) | (1L << (XMLCAST - 450)) | (1L << (XMLCOLATTVAL - 450)) | (1L << (XMLELEMENT - 450)) | (1L << (XMLEXISTS - 450)) | (1L << (XMLFOREST - 450)) | (1L << (XMLNAMESPACES - 450)) | (1L << (XMLPARSE - 450)) | (1L << (XMLPI - 450)) | (1L << (XMLQUERY - 450)) | (1L << (XMLROOT - 450)) | (1L << (XMLSERIALIZE - 450)) | (1L << (XMLTABLE - 450)) | (1L << (YEAR - 450)) | (1L << (YES - 450)) | (1L << (YMINTERVAL_UNCONSTRAINED - 450)) | (1L << (ZONE - 450)) | (1L << (PREDICTION - 450)) | (1L << (PREDICTION_BOUNDS - 450)) | (1L << (PREDICTION_COST - 450)) | (1L << (PREDICTION_DETAILS - 450)) | (1L << (PREDICTION_PROBABILITY - 450)) | (1L << (PREDICTION_SET - 450)) | (1L << (CUME_DIST - 450)) | (1L << (DENSE_RANK - 450)) | (1L << (LISTAGG - 450)) | (1L << (PERCENT_RANK - 450)) | (1L << (PERCENTILE_CONT - 450)) | (1L << (PERCENTILE_DISC - 450)) | (1L << (RANK - 450)) | (1L << (AVG - 450)) | (1L << (CORR - 450)) | (1L << (LAG - 450)) | (1L << (LEAD - 450)) | (1L << (MAX - 450)) | (1L << (MEDIAN - 450)) | (1L << (MIN - 450)) | (1L << (NTILE - 450)) | (1L << (RATIO_TO_REPORT - 450)) | (1L << (ROW_NUMBER - 450)) | (1L << (SUM - 450)) | (1L << (VARIANCE - 450)) | (1L << (REGR_ - 450)) | (1L << (STDDEV - 450)) | (1L << (VAR_ - 450)) | (1L << (COVAR_ - 450)))) != 0) || _la==REGULAR_ID) ) {
			_errHandler.recoverInline(this);
			} else {
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u027b\u15b0\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\3\2\6\2\u031a\n\2\r\2\16\2\u031b"+
		"\3\3\7\3\u031f\n\3\f\3\16\3\u0322\13\3\3\3\3\3\3\4\3\4\3\4\7\4\u0329\n"+
		"\4\f\4\16\4\u032c\13\4\3\4\5\4\u032f\n\4\3\4\3\4\7\4\u0333\n\4\f\4\16"+
		"\4\u0336\13\4\3\4\5\4\u0339\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3"+
		"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u0352\n\5\3"+
		"\6\3\6\7\6\u0356\n\6\f\6\16\6\u0359\13\6\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3"+
		"\t\3\t\3\t\3\t\3\t\5\t\u0367\n\t\3\t\7\t\u036a\n\t\f\t\16\t\u036d\13\t"+
		"\3\t\3\t\5\t\u0371\n\t\3\t\3\t\3\n\3\n\3\n\5\n\u0378\n\n\5\n\u037a\n\n"+
		"\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u0384\n\13\f\13\16\13\u0387"+
		"\13\13\3\13\3\13\5\13\u038b\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3"+
		"\13\3\13\3\13\7\13\u0397\n\13\f\13\16\13\u039a\13\13\3\13\3\13\7\13\u039e"+
		"\n\13\f\13\16\13\u03a1\13\13\3\13\3\13\5\13\u03a5\n\13\5\13\u03a7\n\13"+
		"\3\13\3\13\3\f\3\f\5\f\u03ad\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3"+
		"\r\7\r\u03b9\n\r\f\r\16\r\u03bc\13\r\3\r\3\r\5\r\u03c0\n\r\3\r\5\r\u03c3"+
		"\n\r\3\r\3\r\3\16\3\16\5\16\u03c9\n\16\3\17\3\17\3\17\3\17\3\17\7\17\u03d0"+
		"\n\17\f\17\16\17\u03d3\13\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3"+
		"\20\7\20\u03de\n\20\f\20\16\20\u03e1\13\20\3\20\3\20\3\21\3\21\3\21\5"+
		"\21\u03e8\n\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\5\22\u03f2\n\22"+
		"\3\22\5\22\u03f5\n\22\3\22\7\22\u03f8\n\22\f\22\16\22\u03fb\13\22\3\22"+
		"\3\22\5\22\u03ff\n\22\3\22\3\22\3\23\3\23\3\23\5\23\u0406\n\23\3\23\3"+
		"\23\3\23\5\23\u040b\n\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\7\24\u0414"+
		"\n\24\f\24\16\24\u0417\13\24\3\24\3\24\5\24\u041b\n\24\3\24\5\24\u041e"+
		"\n\24\3\24\3\24\5\24\u0422\n\24\3\25\3\25\5\25\u0426\n\25\3\25\3\25\7"+
		"\25\u042a\n\25\f\25\16\25\u042d\13\25\3\25\3\25\5\25\u0431\n\25\3\26\3"+
		"\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u043d\n\26\3\27\3\27"+
		"\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0449\n\27\3\30\3\30\3\30"+
		"\3\30\3\30\3\31\3\31\3\31\3\31\3\31\5\31\u0455\n\31\3\31\7\31\u0458\n"+
		"\31\f\31\16\31\u045b\13\31\3\31\3\31\5\31\u045f\n\31\3\31\3\31\3\32\3"+
		"\32\3\32\5\32\u0466\n\32\5\32\u0468\n\32\3\32\3\32\3\33\3\33\3\33\3\33"+
		"\3\33\3\33\7\33\u0472\n\33\f\33\16\33\u0475\13\33\3\33\3\33\5\33\u0479"+
		"\n\33\3\33\5\33\u047c\n\33\3\33\3\33\7\33\u0480\n\33\f\33\16\33\u0483"+
		"\13\33\3\33\3\33\3\33\5\33\u0488\n\33\5\33\u048a\n\33\3\33\3\33\3\34\3"+
		"\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u049c"+
		"\n\35\3\35\7\35\u049f\n\35\f\35\16\35\u04a2\13\35\3\35\3\35\5\35\u04a6"+
		"\n\35\5\35\u04a8\n\35\3\35\3\35\3\36\3\36\3\36\5\36\u04af\n\36\3\36\3"+
		"\36\3\36\3\36\3\36\5\36\u04b6\n\36\3\36\5\36\u04b9\n\36\3\36\5\36\u04bc"+
		"\n\36\3\36\5\36\u04bf\n\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\7\37\u04c8"+
		"\n\37\f\37\16\37\u04cb\13\37\3 \3 \3 \3 \3 \3!\3!\3!\3!\5!\u04d6\n!\3"+
		"!\3!\5!\u04da\n!\3!\5!\u04dd\n!\3\"\3\"\3\"\3\"\3#\3#\3#\5#\u04e6\n#\3"+
		"$\3$\3$\3$\7$\u04ec\n$\f$\16$\u04ef\13$\3$\3$\3$\3$\3$\5$\u04f6\n$\3$"+
		"\5$\u04f9\n$\3%\3%\3%\3%\3%\5%\u0500\n%\3&\3&\5&\u0504\n&\3\'\3\'\3\'"+
		"\7\'\u0509\n\'\f\'\16\'\u050c\13\'\3\'\6\'\u050f\n\'\r\'\16\'\u0510\3"+
		"\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3"+
		"(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u053a\n(\3)\3)\3"+
		")\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3"+
		")\5)\u0556\n)\3*\3*\3*\7*\u055b\n*\f*\16*\u055e\13*\3*\3*\5*\u0562\n*"+
		"\3*\3*\3+\3+\3+\3+\3+\7+\u056b\n+\f+\16+\u056e\13+\5+\u0570\n+\3,\3,\3"+
		",\3,\3,\3-\3-\6-\u0579\n-\r-\16-\u057a\3.\3.\3.\3/\3/\3/\5/\u0583\n/\3"+
		"/\3/\5/\u0587\n/\3/\3/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u0593"+
		"\n\60\3\60\5\60\u0596\n\60\3\60\3\60\3\61\3\61\5\61\u059c\n\61\3\61\5"+
		"\61\u059f\n\61\3\61\7\61\u05a2\n\61\f\61\16\61\u05a5\13\61\3\61\3\61\5"+
		"\61\u05a9\n\61\3\62\3\62\5\62\u05ad\n\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\7\62\u05b5\n\62\f\62\16\62\u05b8\13\62\3\62\3\62\3\63\3\63\3\63\7\63"+
		"\u05bf\n\63\f\63\16\63\u05c2\13\63\3\64\3\64\3\64\5\64\u05c7\n\64\3\65"+
		"\3\65\3\65\3\65\3\65\3\65\3\65\7\65\u05d0\n\65\f\65\16\65\u05d3\13\65"+
		"\3\65\3\65\5\65\u05d7\n\65\3\66\3\66\5\66\u05db\n\66\3\67\3\67\3\67\3"+
		"\67\3\67\3\67\5\67\u05e3\n\67\38\38\38\38\38\38\58\u05eb\n8\38\38\38\5"+
		"8\u05f0\n8\38\58\u05f3\n8\58\u05f5\n8\39\59\u05f8\n9\39\39\39\39\3:\3"+
		":\3:\5:\u0601\n:\3:\3:\3:\5:\u0606\n:\3:\3:\3;\3;\3;\5;\u060d\n;\3;\5"+
		";\u0610\n;\3<\5<\u0613\n<\3<\3<\5<\u0617\n<\3<\5<\u061a\n<\3<\3<\3<\3"+
		"<\7<\u0620\n<\f<\16<\u0623\13<\3<\3<\5<\u0627\n<\3<\7<\u062a\n<\f<\16"+
		"<\u062d\13<\3=\3=\3=\3=\5=\u0633\n=\3>\3>\3>\3?\3?\3?\3?\3?\5?\u063d\n"+
		"?\3@\3@\3@\3@\3@\3@\3@\3@\3A\3A\3A\3A\3A\3A\7A\u064d\nA\fA\16A\u0650\13"+
		"A\3A\3A\3B\3B\5B\u0656\nB\3C\3C\3C\3C\3D\3D\3D\3D\5D\u0660\nD\3E\3E\3"+
		"E\3E\3E\3E\7E\u0668\nE\fE\16E\u066b\13E\3E\3E\3E\3E\7E\u0671\nE\fE\16"+
		"E\u0674\13E\3E\3E\3E\5E\u0679\nE\3F\3F\3F\3F\3F\3F\7F\u0681\nF\fF\16F"+
		"\u0684\13F\3F\3F\5F\u0688\nF\3F\3F\3F\3F\3F\7F\u068f\nF\fF\16F\u0692\13"+
		"F\3F\3F\3F\5F\u0697\nF\3G\5G\u069a\nG\3G\5G\u069d\nG\3G\3G\3G\3G\3G\3"+
		"G\3G\3G\3G\3G\3G\3G\3G\7G\u06ac\nG\fG\16G\u06af\13G\3G\3G\5G\u06b3\nG"+
		"\3G\3G\3G\3G\3G\3G\3G\7G\u06bc\nG\fG\16G\u06bf\13G\3G\3G\3G\5G\u06c4\n"+
		"G\3H\5H\u06c7\nH\3H\3H\3I\3I\3I\5I\u06ce\nI\3I\5I\u06d1\nI\3J\3J\3J\3"+
		"J\3K\5K\u06d8\nK\3K\6K\u06db\nK\rK\16K\u06dc\3K\3K\5K\u06e1\nK\3L\3L\3"+
		"L\5L\u06e6\nL\3M\3M\3M\5M\u06eb\nM\3N\3N\3N\3N\3N\3N\7N\u06f3\nN\fN\16"+
		"N\u06f6\13N\3N\3N\3N\3N\5N\u06fc\nN\3O\3O\3O\3O\3O\3O\7O\u0704\nO\fO\16"+
		"O\u0707\13O\3O\3O\5O\u070b\nO\3O\3O\3O\3O\3O\5O\u0712\nO\3O\3O\3O\3O\3"+
		"O\5O\u0719\nO\3O\3O\5O\u071d\nO\3P\5P\u0720\nP\3P\5P\u0723\nP\3P\3P\3"+
		"P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\7P\u0732\nP\fP\16P\u0735\13P\3P\3P\5P"+
		"\u0739\nP\3P\3P\3P\3P\3P\3P\3P\5P\u0742\nP\3Q\3Q\3Q\3Q\3R\3R\3R\3R\3R"+
		"\3R\7R\u074e\nR\fR\16R\u0751\13R\3R\3R\3S\3S\5S\u0757\nS\3T\3T\3T\3U\3"+
		"U\3U\3U\3U\3V\3V\3V\3V\6V\u0765\nV\rV\16V\u0766\3V\3V\3W\3W\3W\3W\3W\7"+
		"W\u0770\nW\fW\16W\u0773\13W\3W\3W\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X"+
		"\3X\3X\3X\3X\5X\u0787\nX\3Y\3Y\3Y\3Y\3Z\3Z\3Z\3[\3[\3[\3[\3\\\3\\\3\\"+
		"\5\\\u0797\n\\\3]\3]\3]\3]\3^\3^\3^\5^\u07a0\n^\3^\3^\3^\5^\u07a5\n^\3"+
		"^\3^\5^\u07a9\n^\3^\5^\u07ac\n^\3_\3_\3_\3_\3_\3_\7_\u07b4\n_\f_\16_\u07b7"+
		"\13_\3_\3_\3`\3`\3`\3`\3`\7`\u07c0\n`\f`\16`\u07c3\13`\3`\3`\3`\5`\u07c8"+
		"\n`\3`\3`\3a\3a\7a\u07ce\na\fa\16a\u07d1\13a\3a\5a\u07d4\na\3a\5a\u07d7"+
		"\na\3b\3b\3b\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\5c\u07e6\nc\3d\3d\5d\u07ea"+
		"\nd\3d\3d\3d\5d\u07ef\nd\3d\5d\u07f2\nd\3d\3d\3e\3e\3e\3e\3e\3e\3e\3e"+
		"\3e\5e\u07ff\ne\3e\3e\5e\u0803\ne\3e\3e\3f\3f\3f\3f\3f\3f\7f\u080d\nf"+
		"\ff\16f\u0810\13f\3f\3f\5f\u0814\nf\3f\3f\5f\u0818\nf\3f\3f\5f\u081c\n"+
		"f\3f\3f\3g\3g\5g\u0822\ng\3g\5g\u0825\ng\3g\5g\u0828\ng\3h\3h\3h\3h\3"+
		"i\3i\3i\3i\3i\3i\3i\3i\5i\u0836\ni\3i\3i\3i\3i\3i\3i\3i\3i\3i\3i\3i\3"+
		"i\3i\3i\5i\u0846\ni\3i\3i\6i\u084a\ni\ri\16i\u084b\3i\3i\5i\u0850\ni\3"+
		"i\3i\3j\3j\5j\u0856\nj\3k\3k\3k\3k\3k\3k\3k\3k\7k\u0860\nk\fk\16k\u0863"+
		"\13k\3k\3k\3k\3k\3k\3k\5k\u086b\nk\5k\u086d\nk\3k\3k\3l\3l\5l\u0873\n"+
		"l\3l\3l\5l\u0877\nl\3l\5l\u087a\nl\3m\3m\3m\3m\5m\u0880\nm\3m\3m\3m\5"+
		"m\u0885\nm\5m\u0887\nm\3m\3m\3n\3n\5n\u088d\nn\3n\3n\3o\3o\3o\3o\3o\3"+
		"o\3o\5o\u0898\no\3o\3o\5o\u089c\no\3o\5o\u089f\no\3p\3p\5p\u08a3\np\3"+
		"p\3p\3p\3q\3q\3q\5q\u08ab\nq\3q\3q\3q\3q\3q\3q\3q\5q\u08b4\nq\3r\3r\3"+
		"r\3s\3s\3s\3s\3s\6s\u08be\ns\rs\16s\u08bf\3t\3t\3t\3t\3t\3t\3u\3u\3u\3"+
		"u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3"+
		"u\5u\u08e3\nu\3v\3v\3v\5v\u08e8\nv\3v\3v\3v\3w\3w\5w\u08ef\nw\3w\3w\5"+
		"w\u08f3\nw\3x\3x\5x\u08f7\nx\3x\3x\5x\u08fb\nx\3y\3y\3y\3z\3z\3z\3z\3"+
		"z\7z\u0905\nz\fz\16z\u0908\13z\3z\5z\u090b\nz\3z\3z\3z\3{\3{\3{\3{\3{"+
		"\3|\3|\3|\3}\5}\u0919\n}\3}\3}\3}\3}\5}\u091f\n}\3}\3}\3}\3}\3}\5}\u0926"+
		"\n}\3~\3~\3~\5~\u092b\n~\3~\3~\3~\3~\3~\3~\3~\3~\5~\u0935\n~\3~\3~\3~"+
		"\3~\5~\u093b\n~\5~\u093d\n~\3\177\3\177\3\177\3\177\3\177\3\177\3\177"+
		"\5\177\u0946\n\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\5\u0080\u0950\n\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0955\n"+
		"\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0082\3\u0082\3\u0083"+
		"\3\u0083\3\u0084\3\u0084\3\u0085\3\u0085\5\u0085\u0964\n\u0085\3\u0086"+
		"\3\u0086\5\u0086\u0968\n\u0086\3\u0087\5\u0087\u096b\n\u0087\3\u0087\3"+
		"\u0087\5\u0087\u096f\n\u0087\3\u0088\3\u0088\3\u0088\5\u0088\u0974\n\u0088"+
		"\3\u0088\3\u0088\5\u0088\u0978\n\u0088\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\5\u0089\u0981\n\u0089\5\u0089\u0983\n\u0089\3"+
		"\u0089\5\u0089\u0986\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3"+
		"\u0089\3\u0089\5\u0089\u098f\n\u0089\5\u0089\u0991\n\u0089\3\u0089\5\u0089"+
		"\u0994\n\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u099b\n"+
		"\u0089\3\u0089\5\u0089\u099e\n\u0089\5\u0089\u09a0\n\u0089\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008a\3\u008a\3\u008b\3\u008b\6\u008b\u09aa\n\u008b"+
		"\r\u008b\16\u008b\u09ab\3\u008c\3\u008c\3\u008c\3\u008c\7\u008c\u09b2"+
		"\n\u008c\f\u008c\16\u008c\u09b5\13\u008c\3\u008c\3\u008c\3\u008c\3\u008d"+
		"\5\u008d\u09bb\n\u008d\3\u008d\3\u008d\3\u008e\5\u008e\u09c0\n\u008e\3"+
		"\u008e\3\u008e\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u09c8\n\u008f\3"+
		"\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u09cf\n\u0090\3\u0090\3"+
		"\u0090\5\u0090\u09d3\n\u0090\3\u0090\5\u0090\u09d6\n\u0090\3\u0091\3\u0091"+
		"\3\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092"+
		"\u09e2\n\u0092\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u09e8\n\u0093\3"+
		"\u0094\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095\5\u0095\u09f0\n\u0095\3"+
		"\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\7\u0096\u09f8\n\u0096\f"+
		"\u0096\16\u0096\u09fb\13\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096"+
		"\3\u0096\7\u0096\u0a03\n\u0096\f\u0096\16\u0096\u0a06\13\u0096\3\u0096"+
		"\3\u0096\3\u0096\5\u0096\u0a0b\n\u0096\5\u0096\u0a0d\n\u0096\5\u0096\u0a0f"+
		"\n\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0a16\n\u0097"+
		"\3\u0097\5\u0097\u0a19\n\u0097\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\5\u0098\u0a20\n\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\5\u0099\u0a2b\n\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\5\u0099\u0a31\n\u0099\3\u0099\3\u0099\5\u0099\u0a35\n\u0099\3"+
		"\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\7\u009a\u0a3d\n\u009a\f"+
		"\u009a\16\u009a\u0a40\13\u009a\5\u009a\u0a42\n\u009a\3\u009a\3\u009a\3"+
		"\u009b\3\u009b\5\u009b\u0a48\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3"+
		"\u009b\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0a53\n\u009b\5\u009b\u0a55"+
		"\n\u009b\5\u009b\u0a57\n\u009b\3\u009b\5\u009b\u0a5a\n\u009b\3\u009c\3"+
		"\u009c\5\u009c\u0a5e\n\u009c\3\u009c\5\u009c\u0a61\n\u009c\3\u009d\3\u009d"+
		"\5\u009d\u0a65\n\u009d\3\u009d\3\u009d\5\u009d\u0a69\n\u009d\3\u009d\3"+
		"\u009d\3\u009d\5\u009d\u0a6e\n\u009d\3\u009e\3\u009e\3\u009e\3\u009f\3"+
		"\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0a79\n\u009f\3\u009f\3"+
		"\u009f\5\u009f\u0a7d\n\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3"+
		"\u009f\5\u009f\u0a85\n\u009f\3\u00a0\5\u00a0\u0a88\n\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\7\u00a0\u0a8d\n\u00a0\f\u00a0\16\u00a0\u0a90\13\u00a0\3\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a1\7\u00a1\u0a96\n\u00a1\f\u00a1\16\u00a1\u0a99"+
		"\13\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0aa0\n\u00a2"+
		"\f\u00a2\16\u00a2\u0aa3\13\u00a2\3\u00a2\3\u00a2\5\u00a2\u0aa7\n\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0aad\n\u00a2\3\u00a2\3\u00a2"+
		"\5\u00a2\u0ab1\n\u00a2\3\u00a2\5\u00a2\u0ab4\n\u00a2\3\u00a3\3\u00a3\3"+
		"\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0abc\n\u00a3\3\u00a3\5\u00a3\u0abf"+
		"\n\u00a3\3\u00a3\3\u00a3\5\u00a3\u0ac3\n\u00a3\3\u00a3\3\u00a3\5\u00a3"+
		"\u0ac7\n\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0acc\n\u00a3\3\u00a3\5"+
		"\u00a3\u0acf\n\u00a3\3\u00a3\3\u00a3\5\u00a3\u0ad3\n\u00a3\3\u00a3\3\u00a3"+
		"\5\u00a3\u0ad7\n\u00a3\7\u00a3\u0ad9\n\u00a3\f\u00a3\16\u00a3\u0adc\13"+
		"\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\7\u00a4"+
		"\u0ae5\n\u00a4\f\u00a4\16\u00a4\u0ae8\13\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5\7\u00a5\u0af3\n\u00a5"+
		"\f\u00a5\16\u00a5\u0af6\13\u00a5\3\u00a6\3\u00a6\5\u00a6\u0afa\n\u00a6"+
		"\3\u00a6\3\u00a6\5\u00a6\u0afe\n\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0b07\n\u00a7\3\u00a8\3\u00a8\5\u00a8"+
		"\u0b0b\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\7\u00a8\u0b11\n\u00a8\f"+
		"\u00a8\16\u00a8\u0b14\13\u00a8\5\u00a8\u0b16\n\u00a8\3\u00a8\5\u00a8\u0b19"+
		"\n\u00a8\3\u00a8\3\u00a8\5\u00a8\u0b1d\n\u00a8\3\u00a8\5\u00a8\u0b20\n"+
		"\u00a8\3\u00a8\5\u00a8\u0b23\n\u00a8\3\u00a8\5\u00a8\u0b26\n\u00a8\3\u00a8"+
		"\5\u00a8\u0b29\n\u00a8\3\u00a8\5\u00a8\u0b2c\n\u00a8\3\u00a9\3\u00a9\5"+
		"\u00a9\u0b30\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ab\3"+
		"\u00ab\3\u00ab\5\u00ab\u0b3a\n\u00ab\3\u00ac\3\u00ac\3\u00ac\7\u00ac\u0b3f"+
		"\n\u00ac\f\u00ac\16\u00ac\u0b42\13\u00ac\3\u00ad\3\u00ad\7\u00ad\u0b46"+
		"\n\u00ad\f\u00ad\16\u00ad\u0b49\13\u00ad\3\u00ad\3\u00ad\5\u00ad\u0b4d"+
		"\n\u00ad\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0b52\n\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\7\u00ae\u0b57\n\u00ae\f\u00ae\16\u00ae\u0b5a\13\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\5\u00ae\u0b5f\n\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0b69\n\u00ae\3\u00ae\5\u00ae"+
		"\u0b6c\n\u00ae\3\u00ae\7\u00ae\u0b6f\n\u00ae\f\u00ae\16\u00ae\u0b72\13"+
		"\u00ae\3\u00ae\5\u00ae\u0b75\n\u00ae\3\u00af\5\u00af\u0b78\n\u00af\3\u00af"+
		"\5\u00af\u0b7b\n\u00af\3\u00af\3\u00af\5\u00af\u0b7f\n\u00af\3\u00af\3"+
		"\u00af\3\u00af\5\u00af\u0b84\n\u00af\3\u00af\3\u00af\7\u00af\u0b88\n\u00af"+
		"\f\u00af\16\u00af\u0b8b\13\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b1\7\u00b1\u0b95\n\u00b1\f\u00b1\16\u00b1\u0b98"+
		"\13\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2\5\u00b2\u0b9e\n\u00b2\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\7\u00b3\u0baa\n\u00b3\f\u00b3\16\u00b3\u0bad\13\u00b3\5\u00b3\u0baf\n"+
		"\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\5\u00b4\u0bb9\n\u00b4\3\u00b5\3\u00b5\5\u00b5\u0bbd\n\u00b5\3\u00b5\3"+
		"\u00b5\3\u00b5\3\u00b5\7\u00b5\u0bc3\n\u00b5\f\u00b5\16\u00b5\u0bc6\13"+
		"\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\5\u00b6\u0bd1\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\7\u00b7\u0bd9\n\u00b7\f\u00b7\16\u00b7\u0bdc\13\u00b7\3\u00b7"+
		"\3\u00b7\5\u00b7\u0be0\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\7\u00b8\u0be8\n\u00b8\f\u00b8\16\u00b8\u0beb\13\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\7\u00b8\u0bf0\n\u00b8\f\u00b8\16\u00b8\u0bf3\13\u00b8"+
		"\5\u00b8\u0bf5\n\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9\5\u00b9\u0bfb\n"+
		"\u00b9\3\u00ba\3\u00ba\5\u00ba\u0bff\n\u00ba\3\u00bb\3\u00bb\3\u00bb\5"+
		"\u00bb\u0c04\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\7"+
		"\u00bb\u0c0c\n\u00bb\f\u00bb\16\u00bb\u0c0f\13\u00bb\3\u00bb\3\u00bb\5"+
		"\u00bb\u0c13\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3"+
		"\u00bc\3\u00bc\3\u00bc\7\u00bc\u0c1e\n\u00bc\f\u00bc\16\u00bc\u0c21\13"+
		"\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\7\u00bd"+
		"\u0c2a\n\u00bd\f\u00bd\16\u00bd\u0c2d\13\u00bd\3\u00bd\3\u00bd\5\u00bd"+
		"\u0c31\n\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\7\u00bd"+
		"\u0c39\n\u00bd\f\u00bd\16\u00bd\u0c3c\13\u00bd\3\u00bd\3\u00bd\5\u00bd"+
		"\u0c40\n\u00bd\5\u00bd\u0c42\n\u00bd\3\u00be\3\u00be\3\u00be\5\u00be\u0c47"+
		"\n\u00be\3\u00be\3\u00be\5\u00be\u0c4b\n\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\5\u00be\u0c51\n\u00be\3\u00be\3\u00be\5\u00be\u0c55\n\u00be\3"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\7\u00c0\u0c60\n\u00c0\f\u00c0\16\u00c0\u0c63\13\u00c0\3\u00c0\5\u00c0"+
		"\u0c66\n\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\7\u00c0"+
		"\u0c6e\n\u00c0\f\u00c0\16\u00c0\u0c71\13\u00c0\5\u00c0\u0c73\n\u00c0\5"+
		"\u00c0\u0c75\n\u00c0\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u0c7a\n\u00c1\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\7\u00c2\u0c81\n\u00c2\f\u00c2\16\u00c2"+
		"\u0c84\13\u00c2\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\7\u00c3\u0c8e\n\u00c3\f\u00c3\16\u00c3\u0c91\13\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u0c98\n\u00c4\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c6\3\u00c6\7\u00c6\u0c9f\n\u00c6\f\u00c6\16\u00c6\u0ca2"+
		"\13\u00c6\3\u00c6\5\u00c6\u0ca5\n\u00c6\3\u00c6\7\u00c6\u0ca8\n\u00c6"+
		"\f\u00c6\16\u00c6\u0cab\13\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0cb5\n\u00c7\5\u00c7\u0cb7\n\u00c7\3"+
		"\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\7\u00c9\u0cc5\n\u00c9\f\u00c9\16\u00c9\u0cc8"+
		"\13\u00c9\3\u00ca\3\u00ca\5\u00ca\u0ccc\n\u00ca\3\u00ca\3\u00ca\7\u00ca"+
		"\u0cd0\n\u00ca\f\u00ca\16\u00ca\u0cd3\13\u00ca\3\u00ca\3\u00ca\3\u00cb"+
		"\5\u00cb\u0cd8\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\7\u00cd"+
		"\u0ce8\n\u00cd\f\u00cd\16\u00cd\u0ceb\13\u00cd\3\u00cd\3\u00cd\3\u00ce"+
		"\3\u00ce\5\u00ce\u0cf1\n\u00ce\3\u00cf\5\u00cf\u0cf4\n\u00cf\3\u00cf\3"+
		"\u00cf\3\u00cf\3\u00cf\7\u00cf\u0cfa\n\u00cf\f\u00cf\16\u00cf\u0cfd\13"+
		"\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0d05\n"+
		"\u00d0\5\u00d0\u0d07\n\u00d0\3\u00d0\3\u00d0\5\u00d0\u0d0b\n\u00d0\3\u00d0"+
		"\5\u00d0\u0d0e\n\u00d0\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u0d13\n\u00d1\5"+
		"\u00d1\u0d15\n\u00d1\3\u00d1\3\u00d1\5\u00d1\u0d19\n\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d2\3\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3"+
		"\u0d25\n\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d5\3\u00d5"+
		"\5\u00d5\u0d2e\n\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\7\u00d5\u0d34\n"+
		"\u00d5\f\u00d5\16\u00d5\u0d37\13\u00d5\3\u00d6\3\u00d6\5\u00d6\u0d3b\n"+
		"\u00d6\3\u00d6\3\u00d6\5\u00d6\u0d3f\n\u00d6\3\u00d7\3\u00d7\3\u00d7\5"+
		"\u00d7\u0d44\n\u00d7\3\u00d7\5\u00d7\u0d47\n\u00d7\3\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d8\7\u00d8\u0d4d\n\u00d8\f\u00d8\16\u00d8\u0d50\13\u00d8\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u0d57\n\u00d9\3\u00da\3\u00da"+
		"\3\u00da\3\u00da\5\u00da\u0d5d\n\u00da\3\u00da\5\u00da\u0d60\n\u00da\3"+
		"\u00da\5\u00da\u0d63\n\u00da\3\u00db\3\u00db\3\u00db\3\u00db\7\u00db\u0d69"+
		"\n\u00db\f\u00db\16\u00db\u0d6c\13\u00db\3\u00db\3\u00db\3\u00db\3\u00db"+
		"\3\u00db\3\u00db\3\u00db\5\u00db\u0d75\n\u00db\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\7\u00dc\u0d7f\n\u00dc\f\u00dc"+
		"\16\u00dc\u0d82\13\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u0d88"+
		"\n\u00dc\3\u00dd\3\u00dd\5\u00dd\u0d8c\n\u00dd\3\u00dd\3\u00dd\5\u00dd"+
		"\u0d90\n\u00dd\3\u00dd\5\u00dd\u0d93\n\u00dd\3\u00dd\5\u00dd\u0d96\n\u00dd"+
		"\3\u00de\3\u00de\3\u00de\5\u00de\u0d9b\n\u00de\3\u00df\3\u00df\3\u00df"+
		"\5\u00df\u0da0\n\u00df\3\u00df\5\u00df\u0da3\n\u00df\3\u00df\5\u00df\u0da6"+
		"\n\u00df\3\u00e0\3\u00e0\6\u00e0\u0daa\n\u00e0\r\u00e0\16\u00e0\u0dab"+
		"\3\u00e0\5\u00e0\u0daf\n\u00e0\3\u00e0\3\u00e0\3\u00e1\3\u00e1\5\u00e1"+
		"\u0db5\n\u00e1\3\u00e1\5\u00e1\u0db8\n\u00e1\3\u00e2\5\u00e2\u0dbb\n\u00e2"+
		"\3\u00e2\6\u00e2\u0dbe\n\u00e2\r\u00e2\16\u00e2\u0dbf\3\u00e2\5\u00e2"+
		"\u0dc3\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\6\u00e3\u0dc9\n\u00e3\r"+
		"\u00e3\16\u00e3\u0dca\3\u00e4\3\u00e4\6\u00e4\u0dcf\n\u00e4\r\u00e4\16"+
		"\u00e4\u0dd0\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\7\u00e5\u0dd9"+
		"\n\u00e5\f\u00e5\16\u00e5\u0ddc\13\u00e5\3\u00e5\3\u00e5\5\u00e5\u0de0"+
		"\n\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0de6\n\u00e6\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u0dec\n\u00e7\3\u00e7\3\u00e7\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u0df6\n\u00e7\3\u00e7"+
		"\3\u00e7\5\u00e7\u0dfa\n\u00e7\5\u00e7\u0dfc\n\u00e7\3\u00e7\5\u00e7\u0dff"+
		"\n\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\7\u00e8\u0e09\n\u00e8\f\u00e8\16\u00e8\u0e0c\13\u00e8\3\u00e8\5\u00e8"+
		"\u0e0f\n\u00e8\3\u00e8\5\u00e8\u0e12\n\u00e8\3\u00e9\3\u00e9\3\u00e9\3"+
		"\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\3\u00eb\7\u00eb\u0e24\n\u00eb\f\u00eb\16\u00eb"+
		"\u0e27\13\u00eb\3\u00eb\3\u00eb\5\u00eb\u0e2b\n\u00eb\3\u00eb\3\u00eb"+
		"\3\u00eb\5\u00eb\u0e30\n\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec"+
		"\5\u00ec\u0e37\n\u00ec\3\u00ec\5\u00ec\u0e3a\n\u00ec\3\u00ed\3\u00ed\3"+
		"\u00ed\3\u00ed\3\u00ed\7\u00ed\u0e41\n\u00ed\f\u00ed\16\u00ed\u0e44\13"+
		"\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u0e4a\n\u00ed\3\u00ee\3"+
		"\u00ee\3\u00ee\5\u00ee\u0e4f\n\u00ee\3\u00ef\3\u00ef\5\u00ef\u0e53\n\u00ef"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u0e5b\n\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u0e61\n\u00f0\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u0e69\n\u00f1\3\u00f1\5\u00f1"+
		"\u0e6c\n\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\7\u00f2\u0e72\n\u00f2\f"+
		"\u00f2\16\u00f2\u0e75\13\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3"+
		"\5\u00f3\u0e7c\n\u00f3\3\u00f3\5\u00f3\u0e7f\n\u00f3\3\u00f3\5\u00f3\u0e82"+
		"\n\u00f3\3\u00f4\3\u00f4\3\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5"+
		"\u0e8b\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u0e91\n\u00f6\3"+
		"\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u0e97\n\u00f6\5\u00f6\u0e99\n\u00f6"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\5\u00f7\u0ea6\n\u00f7\5\u00f7\u0ea8\n\u00f7\3\u00f8\3"+
		"\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u0eb1\n\u00f8\5"+
		"\u00f8\u0eb3\n\u00f8\3\u00f9\3\u00f9\5\u00f9\u0eb7\n\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\3\u00f9\5\u00f9\u0ebd\n\u00f9\3\u00f9\3\u00f9\5\u00f9\u0ec1\n"+
		"\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u0eda\n\u00fb"+
		"\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\7\u00fd\u0ee3"+
		"\n\u00fd\f\u00fd\16\u00fd\u0ee6\13\u00fd\3\u00fd\3\u00fd\5\u00fd\u0eea"+
		"\n\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u0f12\n\u00fe\3\u00ff\3\u00ff\5\u00ff"+
		"\u0f16\n\u00ff\3\u00ff\3\u00ff\7\u00ff\u0f1a\n\u00ff\f\u00ff\16\u00ff"+
		"\u0f1d\13\u00ff\3\u00ff\3\u00ff\3\u0100\3\u0100\3\u0101\3\u0101\3\u0102"+
		"\3\u0102\3\u0102\7\u0102\u0f28\n\u0102\f\u0102\16\u0102\u0f2b\13\u0102"+
		"\3\u0103\3\u0103\3\u0104\3\u0104\3\u0104\7\u0104\u0f32\n\u0104\f\u0104"+
		"\16\u0104\u0f35\13\u0104\3\u0105\3\u0105\3\u0105\5\u0105\u0f3a\n\u0105"+
		"\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u0f40\n\u0106\3\u0106\3\u0106"+
		"\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u0f4b"+
		"\n\u0106\3\u0106\3\u0106\5\u0106\u0f4f\n\u0106\3\u0106\3\u0106\3\u0106"+
		"\7\u0106\u0f54\n\u0106\f\u0106\16\u0106\u0f57\13\u0106\3\u0106\3\u0106"+
		"\5\u0106\u0f5b\n\u0106\7\u0106\u0f5d\n\u0106\f\u0106\16\u0106\u0f60\13"+
		"\u0106\3\u0106\5\u0106\u0f63\n\u0106\3\u0107\3\u0107\3\u0107\5\u0107\u0f68"+
		"\n\u0107\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u0f6e\n\u0108\3\u0108"+
		"\6\u0108\u0f71\n\u0108\r\u0108\16\u0108\u0f72\3\u0108\3\u0108\5\u0108"+
		"\u0f77\n\u0108\3\u0108\3\u0108\5\u0108\u0f7b\n\u0108\3\u0108\3\u0108\5"+
		"\u0108\u0f7f\n\u0108\5\u0108\u0f81\n\u0108\3\u0109\3\u0109\3\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u0f8c\n\u010a\3\u010a"+
		"\7\u010a\u0f8f\n\u010a\f\u010a\16\u010a\u0f92\13\u010a\3\u010b\3\u010b"+
		"\5\u010b\u0f96\n\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\5\u010b\u0f9f\n\u010b\5\u010b\u0fa1\n\u010b\5\u010b\u0fa3\n\u010b"+
		"\3\u010c\3\u010c\3\u010d\3\u010d\3\u010d\3\u010e\3\u010e\3\u010e\3\u010e"+
		"\3\u010e\3\u010e\3\u010e\3\u010e\7\u010e\u0fb2\n\u010e\f\u010e\16\u010e"+
		"\u0fb5\13\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\5\u010e\u0fbc"+
		"\n\u010e\3\u010f\3\u010f\3\u010f\3\u010f\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\7\u0110\u0fc6\n\u0110\f\u0110\16\u0110\u0fc9\13\u0110\3\u0111\3\u0111"+
		"\3\u0112\3\u0112\3\u0112\7\u0112\u0fd0\n\u0112\f\u0112\16\u0112\u0fd3"+
		"\13\u0112\3\u0113\3\u0113\3\u0113\7\u0113\u0fd8\n\u0113\f\u0113\16\u0113"+
		"\u0fdb\13\u0113\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114"+
		"\u0fe3\n\u0114\3\u0114\5\u0114\u0fe6\n\u0114\3\u0115\3\u0115\3\u0115\3"+
		"\u0115\3\u0115\5\u0115\u0fed\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3"+
		"\u0115\3\u0115\5\u0115\u0ff5\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3"+
		"\u0115\5\u0115\u0ffc\n\u0115\3\u0115\3\u0115\5\u0115\u1000\n\u0115\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\5\u0116\u1007\n\u0116\3\u0117\3\u0117"+
		"\5\u0117\u100b\n\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u1010\n\u0117\7"+
		"\u0117\u1012\n\u0117\f\u0117\16\u0117\u1015\13\u0117\3\u0117\3\u0117\3"+
		"\u0117\7\u0117\u101a\n\u0117\f\u0117\16\u0117\u101d\13\u0117\3\u0117\5"+
		"\u0117\u1020\n\u0117\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u1027"+
		"\n\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118"+
		"\u1030\n\u0118\3\u0119\3\u0119\3\u0119\3\u011a\3\u011a\3\u011b\3\u011b"+
		"\3\u011b\3\u011b\3\u011b\7\u011b\u103c\n\u011b\f\u011b\16\u011b\u103f"+
		"\13\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\7\u011b\u1049\n\u011b\f\u011b\16\u011b\u104c\13\u011b\3\u011b\3\u011b"+
		"\5\u011b\u1050\n\u011b\3\u011b\3\u011b\3\u011c\3\u011c\3\u011c\3\u011c"+
		"\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c"+
		"\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u1066\n\u011c\3\u011d"+
		"\3\u011d\5\u011d\u106a\n\u011d\3\u011e\5\u011e\u106d\n\u011e\3\u011e\3"+
		"\u011e\3\u011e\6\u011e\u1072\n\u011e\r\u011e\16\u011e\u1073\3\u011e\5"+
		"\u011e\u1077\n\u011e\3\u011e\3\u011e\5\u011e\u107b\n\u011e\3\u011e\5\u011e"+
		"\u107e\n\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1085\n"+
		"\u011f\3\u0120\5\u0120\u1088\n\u0120\3\u0120\3\u0120\6\u0120\u108c\n\u0120"+
		"\r\u0120\16\u0120\u108d\3\u0120\5\u0120\u1091\n\u0120\3\u0120\3\u0120"+
		"\5\u0120\u1095\n\u0120\3\u0120\5\u0120\u1098\n\u0120\3\u0121\3\u0121\3"+
		"\u0121\3\u0121\3\u0121\5\u0121\u109f\n\u0121\3\u0122\3\u0122\3\u0122\5"+
		"\u0122\u10a4\n\u0122\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3"+
		"\u0123\3\u0123\3\u0123\3\u0123\7\u0123\u10b0\n\u0123\f\u0123\16\u0123"+
		"\u10b3\13\u0123\3\u0123\3\u0123\3\u0123\5\u0123\u10b8\n\u0123\3\u0123"+
		"\5\u0123\u10bb\n\u0123\3\u0124\3\u0124\5\u0124\u10bf\n\u0124\3\u0125\3"+
		"\u0125\3\u0125\3\u0125\7\u0125\u10c5\n\u0125\f\u0125\16\u0125\u10c8\13"+
		"\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\7\u0126\u10d3\n\u0126\f\u0126\16\u0126\u10d6\13\u0126\3\u0126"+
		"\3\u0126\5\u0126\u10da\n\u0126\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\7\u0127\u10e1\n\u0127\f\u0127\16\u0127\u10e4\13\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\7\u0127\u10ed\n\u0127\f\u0127"+
		"\16\u0127\u10f0\13\u0127\3\u0127\3\u0127\5\u0127\u10f4\n\u0127\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u10fe"+
		"\n\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1105\n\u0128"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\7\u0129\u110b\n\u0129\f\u0129\16\u0129"+
		"\u110e\13\u0129\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u1115"+
		"\n\u012a\3\u012a\3\u012a\5\u012a\u1119\n\u012a\3\u012a\5\u012a\u111c\n"+
		"\u012a\3\u012a\3\u012a\3\u012a\5\u012a\u1121\n\u012a\3\u012b\3\u012b\3"+
		"\u012b\5\u012b\u1126\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u112b\n\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1131\n\u012b\3\u012b\5\u012b"+
		"\u1134\n\u012b\3\u012b\3\u012b\5\u012b\u1138\n\u012b\3\u012b\3\u012b\3"+
		"\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\5\u012b\u1145\n\u012b\3\u012b\3\u012b\5\u012b\u1149\n\u012b\3\u012b\3"+
		"\u012b\3\u012b\3\u012b\3\u012b\6\u012b\u1150\n\u012b\r\u012b\16\u012b"+
		"\u1151\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1158\n\u012b\3\u012b\3"+
		"\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\5\u012b\u1166\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\7\u012b\u116f\n\u012b\f\u012b\16\u012b\u1172"+
		"\13\u012b\3\u012b\5\u012b\u1175\n\u012b\3\u012b\5\u012b\u1178\n\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1188\n\u012b\3\u012b"+
		"\3\u012b\7\u012b\u118c\n\u012b\f\u012b\16\u012b\u118f\13\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1198\n\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u11a0\n\u012b"+
		"\3\u012b\5\u012b\u11a3\n\u012b\3\u012b\5\u012b\u11a6\n\u012b\3\u012b\3"+
		"\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u11af\n\u012b\3"+
		"\u012b\3\u012b\3\u012b\5\u012b\u11b4\n\u012b\3\u012b\3\u012b\3\u012b\3"+
		"\u012b\3\u012b\7\u012b\u11bb\n\u012b\f\u012b\16\u012b\u11be\13\u012b\3"+
		"\u012b\3\u012b\3\u012b\5\u012b\u11c3\n\u012b\3\u012b\3\u012b\3\u012b\5"+
		"\u012b\u11c8\n\u012b\3\u012b\5\u012b\u11cb\n\u012b\3\u012b\3\u012b\3\u012b"+
		"\5\u012b\u11d0\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u11d5\n\u012b\7"+
		"\u012b\u11d7\n\u012b\f\u012b\16\u012b\u11da\13\u012b\3\u012b\3\u012b\3"+
		"\u012b\5\u012b\u11df\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u11e5"+
		"\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b"+
		"\u11ee\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u11f3\n\u012b\3\u012b\3"+
		"\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u11fb\n\u012b\3\u012b\3"+
		"\u012b\5\u012b\u11ff\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1204\n\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u120a\n\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\5\u012b\u1211\n\u012b\3\u012b\3\u012b\3\u012b"+
		"\5\u012b\u1216\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b"+
		"\u121d\n\u012b\3\u012b\3\u012b\5\u012b\u1221\n\u012b\3\u012b\3\u012b\3"+
		"\u012b\5\u012b\u1226\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3"+
		"\u012b\5\u012b\u122e\n\u012b\3\u012b\5\u012b\u1231\n\u012b\3\u012b\5\u012b"+
		"\u1234\n\u012b\3\u012b\5\u012b\u1237\n\u012b\3\u012b\3\u012b\5\u012b\u123b"+
		"\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1240\n\u012b\3\u012b\5\u012b"+
		"\u1243\n\u012b\3\u012c\3\u012c\3\u012d\3\u012d\3\u012e\3\u012e\3\u012f"+
		"\3\u012f\3\u012f\5\u012f\u124e\n\u012f\3\u012f\3\u012f\5\u012f\u1252\n"+
		"\u012f\5\u012f\u1254\n\u012f\3\u012f\3\u012f\3\u0130\3\u0130\3\u0130\3"+
		"\u0130\3\u0130\3\u0130\3\u0130\5\u0130\u125f\n\u0130\3\u0131\3\u0131\3"+
		"\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u126a\n"+
		"\u0132\3\u0133\3\u0133\3\u0133\3\u0133\3\u0133\7\u0133\u1271\n\u0133\f"+
		"\u0133\16\u0133\u1274\13\u0133\5\u0133\u1276\n\u0133\3\u0134\3\u0134\5"+
		"\u0134\u127a\n\u0134\3\u0134\5\u0134\u127d\n\u0134\3\u0134\3\u0134\5\u0134"+
		"\u1281\n\u0134\3\u0135\3\u0135\3\u0135\3\u0135\3\u0136\3\u0136\3\u0136"+
		"\3\u0136\3\u0136\3\u0136\3\u0136\5\u0136\u128e\n\u0136\3\u0137\3\u0137"+
		"\3\u0137\5\u0137\u1293\n\u0137\3\u0137\3\u0137\3\u0137\3\u0137\7\u0137"+
		"\u1299\n\u0137\f\u0137\16\u0137\u129c\13\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\5\u0137\u12a2\n\u0137\3\u0138\3\u0138\3\u0138\5\u0138\u12a7\n"+
		"\u0138\3\u0138\3\u0138\5\u0138\u12ab\n\u0138\3\u0138\3\u0138\3\u0138\5"+
		"\u0138\u12b0\n\u0138\7\u0138\u12b2\n\u0138\f\u0138\16\u0138\u12b5\13\u0138"+
		"\3\u0139\3\u0139\3\u0139\5\u0139\u12ba\n\u0139\3\u0139\5\u0139\u12bd\n"+
		"\u0139\3\u0139\3\u0139\3\u0139\7\u0139\u12c2\n\u0139\f\u0139\16\u0139"+
		"\u12c5\13\u0139\3\u0139\3\u0139\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\7\u013a\u12d1\n\u013a\f\u013a\16\u013a\u12d4"+
		"\13\u013a\5\u013a\u12d6\n\u013a\3\u013a\5\u013a\u12d9\n\u013a\3\u013a"+
		"\3\u013a\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b\u12e3"+
		"\n\u013b\3\u013b\5\u013b\u12e6\n\u013b\5\u013b\u12e8\n\u013b\3\u013c\3"+
		"\u013c\3\u013c\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u12f2\n"+
		"\u013d\5\u013d\u12f4\n\u013d\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u12fa"+
		"\n\u013e\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1300\n\u013f\5\u013f"+
		"\u1302\n\u013f\3\u0140\3\u0140\3\u0140\3\u0141\3\u0141\3\u0141\3\u0142"+
		"\3\u0142\3\u0142\3\u0142\3\u0142\3\u0142\5\u0142\u1310\n\u0142\5\u0142"+
		"\u1312\n\u0142\3\u0143\3\u0143\3\u0144\6\u0144\u1317\n\u0144\r\u0144\16"+
		"\u0144\u1318\3\u0144\3\u0144\5\u0144\u131d\n\u0144\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\5\u0145\u1323\n\u0145\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145"+
		"\u1329\n\u0145\7\u0145\u132b\n\u0145\f\u0145\16\u0145\u132e\13\u0145\3"+
		"\u0145\3\u0145\5\u0145\u1332\n\u0145\5\u0145\u1334\n\u0145\3\u0145\3\u0145"+
		"\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146\5\u0146\u133e\n\u0146"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u1347"+
		"\n\u0147\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\5\u0148"+
		"\u1350\n\u0148\3\u0149\3\u0149\3\u014a\3\u014a\3\u014b\3\u014b\3\u014c"+
		"\3\u014c\5\u014c\u135a\n\u014c\3\u014c\3\u014c\3\u014d\5\u014d\u135f\n"+
		"\u014d\3\u014d\3\u014d\5\u014d\u1363\n\u014d\3\u014d\5\u014d\u1366\n\u014d"+
		"\3\u014e\3\u014e\5\u014e\u136a\n\u014e\3\u014f\3\u014f\3\u0150\3\u0150"+
		"\3\u0150\5\u0150\u1371\n\u0150\3\u0151\3\u0151\3\u0151\3\u0151\3\u0152"+
		"\3\u0152\5\u0152\u1379\n\u0152\3\u0153\3\u0153\3\u0153\3\u0153\7\u0153"+
		"\u137f\n\u0153\f\u0153\16\u0153\u1382\13\u0153\3\u0153\3\u0153\3\u0153"+
		"\3\u0153\3\u0153\3\u0153\7\u0153\u138a\n\u0153\f\u0153\16\u0153\u138d"+
		"\13\u0153\5\u0153\u138f\n\u0153\3\u0154\3\u0154\5\u0154\u1393\n\u0154"+
		"\3\u0155\3\u0155\3\u0156\3\u0156\3\u0157\3\u0157\3\u0158\3\u0158\3\u0159"+
		"\3\u0159\3\u015a\3\u015a\3\u015b\3\u015b\3\u015b\7\u015b\u13a4\n\u015b"+
		"\f\u015b\16\u015b\u13a7\13\u015b\3\u015b\3\u015b\5\u015b\u13ab\n\u015b"+
		"\3\u015c\3\u015c\3\u015c\5\u015c\u13b0\n\u015c\3\u015c\3\u015c\3\u015d"+
		"\3\u015d\3\u015d\5\u015d\u13b7\n\u015d\3\u015e\3\u015e\3\u015f\3\u015f"+
		"\3\u0160\3\u0160\3\u0161\3\u0161\3\u0161\7\u0161\u13c2\n\u0161\f\u0161"+
		"\16\u0161\u13c5\13\u0161\3\u0162\3\u0162\3\u0163\3\u0163\3\u0163\7\u0163"+
		"\u13cc\n\u0163\f\u0163\16\u0163\u13cf\13\u0163\3\u0163\3\u0163\5\u0163"+
		"\u13d3\n\u0163\3\u0164\3\u0164\3\u0165\3\u0165\3\u0165\7\u0165\u13da\n"+
		"\u0165\f\u0165\16\u0165\u13dd\13\u0165\3\u0166\3\u0166\3\u0166\7\u0166"+
		"\u13e2\n\u0166\f\u0166\16\u0166\u13e5\13\u0166\3\u0167\3\u0167\3\u0167"+
		"\7\u0167\u13ea\n\u0167\f\u0167\16\u0167\u13ed\13\u0167\3\u0168\3\u0168"+
		"\3\u0168\5\u0168\u13f2\n\u0168\3\u0169\3\u0169\3\u0169\5\u0169\u13f7\n"+
		"\u0169\3\u016a\3\u016a\3\u016a\5\u016a\u13fc\n\u016a\3\u016b\3\u016b\5"+
		"\u016b\u1400\n\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u1405\n\u016b\3\u016b"+
		"\5\u016b\u1408\n\u016b\3\u016c\3\u016c\3\u016d\3\u016d\5\u016d\u140e\n"+
		"\u016d\3\u016e\3\u016e\5\u016e\u1412\n\u016e\3\u016f\3\u016f\3\u016f\5"+
		"\u016f\u1417\n\u016f\3\u0170\3\u0170\3\u0171\3\u0171\3\u0171\7\u0171\u141e"+
		"\n\u0171\f\u0171\16\u0171\u1421\13\u0171\3\u0172\3\u0172\3\u0172\5\u0172"+
		"\u1426\n\u0172\3\u0172\3\u0172\3\u0172\5\u0172\u142b\n\u0172\3\u0173\3"+
		"\u0173\3\u0173\7\u0173\u1430\n\u0173\f\u0173\16\u0173\u1433\13\u0173\3"+
		"\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\5\u0174\u143c\n"+
		"\u0174\3\u0175\3\u0175\5\u0175\u1440\n\u0175\3\u0175\3\u0175\7\u0175\u1444"+
		"\n\u0175\f\u0175\16\u0175\u1447\13\u0175\3\u0175\3\u0175\5\u0175\u144b"+
		"\n\u0175\3\u0176\3\u0176\3\u0176\5\u0176\u1450\n\u0176\5\u0176\u1452\n"+
		"\u0176\3\u0176\3\u0176\3\u0176\5\u0176\u1457\n\u0176\7\u0176\u1459\n\u0176"+
		"\f\u0176\16\u0176\u145c\13\u0176\3\u0176\3\u0176\5\u0176\u1460\n\u0176"+
		"\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\5\u0177\u1467\n\u0177\3\u0177"+
		"\3\u0177\3\u0177\5\u0177\u146c\n\u0177\5\u0177\u146e\n\u0177\5\u0177\u1470"+
		"\n\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177"+
		"\5\u0177\u147a\n\u0177\3\u0177\3\u0177\3\u0177\5\u0177\u147f\n\u0177\7"+
		"\u0177\u1481\n\u0177\f\u0177\16\u0177\u1484\13\u0177\5\u0177\u1486\n\u0177"+
		"\3\u0177\3\u0177\5\u0177\u148a\n\u0177\3\u0178\3\u0178\3\u0178\3\u0179"+
		"\3\u0179\3\u0179\5\u0179\u1492\n\u0179\3\u0179\3\u0179\3\u017a\3\u017a"+
		"\5\u017a\u1498\n\u017a\3\u017a\3\u017a\3\u017a\5\u017a\u149d\n\u017a\3"+
		"\u017a\5\u017a\u14a0\n\u017a\5\u017a\u14a2\n\u017a\3\u017b\3\u017b\5\u017b"+
		"\u14a6\n\u017b\3\u017b\3\u017b\5\u017b\u14aa\n\u017b\3\u017b\3\u017b\5"+
		"\u017b\u14ae\n\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\5"+
		"\u017b\u14b6\n\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\5"+
		"\u017b\u14be\n\u017b\5\u017b\u14c0\n\u017b\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\5\u017c\u14c6\n\u017c\3\u017c\5\u017c\u14c9\n\u017c\3\u017c\3\u017c\3"+
		"\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d"+
		"\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d"+
		"\3\u017d\3\u017d\5\u017d\u14e1\n\u017d\3\u017d\3\u017d\3\u017d\3\u017d"+
		"\3\u017d\5\u017d\u14e8\n\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d"+
		"\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d"+
		"\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d"+
		"\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\3\u017d\5\u017d"+
		"\u1509\n\u017d\3\u017e\3\u017e\3\u017e\5\u017e\u150e\n\u017e\3\u017e\5"+
		"\u017e\u1511\n\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u1516\n\u017e\5\u017e"+
		"\u1518\n\u017e\3\u017e\3\u017e\7\u017e\u151c\n\u017e\f\u017e\16\u017e"+
		"\u151f\13\u017e\3\u017f\3\u017f\3\u017f\7\u017f\u1524\n\u017f\f\u017f"+
		"\16\u017f\u1527\13\u017f\3\u0180\3\u0180\5\u0180\u152b\n\u0180\3\u0180"+
		"\3\u0180\3\u0180\7\u0180\u1530\n\u0180\f\u0180\16\u0180\u1533\13\u0180"+
		"\3\u0180\5\u0180\u1536\n\u0180\3\u0181\3\u0181\5\u0181\u153a\n\u0181\3"+
		"\u0181\3\u0181\3\u0181\7\u0181\u153f\n\u0181\f\u0181\16\u0181\u1542\13"+
		"\u0181\3\u0182\3\u0182\3\u0182\5\u0182\u1547\n\u0182\3\u0182\3\u0182\3"+
		"\u0182\3\u0182\5\u0182\u154d\n\u0182\3\u0182\3\u0182\3\u0182\3\u0182\5"+
		"\u0182\u1553\n\u0182\3\u0182\3\u0182\3\u0182\3\u0182\5\u0182\u1559\n\u0182"+
		"\3\u0182\3\u0182\3\u0182\5\u0182\u155e\n\u0182\5\u0182\u1560\n\u0182\3"+
		"\u0182\5\u0182\u1563\n\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3"+
		"\u0182\3\u0182\3\u0182\5\u0182\u156d\n\u0182\3\u0182\5\u0182\u1570\n\u0182"+
		"\5\u0182\u1572\n\u0182\5\u0182\u1574\n\u0182\3\u0182\3\u0182\3\u0182\3"+
		"\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\5\u0182\u1582\n\u0182\3\u0183\3\u0183\3\u0184\3\u0184\3\u0185\3\u0185"+
		"\5\u0185\u158a\n\u0185\3\u0185\3\u0185\3\u0186\3\u0186\5\u0186\u1590\n"+
		"\u0186\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\3\u0187\5\u0187"+
		"\u1599\n\u0187\3\u0188\3\u0188\3\u0188\5\u0188\u159e\n\u0188\3\u0189\3"+
		"\u0189\3\u0189\5\u0189\u15a3\n\u0189\3\u018a\3\u018a\3\u018a\5\u018a\u15a8"+
		"\n\u018a\3\u018b\3\u018b\3\u018b\3\u018b\3\u018c\3\u018c\3\u018c\2\2\u018d"+
		"\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFH"+
		"JLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c"+
		"\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4"+
		"\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc"+
		"\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4"+
		"\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec"+
		"\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104"+
		"\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c"+
		"\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134"+
		"\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c"+
		"\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164"+
		"\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c"+
		"\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194"+
		"\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac"+
		"\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4"+
		"\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc"+
		"\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4"+
		"\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c"+
		"\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224"+
		"\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c"+
		"\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254"+
		"\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c"+
		"\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284"+
		"\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c"+
		"\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4"+
		"\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc"+
		"\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4"+
		"\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc"+
		"\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314"+
		"\u0316\2S\3\2\u020c\u020c\4\3\u020c\u020c\u021b\u021b\4\2\27\27\u00c6"+
		"\u00c6\4\2\u00a9\u00a9\u013b\u013b\4\2AA\u0119\u0119\5\2,,\u0120\u0120"+
		"\u0178\u0178\4\2vv\u0082\u0082\4\2\16\16##\5\2qq\u00bd\u00bd\u01a9\u01a9"+
		"\5\2\u00fa\u00fa\u0112\u0112\u0123\u0123\4\2\u00a1\u00a1\u01af\u01af\4"+
		"\2,,\u0178\u0178\4\2\r\r{{\5\2\r\r{{\u00ee\u00ee\5\2^^\u0118\u0118\u0179"+
		"\u0179\4\2\u00e1\u00e1\u0119\u0119\4\2\u00e5\u00e5\u0181\u0181\5\2\u0099"+
		"\u0099\u00be\u00be\u011f\u011f\4\2\\\\pp\6\2\u00b0\u00b0\u00bc\u00bc\u00ff"+
		"\u00ff\u011c\u011c\4\2mm\u0209\u0209\3\2\u014b\u014c\4\2\u0114\u0114\u01c3"+
		"\u01c3\3\2MN\4\2oo\u00af\u00af\4\2\u0108\u0108\u01b9\u01b9\4\2\"\"\u00af"+
		"\u00af\4\2//rr\5\2\21\21xx\u01a5\u01a5\4\2YY\u00f3\u00f3\5\2\u00a3\u00a3"+
		"\u00d0\u00d0\u0150\u0150\4\2\u015c\u015c\u018e\u018e\5\2\u015c\u015c\u0176"+
		"\u0176\u018e\u018e\4\2\u008d\u008d\u00b1\u00b1\4\2ZZ\u0152\u0152\4\2\u00ae"+
		"\u00ae\u00cb\u00cb\4\2\21\21\u01aa\u01aa\4\2  \u0164\u0164\4\2\30\30s"+
		"s\4\2\u009a\u009a\u00cd\u00cd\4\2\21\21\u009a\u009a\3\2\u018a\u018b\5"+
		"\2\u0088\u0088\u00c2\u00c2\u01a4\u01a4\4\2\21\21xx\4\2\u00e5\u00e5\u0184"+
		"\u0184\3\2\u00d3\u00d6\3\2\u0204\u0205\5\2\u00eb\u00eb\u0203\u0203\u0207"+
		"\u0207\4\2ll\u00b3\u00b3\6\2\21\21\25\25\u0090\u0090\u0177\u0177\4\29"+
		"9\u01c7\u01c7\4\2xx\u01a5\u01a5\4\2\66\66GG\4\2\u009b\u009b\u00ce\u00ce"+
		"\4\2;;\u00f7\u00f7\5\2..\u00cf\u00cf\u0199\u0199\4\2\u01c8\u01c8\u01cb"+
		"\u01cb\4\2\u0085\u0085\u0101\u0101\4\2\u0089\u0089\u00f1\u00f1\4\2PPy"+
		"y\4\2\u00ab\u00ab\u016d\u016d\3\2\u01e4\u01f3\3\2\u01dd\u01e3\3\2\u01d7"+
		"\u01dc\4\2\u013b\u013b\u0155\u0155\4\2\u009d\u009d\u0135\u0135\4\2\u0106"+
		"\u0106\u015b\u015b\4\2\u011b\u011b\u017a\u017a\5\2\u0096\u0096\u0188\u0188"+
		"\u01ba\u01ba\4\2EE\u0151\u0151\5\2EE\u0104\u0104\u0151\u0151\4\2\u0124"+
		"\u0124\u0185\u0185\4\2\u00ae\u00ae\u0147\u0147\3\2\u0128\u0129\4\2cc\u01d3"+
		"\u01d3\4\2\u00ef\u00ef\u015e\u015e\4\2\62\62::\6\2cc\u00ac\u00ac\u00e8"+
		"\u00e8\u015e\u015e\3\2\u01fa\u01fb\4\2\u01f5\u01f5\u01fc\u01fcK\2\f\20"+
		"\23\23\26\26\31\31\33#&.\60\60\62\679<>ILWYZ\\aciklnqtwyz|~\u0081\u0083"+
		"\u0085\u0087\u0089\u008d\u008f\u008f\u0091\u0093\u0095\u0096\u0099\u009e"+
		"\u00a0\u00a1\u00a3\u00a4\u00a8\u00a9\u00ab\u00ac\u00ae\u00af\u00b1\u00b4"+
		"\u00b6\u00bc\u00be\u00c1\u00c3\u00c3\u00c5\u00c5\u00c7\u00d2\u00d4\u00d8"+
		"\u00da\u00e6\u00e8\u00ea\u00ed\u00ef\u00f1\u00fa\u00fc\u00fd\u00ff\u0101"+
		"\u0104\u0104\u0106\u0106\u010a\u010e\u0110\u0112\u0114\u0115\u0118\u0118"+
		"\u011a\u0126\u012d\u012d\u0130\u0137\u013a\u014e\u0150\u015c\u015e\u0160"+
		"\u0162\u0162\u0164\u016b\u016d\u0172\u0174\u017c\u017e\u0189\u018d\u0195"+
		"\u0199\u019e\u01a0\u01a3\u01a6\u01a6\u01a8\u01a8\u01aa\u01ad\u01af\u01b0"+
		"\u01b2\u01bb\u01bd\u01bd\u01bf\u01bf\u01c1\u01f3\u027a\u027a\u1830\2\u0319"+
		"\3\2\2\2\4\u0320\3\2\2\2\6\u0334\3\2\2\2\b\u0351\3\2\2\2\n\u0353\3\2\2"+
		"\2\f\u035a\3\2\2\2\16\u035c\3\2\2\2\20\u0361\3\2\2\2\22\u0379\3\2\2\2"+
		"\24\u037d\3\2\2\2\26\u03aa\3\2\2\2\30\u03ae\3\2\2\2\32\u03c6\3\2\2\2\34"+
		"\u03ca\3\2\2\2\36\u03d6\3\2\2\2 \u03e4\3\2\2\2\"\u03ec\3\2\2\2$\u0402"+
		"\3\2\2\2&\u040f\3\2\2\2(\u0423\3\2\2\2*\u043c\3\2\2\2,\u0448\3\2\2\2."+
		"\u044a\3\2\2\2\60\u044f\3\2\2\2\62\u0467\3\2\2\2\64\u046b\3\2\2\2\66\u048d"+
		"\3\2\2\28\u0492\3\2\2\2:\u04ab\3\2\2\2<\u04c3\3\2\2\2>\u04cc\3\2\2\2@"+
		"\u04d5\3\2\2\2B\u04de\3\2\2\2D\u04e2\3\2\2\2F\u04e7\3\2\2\2H\u04ff\3\2"+
		"\2\2J\u0501\3\2\2\2L\u0505\3\2\2\2N\u0539\3\2\2\2P\u0555\3\2\2\2R\u0557"+
		"\3\2\2\2T\u0565\3\2\2\2V\u0571\3\2\2\2X\u0576\3\2\2\2Z\u057c\3\2\2\2\\"+
		"\u057f\3\2\2\2^\u058a\3\2\2\2`\u0599\3\2\2\2b\u05aa\3\2\2\2d\u05bb\3\2"+
		"\2\2f\u05c3\3\2\2\2h\u05c8\3\2\2\2j\u05d8\3\2\2\2l\u05dc\3\2\2\2n\u05f4"+
		"\3\2\2\2p\u05f7\3\2\2\2r\u05fd\3\2\2\2t\u0609\3\2\2\2v\u0612\3\2\2\2x"+
		"\u062e\3\2\2\2z\u0634\3\2\2\2|\u0637\3\2\2\2~\u063e\3\2\2\2\u0080\u0646"+
		"\3\2\2\2\u0082\u0655\3\2\2\2\u0084\u0657\3\2\2\2\u0086\u065b\3\2\2\2\u0088"+
		"\u0661\3\2\2\2\u008a\u067a\3\2\2\2\u008c\u0699\3\2\2\2\u008e\u06c6\3\2"+
		"\2\2\u0090\u06d0\3\2\2\2\u0092\u06d2\3\2\2\2\u0094\u06d7\3\2\2\2\u0096"+
		"\u06e5\3\2\2\2\u0098\u06e7\3\2\2\2\u009a\u06ec\3\2\2\2\u009c\u06fd\3\2"+
		"\2\2\u009e\u071f\3\2\2\2\u00a0\u0743\3\2\2\2\u00a2\u0747\3\2\2\2\u00a4"+
		"\u0756\3\2\2\2\u00a6\u0758\3\2\2\2\u00a8\u075b\3\2\2\2\u00aa\u0760\3\2"+
		"\2\2\u00ac\u076a\3\2\2\2\u00ae\u0786\3\2\2\2\u00b0\u0788\3\2\2\2\u00b2"+
		"\u078c\3\2\2\2\u00b4\u078f\3\2\2\2\u00b6\u0793\3\2\2\2\u00b8\u0798\3\2"+
		"\2\2\u00ba\u079c\3\2\2\2\u00bc\u07ad\3\2\2\2\u00be\u07ba\3\2\2\2\u00c0"+
		"\u07cb\3\2\2\2\u00c2\u07d8\3\2\2\2\u00c4\u07e5\3\2\2\2\u00c6\u07e7\3\2"+
		"\2\2\u00c8\u07f5\3\2\2\2\u00ca\u0806\3\2\2\2\u00cc\u081f\3\2\2\2\u00ce"+
		"\u0829\3\2\2\2\u00d0\u082d\3\2\2\2\u00d2\u0855\3\2\2\2\u00d4\u0857\3\2"+
		"\2\2\u00d6\u0870\3\2\2\2\u00d8\u087b\3\2\2\2\u00da\u088c\3\2\2\2\u00dc"+
		"\u0890\3\2\2\2\u00de\u08a2\3\2\2\2\u00e0\u08aa\3\2\2\2\u00e2\u08b5\3\2"+
		"\2\2\u00e4\u08bd\3\2\2\2\u00e6\u08c1\3\2\2\2\u00e8\u08e2\3\2\2\2\u00ea"+
		"\u08e7\3\2\2\2\u00ec\u08ec\3\2\2\2\u00ee\u08f4\3\2\2\2\u00f0\u08fc\3\2"+
		"\2\2\u00f2\u08ff\3\2\2\2\u00f4\u090f\3\2\2\2\u00f6\u0914\3\2\2\2\u00f8"+
		"\u0918\3\2\2\2\u00fa\u093c\3\2\2\2\u00fc\u093e\3\2\2\2\u00fe\u0954\3\2"+
		"\2\2\u0100\u0956\3\2\2\2\u0102\u095b\3\2\2\2\u0104\u095d\3\2\2\2\u0106"+
		"\u095f\3\2\2\2\u0108\u0961\3\2\2\2\u010a\u0965\3\2\2\2\u010c\u096a\3\2"+
		"\2\2\u010e\u0970\3\2\2\2\u0110\u099f\3\2\2\2\u0112\u09a1\3\2\2\2\u0114"+
		"\u09a7\3\2\2\2\u0116\u09ad\3\2\2\2\u0118\u09ba\3\2\2\2\u011a\u09bf\3\2"+
		"\2\2\u011c\u09c7\3\2\2\2\u011e\u09c9\3\2\2\2\u0120\u09d7\3\2\2\2\u0122"+
		"\u09e1\3\2\2\2\u0124\u09e7\3\2\2\2\u0126\u09e9\3\2\2\2\u0128\u09ec\3\2"+
		"\2\2\u012a\u09f1\3\2\2\2\u012c\u0a10\3\2\2\2\u012e\u0a1f\3\2\2\2\u0130"+
		"\u0a21\3\2\2\2\u0132\u0a36\3\2\2\2\u0134\u0a45\3\2\2\2\u0136\u0a5b\3\2"+
		"\2\2\u0138\u0a62\3\2\2\2\u013a\u0a6f\3\2\2\2\u013c\u0a72\3\2\2\2\u013e"+
		"\u0a87\3\2\2\2\u0140\u0a91\3\2\2\2\u0142\u0a9a\3\2\2\2\u0144\u0ab5\3\2"+
		"\2\2\u0146\u0ae0\3\2\2\2\u0148\u0af0\3\2\2\2\u014a\u0afd\3\2\2\2\u014c"+
		"\u0b06\3\2\2\2\u014e\u0b08\3\2\2\2\u0150\u0b2d\3\2\2\2\u0152\u0b31\3\2"+
		"\2\2\u0154\u0b39\3\2\2\2\u0156\u0b3b\3\2\2\2\u0158\u0b43\3\2\2\2\u015a"+
		"\u0b6b\3\2\2\2\u015c\u0b77\3\2\2\2\u015e\u0b8c\3\2\2\2\u0160\u0b8f\3\2"+
		"\2\2\u0162\u0b9b\3\2\2\2\u0164\u0b9f\3\2\2\2\u0166\u0bb8\3\2\2\2\u0168"+
		"\u0bba\3\2\2\2\u016a\u0bcb\3\2\2\2\u016c\u0bd2\3\2\2\2\u016e\u0be1\3\2"+
		"\2\2\u0170\u0bf8\3\2\2\2\u0172\u0bfe\3\2\2\2\u0174\u0c00\3\2\2\2\u0176"+
		"\u0c18\3\2\2\2\u0178\u0c30\3\2\2\2\u017a\u0c54\3\2\2\2\u017c\u0c56\3\2"+
		"\2\2\u017e\u0c74\3\2\2\2\u0180\u0c79\3\2\2\2\u0182\u0c7b\3\2\2\2\u0184"+
		"\u0c87\3\2\2\2\u0186\u0c97\3\2\2\2\u0188\u0c99\3\2\2\2\u018a\u0c9c\3\2"+
		"\2\2\u018c\u0cb6\3\2\2\2\u018e\u0cb8\3\2\2\2\u0190\u0cbc\3\2\2\2\u0192"+
		"\u0ccb\3\2\2\2\u0194\u0cd7\3\2\2\2\u0196\u0cdf\3\2\2\2\u0198\u0ce3\3\2"+
		"\2\2\u019a\u0cee\3\2\2\2\u019c\u0cf3\3\2\2\2\u019e\u0d00\3\2\2\2\u01a0"+
		"\u0d14\3\2\2\2\u01a2\u0d1d\3\2\2\2\u01a4\u0d1f\3\2\2\2\u01a6\u0d26\3\2"+
		"\2\2\u01a8\u0d2b\3\2\2\2\u01aa\u0d38\3\2\2\2\u01ac\u0d40\3\2\2\2\u01ae"+
		"\u0d48\3\2\2\2\u01b0\u0d56\3\2\2\2\u01b2\u0d58\3\2\2\2\u01b4\u0d64\3\2"+
		"\2\2\u01b6\u0d87\3\2\2\2\u01b8\u0d89\3\2\2\2\u01ba\u0d97\3\2\2\2\u01bc"+
		"\u0d9c\3\2\2\2\u01be\u0dae\3\2\2\2\u01c0\u0db2\3\2\2\2\u01c2\u0dba\3\2"+
		"\2\2\u01c4\u0dc4\3\2\2\2\u01c6\u0dcc\3\2\2\2\u01c8\u0dd2\3\2\2\2\u01ca"+
		"\u0de1\3\2\2\2\u01cc\u0de7\3\2\2\2\u01ce\u0e00\3\2\2\2\u01d0\u0e13\3\2"+
		"\2\2\u01d2\u0e17\3\2\2\2\u01d4\u0e1a\3\2\2\2\u01d6\u0e36\3\2\2\2\u01d8"+
		"\u0e3b\3\2\2\2\u01da\u0e4e\3\2\2\2\u01dc\u0e50\3\2\2\2\u01de\u0e60\3\2"+
		"\2\2\u01e0\u0e68\3\2\2\2\u01e2\u0e6d\3\2\2\2\u01e4\u0e78\3\2\2\2\u01e6"+
		"\u0e83\3\2\2\2\u01e8\u0e86\3\2\2\2\u01ea\u0e98\3\2\2\2\u01ec\u0e9a\3\2"+
		"\2\2\u01ee\u0ea9\3\2\2\2\u01f0\u0eb4\3\2\2\2\u01f2\u0ec2\3\2\2\2\u01f4"+
		"\u0ed9\3\2\2\2\u01f6\u0edb\3\2\2\2\u01f8\u0edd\3\2\2\2\u01fa\u0f11\3\2"+
		"\2\2\u01fc\u0f13\3\2\2\2\u01fe\u0f20\3\2\2\2\u0200\u0f22\3\2\2\2\u0202"+
		"\u0f24\3\2\2\2\u0204\u0f2c\3\2\2\2\u0206\u0f2e\3\2\2\2\u0208\u0f39\3\2"+
		"\2\2\u020a\u0f62\3\2\2\2\u020c\u0f67\3\2\2\2\u020e\u0f80\3\2\2\2\u0210"+
		"\u0f82\3\2\2\2\u0212\u0f84\3\2\2\2\u0214\u0f93\3\2\2\2\u0216\u0fa4\3\2"+
		"\2\2\u0218\u0fa6\3\2\2\2\u021a\u0fbb\3\2\2\2\u021c\u0fbd\3\2\2\2\u021e"+
		"\u0fc1\3\2\2\2\u0220\u0fca\3\2\2\2\u0222\u0fcc\3\2\2\2\u0224\u0fd4\3\2"+
		"\2\2\u0226\u0fdc\3\2\2\2\u0228\u0fff\3\2\2\2\u022a\u1001\3\2\2\2\u022c"+
		"\u101f\3\2\2\2\u022e\u1021\3\2\2\2\u0230\u1031\3\2\2\2\u0232\u1034\3\2"+
		"\2\2\u0234\u1036\3\2\2\2\u0236\u1065\3\2\2\2\u0238\u1069\3\2\2\2\u023a"+
		"\u106c\3\2\2\2\u023c\u107f\3\2\2\2\u023e\u1087\3\2\2\2\u0240\u1099\3\2"+
		"\2\2\u0242\u10a0\3\2\2\2\u0244\u10ba\3\2\2\2\u0246\u10bc\3\2\2\2\u0248"+
		"\u10c0\3\2\2\2\u024a\u10c9\3\2\2\2\u024c\u10f3\3\2\2\2\u024e\u1104\3\2"+
		"\2\2\u0250\u1106\3\2\2\2\u0252\u110f\3\2\2\2\u0254\u1242\3\2\2\2\u0256"+
		"\u1244\3\2\2\2\u0258\u1246\3\2\2\2\u025a\u1248\3\2\2\2\u025c\u124a\3\2"+
		"\2\2\u025e\u1257\3\2\2\2\u0260\u1260\3\2\2\2\u0262\u1269\3\2\2\2\u0264"+
		"\u126b\3\2\2\2\u0266\u127c\3\2\2\2\u0268\u1282\3\2\2\2\u026a\u128d\3\2"+
		"\2\2\u026c\u128f\3\2\2\2\u026e\u12a3\3\2\2\2\u0270\u12b6\3\2\2\2\u0272"+
		"\u12c8\3\2\2\2\u0274\u12dc\3\2\2\2\u0276\u12e9\3\2\2\2\u0278\u12ec\3\2"+
		"\2\2\u027a\u12f5\3\2\2\2\u027c\u12fb\3\2\2\2\u027e\u1303\3\2\2\2\u0280"+
		"\u1306\3\2\2\2\u0282\u1311\3\2\2\2\u0284\u1313\3\2\2\2\u0286\u131c\3\2"+
		"\2\2\u0288\u131e\3\2\2\2\u028a\u133d\3\2\2\2\u028c\u133f\3\2\2\2\u028e"+
		"\u1348\3\2\2\2\u0290\u1351\3\2\2\2\u0292\u1353\3\2\2\2\u0294\u1355\3\2"+
		"\2\2\u0296\u1357\3\2\2\2\u0298\u1365\3\2\2\2\u029a\u1369\3\2\2\2\u029c"+
		"\u136b\3\2\2\2\u029e\u136d\3\2\2\2\u02a0\u1372\3\2\2\2\u02a2\u1378\3\2"+
		"\2\2\u02a4\u138e\3\2\2\2\u02a6\u1392\3\2\2\2\u02a8\u1394\3\2\2\2\u02aa"+
		"\u1396\3\2\2\2\u02ac\u1398\3\2\2\2\u02ae\u139a\3\2\2\2\u02b0\u139c\3\2"+
		"\2\2\u02b2\u139e\3\2\2\2\u02b4\u13a0\3\2\2\2\u02b6\u13af\3\2\2\2\u02b8"+
		"\u13b3\3\2\2\2\u02ba\u13b8\3\2\2\2\u02bc\u13ba\3\2\2\2\u02be\u13bc\3\2"+
		"\2\2\u02c0\u13be\3\2\2\2\u02c2\u13c6\3\2\2\2\u02c4\u13c8\3\2\2\2\u02c6"+
		"\u13d4\3\2\2\2\u02c8\u13d6\3\2\2\2\u02ca\u13de\3\2\2\2\u02cc\u13e6\3\2"+
		"\2\2\u02ce\u13ee\3\2\2\2\u02d0\u13f3\3\2\2\2\u02d2\u13f8\3\2\2\2\u02d4"+
		"\u1407\3\2\2\2\u02d6\u1409\3\2\2\2\u02d8\u140d\3\2\2\2\u02da\u1411\3\2"+
		"\2\2\u02dc\u1413\3\2\2\2\u02de\u1418\3\2\2\2\u02e0\u141a\3\2\2\2\u02e2"+
		"\u1422\3\2\2\2\u02e4\u142c\3\2\2\2\u02e6\u1434\3\2\2\2\u02e8\u143d\3\2"+
		"\2\2\u02ea\u144c\3\2\2\2\u02ec\u1461\3\2\2\2\u02ee\u148b\3\2\2\2\u02f0"+
		"\u1491\3\2\2\2\u02f2\u14a1\3\2\2\2\u02f4\u14bf\3\2\2\2\u02f6\u14c1\3\2"+
		"\2\2\u02f8\u1508\3\2\2\2\u02fa\u150d\3\2\2\2\u02fc\u1520\3\2\2\2\u02fe"+
		"\u152a\3\2\2\2\u0300\u1539\3\2\2\2\u0302\u1581\3\2\2\2\u0304\u1583\3\2"+
		"\2\2\u0306\u1585\3\2\2\2\u0308\u1589\3\2\2\2\u030a\u158f\3\2\2\2\u030c"+
		"\u1598\3\2\2\2\u030e\u159d\3\2\2\2\u0310\u15a2\3\2\2\2\u0312\u15a7\3\2"+
		"\2\2\u0314\u15a9\3\2\2\2\u0316\u15ad\3\2\2\2\u0318\u031a\n\2\2\2\u0319"+
		"\u0318\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u0319\3\2\2\2\u031b\u031c\3\2"+
		"\2\2\u031c\3\3\2\2\2\u031d\u031f\5\b\5\2\u031e\u031d\3\2\2\2\u031f\u0322"+
		"\3\2\2\2\u0320\u031e\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0323\3\2\2\2\u0322"+
		"\u0320\3\2\2\2\u0323\u0324\7\2\2\3\u0324\5\3\2\2\2\u0325\u032a\5\b\5\2"+
		"\u0326\u0327\7\u020c\2\2\u0327\u0329\5\b\5\2\u0328\u0326\3\2\2\2\u0329"+
		"\u032c\3\2\2\2\u032a\u0328\3\2\2\2\u032a\u032b\3\2\2\2\u032b\u032e\3\2"+
		"\2\2\u032c\u032a\3\2\2\2\u032d\u032f\7\u020c\2\2\u032e\u032d\3\2\2\2\u032e"+
		"\u032f\3\2\2\2\u032f\u0333\3\2\2\2\u0330\u0333\5\u028a\u0146\2\u0331\u0333"+
		"\5\u0288\u0145\2\u0332\u0325\3\2\2\2\u0332\u0330\3\2\2\2\u0332\u0331\3"+
		"\2\2\2\u0333\u0336\3\2\2\2\u0334\u0332\3\2\2\2\u0334\u0335\3\2\2\2\u0335"+
		"\u0338\3\2\2\2\u0336\u0334\3\2\2\2\u0337\u0339\t\3\2\2\u0338\u0337\3\2"+
		"\2\2\u0338\u0339\3\2\2\2\u0339\7\3\2\2\2\u033a\u0352\5\20\t\2\u033b\u0352"+
		"\5\"\22\2\u033c\u0352\5\60\31\2\u033d\u0352\5\u00aaV\2\u033e\u0352\58"+
		"\35\2\u033f\u0352\5^\60\2\u0340\u0352\5\22\n\2\u0341\u0352\5\62\32\2\u0342"+
		"\u0352\5$\23\2\u0343\u0352\5\u00acW\2\u0344\u0352\5:\36\2\u0345\u0352"+
		"\5r:\2\u0346\u0352\5\16\b\2\u0347\u0352\5 \21\2\u0348\u0352\5.\30\2\u0349"+
		"\u0352\5\u00a8U\2\u034a\u0352\5\66\34\2\u034b\u0352\5\\/\2\u034c\u0352"+
		"\5\u0122\u0092\2\u034d\u034e\5\u011a\u008e\2\u034e\u034f\7\u020c\2\2\u034f"+
		"\u0350\7\u0207\2\2\u0350\u0352\3\2\2\2\u0351\u033a\3\2\2\2\u0351\u033b"+
		"\3\2\2\2\u0351\u033c\3\2\2\2\u0351\u033d\3\2\2\2\u0351\u033e\3\2\2\2\u0351"+
		"\u033f\3\2\2\2\u0351\u0340\3\2\2\2\u0351\u0341\3\2\2\2\u0351\u0342\3\2"+
		"\2\2\u0351\u0343\3\2\2\2\u0351\u0344\3\2\2\2\u0351\u0345\3\2\2\2\u0351"+
		"\u0346\3\2\2\2\u0351\u0347\3\2\2\2\u0351\u0348\3\2\2\2\u0351\u0349\3\2"+
		"\2\2\u0351\u034a\3\2\2\2\u0351\u034b\3\2\2\2\u0351\u034c\3\2\2\2\u0351"+
		"\u034d\3\2\2\2\u0352\t\3\2\2\2\u0353\u0357\7j\2\2\u0354\u0356\5\u00c4"+
		"c\2\u0355\u0354\3\2\2\2\u0356\u0359\3\2\2\2\u0357\u0355\3\2\2\2\u0357"+
		"\u0358\3\2\2\2\u0358\13\3\2\2\2\u0359\u0357\3\2\2\2\u035a\u035b\t\4\2"+
		"\2\u035b\r\3\2\2\2\u035c\u035d\7{\2\2\u035d\u035e\7\u00a4\2\2\u035e\u035f"+
		"\5\u02ce\u0168\2\u035f\u0360\7\u020c\2\2\u0360\17\3\2\2\2\u0361\u0362"+
		"\7\22\2\2\u0362\u0363\7\u00a4\2\2\u0363\u0364\5\u02ce\u0168\2\u0364\u0366"+
		"\7H\2\2\u0365\u0367\7g\2\2\u0366\u0365\3\2\2\2\u0366\u0367\3\2\2\2\u0367"+
		"\u036b\3\2\2\2\u0368\u036a\5\u00b4[\2\u0369\u0368\3\2\2\2\u036a\u036d"+
		"\3\2\2\2\u036b\u0369\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u0370\3\2\2\2\u036d"+
		"\u036b\3\2\2\2\u036e\u036f\7\u014d\2\2\u036f\u0371\7\u016b\2\2\u0370\u036e"+
		"\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u0373\7\u020c\2"+
		"\2\u0373\21\3\2\2\2\u0374\u0377\7X\2\2\u0375\u0376\7\u0117\2\2\u0376\u0378"+
		"\7\u0146\2\2\u0377\u0375\3\2\2\2\u0377\u0378\3\2\2\2\u0378\u037a\3\2\2"+
		"\2\u0379\u0374\3\2\2\2\u0379\u037a\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u037c"+
		"\5\24\13\2\u037c\23\3\2\2\2\u037d\u037e\7\u00a4\2\2\u037e\u038a\5\u02ce"+
		"\u0168\2\u037f\u0380\7\u0200\2\2\u0380\u0385\5\u00c0a\2\u0381\u0382\7"+
		"\u0206\2\2\u0382\u0384\5\u00c0a\2\u0383\u0381\3\2\2\2\u0384\u0387\3\2"+
		"\2\2\u0385\u0383\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0388\3\2\2\2\u0387"+
		"\u0385\3\2\2\2\u0388\u0389\7\u0201\2\2\u0389\u038b\3\2\2\2\u038a\u037f"+
		"\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038c\3\2\2\2\u038c\u038d\7\u014b\2"+
		"\2\u038d\u0398\5\u02f2\u017a\2\u038e\u0397\5\u00b2Z\2\u038f\u0397\5\26"+
		"\f\2\u0390\u0397\5\32\16\2\u0391\u0397\7t\2\2\u0392\u0397\7\u012d\2\2"+
		"\u0393\u0394\7\20\2\2\u0394\u0395\7\u01ae\2\2\u0395\u0397\5\u02b8\u015d"+
		"\2\u0396\u038e\3\2\2\2\u0396\u038f\3\2\2\2\u0396\u0390\3\2\2\2\u0396\u0391"+
		"\3\2\2\2\u0396\u0392\3\2\2\2\u0396\u0393\3\2\2\2\u0397\u039a\3\2\2\2\u0398"+
		"\u0396\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u03a6\3\2\2\2\u039a\u0398\3\2"+
		"\2\2\u039b\u03a4\5\f\7\2\u039c\u039e\5\u00c4c\2\u039d\u039c\3\2\2\2\u039e"+
		"\u03a1\3\2\2\2\u039f\u039d\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a2\3\2"+
		"\2\2\u03a1\u039f\3\2\2\2\u03a2\u03a5\5\u010e\u0088\2\u03a3\u03a5\5\u00b6"+
		"\\\2\u03a4\u039f\3\2\2\2\u03a4\u03a3\3\2\2\2\u03a5\u03a7\3\2\2\2\u03a6"+
		"\u039b\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03a9\7\u020c"+
		"\2\2\u03a9\25\3\2\2\2\u03aa\u03ac\7\u0121\2\2\u03ab\u03ad\5\30\r\2\u03ac"+
		"\u03ab\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\27\3\2\2\2\u03ae\u03af\7\u0200"+
		"\2\2\u03af\u03b0\7\u0124\2\2\u03b0\u03b1\5\u0202\u0102\2\u03b1\u03bf\7"+
		"\61\2\2\u03b2\u03c0\7\25\2\2\u03b3\u03b4\t\5\2\2\u03b4\u03b5\7\u0200\2"+
		"\2\u03b5\u03ba\5\u02e0\u0171\2\u03b6\u03b7\7\u0206\2\2\u03b7\u03b9\5\u02e0"+
		"\u0171\2\u03b8\u03b6\3\2\2\2\u03b9\u03bc\3\2\2\2\u03ba\u03b8\3\2\2\2\u03ba"+
		"\u03bb\3\2\2\2\u03bb\u03bd\3\2\2\2\u03bc\u03ba\3\2\2\2\u03bd\u03be\7\u0201"+
		"\2\2\u03be\u03c0\3\2\2\2\u03bf\u03b2\3\2\2\2\u03bf\u03b3\3\2\2\2\u03c0"+
		"\u03c2\3\2\2\2\u03c1\u03c3\5\36\20\2\u03c2\u03c1\3\2\2\2\u03c2\u03c3\3"+
		"\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03c5\7\u0201\2\2\u03c5\31\3\2\2\2\u03c6"+
		"\u03c8\7\u014a\2\2\u03c7\u03c9\5\34\17\2\u03c8\u03c7\3\2\2\2\u03c8\u03c9"+
		"\3\2\2\2\u03c9\33\3\2\2\2\u03ca\u03cb\7\u0144\2\2\u03cb\u03cc\7\u0200"+
		"\2\2\u03cc\u03d1\5\u02e2\u0172\2\u03cd\u03ce\7\u0206\2\2\u03ce\u03d0\5"+
		"\u02e2\u0172\2\u03cf\u03cd\3\2\2\2\u03d0\u03d3\3\2\2\2\u03d1\u03cf\3\2"+
		"\2\2\u03d1\u03d2\3\2\2\2\u03d2\u03d4\3\2\2\2\u03d3\u03d1\3\2\2\2\u03d4"+
		"\u03d5\7\u0201\2\2\u03d5\35\3\2\2\2\u03d6\u03d7\t\6\2\2\u03d7\u03d8\5"+
		"\u0202\u0102\2\u03d8\u03d9\7\61\2\2\u03d9\u03da\7\u0200\2\2\u03da\u03df"+
		"\5\u02e0\u0171\2\u03db\u03dc\7\u0206\2\2\u03dc\u03de\5\u02e0\u0171\2\u03dd"+
		"\u03db\3\2\2\2\u03de\u03e1\3\2\2\2\u03df\u03dd\3\2\2\2\u03df\u03e0\3\2"+
		"\2\2\u03e0\u03e2\3\2\2\2\u03e1\u03df\3\2\2\2\u03e2\u03e3\7\u0201\2\2\u03e3"+
		"\37\3\2\2\2\u03e4\u03e5\7{\2\2\u03e5\u03e7\7\u0120\2\2\u03e6\u03e8\7,"+
		"\2\2\u03e7\u03e6\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9"+
		"\u03ea\5\u02b6\u015c\2\u03ea\u03eb\7\u020c\2\2\u03eb!\3\2\2\2\u03ec\u03ed"+
		"\7\22\2\2\u03ed\u03ee\7\u0120\2\2\u03ee\u03ef\5\u02b6\u015c\2\u03ef\u03f1"+
		"\7H\2\2\u03f0\u03f2\7g\2\2\u03f1\u03f0\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2"+
		"\u03f4\3\2\2\2\u03f3\u03f5\t\7\2\2\u03f4\u03f3\3\2\2\2\u03f4\u03f5\3\2"+
		"\2\2\u03f5\u03f9\3\2\2\2\u03f6\u03f8\5\u00b4[\2\u03f7\u03f6\3\2\2\2\u03f8"+
		"\u03fb\3\2\2\2\u03f9\u03f7\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fe\3\2"+
		"\2\2\u03fb\u03f9\3\2\2\2\u03fc\u03fd\7\u014d\2\2\u03fd\u03ff\7\u016b\2"+
		"\2\u03fe\u03fc\3\2\2\2\u03fe\u03ff\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0401"+
		"\7\u020c\2\2\u0401#\3\2\2\2\u0402\u0405\7X\2\2\u0403\u0404\7\u0117\2\2"+
		"\u0404\u0406\7\u0146\2\2\u0405\u0403\3\2\2\2\u0405\u0406\3\2\2\2\u0406"+
		"\u0407\3\2\2\2\u0407\u040a\7\u0120\2\2\u0408\u040b\5(\25\2\u0409\u040b"+
		"\5&\24\2\u040a\u0408\3\2\2\2\u040a\u0409\3\2\2\2\u040a\u040b\3\2\2\2\u040b"+
		"\u040c\3\2\2\2\u040c\u040d\7\u020c\2\2\u040d\u040e\7\u0207\2\2\u040e%"+
		"\3\2\2\2\u040f\u0410\7,\2\2\u0410\u0411\5\u02b6\u015c\2\u0411\u0415\5"+
		"\f\7\2\u0412\u0414\5,\27\2\u0413\u0412\3\2\2\2\u0414\u0417\3\2\2\2\u0415"+
		"\u0413\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u041a\3\2\2\2\u0417\u0415\3\2"+
		"\2\2\u0418\u0419\7$\2\2\u0419\u041b\5\u00e4s\2\u041a\u0418\3\2\2\2\u041a"+
		"\u041b\3\2\2\2\u041b\u041d\3\2\2\2\u041c\u041e\5\u0114\u008b\2\u041d\u041c"+
		"\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0421\7\u0084\2"+
		"\2\u0420\u0422\5\u02b6\u015c\2\u0421\u0420\3\2\2\2\u0421\u0422\3\2\2\2"+
		"\u0422\'\3\2\2\2\u0423\u0425\5\u02b6\u015c\2\u0424\u0426\5\u00b2Z\2\u0425"+
		"\u0424\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u0427\3\2\2\2\u0427\u042b\5\f"+
		"\7\2\u0428\u042a\5*\26\2\u0429\u0428\3\2\2\2\u042a\u042d\3\2\2\2\u042b"+
		"\u0429\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u042e\3\2\2\2\u042d\u042b\3\2"+
		"\2\2\u042e\u0430\7\u0084\2\2\u042f\u0431\5\u02b6\u015c\2\u0430\u042f\3"+
		"\2\2\2\u0430\u0431\3\2\2\2\u0431)\3\2\2\2\u0432\u043d\5\u00c6d\2\u0433"+
		"\u043d\5\u00c8e\2\u0434\u043d\5\u00caf\2\u0435\u043d\5\u00ceh\2\u0436"+
		"\u043d\5\u00d0i\2\u0437\u043d\5\u00d2j\2\u0438\u043d\5\u00dan\2\u0439"+
		"\u043d\5\64\33\2\u043a\u043d\5\24\13\2\u043b\u043d\5\u0288\u0145\2\u043c"+
		"\u0432\3\2\2\2\u043c\u0433\3\2\2\2\u043c\u0434\3\2\2\2\u043c\u0435\3\2"+
		"\2\2\u043c\u0436\3\2\2\2\u043c\u0437\3\2\2\2\u043c\u0438\3\2\2\2\u043c"+
		"\u0439\3\2\2\2\u043c\u043a\3\2\2\2\u043c\u043b\3\2\2\2\u043d+\3\2\2\2"+
		"\u043e\u0449\5\u00c6d\2\u043f\u0449\5\u00c8e\2\u0440\u0449\5\u00caf\2"+
		"\u0441\u0449\5\u00ceh\2\u0442\u0449\5\u00d0i\2\u0443\u0449\5\u00d2j\2"+
		"\u0444\u0449\5\u00dan\2\u0445\u0449\5\62\32\2\u0446\u0449\5\22\n\2\u0447"+
		"\u0449\5\u0288\u0145\2\u0448\u043e\3\2\2\2\u0448\u043f\3\2\2\2\u0448\u0440"+
		"\3\2\2\2\u0448\u0441\3\2\2\2\u0448\u0442\3\2\2\2\u0448\u0443\3\2\2\2\u0448"+
		"\u0444\3\2\2\2\u0448\u0445\3\2\2\2\u0448\u0446\3\2\2\2\u0448\u0447\3\2"+
		"\2\2\u0449-\3\2\2\2\u044a\u044b\7{\2\2\u044b\u044c\7\u0139\2\2\u044c\u044d"+
		"\5\u02d0\u0169\2\u044d\u044e\7\u020c\2\2\u044e/\3\2\2\2\u044f\u0450\7"+
		"\22\2\2\u0450\u0451\7\u0139\2\2\u0451\u0452\5\u02d0\u0169\2\u0452\u0454"+
		"\7H\2\2\u0453\u0455\7g\2\2\u0454\u0453\3\2\2\2\u0454\u0455\3\2\2\2\u0455"+
		"\u0459\3\2\2\2\u0456\u0458\5\u00b4[\2\u0457\u0456\3\2\2\2\u0458\u045b"+
		"\3\2\2\2\u0459\u0457\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u045e\3\2\2\2\u045b"+
		"\u0459\3\2\2\2\u045c\u045d\7\u014d\2\2\u045d\u045f\7\u016b\2\2\u045e\u045c"+
		"\3\2\2\2\u045e\u045f\3\2\2\2\u045f\u0460\3\2\2\2\u0460\u0461\7\u020c\2"+
		"\2\u0461\61\3\2\2\2\u0462\u0465\7X\2\2\u0463\u0464\7\u0117\2\2\u0464\u0466"+
		"\7\u0146\2\2\u0465\u0463\3\2\2\2\u0465\u0466\3\2\2\2\u0466\u0468\3\2\2"+
		"\2\u0467\u0462\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u0469\3\2\2\2\u0469\u046a"+
		"\5\64\33\2\u046a\63\3\2\2\2\u046b\u046c\7\u0139\2\2\u046c\u0478\5\u02d0"+
		"\u0169\2\u046d\u046e\7\u0200\2\2\u046e\u0473\5\u00c0a\2\u046f\u0470\7"+
		"\u0206\2\2\u0470\u0472\5\u00c0a\2\u0471\u046f\3\2\2\2\u0472\u0475\3\2"+
		"\2\2\u0473\u0471\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u0476\3\2\2\2\u0475"+
		"\u0473\3\2\2\2\u0476\u0477\7\u0201\2\2\u0477\u0479\3\2\2\2\u0478\u046d"+
		"\3\2\2\2\u0478\u0479\3\2\2\2\u0479\u0489\3\2\2\2\u047a\u047c\5\u00b2Z"+
		"\2\u047b\u047a\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u0487"+
		"\5\f\7\2\u047e\u0480\5\u00c4c\2\u047f\u047e\3\2\2\2\u0480\u0483\3\2\2"+
		"\2\u0481\u047f\3\2\2\2\u0481\u0482\3\2\2\2\u0482\u0484\3\2\2\2\u0483\u0481"+
		"\3\2\2\2\u0484\u0488\5\u010e\u0088\2\u0485\u0488\5\u00b6\\\2\u0486\u0488"+
		"\7\u0093\2\2\u0487\u0481\3\2\2\2\u0487\u0485\3\2\2\2\u0487\u0486\3\2\2"+
		"\2\u0488\u048a\3\2\2\2\u0489\u047b\3\2\2\2\u0489\u048a\3\2\2\2\u048a\u048b"+
		"\3\2\2\2\u048b\u048c\7\u020c\2\2\u048c\65\3\2\2\2\u048d\u048e\7{\2\2\u048e"+
		"\u048f\7\u019d\2\2\u048f\u0490\5\u02d2\u016a\2\u0490\u0491\7\u020c\2\2"+
		"\u0491\67\3\2\2\2\u0492\u0493\7\22\2\2\u0493\u0494\7\u019d\2\2\u0494\u04a7"+
		"\5\u02d2\u016a\2\u0495\u04a8\t\b\2\2\u0496\u0497\7\u0145\2\2\u0497\u0498"+
		"\7\u0196\2\2\u0498\u04a8\5\u02d2\u016a\2\u0499\u049b\7H\2\2\u049a\u049c"+
		"\7g\2\2\u049b\u049a\3\2\2\2\u049b\u049c\3\2\2\2\u049c\u04a0\3\2\2\2\u049d"+
		"\u049f\5\u00b4[\2\u049e\u049d\3\2\2\2\u049f\u04a2\3\2\2\2\u04a0\u049e"+
		"\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a5\3\2\2\2\u04a2\u04a0\3\2\2\2\u04a3"+
		"\u04a4\7\u014d\2\2\u04a4\u04a6\7\u016b\2\2\u04a5\u04a3\3\2\2\2\u04a5\u04a6"+
		"\3\2\2\2\u04a6\u04a8\3\2\2\2\u04a7\u0495\3\2\2\2\u04a7\u0496\3\2\2\2\u04a7"+
		"\u0499\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04aa\7\u020c\2\2\u04aa9\3\2"+
		"\2\2\u04ab\u04ae\7X\2\2\u04ac\u04ad\7\u0117\2\2\u04ad\u04af\7\u0146\2"+
		"\2\u04ae\u04ac\3\2\2\2\u04ae\u04af\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b1"+
		"\7\u019d\2\2\u04b1\u04b5\5\u02d2\u016a\2\u04b2\u04b6\5@!\2\u04b3\u04b6"+
		"\5D#\2\u04b4\u04b6\5F$\2\u04b5\u04b2\3\2\2\2\u04b5\u04b3\3\2\2\2\u04b5"+
		"\u04b4\3\2\2\2\u04b6\u04b8\3\2\2\2\u04b7\u04b9\5<\37\2\u04b8\u04b7\3\2"+
		"\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04bb\3\2\2\2\u04ba\u04bc\t\b\2\2\u04bb"+
		"\u04ba\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04be\3\2\2\2\u04bd\u04bf\5>"+
		" \2\u04be\u04bd\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf\u04c0\3\2\2\2\u04c0"+
		"\u04c1\5H%\2\u04c1\u04c2\7\u020c\2\2\u04c2;\3\2\2\2\u04c3\u04c4\7\u009e"+
		"\2\2\u04c4\u04c9\5\u02d2\u016a\2\u04c5\u04c6\7\u0206\2\2\u04c6\u04c8\5"+
		"\u02d2\u016a\2\u04c7\u04c5\3\2\2\2\u04c8\u04cb\3\2\2\2\u04c9\u04c7\3\2"+
		"\2\2\u04c9\u04ca\3\2\2\2\u04ca=\3\2\2\2\u04cb\u04c9\3\2\2\2\u04cc\u04cd"+
		"\7\u01bc\2\2\u04cd\u04ce\7\u0200\2\2\u04ce\u04cf\5\u01fe\u0100\2\u04cf"+
		"\u04d0\7\u0201\2\2\u04d0?\3\2\2\2\u04d1\u04d6\7#\2\2\u04d2\u04d6\7\16"+
		"\2\2\u04d3\u04d4\7\u00bf\2\2\u04d4\u04d6\7\u010f\2\2\u04d5\u04d1\3\2\2"+
		"\2\u04d5\u04d2\3\2\2\2\u04d5\u04d3\3\2\2\2\u04d6\u04d7\3\2\2\2\u04d7\u04d9"+
		"\5R*\2\u04d8\u04da\5X-\2\u04d9\u04d8\3\2\2\2\u04d9\u04da\3\2\2\2\u04da"+
		"\u04dc\3\2\2\2\u04db\u04dd\5B\"\2\u04dc\u04db\3\2\2\2\u04dc\u04dd\3\2"+
		"\2\2\u04ddA\3\2\2\2\u04de\u04df\7\u009f\2\2\u04df\u04e0\7}\2\2\u04e0\u04e1"+
		"\7\u0153\2\2\u04e1C\3\2\2\2\u04e2\u04e3\7\u009f\2\2\u04e3\u04e5\5R*\2"+
		"\u04e4\u04e6\5X-\2\u04e5\u04e4\3\2\2\2\u04e5\u04e6\3\2\2\2\u04e6E\3\2"+
		"\2\2\u04e7\u04e8\t\t\2\2\u04e8\u04ed\5P)\2\u04e9\u04ea\7\u0117\2\2\u04ea"+
		"\u04ec\5P)\2\u04eb\u04e9\3\2\2\2\u04ec\u04ef\3\2\2\2\u04ed\u04eb\3\2\2"+
		"\2\u04ed\u04ee\3\2\2\2\u04ee\u04f0\3\2\2\2\u04ef\u04ed\3\2\2\2\u04f0\u04f8"+
		"\7\u0113\2\2\u04f1\u04f9\7a\2\2\u04f2\u04f3\5\u02b2\u015a\2\u04f3\u04f4"+
		"\7\u01f9\2\2\u04f4\u04f6\3\2\2\2\u04f5\u04f2\3\2\2\2\u04f5\u04f6\3\2\2"+
		"\2\u04f6\u04f7\3\2\2\2\u04f7\u04f9\7\u015a\2\2\u04f8\u04f1\3\2\2\2\u04f8"+
		"\u04f5\3\2\2\2\u04f9G\3\2\2\2\u04fa\u04fb\7I\2\2\u04fb\u0500\7\u019d\2"+
		"\2\u04fc\u04fd\7\65\2\2\u04fd\u0500\5\u0308\u0185\2\u04fe\u0500\5\u0118"+
		"\u008d\2\u04ff\u04fa\3\2\2\2\u04ff\u04fc\3\2\2\2\u04ff\u04fe\3\2\2\2\u0500"+
		"I\3\2\2\2\u0501\u0503\5\u02b4\u015b\2\u0502\u0504\5\u02e8\u0175\2\u0503"+
		"\u0502\3\2\2\2\u0503\u0504\3\2\2\2\u0504K\3\2\2\2\u0505\u0506\7I\2\2\u0506"+
		"\u050a\7\u019d\2\2\u0507\u0509\5\u00c4c\2\u0508\u0507\3\2\2\2\u0509\u050c"+
		"\3\2\2\2\u050a\u0508\3\2\2\2\u050a\u050b\3\2\2\2\u050b\u050e\3\2\2\2\u050c"+
		"\u050a\3\2\2\2\u050d\u050f\5N(\2\u050e\u050d\3\2\2\2\u050f\u0510\3\2\2"+
		"\2\u0510\u050e\3\2\2\2\u0510\u0511\3\2\2\2\u0511\u0512\3\2\2\2\u0512\u0513"+
		"\7\u0084\2\2\u0513\u0514\5\u02d2\u016a\2\u0514M\3\2\2\2\u0515\u0516\7"+
		"#\2\2\u0516\u0517\7\u017f\2\2\u0517\u0518\7\u00c6\2\2\u0518\u0519\5\u0118"+
		"\u008d\2\u0519\u051a\7#\2\2\u051a\u051b\7\u017f\2\2\u051b\u051c\7\u020c"+
		"\2\2\u051c\u053a\3\2\2\2\u051d\u051e\7#\2\2\u051e\u051f\7}\2\2\u051f\u0520"+
		"\7\u0153\2\2\u0520\u0521\7\u00c6\2\2\u0521\u0522\5\u0118\u008d\2\u0522"+
		"\u0523\7#\2\2\u0523\u0524\7}\2\2\u0524\u0525\7\u0153\2\2\u0525\u0526\7"+
		"\u020c\2\2\u0526\u053a\3\2\2\2\u0527\u0528\7\16\2\2\u0528\u0529\7\u017f"+
		"\2\2\u0529\u052a\7\u00c6\2\2\u052a\u052b\5\u0118\u008d\2\u052b\u052c\7"+
		"\16\2\2\u052c\u052d\7\u017f\2\2\u052d\u052e\7\u020c\2\2\u052e\u053a\3"+
		"\2\2\2\u052f\u0530\7\16\2\2\u0530\u0531\7}\2\2\u0531\u0532\7\u0153\2\2"+
		"\u0532\u0533\7\u00c6\2\2\u0533\u0534\5\u0118\u008d\2\u0534\u0535\7\16"+
		"\2\2\u0535\u0536\7}\2\2\u0536\u0537\7\u0153\2\2\u0537\u0538\7\u020c\2"+
		"\2\u0538\u053a\3\2\2\2\u0539\u0515\3\2\2\2\u0539\u051d\3\2\2\2\u0539\u0527"+
		"\3\2\2\2\u0539\u052f\3\2\2\2\u053aO\3\2\2\2\u053b\u0556\7\22\2\2\u053c"+
		"\u0556\7\23\2\2\u053d\u053e\7\31\2\2\u053e\u0556\7\u0182\2\2\u053f\u0556"+
		"\7\35\2\2\u0540\u0556\7D\2\2\u0541\u0556\7X\2\2\u0542\u0543\7w\2\2\u0543"+
		"\u0556\7\u0182\2\2\u0544\u0556\7{\2\2\u0545\u0556\7\u00a6\2\2\u0546\u0556"+
		"\7\u00fd\2\2\u0547\u0556\7\u0145\2\2\u0548\u0556\7\u014f\2\2\u0549\u0556"+
		"\7\u01a0\2\2\u054a\u0556\7f\2\2\u054b\u0556\7\u017e\2\2\u054c\u0556\7"+
		"\u016e\2\2\u054d\u0556\7d\2\2\u054e\u0556\7\u00dd\2\2\u054f\u0556\7\u00dc"+
		"\2\2\u0550\u0556\7\u0167\2\2\u0551\u0556\7\u0189\2\2\u0552\u0556\7a\2"+
		"\2\u0553\u0556\7\u015a\2\2\u0554\u0556\7\u009e\2\2\u0555\u053b\3\2\2\2"+
		"\u0555\u053c\3\2\2\2\u0555\u053d\3\2\2\2\u0555\u053f\3\2\2\2\u0555\u0540"+
		"\3\2\2\2\u0555\u0541\3\2\2\2\u0555\u0542\3\2\2\2\u0555\u0544\3\2\2\2\u0555"+
		"\u0545\3\2\2\2\u0555\u0546\3\2\2\2\u0555\u0547\3\2\2\2\u0555\u0548\3\2"+
		"\2\2\u0555\u0549\3\2\2\2\u0555\u054a\3\2\2\2\u0555\u054b\3\2\2\2\u0555"+
		"\u054c\3\2\2\2\u0555\u054d\3\2\2\2\u0555\u054e\3\2\2\2\u0555\u054f\3\2"+
		"\2\2\u0555\u0550\3\2\2\2\u0555\u0551\3\2\2\2\u0555\u0552\3\2\2\2\u0555"+
		"\u0553\3\2\2\2\u0555\u0554\3\2\2\2\u0556Q\3\2\2\2\u0557\u055c\5T+\2\u0558"+
		"\u0559\7\u0117\2\2\u0559\u055b\5T+\2\u055a\u0558\3\2\2\2\u055b\u055e\3"+
		"\2\2\2\u055c\u055a\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u055f\3\2\2\2\u055e"+
		"\u055c\3\2\2\2\u055f\u0561\7\u0113\2\2\u0560\u0562\5V,\2\u0561\u0560\3"+
		"\2\2\2\u0561\u0562\3\2\2\2\u0562\u0563\3\2\2\2\u0563\u0564\5\u02e2\u0172"+
		"\2\u0564S\3\2\2\2\u0565\u056f\t\n\2\2\u0566\u0567\7\u010f\2\2\u0567\u056c"+
		"\5\u02e0\u0171\2\u0568\u0569\7\u0206\2\2\u0569\u056b\5\u02e0\u0171\2\u056a"+
		"\u0568\3\2\2\2\u056b\u056e\3\2\2\2\u056c\u056a\3\2\2\2\u056c\u056d\3\2"+
		"\2\2\u056d\u0570\3\2\2\2\u056e\u056c\3\2\2\2\u056f\u0566\3\2\2\2\u056f"+
		"\u0570\3\2\2\2\u0570U\3\2\2\2\u0571\u0572\7\u00f9\2\2\u0572\u0573\7\u018a"+
		"\2\2\u0573\u0574\5\u02e2\u0172\2\u0574\u0575\7\u010f\2\2\u0575W\3\2\2"+
		"\2\u0576\u0578\7\u0142\2\2\u0577\u0579\5Z.\2\u0578\u0577\3\2\2\2\u0579"+
		"\u057a\3\2\2\2\u057a\u0578\3\2\2\2\u057a\u057b\3\2\2\2\u057bY\3\2\2\2"+
		"\u057c\u057d\t\13\2\2\u057d\u057e\5\u0298\u014d\2\u057e[\3\2\2\2\u057f"+
		"\u0580\7{\2\2\u0580\u0582\7\u01a1\2\2\u0581\u0583\7,\2\2\u0582\u0581\3"+
		"\2\2\2\u0582\u0583\3\2\2\2\u0583\u0584\3\2\2\2\u0584\u0586\5\u02c8\u0165"+
		"\2\u0585\u0587\t\f\2\2\u0586\u0585\3\2\2\2\u0586\u0587\3\2\2\2\u0587\u0588"+
		"\3\2\2\2\u0588\u0589\7\u020c\2\2\u0589]\3\2\2\2\u058a\u058b\7\22\2\2\u058b"+
		"\u058c\7\u01a1\2\2\u058c\u0592\5\u02c8\u0165\2\u058d\u0593\5`\61\2\u058e"+
		"\u0593\5b\62\2\u058f\u0593\5d\63\2\u0590\u0593\5l\67\2\u0591\u0593\5\u008e"+
		"H\2\u0592\u058d\3\2\2\2\u0592\u058e\3\2\2\2\u0592\u058f\3\2\2\2\u0592"+
		"\u0590\3\2\2\2\u0592\u0591\3\2\2\2\u0593\u0595\3\2\2\2\u0594\u0596\5n"+
		"8\2\u0595\u0594\3\2\2\2\u0595\u0596\3\2\2\2\u0596\u0597\3\2\2\2\u0597"+
		"\u0598\7\u020c\2\2\u0598_\3\2\2\2\u0599\u059b\7H\2\2\u059a\u059c\7g\2"+
		"\2\u059b\u059a\3\2\2\2\u059b\u059c\3\2\2\2\u059c\u059e\3\2\2\2\u059d\u059f"+
		"\t\r\2\2\u059e\u059d\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a3\3\2\2\2\u05a0"+
		"\u05a2\5\u00b4[\2\u05a1\u05a0\3\2\2\2\u05a2\u05a5\3\2\2\2\u05a3\u05a1"+
		"\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4\u05a8\3\2\2\2\u05a5\u05a3\3\2\2\2\u05a6"+
		"\u05a7\7\u014d\2\2\u05a7\u05a9\7\u016b\2\2\u05a8\u05a6\3\2\2\2\u05a8\u05a9"+
		"\3\2\2\2\u05a9a\3\2\2\2\u05aa\u05ac\7\u0146\2\2\u05ab\u05ad\5\u00b2Z\2"+
		"\u05ac\u05ab\3\2\2\2\u05ac\u05ad\3\2\2\2\u05ad\u05ae\3\2\2\2\u05ae\u05af"+
		"\7\27\2\2\u05af\u05b0\7\u010e\2\2\u05b0\u05b1\7\u0200\2\2\u05b1\u05b6"+
		"\5\u0090I\2\u05b2\u05b3\7\u0206\2\2\u05b3\u05b5\5\u0090I\2\u05b4\u05b2"+
		"\3\2\2\2\u05b5\u05b8\3\2\2\2\u05b6\u05b4\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7"+
		"\u05b9\3\2\2\2\u05b8\u05b6\3\2\2\2\u05b9\u05ba\7\u0201\2\2\u05bac\3\2"+
		"\2\2\u05bb\u05c0\5f\64\2\u05bc\u05bd\7\u0206\2\2\u05bd\u05bf\5f\64\2\u05be"+
		"\u05bc\3\2\2\2\u05bf\u05c2\3\2\2\2\u05c0\u05be\3\2\2\2\u05c0\u05c1\3\2"+
		"\2\2\u05c1e\3\2\2\2\u05c2\u05c0\3\2\2\2\u05c3\u05c6\t\16\2\2\u05c4\u05c7"+
		"\5\u00a0Q\2\u05c5\u05c7\5\u0098M\2\u05c6\u05c4\3\2\2\2\u05c6\u05c5\3\2"+
		"\2\2\u05c7g\3\2\2\2\u05c8\u05c9\t\17\2\2\u05c9\u05d6\7\34\2\2\u05ca\u05d7"+
		"\5j\66\2\u05cb\u05cc\7\u0200\2\2\u05cc\u05d1\5j\66\2\u05cd\u05ce\7\u0206"+
		"\2\2\u05ce\u05d0\5j\66\2\u05cf\u05cd\3\2\2\2\u05d0\u05d3\3\2\2\2\u05d1"+
		"\u05cf\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2\u05d4\3\2\2\2\u05d3\u05d1\3\2"+
		"\2\2\u05d4\u05d5\7\u0201\2\2\u05d5\u05d7\3\2\2\2\u05d6\u05ca\3\2\2\2\u05d6"+
		"\u05cb\3\2\2\2\u05d7i\3\2\2\2\u05d8\u05da\5\u02aa\u0156\2\u05d9\u05db"+
		"\5\u02f2\u017a\2\u05da\u05d9\3\2\2\2\u05da\u05db\3\2\2\2\u05dbk\3\2\2"+
		"\2\u05dc\u05e2\7\u00ee\2\2\u05dd\u05de\7\u00d7\2\2\u05de\u05e3\5\u0202"+
		"\u0102\2\u05df\u05e0\7~\2\2\u05e0\u05e1\7\u01a1\2\2\u05e1\u05e3\5\u02f2"+
		"\u017a\2\u05e2\u05dd\3\2\2\2\u05e2\u05df\3\2\2\2\u05e3m\3\2\2\2\u05e4"+
		"\u05f5\7\u00c5\2\2\u05e5\u05ef\7\67\2\2\u05e6\u05e7\7S\2\2\u05e7\u05e8"+
		"\7\u0196\2\2\u05e8\u05f0\7\u0186\2\2\u05e9\u05eb\7\u0107\2\2\u05ea\u05e9"+
		"\3\2\2\2\u05ea\u05eb\3\2\2\2\u05eb\u05ec\3\2\2\2\u05ec\u05ed\7\u00b2\2"+
		"\2\u05ed\u05ee\7\u018a\2\2\u05ee\u05f0\7`\2\2\u05ef\u05e6\3\2\2\2\u05ef"+
		"\u05ea\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0\u05f2\3\2\2\2\u05f1\u05f3\5p"+
		"9\2\u05f2\u05f1\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3\u05f5\3\2\2\2\u05f4"+
		"\u05e4\3\2\2\2\u05f4\u05e5\3\2\2\2\u05f5o\3\2\2\2\u05f6\u05f8\7\u00a1"+
		"\2\2\u05f7\u05f6\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9"+
		"\u05fa\7\u008c\2\2\u05fa\u05fb\7\u00c4\2\2\u05fb\u05fc\5\u02e2\u0172\2"+
		"\u05fcq\3\2\2\2\u05fd\u0600\7X\2\2\u05fe\u05ff\7\u0117\2\2\u05ff\u0601"+
		"\7\u0146\2\2\u0600\u05fe\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u0602\3\2\2"+
		"\2\u0602\u0605\7\u01a1\2\2\u0603\u0606\5t;\2\u0604\u0606\5\u0080A\2\u0605"+
		"\u0603\3\2\2\2\u0605\u0604\3\2\2\2\u0606\u0607\3\2\2\2\u0607\u0608\7\u020c"+
		"\2\2\u0608s\3\2\2\2\u0609\u060c\5\u02c8\u0165\2\u060a\u060b\7\u0111\2"+
		"\2\u060b\u060d\7\u01fc\2\2\u060c\u060a\3\2\2\2\u060c\u060d\3\2\2\2\u060d"+
		"\u060f\3\2\2\2\u060e\u0610\5v<\2\u060f\u060e\3\2\2\2\u060f\u0610\3\2\2"+
		"\2\u0610u\3\2\2\2\u0611\u0613\5\u00b2Z\2\u0612\u0611\3\2\2\2\u0612\u0613"+
		"\3\2\2\2\u0613\u0616\3\2\2\2\u0614\u0617\5x=\2\u0615\u0617\5z>\2\u0616"+
		"\u0614\3\2\2\2\u0616\u0615\3\2\2\2\u0617\u0619\3\2\2\2\u0618\u061a\5~"+
		"@\2\u0619\u0618\3\2\2\2\u0619\u061a\3\2\2\2\u061a\u0626\3\2\2\2\u061b"+
		"\u061c\7\u0200\2\2\u061c\u0621\5\u0090I\2\u061d\u061e\7\u0206\2\2\u061e"+
		"\u0620\5\u0090I\2\u061f\u061d\3\2\2\2\u0620\u0623\3\2\2\2\u0621\u061f"+
		"\3\2\2\2\u0621\u0622\3\2\2\2\u0622\u0624\3\2\2\2\u0623\u0621\3\2\2\2\u0624"+
		"\u0625\7\u0201\2\2\u0625\u0627\3\2\2\2\u0626\u061b\3\2\2\2\u0626\u0627"+
		"\3\2\2\2\u0627\u062b\3\2\2\2\u0628\u062a\5\u008eH\2\u0629\u0628\3\2\2"+
		"\2\u062a\u062d\3\2\2\2\u062b\u0629\3\2\2\2\u062b\u062c\3\2\2\2\u062cw"+
		"\3\2\2\2\u062d\u062b\3\2\2\2\u062e\u0632\5\f\7\2\u062f\u0633\7\u010e\2"+
		"\2\u0630\u0633\5\u00e0q\2\u0631\u0633\5|?\2\u0632\u062f\3\2\2\2\u0632"+
		"\u0630\3\2\2\2\u0632\u0631\3\2\2\2\u0633y\3\2\2\2\u0634\u0635\7\u01a3"+
		"\2\2\u0635\u0636\5\u02f2\u017a\2\u0636{\3\2\2\2\u0637\u0638\7\u018a\2"+
		"\2\u0638\u0639\7\u010f\2\2\u0639\u063c\5\u02f2\u017a\2\u063a\u063b\7\u0107"+
		"\2\2\u063b\u063d\7\u0109\2\2\u063c\u063a\3\2\2\2\u063c\u063d\3\2\2\2\u063d"+
		"}\3\2\2\2\u063e\u063f\7\u0093\2\2\u063f\u0640\7\u00f1\2\2\u0640\u0641"+
		"\5\u0202\u0102\2\u0641\u0642\7\u00cc\2\2\u0642\u0643\7\u00c9\2\2\u0643"+
		"\u0644\7\u01ae\2\2\u0644\u0645\t\20\2\2\u0645\177\3\2\2\2\u0646\u0647"+
		"\7,\2\2\u0647\u0648\5\u02c8\u0165\2\u0648\u0649\5\f\7\2\u0649\u064e\5"+
		"\u0082B\2\u064a\u064b\7\u0206\2\2\u064b\u064d\5\u0082B\2\u064c\u064a\3"+
		"\2\2\2\u064d\u0650\3\2\2\2\u064e\u064c\3\2\2\2\u064e\u064f\3\2\2\2\u064f"+
		"\u0651\3\2\2\2\u0650\u064e\3\2\2\2\u0651\u0652\7\u0084\2\2\u0652\u0081"+
		"\3\2\2\2\u0653\u0656\5\u0084C\2\u0654\u0656\5\u0086D\2\u0655\u0653\3\2"+
		"\2\2\u0655\u0654\3\2\2\2\u0656\u0083\3\2\2\2\u0657\u0658\t\21\2\2\u0658"+
		"\u0659\7\u00e5\2\2\u0659\u065a\5\u008aF\2\u065a\u0085\3\2\2\2\u065b\u065f"+
		"\t\22\2\2\u065c\u0660\5\u0088E\2\u065d\u0660\5\u008aF\2\u065e\u0660\5"+
		"\u008cG\2\u065f\u065c\3\2\2\2\u065f\u065d\3\2\2\2\u065f\u065e\3\2\2\2"+
		"\u0660\u0087\3\2\2\2\u0661\u0662\7\u0139\2\2\u0662\u0663\5\u02d0\u0169"+
		"\2\u0663\u0664\7\u0200\2\2\u0664\u0669\5\u00a6T\2\u0665\u0666\7\u0206"+
		"\2\2\u0666\u0668\5\u00a6T\2\u0667\u0665\3\2\2\2\u0668\u066b\3\2\2\2\u0669"+
		"\u0667\3\2\2\2\u0669\u066a\3\2\2\2\u066a\u066c\3\2\2\2\u066b\u0669\3\2"+
		"\2\2\u066c\u066d\7\u0201\2\2\u066d\u0678\5\f\7\2\u066e\u0679\5\u00b6\\"+
		"\2\u066f\u0671\5\u00c4c\2\u0670\u066f\3\2\2\2\u0671\u0674\3\2\2\2\u0672"+
		"\u0670\3\2\2\2\u0672\u0673\3\2\2\2\u0673\u0675\3\2\2\2\u0674\u0672\3\2"+
		"\2\2\u0675\u0676\5\u010e\u0088\2\u0676\u0677\7\u020c\2\2\u0677\u0679\3"+
		"\2\2\2\u0678\u066e\3\2\2\2\u0678\u0672\3\2\2\2\u0679\u0089\3\2\2\2\u067a"+
		"\u067b\7\u00a4\2\2\u067b\u0687\5\u02ce\u0168\2\u067c\u067d\7\u0200\2\2"+
		"\u067d\u0682\5\u00a6T\2\u067e\u067f\7\u0206\2\2\u067f\u0681\5\u00a6T\2"+
		"\u0680\u067e\3\2\2\2\u0681\u0684\3\2\2\2\u0682\u0680\3\2\2\2\u0682\u0683"+
		"\3\2\2\2";
	private static final String _serializedATNSegment1 =
		"\u0683\u0685\3\2\2\2\u0684\u0682\3\2\2\2\u0685\u0686\7\u0201\2\2\u0686"+
		"\u0688\3\2\2\2\u0687\u067c\3\2\2\2\u0687\u0688\3\2\2\2\u0688\u0689\3\2"+
		"\2\2\u0689\u068a\7\u014b\2\2\u068a\u068b\5\u02f2\u017a\2\u068b\u0696\5"+
		"\f\7\2\u068c\u0697\5\u00b6\\\2\u068d\u068f\5\u00c4c\2\u068e\u068d\3\2"+
		"\2\2\u068f\u0692\3\2\2\2\u0690\u068e\3\2\2\2\u0690\u0691\3\2\2\2\u0691"+
		"\u0693\3\2\2\2\u0692\u0690\3\2\2\2\u0693\u0694\5\u010e\u0088\2\u0694\u0695"+
		"\7\u020c\2\2\u0695\u0697\3\2\2\2\u0696\u068c\3\2\2\2\u0696\u0690\3\2\2"+
		"\2\u0697\u008b\3\2\2\2\u0698\u069a\7\u0099\2\2\u0699\u0698\3\2\2\2\u0699"+
		"\u069a\3\2\2\2\u069a\u069c\3\2\2\2\u069b\u069d\7\u00be\2\2\u069c\u069b"+
		"\3\2\2\2\u069c\u069d\3\2\2\2\u069d\u069e\3\2\2\2\u069e\u069f\7O\2\2\u069f"+
		"\u06a0\7\u00a4\2\2\u06a0\u06b2\5\u02f2\u017a\2\u06a1\u06a2\7\u0200\2\2"+
		"\u06a2\u06a3\7\u0162\2\2\u06a3\u06a4\7\u00b0\2\2\u06a4\u06a5\7\u011c\2"+
		"\2\u06a5\u06a6\5\u02f2\u017a\2\u06a6\u06a7\7\u0206\2\2\u06a7\u06a8\3\2"+
		"\2\2\u06a8\u06ad\5\u00a6T\2\u06a9\u06aa\7\u0206\2\2\u06aa\u06ac\5\u00a6"+
		"T\2\u06ab\u06a9\3\2\2\2\u06ac\u06af\3\2\2\2\u06ad\u06ab\3\2\2\2\u06ad"+
		"\u06ae\3\2\2\2\u06ae\u06b0\3\2\2\2\u06af\u06ad\3\2\2\2\u06b0\u06b1\7\u0201"+
		"\2\2\u06b1\u06b3\3\2\2\2\u06b2\u06a1\3\2\2\2\u06b2\u06b3\3\2\2\2\u06b3"+
		"\u06b4\3\2\2\2\u06b4\u06b5\7\u014b\2\2\u06b5\u06b6\7\u0162\2\2\u06b6\u06b7"+
		"\7\27\2\2\u06b7\u06b8\7\u0149\2\2\u06b8\u06c3\5\f\7\2\u06b9\u06c4\5\u00b6"+
		"\\\2\u06ba\u06bc\5\u00c4c\2\u06bb\u06ba\3\2\2\2\u06bc\u06bf\3\2\2\2\u06bd"+
		"\u06bb\3\2\2\2\u06bd\u06be\3\2\2\2\u06be\u06c0\3\2\2\2\u06bf\u06bd\3\2"+
		"\2\2\u06c0\u06c1\5\u010e\u0088\2\u06c1\u06c2\7\u020c\2\2\u06c2\u06c4\3"+
		"\2\2\2\u06c3\u06b9\3\2\2\2\u06c3\u06bd\3\2\2\2\u06c4\u008d\3\2\2\2\u06c5"+
		"\u06c7\7\u0107\2\2\u06c6\u06c5\3\2\2\2\u06c6\u06c7\3\2\2\2\u06c7\u06c8"+
		"\3\2\2\2\u06c8\u06c9\t\23\2\2\u06c9\u008f\3\2\2\2\u06ca\u06cb\5\u0308"+
		"\u0185\2\u06cb\u06cd\5\u02f2\u017a\2\u06cc\u06ce\5\u0092J\2\u06cd\u06cc"+
		"\3\2\2\2\u06cd\u06ce\3\2\2\2\u06ce\u06d1\3\2\2\2\u06cf\u06d1\5\u0094K"+
		"\2\u06d0\u06ca\3\2\2\2\u06d0\u06cf\3\2\2\2\u06d1\u0091\3\2\2\2\u06d2\u06d3"+
		"\7\u0093\2\2\u06d3\u06d4\7\u00f1\2\2\u06d4\u06d5\5\u0202\u0102\2\u06d5"+
		"\u0093\3\2\2\2\u06d6\u06d8\5\u008eH\2\u06d7\u06d6\3\2\2\2\u06d7\u06d8"+
		"\3\2\2\2\u06d8\u06da\3\2\2\2\u06d9\u06db\5\u0096L\2\u06da\u06d9\3\2\2"+
		"\2\u06db\u06dc\3\2\2\2\u06dc\u06da\3\2\2\2\u06dc\u06dd\3\2\2\2\u06dd\u06e0"+
		"\3\2\2\2\u06de\u06df\7\u0206\2\2\u06df\u06e1\5\u00a2R\2\u06e0\u06de\3"+
		"\2\2\2\u06e0\u06e1\3\2\2\2\u06e1\u0095\3\2\2\2\u06e2\u06e6\5\u0098M\2"+
		"\u06e3\u06e6\5\u009eP\2\u06e4\u06e6\5\u00a0Q\2\u06e5\u06e2\3\2\2\2\u06e5"+
		"\u06e3\3\2\2\2\u06e5\u06e4\3\2\2\2\u06e6\u0097\3\2\2\2\u06e7\u06ea\t\22"+
		"\2\2\u06e8\u06eb\5\u009aN\2\u06e9\u06eb\5\u009cO\2\u06ea\u06e8\3\2\2\2"+
		"\u06ea\u06e9\3\2\2\2\u06eb\u0099\3\2\2\2\u06ec\u06ed\7\u0139\2\2\u06ed"+
		"\u06ee\5\u02d0\u0169\2\u06ee\u06ef\7\u0200\2\2\u06ef\u06f4\5\u00a6T\2"+
		"\u06f0\u06f1\7\u0206\2\2\u06f1\u06f3\5\u00a6T\2\u06f2\u06f0\3\2\2\2\u06f3"+
		"\u06f6\3\2\2\2\u06f4\u06f2\3\2\2\2\u06f4\u06f5\3\2\2\2\u06f5\u06f7\3\2"+
		"\2\2\u06f6\u06f4\3\2\2\2\u06f7\u06fb\7\u0201\2\2\u06f8\u06f9\5\f\7\2\u06f9"+
		"\u06fa\5\u00b6\\\2\u06fa\u06fc\3\2\2\2\u06fb\u06f8\3\2\2\2\u06fb\u06fc"+
		"\3\2\2\2\u06fc\u009b\3\2\2\2\u06fd\u06fe\7\u00a4\2\2\u06fe\u070a\5\u02ce"+
		"\u0168\2\u06ff\u0700\7\u0200\2\2\u0700\u0705\5\u00a6T\2\u0701\u0702\7"+
		"\u0206\2\2\u0702\u0704\5\u00a6T\2\u0703\u0701\3\2\2\2\u0704\u0707\3\2"+
		"\2\2\u0705\u0703\3\2\2\2\u0705\u0706\3\2\2\2\u0706\u0708\3\2\2\2\u0707"+
		"\u0705\3\2\2\2\u0708\u0709\7\u0201\2\2\u0709\u070b\3\2\2\2\u070a\u06ff"+
		"\3\2\2\2\u070a\u070b\3\2\2\2\u070b\u070c\3\2\2\2\u070c\u0711\7\u014b\2"+
		"\2\u070d\u0712\5\u02f2\u017a\2\u070e\u070f\7\u0162\2\2\u070f\u0710\7\27"+
		"\2\2\u0710\u0712\7\u0149\2\2\u0711\u070d\3\2\2\2\u0711\u070e\3\2\2\2\u0712"+
		"\u071c\3\2\2\2\u0713\u0714\5\f\7\2\u0714\u0715\5\u00b6\\\2\u0715\u071d"+
		"\3\2\2\2\u0716\u0718\7\u0093\2\2\u0717\u0719\7\u01b4\2\2\u0718\u0717\3"+
		"\2\2\2\u0718\u0719\3\2\2\2\u0719\u071a\3\2\2\2\u071a\u071b\7\u00f1\2\2"+
		"\u071b\u071d\5\u0202\u0102\2\u071c\u0713\3\2\2\2\u071c\u0716\3\2\2\2\u071c"+
		"\u071d\3\2\2\2\u071d\u009d\3\2\2\2\u071e\u0720\7\u0099\2\2\u071f\u071e"+
		"\3\2\2\2\u071f\u0720\3\2\2\2\u0720\u0722\3\2\2\2\u0721\u0723\7\u00be\2"+
		"\2\u0722\u0721\3\2\2\2\u0722\u0723\3\2\2\2\u0723\u0724\3\2\2\2\u0724\u0725"+
		"\7O\2\2\u0725\u0726\7\u00a4\2\2\u0726\u0738\5\u02f2\u017a\2\u0727\u0728"+
		"\7\u0200\2\2\u0728\u0729\7\u0162\2\2\u0729\u072a\7\u00b0\2\2\u072a\u072b"+
		"\7\u011c\2\2\u072b\u072c\5\u02f2\u017a\2\u072c\u072d\7\u0206\2\2\u072d"+
		"\u072e\3\2\2\2\u072e\u0733\5\u00a6T\2\u072f\u0730\7\u0206\2\2\u0730\u0732"+
		"\5\u00a6T\2\u0731\u072f\3\2\2\2\u0732\u0735\3\2\2\2\u0733\u0731\3\2\2"+
		"\2\u0733\u0734\3\2\2\2\u0734\u0736\3\2\2\2\u0735\u0733\3\2\2\2\u0736\u0737"+
		"\7\u0201\2\2\u0737\u0739\3\2\2\2\u0738\u0727\3\2\2\2\u0738\u0739\3\2\2"+
		"\2\u0739\u073a\3\2\2\2\u073a\u073b\7\u014b\2\2\u073b\u073c\7\u0162\2\2"+
		"\u073c\u073d\7\27\2\2\u073d\u0741\7\u0149\2\2\u073e\u073f\5\f\7\2\u073f"+
		"\u0740\5\u00b6\\\2\u0740\u0742\3\2\2\2\u0741\u073e\3\2\2\2\u0741\u0742"+
		"\3\2\2\2\u0742\u009f\3\2\2\2\u0743\u0744\t\21\2\2\u0744\u0745\7\u00e5"+
		"\2\2\u0745\u0746\5\u009cO\2\u0746\u00a1\3\2\2\2\u0747\u0748\7\u0134\2"+
		"\2\u0748\u0749\7\u0148\2\2\u0749\u074a\7\u0200\2\2\u074a\u074f\5\u00a4"+
		"S\2\u074b\u074c\7\u0206\2\2\u074c\u074e\5\u00a4S\2\u074d\u074b\3\2\2\2"+
		"\u074e\u0751\3\2\2\2\u074f\u074d\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0752"+
		"\3\2\2\2\u0751\u074f\3\2\2\2\u0752\u0753\7\u0201\2\2\u0753\u00a3\3\2\2"+
		"\2\u0754\u0757\5\u0308\u0185\2\u0755\u0757\7m\2\2\u0756\u0754\3\2\2\2"+
		"\u0756\u0755\3\2\2\2\u0757\u00a5\3\2\2\2\u0758\u0759\5\u02ba\u015e\2\u0759"+
		"\u075a\5\u02f2\u017a\2\u075a\u00a7\3\2\2\2\u075b\u075c\7{\2\2\u075c\u075d"+
		"\7\u0163\2\2\u075d\u075e\5\u02ca\u0166\2\u075e\u075f\7\u020c\2\2\u075f"+
		"\u00a9\3\2\2\2\u0760\u0761\7\22\2\2\u0761\u0762\7\u0163\2\2\u0762\u0764"+
		"\5\u02ca\u0166\2\u0763\u0765\5\u00aeX\2\u0764\u0763\3\2\2\2\u0765\u0766"+
		"\3\2\2\2\u0766\u0764\3\2\2\2\u0766\u0767\3\2\2\2\u0767\u0768\3\2\2\2\u0768"+
		"\u0769\7\u020c\2\2\u0769\u00ab\3\2\2\2\u076a\u076b\7X\2\2\u076b\u076c"+
		"\7\u0163\2\2\u076c\u0771\5\u02ca\u0166\2\u076d\u0770\5\u00b0Y\2\u076e"+
		"\u0770\5\u00aeX\2\u076f\u076d\3\2\2\2\u076f\u076e\3\2\2\2\u0770\u0773"+
		"\3\2\2\2\u0771\u076f\3\2\2\2\u0771\u0772\3\2\2\2\u0772\u0774\3\2\2\2\u0773"+
		"\u0771\3\2\2\2\u0774\u0775\7\u020c\2\2\u0775\u00ad\3\2\2\2\u0776\u0777"+
		"\7\u00b3\2\2\u0777\u0778\7\61\2\2\u0778\u0787\7\u01fa\2\2\u0779\u077a"+
		"\7\u00e3\2\2\u077a\u0787\7\u01fa\2\2\u077b\u0787\7\u0102\2\2\u077c\u077d"+
		"\7\u00e9\2\2\u077d\u0787\7\u01fa\2\2\u077e\u0787\7\u0103\2\2\u077f\u0787"+
		"\7_\2\2\u0780\u0787\7\u0100\2\2\u0781\u0782\7\64\2\2\u0782\u0787\7\u01fa"+
		"\2\2\u0783\u0787\7\u00fe\2\2\u0784\u0787\7\u0119\2\2\u0785\u0787\7\u0105"+
		"\2\2\u0786\u0776\3\2\2\2\u0786\u0779\3\2\2\2\u0786\u077b\3\2\2\2\u0786"+
		"\u077c\3\2\2\2\u0786\u077e\3\2\2\2\u0786\u077f\3\2\2\2\u0786\u0780\3\2"+
		"\2\2\u0786\u0781\3\2\2\2\u0786\u0783\3\2\2\2\u0786\u0784\3\2\2\2\u0786"+
		"\u0785\3\2\2\2\u0787\u00af\3\2\2\2\u0788\u0789\7\u017d\2\2\u0789\u078a"+
		"\7\u01c0\2\2\u078a\u078b\7\u01fa\2\2\u078b\u00b1\3\2\2\2\u078c\u078d\7"+
		"\36\2\2\u078d\u078e\t\24\2\2\u078e\u00b3\3\2\2\2\u078f\u0790\5\u0308\u0185"+
		"\2\u0790\u0791\7\u0217\2\2\u0791\u0792\5\u0202\u0102\2\u0792\u00b5\3\2"+
		"\2\2\u0793\u0796\7\u00cc\2\2\u0794\u0797\5\u00b8]\2\u0795\u0797\5\u00ba"+
		"^\2\u0796\u0794\3\2\2\2\u0796\u0795\3\2\2\2\u0797\u00b7\3\2\2\2\u0798"+
		"\u0799\7\u00c9\2\2\u0799\u079a\7\u00f1\2\2\u079a\u079b\7\u01fc\2\2\u079b"+
		"\u00b9\3\2\2\2\u079c\u079f\7\63\2\2\u079d\u079e\7\u00f1\2\2\u079e\u07a0"+
		"\7\u01fc\2\2\u079f\u079d\3\2\2\2\u079f\u07a0\3\2\2\2\u07a0\u07a1\3\2\2"+
		"\2\u07a1\u07a2\7\u00d2\2\2\u07a2\u07a4\5\u0308\u0185\2\u07a3\u07a5\5\u00bc"+
		"_\2\u07a4\u07a3\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5\u07a8\3\2\2\2\u07a6"+
		"\u07a7\7\u01c0\2\2\u07a7\u07a9\7Q\2\2\u07a8\u07a6\3\2\2\2\u07a8\u07a9"+
		"\3\2\2\2\u07a9\u07ab\3\2\2\2\u07aa\u07ac\5\u00be`\2\u07ab\u07aa\3\2\2"+
		"\2\u07ab\u07ac\3\2\2\2\u07ac\u00bb\3\2\2\2\u07ad\u07ae\7\17\2\2\u07ae"+
		"\u07af\7\u00b0\2\2\u07af\u07b0\7\u0200\2\2\u07b0\u07b5\5\u0202\u0102\2"+
		"\u07b1\u07b2\7\u0206\2\2\u07b2\u07b4\5\u0202\u0102\2\u07b3\u07b1\3\2\2"+
		"\2\u07b4\u07b7\3\2\2\2\u07b5\u07b3\3\2\2\2\u07b5\u07b6\3\2\2\2\u07b6\u07b8"+
		"\3\2\2\2\u07b7\u07b5\3\2\2\2\u07b8\u07b9\7\u0201\2\2\u07b9\u00bd\3\2\2"+
		"\2\u07ba\u07bb\7\u0122\2\2\u07bb\u07c7\7\u0200\2\2\u07bc\u07c1\5\u0202"+
		"\u0102\2\u07bd\u07be\7\u0206\2\2\u07be\u07c0\5\u0202\u0102\2\u07bf\u07bd"+
		"\3\2\2\2\u07c0\u07c3\3\2\2\2\u07c1\u07bf\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2"+
		"\u07c8\3\2\2\2\u07c3\u07c1\3\2\2\2\u07c4\u07c5\7\u01f9\2\2\u07c5\u07c6"+
		"\7\u01f9\2\2\u07c6\u07c8\7\u01f9\2\2\u07c7\u07bc\3\2\2\2\u07c7\u07c4\3"+
		"\2\2\2\u07c8\u07c9\3\2\2\2\u07c9\u07ca\7\u0201\2\2\u07ca\u00bf\3\2\2\2"+
		"\u07cb\u07cf\5\u02ba\u015e\2\u07cc\u07ce\t\25\2\2\u07cd\u07cc\3\2\2\2"+
		"\u07ce\u07d1\3\2\2\2\u07cf\u07cd\3\2\2\2\u07cf\u07d0\3\2\2\2\u07d0\u07d3"+
		"\3\2\2\2\u07d1\u07cf\3\2\2\2\u07d2\u07d4\5\u02f2\u017a\2\u07d3\u07d2\3"+
		"\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07d6\3\2\2\2\u07d5\u07d7\5\u00c2b\2"+
		"\u07d6\u07d5\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7\u00c1\3\2\2\2\u07d8\u07d9"+
		"\t\26\2\2\u07d9\u07da\5\u0202\u0102\2\u07da\u00c3\3\2\2\2\u07db\u07e6"+
		"\5\u00c6d\2\u07dc\u07e6\5\u00c8e\2\u07dd\u07e6\5\u00caf\2\u07de\u07e6"+
		"\5\u00ceh\2\u07df\u07e6\5\u00d0i\2\u07e0\u07e6\5\u00d2j\2\u07e1\u07e6"+
		"\5\u00dan\2\u07e2\u07e6\5\62\32\2\u07e3\u07e6\5\22\n\2\u07e4\u07e6\5\u0288"+
		"\u0145\2\u07e5\u07db\3\2\2\2\u07e5\u07dc\3\2\2\2\u07e5\u07dd\3\2\2\2\u07e5"+
		"\u07de\3\2\2\2\u07e5\u07df\3\2\2\2\u07e5\u07e0\3\2\2\2\u07e5\u07e1\3\2"+
		"\2\2\u07e5\u07e2\3\2\2\2\u07e5\u07e3\3\2\2\2\u07e5\u07e4\3\2\2\2\u07e6"+
		"\u00c5\3\2\2\2\u07e7\u07e9\5\u02d4\u016b\2\u07e8\u07ea\7L\2\2\u07e9\u07e8"+
		"\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea\u07eb\3\2\2\2\u07eb\u07ee\5\u02f2\u017a"+
		"\2\u07ec\u07ed\7\u0107\2\2\u07ed\u07ef\7\u0109\2\2\u07ee\u07ec\3\2\2\2"+
		"\u07ee\u07ef\3\2\2\2\u07ef\u07f1\3\2\2\2\u07f0\u07f2\5\u00c2b\2\u07f1"+
		"\u07f0\3\2\2\2\u07f1\u07f2\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3\u07f4\7\u020c"+
		"\2\2\u07f4\u00c7\3\2\2\2\u07f5\u07f6\7\u0187\2\2\u07f6\u07f7\5\u02c8\u0165"+
		"\2\u07f7\u07f8\7\u00c6\2\2\u07f8\u07fe\5\u02f2\u017a\2\u07f9\u07fa\7\u013b"+
		"\2\2\u07fa\u07fb\5\u0202\u0102\2\u07fb\u07fc\7\3\2\2\u07fc\u07fd\5\u0202"+
		"\u0102\2\u07fd\u07ff\3\2\2\2\u07fe\u07f9\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff"+
		"\u0802\3\2\2\2\u0800\u0801\7\u0107\2\2\u0801\u0803\7\u0109\2\2\u0802\u0800"+
		"\3\2\2\2\u0802\u0803\3\2\2\2\u0803\u0804\3\2\2\2\u0804\u0805\7\u020c\2"+
		"\2\u0805\u00c9\3\2\2\2\u0806\u0807\7]\2\2\u0807\u0813\5\u02d8\u016d\2"+
		"\u0808\u0809\7\u0200\2\2\u0809\u080e\5\u00ccg\2\u080a\u080b\7\u0206\2"+
		"\2\u080b\u080d\5\u00ccg\2\u080c\u080a\3\2\2\2\u080d\u0810\3\2\2\2\u080e"+
		"\u080c\3\2\2\2\u080e\u080f\3\2\2\2\u080f\u0811\3\2\2\2\u0810\u080e\3\2"+
		"\2\2\u0811\u0812\7\u0201\2\2\u0812\u0814\3\2\2\2\u0813\u0808\3\2\2\2\u0813"+
		"\u0814\3\2\2\2\u0814\u0817\3\2\2\2\u0815\u0816\7\u014b\2\2\u0816\u0818"+
		"\5\u02f2\u017a\2\u0817\u0815\3\2\2\2\u0817\u0818\3\2\2\2\u0818\u081b\3"+
		"\2\2\2\u0819\u081a\7\u00c6\2\2\u081a\u081c\5\u013e\u00a0\2\u081b\u0819"+
		"\3\2\2\2\u081b\u081c\3\2\2\2\u081c\u081d\3\2\2\2\u081d\u081e\7\u020c\2"+
		"\2\u081e\u00cb\3\2\2\2\u081f\u0824\5\u02ba\u015e\2\u0820\u0822\7\u00b0"+
		"\2\2\u0821\u0820\3\2\2\2\u0821\u0822\3\2\2\2\u0822\u0823\3\2\2\2\u0823"+
		"\u0825\5\u02f2\u017a\2\u0824\u0821\3\2\2\2\u0824\u0825\3\2\2\2\u0825\u0827"+
		"\3\2\2\2\u0826\u0828\5\u00c2b\2\u0827\u0826\3\2\2\2\u0827\u0828\3\2\2"+
		"\2\u0828\u00cd\3\2\2\2\u0829\u082a\5\u02cc\u0167\2\u082a\u082b\7\u008a"+
		"\2\2\u082b\u082c\7\u020c\2\2\u082c\u00cf\3\2\2\2\u082d\u084f\7\u0134\2"+
		"\2\u082e\u0850\7\u0166\2\2\u082f\u0850\7!\2\2\u0830\u0831\7\u008b\2\2"+
		"\u0831\u0832\7\u0200\2\2\u0832\u0833\5\u02cc\u0167\2\u0833\u0835\7\u0206"+
		"\2\2\u0834\u0836\7\u0205\2\2\u0835\u0834\3\2\2\2\u0835\u0836\3\2\2\2\u0836"+
		"\u0837\3\2\2\2\u0837\u0838\5\u0304\u0183\2\u0838\u0839\7\u0201\2\2\u0839"+
		"\u0850\3\2\2\2\u083a\u083b\7\u00ba\2\2\u083b\u083c\7\u0200\2\2\u083c\u083d"+
		"\5\u0308\u0185\2\u083d\u083e\7\u0206\2\2\u083e\u083f\5\u0202\u0102\2\u083f"+
		"\u0840\7\u0201\2\2\u0840\u0850\3\2\2\2\u0841\u0842\7\u0148\2\2\u0842\u0845"+
		"\7\u0200\2\2\u0843\u0846\5\u0308\u0185\2\u0844\u0846\7m\2\2\u0845\u0843"+
		"\3\2\2\2\u0845\u0844\3\2\2\2\u0846\u0849\3\2\2\2\u0847\u0848\7\u0206\2"+
		"\2\u0848\u084a\5\u0308\u0185\2\u0849\u0847\3\2\2\2\u084a\u084b\3\2\2\2"+
		"\u084b\u0849\3\2\2\2\u084b\u084c\3\2\2\2\u084c\u084d\3\2\2\2\u084d\u084e"+
		"\7\u0201\2\2\u084e\u0850\3\2\2\2\u084f\u082e\3\2\2\2\u084f\u082f\3\2\2"+
		"\2\u084f\u0830\3\2\2\2\u084f\u083a\3\2\2\2\u084f\u0841\3\2\2\2\u0850\u0851"+
		"\3\2\2\2\u0851\u0852\7\u020c\2\2\u0852\u00d1\3\2\2\2\u0853\u0856\5\u00d4"+
		"k\2\u0854\u0856\5\u00d8m\2\u0855\u0853\3\2\2\2\u0855\u0854\3\2\2\2\u0856"+
		"\u00d3\3\2\2\2\u0857\u0858\7\u01a1\2\2\u0858\u0859\5\u02c8\u0165\2\u0859"+
		"\u086c\7\u00c6\2\2\u085a\u085b\7\u013f\2\2\u085b\u085c\7\u0200\2\2\u085c"+
		"\u0861\5\u00d6l\2\u085d\u085e\7\u0206\2\2\u085e\u0860\5\u00d6l\2\u085f"+
		"\u085d\3\2\2\2\u0860\u0863\3\2\2\2\u0861\u085f\3\2\2\2\u0861\u0862\3\2"+
		"\2\2\u0862\u0864\3\2\2\2\u0863\u0861\3\2\2\2\u0864\u0865\7\u0201\2\2\u0865"+
		"\u086d\3\2\2\2\u0866\u0867\7\u0140\2\2\u0867\u086a\7]\2\2\u0868\u0869"+
		"\7\u014b\2\2\u0869\u086b\5\u02f2\u017a\2\u086a\u0868\3\2\2\2\u086a\u086b"+
		"\3\2\2\2\u086b\u086d\3\2\2\2\u086c\u085a\3\2\2\2\u086c\u0866\3\2\2\2\u086d"+
		"\u086e\3\2\2\2\u086e\u086f\7\u020c\2\2\u086f\u00d5\3\2\2\2\u0870\u0872"+
		"\5\u02e0\u0171\2\u0871\u0873\5\u02f2\u017a\2\u0872\u0871\3\2\2\2\u0872"+
		"\u0873\3\2\2\2\u0873\u0876\3\2\2\2\u0874\u0875\7\u0107\2\2\u0875\u0877"+
		"\7\u0109\2\2\u0876\u0874\3\2\2\2\u0876\u0877\3\2\2\2\u0877\u0879\3\2\2"+
		"\2\u0878\u087a\5\u00c2b\2\u0879\u0878\3\2\2\2\u0879\u087a\3\2\2\2\u087a"+
		"\u00d7\3\2\2\2\u087b\u087c\5\u02da\u016e\2\u087c\u087f\5\u02c8\u0165\2"+
		"\u087d\u087e\7\u0208\2\2\u087e\u0880\5\u02de\u0170\2\u087f\u087d\3\2\2"+
		"\2\u087f\u0880\3\2\2\2\u0880\u0886\3\2\2\2\u0881\u0887\7\u0128\2\2\u0882"+
		"\u0884\7\u0129\2\2\u0883\u0885\5\u00c2b\2\u0884\u0883\3\2\2\2\u0884\u0885"+
		"\3\2\2\2\u0885\u0887\3\2\2\2\u0886\u0881\3\2\2\2\u0886\u0882\3\2\2\2\u0887"+
		"\u0888\3\2\2\2\u0888\u0889\7\u020c\2\2\u0889\u00d9\3\2\2\2\u088a\u088d"+
		"\5\u00dco\2\u088b\u088d\5\u00e2r\2\u088c\u088a\3\2\2\2\u088c\u088b\3\2"+
		"\2\2\u088d\u088e\3\2\2\2\u088e\u088f\7\u020c\2\2\u088f\u00db\3\2\2\2\u0890"+
		"\u0891\7\u01a1\2\2\u0891\u0892\5\u02c8\u0165\2\u0892\u089e\7\u00c6\2\2"+
		"\u0893\u0894\7\u018a\2\2\u0894\u0895\7\u010f\2\2\u0895\u0897\5\u02f2\u017a"+
		"\2\u0896\u0898\5\u00dep\2\u0897\u0896\3\2\2\2\u0897\u0898\3\2\2\2\u0898"+
		"\u089b\3\2\2\2\u0899\u089a\7\u0107\2\2\u089a\u089c\7\u0109\2\2\u089b\u0899"+
		"\3\2\2\2\u089b\u089c\3\2\2\2\u089c\u089f\3\2\2\2\u089d\u089f\5\u00e0q"+
		"\2\u089e\u0893\3\2\2\2\u089e\u089d\3\2\2\2\u089f\u00dd\3\2\2\2\u08a0\u08a3"+
		"\7\u00b6\2\2\u08a1\u08a3\7\u00b5\2\2\u08a2\u08a0\3\2\2\2\u08a2\u08a1\3"+
		"\2\2\2\u08a3\u08a4\3\2\2\2\u08a4\u08a5\7\61\2\2\u08a5\u08a6\5\u02f2\u017a"+
		"\2\u08a6\u00df\3\2\2\2\u08a7\u08ab\7\u01b5\2\2\u08a8\u08a9\7\u01b6\2\2"+
		"\u08a9\u08ab\7\26\2\2\u08aa\u08a7\3\2\2\2\u08aa\u08a8\3\2\2\2\u08ab\u08ac"+
		"\3\2\2\2\u08ac\u08ad\7\u0200\2\2\u08ad\u08ae\5\u0202\u0102\2\u08ae\u08af"+
		"\7\u0201\2\2\u08af\u08b0\7\u010f\2\2\u08b0\u08b3\5\u02f2\u017a\2\u08b1"+
		"\u08b2\7\u0107\2\2\u08b2\u08b4\7\u0109\2\2\u08b3\u08b1\3\2\2\2\u08b3\u08b4"+
		"\3\2\2\2\u08b4\u00e1\3\2\2\2\u08b5\u08b6\5\u02b0\u0159\2\u08b6\u08b7\5"+
		"\u02f2\u017a\2\u08b7\u00e3\3\2\2\2\u08b8\u08b9\5\u00e8u\2\u08b9\u08ba"+
		"\7\u020c\2\2\u08ba\u08be\3\2\2\2\u08bb\u08be\5\u00e6t\2\u08bc\u08be\5"+
		"\u0288\u0145\2\u08bd\u08b8\3\2\2\2\u08bd\u08bb\3\2\2\2\u08bd\u08bc\3\2"+
		"\2\2\u08be\u08bf\3\2\2\2\u08bf\u08bd\3\2\2\2\u08bf\u08c0\3\2\2\2\u08c0"+
		"\u00e5\3\2\2\2\u08c1\u08c2\7\u020e\2\2\u08c2\u08c3\7\u020e\2\2\u08c3\u08c4"+
		"\5\u02c6\u0164\2\u08c4\u08c5\7\u0214\2\2\u08c5\u08c6\7\u0214\2\2\u08c6"+
		"\u00e7\3\2\2\2\u08c7\u08c8\7X\2\2\u08c8\u08e3\5\2\2\2\u08c9\u08ca\7\22"+
		"\2\2\u08ca\u08e3\5\2\2\2\u08cb\u08cc\7\u00a6\2\2\u08cc\u08e3\5\2\2\2\u08cd"+
		"\u08ce\7\u01a0\2\2\u08ce\u08e3\5\2\2\2\u08cf\u08d0\7\u0134\2\2\u08d0\u08e3"+
		"\5\2\2\2\u08d1\u08e3\5\u010e\u0088\2\u08d2\u08e3\5\u011a\u008e\2\u08d3"+
		"\u08e3\5\u00eav\2\u08d4\u08e3\5\u00ecw\2\u08d5\u08e3\5\u00eex\2\u08d6"+
		"\u08e3\5\u00f0y\2\u08d7\u08e3\5\u00f2z\2\u08d8\u08e3\5\u00f8}\2\u08d9"+
		"\u08e3\5\u00fc\177\2\u08da\u08e3\5\u0106\u0084\2\u08db\u08e3\5\u0108\u0085"+
		"\2\u08dc\u08e3\5\u010a\u0086\2\u08dd\u08e3\5\u0238\u011d\2\u08de\u08e3"+
		"\5\u011c\u008f\2\u08df\u08e3\5\u010c\u0087\2\u08e0\u08e3\5\u0112\u008a"+
		"\2\u08e1\u08e3\5\u0110\u0089\2\u08e2\u08c7\3\2\2\2\u08e2\u08c9\3\2\2\2"+
		"\u08e2\u08cb\3\2\2\2\u08e2\u08cd\3\2\2\2\u08e2\u08cf\3\2\2\2\u08e2\u08d1"+
		"\3\2\2\2\u08e2\u08d2\3\2\2\2\u08e2\u08d3\3\2\2\2\u08e2\u08d4\3\2\2\2\u08e2"+
		"\u08d5\3\2\2\2\u08e2\u08d6\3\2\2\2\u08e2\u08d7\3\2\2\2\u08e2\u08d8\3\2"+
		"\2\2\u08e2\u08d9\3\2\2\2\u08e2\u08da\3\2\2\2\u08e2\u08db\3\2\2\2\u08e2"+
		"\u08dc\3\2\2\2\u08e2\u08dd\3\2\2\2\u08e2\u08de\3\2\2\2\u08e2\u08df\3\2"+
		"\2\2\u08e2\u08e0\3\2\2\2\u08e2\u08e1\3\2\2\2\u08e3\u00e9\3\2\2\2\u08e4"+
		"\u08e8\5\u01f8\u00fd\2\u08e5\u08e8\5\u02fc\u017f\2\u08e6\u08e8\5\u02fa"+
		"\u017e\2\u08e7\u08e4\3\2\2\2\u08e7\u08e5\3\2\2\2\u08e7\u08e6\3\2\2\2\u08e8"+
		"\u08e9\3\2\2\2\u08e9\u08ea\7\u0209\2\2\u08ea\u08eb\5\u0202\u0102\2\u08eb"+
		"\u00eb\3\2\2\2\u08ec\u08ee\7R\2\2\u08ed\u08ef\5\u02c6\u0164\2\u08ee\u08ed"+
		"\3\2\2\2\u08ee\u08ef\3\2\2\2\u08ef\u08f2\3\2\2\2\u08f0\u08f1\7\u01bc\2"+
		"\2\u08f1\u08f3\5\u01fe\u0100\2\u08f2\u08f0\3\2\2\2\u08f2\u08f3\3\2\2\2"+
		"\u08f3\u00ed\3\2\2\2\u08f4\u08f6\7\u0091\2\2\u08f5\u08f7\5\u02c6\u0164"+
		"\2\u08f6\u08f5\3\2\2\2\u08f6\u08f7\3\2\2\2\u08f7\u08fa\3\2\2\2\u08f8\u08f9"+
		"\7\u01bc\2\2\u08f9\u08fb\5\u01fe\u0100\2\u08fa\u08f8\3\2\2\2\u08fa\u08fb"+
		"\3\2\2\2\u08fb\u00ef\3\2\2\2\u08fc\u08fd\7\u00a5\2\2\u08fd\u08fe\5\u02c6"+
		"\u0164\2\u08fe\u00f1\3\2\2\2\u08ff\u0900\7\u00ad\2\2\u0900\u0901\5\u01fe"+
		"\u0100\2\u0901\u0902\7\u018c\2\2\u0902\u0906\5\u00e4s\2\u0903\u0905\5"+
		"\u00f4{\2\u0904\u0903\3\2\2\2\u0905\u0908\3\2\2\2\u0906\u0904\3\2\2\2"+
		"\u0906\u0907\3\2\2\2\u0907\u090a\3\2\2\2\u0908\u0906\3\2\2\2\u0909\u090b"+
		"\5\u00f6|\2\u090a\u0909\3\2\2\2\u090a\u090b\3\2\2\2\u090b\u090c\3\2\2"+
		"\2\u090c\u090d\7\u0084\2\2\u090d\u090e\7\u00ad\2\2\u090e\u00f3\3\2\2\2"+
		"\u090f\u0910\7\u0080\2\2\u0910\u0911\5\u01fe\u0100\2\u0911\u0912\7\u018c"+
		"\2\2\u0912\u0913\5\u00e4s\2\u0913\u00f5\3\2\2\2\u0914\u0915\7\177\2\2"+
		"\u0915\u0916\5\u00e4s\2\u0916\u00f7\3\2\2\2\u0917\u0919\5\u02c6\u0164"+
		"\2\u0918\u0917\3\2\2\2\u0918\u0919\3\2\2\2\u0919\u091e\3\2\2\2\u091a\u091b"+
		"\7\u01bf\2\2\u091b\u091f\5\u01fe\u0100\2\u091c\u091d\7\u009f\2\2\u091d"+
		"\u091f\5\u00fa~\2\u091e\u091a\3\2\2\2\u091e\u091c\3\2\2\2\u091e\u091f"+
		"\3\2\2\2\u091f\u0920\3\2\2\2\u0920\u0921\7\u00df\2\2\u0921\u0922\5\u00e4"+
		"s\2\u0922\u0923\7\u0084\2\2\u0923\u0925\7\u00df\2\2\u0924\u0926\5\u02c6"+
		"\u0164\2\u0925\u0924\3\2\2\2\u0925\u0926\3\2\2\2\u0926\u00f9\3\2\2\2\u0927"+
		"\u0928\5\u02d6\u016c\2\u0928\u092a\7\u00b0\2\2\u0929\u092b\7\u014e\2\2"+
		"\u092a\u0929\3\2\2\2\u092a\u092b\3\2\2\2\u092b\u092c\3\2\2\2\u092c\u092d"+
		"\5\u0102\u0082\2\u092d\u092e\7\3\2\2\u092e\u092f\5\u0104\u0083\2\u092f"+
		"\u093d\3\2\2\2\u0930\u0931\5\u02da\u016e\2\u0931\u093a\7\u00b0\2\2\u0932"+
		"\u0934\5\u02d8\u016d\2\u0933\u0935\5\u01fc\u00ff\2\u0934\u0933\3\2\2\2"+
		"\u0934\u0935\3\2\2\2\u0935\u093b\3\2\2\2\u0936\u0937\7\u0200\2\2\u0937"+
		"\u0938\5\u013e\u00a0\2\u0938\u0939\7\u0201\2\2\u0939\u093b\3\2\2\2\u093a"+
		"\u0932\3\2\2\2\u093a\u0936\3\2\2\2\u093b\u093d\3\2\2\2\u093c\u0927\3\2"+
		"\2\2\u093c\u0930\3\2\2\2\u093d\u00fb\3\2\2\2\u093e\u093f\7\u00a0\2\2\u093f"+
		"\u0940\5\u02d6\u016c\2\u0940\u0941\7\u00b0\2\2\u0941\u0942\5\u00fe\u0080"+
		"\2\u0942\u0945\5\u011c\u008f\2\u0943\u0944\7\u0158\2\2\u0944\u0946\7\u008c"+
		"\2\2\u0945\u0943\3\2\2\2\u0945\u0946\3\2\2\2\u0946\u00fd\3\2\2\2\u0947"+
		"\u0948\5\u0102\u0082\2\u0948\u0949\7\3\2\2\u0949\u094a\5\u0104\u0083\2"+
		"\u094a\u0955\3\2\2\2\u094b\u094c\7\u00b8\2\2\u094c\u094d\7\u010f\2\2\u094d"+
		"\u094f\5\u02dc\u016f\2\u094e\u0950\5\u0100\u0081\2\u094f\u094e\3\2\2\2"+
		"\u094f\u0950\3\2\2\2\u0950\u0955\3\2\2\2\u0951\u0952\7\u01b1\2\2\u0952"+
		"\u0953\7\u010f\2\2\u0953\u0955\5\u02d6\u016c\2\u0954\u0947\3\2\2\2\u0954"+
		"\u094b\3\2\2\2\u0954\u0951\3\2\2\2\u0955\u00ff\3\2\2\2\u0956\u0957\7%"+
		"\2\2\u0957\u0958\5\u0102\u0082\2\u0958\u0959\7\24\2\2\u0959\u095a\5\u0104"+
		"\u0083\2\u095a\u0101\3\2\2\2\u095b\u095c\5\u021e\u0110\2\u095c\u0103\3"+
		"\2\2\2\u095d\u095e\5\u021e\u0110\2\u095e\u0105\3\2\2\2\u095f\u0960\7\u0109"+
		"\2\2\u0960\u0107\3\2\2\2\u0961\u0963\7\u013a\2\2\u0962\u0964\5\u02cc\u0167"+
		"\2\u0963\u0962\3\2\2\2\u0963\u0964\3\2\2\2\u0964\u0109\3\2\2\2\u0965\u0967"+
		"\7\u014b\2\2\u0966\u0968\5\u01fe\u0100\2\u0967\u0966\3\2\2\2\u0967\u0968"+
		"\3\2\2\2\u0968\u010b\3\2\2\2\u0969\u096b\7\65\2\2\u096a\u0969\3\2\2\2"+
		"\u096a\u096b\3\2\2\2\u096b\u096c\3\2\2\2\u096c\u096e\5\u02b4\u015b\2\u096d"+
		"\u096f\5\u02e8\u0175\2\u096e\u096d\3\2\2\2\u096e\u096f\3\2\2\2\u096f\u010d"+
		"\3\2\2\2\u0970\u0971\7$\2\2\u0971\u0973\5\u00e4s\2\u0972\u0974\5\u0114"+
		"\u008b\2\u0973\u0972\3\2\2\2\u0973\u0974\3\2\2\2\u0974\u0975\3\2\2\2\u0975"+
		"\u0977\7\u0084\2\2\u0976\u0978\5\u02c6\u0164\2\u0977\u0976\3\2\2\2\u0977"+
		"\u0978\3\2\2\2\u0978\u010f\3\2\2\2\u0979\u097a\5\u01f8\u00fd\2\u097a\u097b"+
		"\7\u01f9\2\2\u097b\u0985\7q\2\2\u097c\u0982\7\u0200\2\2\u097d\u0980\5"+
		"\u0202\u0102\2\u097e\u097f\7\u0206\2\2\u097f\u0981\5\u0202\u0102\2\u0980"+
		"\u097e\3\2\2\2\u0980\u0981\3\2\2\2\u0981\u0983\3\2\2\2\u0982\u097d\3\2"+
		"\2\2\u0982\u0983\3\2\2\2\u0983\u0984\3\2\2\2\u0984\u0986\7\u0201\2\2\u0985"+
		"\u097c\3\2\2\2\u0985\u0986\3\2\2\2\u0986\u09a0\3\2\2\2\u0987\u0988\5\u01f8"+
		"\u00fd\2\u0988\u0989\7\u01f9\2\2\u0989\u0993\7\u0094\2\2\u098a\u0990\7"+
		"\u0200\2\2\u098b\u098e\5\u0202\u0102\2\u098c\u098d\7\u0206\2\2\u098d\u098f"+
		"\5\u0202\u0102\2\u098e\u098c\3\2\2\2\u098e\u098f\3\2\2\2\u098f\u0991\3"+
		"\2\2\2\u0990\u098b\3\2\2\2\u0990\u0991\3\2\2\2\u0991\u0992\3\2\2\2\u0992"+
		"\u0994\7\u0201\2\2\u0993\u098a\3\2\2\2\u0993\u0994\3\2\2\2\u0994\u09a0"+
		"\3\2\2\2\u0995\u0996\5\u01f8\u00fd\2\u0996\u0997\7\u01f9\2\2\u0997\u099d"+
		"\7\u019e\2\2\u0998\u099a\7\u0200\2\2\u0999\u099b\5\u0202\u0102\2\u099a"+
		"\u0999\3\2\2\2\u099a\u099b\3\2\2\2\u099b\u099c\3\2\2\2\u099c\u099e\7\u0201"+
		"\2\2\u099d\u0998\3\2\2\2\u099d\u099e\3\2\2\2\u099e\u09a0\3\2\2\2\u099f"+
		"\u0979\3\2\2\2\u099f\u0987\3\2\2\2\u099f\u0995\3\2\2\2\u09a0\u0111\3\2"+
		"\2\2\u09a1\u09a2\7\u012e\2\2\u09a2\u09a3\7\u0153\2\2\u09a3\u09a4\7\u0200"+
		"\2\2\u09a4\u09a5\5\u0202\u0102\2\u09a5\u09a6\7\u0201\2\2\u09a6\u0113\3"+
		"\2\2\2\u09a7\u09a9\7\u008a\2\2\u09a8\u09aa\5\u0116\u008c\2\u09a9\u09a8"+
		"\3\2\2\2\u09aa\u09ab\3\2\2\2\u09ab\u09a9\3\2\2\2\u09ab\u09ac\3\2\2\2\u09ac"+
		"\u0115\3\2\2\2\u09ad\u09ae\7\u01bc\2\2\u09ae\u09b3\5\u02cc\u0167\2\u09af"+
		"\u09b0\7\u0117\2\2\u09b0\u09b2\5\u02cc\u0167\2\u09b1\u09af\3\2\2\2\u09b2"+
		"\u09b5\3\2\2\2\u09b3\u09b1\3\2\2\2\u09b3\u09b4\3\2\2\2\u09b4\u09b6\3\2"+
		"\2\2\u09b5\u09b3\3\2\2\2\u09b6\u09b7\7\u018c\2\2\u09b7\u09b8\5\u00e4s"+
		"\2\u09b8\u0117\3\2\2\2\u09b9\u09bb\5\n\6\2\u09ba\u09b9\3\2\2\2\u09ba\u09bb"+
		"\3\2\2\2\u09bb\u09bc\3\2\2\2\u09bc\u09bd\5\u010e\u0088\2\u09bd\u0119\3"+
		"\2\2\2\u09be\u09c0\5\n\6\2\u09bf\u09be\3\2\2\2\u09bf\u09c0\3\2\2\2\u09c0"+
		"\u09c1\3\2\2\2\u09c1\u09c2\5\u010e\u0088\2\u09c2\u011b\3\2\2\2\u09c3\u09c8"+
		"\5\u011e\u0090\2\u09c4\u09c8\5\u0122\u0092\2\u09c5\u09c8\5\u0124\u0093"+
		"\2\u09c6\u09c8\5\u012e\u0098\2\u09c7\u09c3\3\2\2\2\u09c7\u09c4\3\2\2\2"+
		"\u09c7\u09c5\3\2\2\2\u09c7\u09c6\3\2\2\2\u09c8\u011d\3\2\2\2\u09c9\u09ca"+
		"\7\u008f\2\2\u09ca\u09cb\7\u00af\2\2\u09cb\u09d5\5\u0202\u0102\2\u09cc"+
		"\u09ce\5\u02a4\u0153\2\u09cd\u09cf\5\u0264\u0133\2\u09ce\u09cd\3\2\2\2"+
		"\u09ce\u09cf\3\2\2\2\u09cf\u09d6\3\2\2\2\u09d0\u09d2\5\u0264\u0133\2\u09d1"+
		"\u09d3\5\u0120\u0091\2\u09d2\u09d1\3\2\2\2\u09d2\u09d3\3\2\2\2\u09d3\u09d6"+
		"\3\2\2\2\u09d4\u09d6\5\u0120\u0091\2\u09d5\u09cc\3\2\2\2\u09d5\u09d0\3"+
		"\2\2\2\u09d5\u09d4\3\2\2\2\u09d5\u09d6\3\2\2\2\u09d6\u011f\3\2\2\2\u09d7"+
		"\u09d8\t\27\2\2\u09d8\u09d9\5\u02a4\u0153\2\u09d9\u0121\3\2\2\2\u09da"+
		"\u09e2\5\u01cc\u00e7\2\u09db\u09e2\5\u01d8\u00ed\2\u09dc\u09e2\5\u013e"+
		"\u00a0\2\u09dd\u09e2\5\u01b2\u00da\2\u09de\u09e2\5\u01b8\u00dd\2\u09df"+
		"\u09e2\5\u01ba\u00de\2\u09e0\u09e2\5\u013c\u009f\2\u09e1\u09da\3\2\2\2"+
		"\u09e1\u09db\3\2\2\2\u09e1\u09dc\3\2\2\2\u09e1\u09dd\3\2\2\2\u09e1\u09de"+
		"\3\2\2\2\u09e1\u09df\3\2\2\2\u09e1\u09e0\3\2\2\2\u09e2\u0123\3\2\2\2\u09e3"+
		"\u09e8\5\u0126\u0094\2\u09e4\u09e8\5\u0128\u0095\2\u09e5\u09e8\5\u012a"+
		"\u0096\2\u09e6\u09e8\5\u012c\u0097\2\u09e7\u09e3\3\2\2\2\u09e7\u09e4\3"+
		"\2\2\2\u09e7\u09e5\3\2\2\2\u09e7\u09e6\3\2\2\2\u09e8\u0125\3\2\2\2\u09e9"+
		"\u09ea\7@\2\2\u09ea\u09eb\5\u02d8\u016d\2\u09eb\u0127\3\2\2\2\u09ec\u09ed"+
		"\7\u0115\2\2\u09ed\u09ef\5\u02d8\u016d\2\u09ee\u09f0\5\u01fc\u00ff\2\u09ef"+
		"\u09ee\3\2\2\2\u09ef\u09f0\3\2\2\2\u09f0\u0129\3\2\2\2\u09f1\u09f2\7\u0098"+
		"\2\2\u09f2\u0a0e\5\u02d8\u016d\2\u09f3\u09f4\7\u00c4\2\2\u09f4\u09f9\5"+
		"\u02d4\u016b\2\u09f5\u09f6\7\u0206\2\2\u09f6\u09f8\5\u02d4\u016b\2\u09f7"+
		"\u09f5\3\2\2\2\u09f8\u09fb\3\2\2\2\u09f9\u09f7\3\2\2\2\u09f9\u09fa\3\2"+
		"\2\2\u09fa\u0a0f\3\2\2\2\u09fb\u09f9\3\2\2\2\u09fc\u09fd\7\60\2\2\u09fd"+
		"\u09fe\7B\2\2\u09fe\u09ff\7\u00c4\2\2\u09ff\u0a04\5\u02d4\u016b\2\u0a00"+
		"\u0a01\7\u0206\2\2\u0a01\u0a03\5\u02d4\u016b\2\u0a02\u0a00\3\2\2\2\u0a03"+
		"\u0a06\3\2\2\2\u0a04\u0a02\3\2\2\2\u0a04\u0a05\3\2\2\2\u0a05\u0a0c\3\2"+
		"\2\2\u0a06\u0a04\3\2\2\2\u0a07\u0a0a\7\u00d7\2\2\u0a08\u0a0b\5\u02d4\u016b"+
		"\2\u0a09\u0a0b\5\u0304\u0183\2\u0a0a\u0a08\3\2\2\2\u0a0a\u0a09\3\2\2\2"+
		"\u0a0b\u0a0d\3\2\2\2\u0a0c\u0a07\3\2\2\2\u0a0c\u0a0d\3\2\2\2\u0a0d\u0a0f"+
		"\3\2\2\2\u0a0e\u09f3\3\2\2\2\u0a0e\u09fc\3\2\2\2\u0a0f\u012b\3\2\2\2\u0a10"+
		"\u0a11\7\u0115\2\2\u0a11\u0a12\5\u02d4\u016b\2\u0a12\u0a15\7\u009f\2\2"+
		"\u0a13\u0a16\5\u013e\u00a0\2\u0a14\u0a16\5\u0202\u0102\2\u0a15\u0a13\3"+
		"\2\2\2\u0a15\u0a14\3\2\2\2\u0a16\u0a18\3\2\2\2\u0a17\u0a19\5\u0264\u0133"+
		"\2\u0a18\u0a17\3\2\2\2\u0a18\u0a19\3\2\2\2\u0a19\u012d\3\2\2\2\u0a1a\u0a20"+
		"\5\u0130\u0099\2\u0a1b\u0a20\5\u0132\u009a\2\u0a1c\u0a20\5\u0134\u009b"+
		"\2\u0a1d\u0a20\5\u0138\u009d\2\u0a1e\u0a20\5\u013a\u009e\2\u0a1f\u0a1a"+
		"\3\2\2\2\u0a1f\u0a1b\3\2\2\2\u0a1f\u0a1c\3\2\2\2\u0a1f\u0a1d\3\2\2\2\u0a1f"+
		"\u0a1e\3\2\2\2\u0a20\u012f\3\2\2\2\u0a21\u0a22\7\u0169\2\2\u0a22\u0a30"+
		"\7\u019a\2\2\u0a23\u0a24\7\u013d\2\2\u0a24\u0a31\t\30\2\2\u0a25\u0a26"+
		"\7\u00c7\2\2\u0a26\u0a2a\7\u00d1\2\2\u0a27\u0a2b\7\u0165\2\2\u0a28\u0a29"+
		"\7\u013d\2\2\u0a29\u0a2b\7F\2\2\u0a2a\u0a27\3\2\2\2\u0a2a\u0a28\3\2\2"+
		"\2\u0a2b\u0a31\3\2\2\2\u0a2c\u0a2d\7\u01ad\2\2\u0a2d\u0a2e\7\u0151\2\2"+
		"\u0a2e\u0a2f\7\u0160\2\2\u0a2f\u0a31\5\u02ae\u0158\2\u0a30\u0a23\3\2\2"+
		"\2\u0a30\u0a25\3\2\2\2\u0a30\u0a2c\3\2\2\2\u0a30\u0a31\3\2\2\2\u0a31\u0a34"+
		"\3\2\2\2\u0a32\u0a33\7\u00f1\2\2\u0a33\u0a35\5\u0306\u0184\2\u0a34\u0a32"+
		"\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35\u0131\3\2\2\2\u0a36\u0a37\7\u0169\2"+
		"\2\u0a37\u0a41\t\31\2\2\u0a38\u0a42\7\21\2\2\u0a39\u0a3e\5\u02c4\u0163"+
		"\2\u0a3a\u0a3b\7\u0206\2\2\u0a3b\u0a3d\5\u02c4\u0163\2\u0a3c\u0a3a\3\2"+
		"\2\2\u0a3d\u0a40\3\2\2\2\u0a3e\u0a3c\3\2\2\2\u0a3e\u0a3f\3\2\2\2\u0a3f"+
		"\u0a42\3\2\2\2\u0a40\u0a3e\3\2\2\2\u0a41\u0a38\3\2\2\2\u0a41\u0a39\3\2"+
		"\2\2\u0a42\u0a43\3\2\2\2\u0a43\u0a44\t\32\2\2\u0a44\u0133\3\2\2\2\u0a45"+
		"\u0a47\7E\2\2\u0a46\u0a48\7\u01c2\2\2\u0a47\u0a46\3\2\2\2\u0a47\u0a48"+
		"\3\2\2\2\u0a48\u0a56\3\2\2\2\u0a49\u0a4a\7D\2\2\u0a4a\u0a57\5\u0202\u0102"+
		"\2\u0a4b\u0a54\7\u00a1\2\2\u0a4c\u0a4d\7T\2\2\u0a4d\u0a55\5\u0202\u0102"+
		"\2\u0a4e\u0a55\7U\2\2\u0a4f\u0a52\5\u0202\u0102\2\u0a50\u0a51\7\u0206"+
		"\2\2\u0a51\u0a53\5\u0202\u0102\2\u0a52\u0a50\3\2\2\2\u0a52\u0a53\3\2\2"+
		"\2\u0a53\u0a55\3\2\2\2\u0a54\u0a4c\3\2\2\2\u0a54\u0a4e\3\2\2\2\u0a54\u0a4f"+
		"\3\2\2\2\u0a55\u0a57\3\2\2\2\u0a56\u0a49\3\2\2\2\u0a56\u0a4b\3\2\2\2\u0a56"+
		"\u0a57\3\2\2\2\u0a57\u0a59\3\2\2\2\u0a58\u0a5a\5\u0136\u009c\2\u0a59\u0a58"+
		"\3\2\2\2\u0a59\u0a5a\3\2\2\2\u0a5a\u0135\3\2\2\2\u0a5b\u0a5d\7\u01c3\2"+
		"\2\u0a5c\u0a5e\t\33\2\2\u0a5d\u0a5c\3\2\2\2\u0a5d\u0a5e\3\2\2\2\u0a5e"+
		"\u0a60\3\2\2\2\u0a5f\u0a61\t\34\2\2\u0a60\u0a5f\3\2\2\2\u0a60\u0a61\3"+
		"\2\2\2\u0a61\u0137\3\2\2\2\u0a62\u0a64\7\u0151\2\2\u0a63\u0a65\7\u01c2"+
		"\2\2\u0a64\u0a63\3\2\2\2\u0a64\u0a65\3\2\2\2\u0a65\u0a6d\3\2\2\2\u0a66"+
		"\u0a68\7\u0196\2\2\u0a67\u0a69\7\u0159\2\2\u0a68\u0a67\3\2\2\2\u0a68\u0a69"+
		"\3\2\2\2\u0a69\u0a6a\3\2\2\2\u0a6a\u0a6e\5\u02ac\u0157\2\u0a6b\u0a6c\7"+
		"\u00a1\2\2\u0a6c\u0a6e\5\u0306\u0184\2\u0a6d\u0a66\3\2\2\2\u0a6d\u0a6b"+
		"\3\2\2\2\u0a6d\u0a6e\3\2\2\2\u0a6e\u0139\3\2\2\2\u0a6f\u0a70\7\u0159\2"+
		"\2\u0a70\u0a71\5\u02ac\u0157\2\u0a71\u013b\3\2\2\2\u0a72\u0a73\7\u0092"+
		"\2\2\u0a73\u0a78\7\u0130\2\2\u0a74\u0a75\7\u0169\2\2\u0a75\u0a76\7\u0180"+
		"\2\2\u0a76\u0a77\7\u0217\2\2\u0a77\u0a79\5\u0306\u0184\2\u0a78\u0a74\3"+
		"\2\2\2\u0a78\u0a79\3\2\2\2\u0a79\u0a7c\3\2\2\2\u0a7a\u0a7b\7\u00c4\2\2"+
		"\u0a7b\u0a7d\5\u02e2\u0172\2\u0a7c\u0a7a\3\2\2\2\u0a7c\u0a7d\3\2\2\2\u0a7d"+
		"\u0a7e\3\2\2\2\u0a7e\u0a84\7\u009f\2\2\u0a7f\u0a85\5\u013e\u00a0\2\u0a80"+
		"\u0a85\5\u01b2\u00da\2\u0a81\u0a85\5\u01b8\u00dd\2\u0a82\u0a85\5\u01ba"+
		"\u00de\2\u0a83\u0a85\5\u01cc\u00e7\2\u0a84\u0a7f\3\2\2\2\u0a84\u0a80\3"+
		"\2\2\2\u0a84\u0a81\3\2\2\2\u0a84\u0a82\3\2\2\2\u0a84\u0a83\3\2\2\2\u0a85"+
		"\u013d\3\2\2\2\u0a86\u0a88\5\u0140\u00a1\2\u0a87\u0a86\3\2\2\2\u0a87\u0a88"+
		"\3\2\2\2\u0a88\u0a89\3\2\2\2\u0a89\u0a8e\5\u0148\u00a5\2\u0a8a\u0a8d\5"+
		"\u01ac\u00d7\2\u0a8b\u0a8d\5\u01a8\u00d5\2\u0a8c\u0a8a\3\2\2\2\u0a8c\u0a8b"+
		"\3\2\2\2\u0a8d\u0a90\3\2\2\2\u0a8e\u0a8c\3\2\2\2\u0a8e\u0a8f\3\2\2\2\u0a8f"+
		"\u013f\3\2\2\2\u0a90\u0a8e\3\2\2\2\u0a91\u0a92\7\u01c0\2\2\u0a92\u0a97"+
		"\5\u0142\u00a2\2\u0a93\u0a94\7\u0206\2\2\u0a94\u0a96\5\u0142\u00a2\2\u0a95"+
		"\u0a93\3\2\2\2\u0a96\u0a99\3\2\2\2\u0a97\u0a95\3\2\2\2\u0a97\u0a98\3\2"+
		"\2\2\u0a98\u0141\3\2\2\2\u0a99\u0a97\3\2\2\2\u0a9a\u0aa6\5\u02c2\u0162"+
		"\2\u0a9b\u0a9c\7\u0200\2\2\u0a9c\u0aa1\5\u02e0\u0171\2\u0a9d\u0a9e\7\u0206"+
		"\2\2\u0a9e\u0aa0\5\u02e0\u0171\2\u0a9f\u0a9d\3\2\2\2\u0aa0\u0aa3\3\2\2"+
		"\2\u0aa1\u0a9f\3\2\2\2\u0aa1\u0aa2\3\2\2\2\u0aa2\u0aa4\3\2\2\2\u0aa3\u0aa1"+
		"\3\2\2\2\u0aa4\u0aa5\7\u0201\2\2\u0aa5\u0aa7\3\2\2\2\u0aa6\u0a9b\3\2\2"+
		"\2\u0aa6\u0aa7\3\2\2\2\u0aa7\u0aa8\3\2\2\2\u0aa8\u0aa9\7\27\2\2\u0aa9"+
		"\u0aaa\7\u0200\2\2\u0aaa\u0aac\5\u0148\u00a5\2\u0aab\u0aad\5\u01a8\u00d5"+
		"\2\u0aac\u0aab\3\2\2\2\u0aac\u0aad\3\2\2\2\u0aad\u0aae\3\2\2\2\u0aae\u0ab0"+
		"\7\u0201\2\2\u0aaf\u0ab1\5\u0144\u00a3\2\u0ab0\u0aaf\3\2\2\2\u0ab0\u0ab1"+
		"\3\2\2\2\u0ab1\u0ab3\3\2\2\2\u0ab2\u0ab4\5\u0146\u00a4\2\u0ab3\u0ab2\3"+
		"\2\2\2\u0ab3\u0ab4\3\2\2\2\u0ab4\u0143\3\2\2\2\u0ab5\u0ab6\7\u015d\2\2"+
		"\u0ab6\u0ab7\t\35\2\2\u0ab7\u0ab8\7\u009a\2\2\u0ab8\u0ab9\7\61\2\2\u0ab9"+
		"\u0abb\5\u02e0\u0171\2\u0aba\u0abc\7\30\2\2\u0abb\u0aba\3\2\2\2\u0abb"+
		"\u0abc\3\2\2\2\u0abc\u0abe\3\2\2\2\u0abd\u0abf\7s\2\2\u0abe\u0abd\3\2"+
		"\2\2\u0abe\u0abf\3\2\2\2\u0abf\u0ac2\3\2\2\2\u0ac0\u0ac1\7\u010a\2\2\u0ac1"+
		"\u0ac3\7\u009a\2\2\u0ac2\u0ac0\3\2\2\2\u0ac2\u0ac3\3\2\2\2\u0ac3\u0ac6"+
		"\3\2\2\2\u0ac4\u0ac5\7\u010a\2\2\u0ac5\u0ac7\7\u00cd\2\2\u0ac6\u0ac4\3"+
		"\2\2\2\u0ac6\u0ac7\3\2\2\2\u0ac7\u0ada\3\2\2\2\u0ac8\u0ac9\7\u0206\2\2"+
		"\u0ac9\u0acb\5\u02e0\u0171\2\u0aca\u0acc\7\30\2\2\u0acb\u0aca\3\2\2\2"+
		"\u0acb\u0acc\3\2\2\2\u0acc\u0ace\3\2\2\2\u0acd\u0acf\7s\2\2\u0ace\u0acd"+
		"\3\2\2\2\u0ace\u0acf\3\2\2\2\u0acf\u0ad2\3\2\2\2\u0ad0\u0ad1\7\u010a\2"+
		"\2\u0ad1\u0ad3\7\u009a\2\2\u0ad2\u0ad0\3\2\2\2\u0ad2\u0ad3\3\2\2\2\u0ad3"+
		"\u0ad6\3\2\2\2\u0ad4\u0ad5\7\u010a\2\2\u0ad5\u0ad7\7\u00cd\2\2\u0ad6\u0ad4"+
		"\3\2\2\2\u0ad6\u0ad7\3\2\2\2\u0ad7\u0ad9\3\2\2\2\u0ad8\u0ac8\3\2\2\2\u0ad9"+
		"\u0adc\3\2\2\2\u0ada\u0ad8\3\2\2\2\u0ada\u0adb\3\2\2\2\u0adb\u0add\3\2"+
		"\2\2\u0adc\u0ada\3\2\2\2\u0add\u0ade\7\u0169\2\2\u0ade\u0adf\5\u02e0\u0171"+
		"\2\u0adf\u0145\3\2\2\2\u0ae0\u0ae1\7_\2\2\u0ae1\u0ae6\5\u02e0\u0171\2"+
		"\u0ae2\u0ae3\7\u0206\2\2\u0ae3\u0ae5\5\u02e0\u0171\2\u0ae4\u0ae2\3\2\2"+
		"\2\u0ae5\u0ae8\3\2\2\2\u0ae6\u0ae4\3\2\2\2\u0ae6\u0ae7\3\2\2\2\u0ae7\u0ae9"+
		"\3\2\2\2\u0ae8\u0ae6\3\2\2\2\u0ae9\u0aea\7\u0169\2\2\u0aea\u0aeb\5\u02e0"+
		"\u0171\2\u0aeb\u0aec\7\u0196\2\2\u0aec\u0aed\5\u0202\u0102\2\u0aed\u0aee"+
		"\7m\2\2\u0aee\u0aef\5\u0202\u0102\2\u0aef\u0147\3\2\2\2\u0af0\u0af4\5"+
		"\u014c\u00a7\2\u0af1\u0af3\5\u014a\u00a6\2\u0af2\u0af1\3\2\2\2\u0af3\u0af6"+
		"\3\2\2\2\u0af4\u0af2\3\2\2\2\u0af4\u0af5\3\2\2\2\u0af5\u0149\3\2\2\2\u0af6"+
		"\u0af4\3\2\2\2\u0af7\u0af9\7\u01a4\2\2\u0af8\u0afa\7\21\2\2\u0af9\u0af8"+
		"\3\2\2\2\u0af9\u0afa\3\2\2\2\u0afa\u0afe\3\2\2\2\u0afb\u0afe\7\u00c2\2"+
		"\2\u0afc\u0afe\7\u00e7\2\2\u0afd\u0af7\3\2\2\2\u0afd\u0afb\3\2\2\2\u0afd"+
		"\u0afc\3\2\2\2\u0afe\u0aff\3\2\2\2\u0aff\u0b00\5\u014c\u00a7\2\u0b00\u014b"+
		"\3\2\2\2\u0b01\u0b07\5\u014e\u00a8\2\u0b02\u0b03\7\u0200\2\2\u0b03\u0b04"+
		"\5\u0148\u00a5\2\u0b04\u0b05\7\u0201\2\2\u0b05\u0b07\3\2\2\2\u0b06\u0b01"+
		"\3\2\2\2\u0b06\u0b02\3\2\2\2\u0b07\u014d\3\2\2\2\u0b08\u0b0a\7\u0161\2"+
		"\2\u0b09\u0b0b\t\36\2\2\u0b0a\u0b09\3\2\2\2\u0b0a\u0b0b\3\2\2\2\u0b0b"+
		"\u0b15\3\2\2\2\u0b0c\u0b16\7\u0203\2\2\u0b0d\u0b12\5\u0150\u00a9\2\u0b0e"+
		"\u0b0f\7\u0206\2\2\u0b0f\u0b11\5\u0150\u00a9\2\u0b10\u0b0e\3\2\2\2\u0b11"+
		"\u0b14\3\2\2\2\u0b12\u0b10\3\2\2\2\u0b12\u0b13\3\2\2\2\u0b13\u0b16\3\2"+
		"\2\2\u0b14\u0b12\3\2\2\2\u0b15\u0b0c\3\2\2\2\u0b15\u0b0d\3\2\2\2\u0b16"+
		"\u0b18\3\2\2\2\u0b17\u0b19\5\u02a4\u0153\2\u0b18\u0b17\3\2\2\2\u0b18\u0b19"+
		"\3\2\2\2\u0b19\u0b1a\3\2\2\2\u0b1a\u0b1c\5\u0152\u00aa\2\u0b1b\u0b1d\5"+
		"\u029e\u0150\2\u0b1c\u0b1b\3\2\2\2\u0b1c\u0b1d\3\2\2\2\u0b1d\u0b1f\3\2"+
		"\2\2\u0b1e\u0b20\5\u017a\u00be\2\u0b1f\u0b1e\3\2\2\2\u0b1f\u0b20\3\2\2"+
		"\2\u0b20\u0b22\3\2\2\2\u0b21\u0b23\5\u017e\u00c0\2\u0b22\u0b21\3\2\2\2"+
		"\u0b22\u0b23\3\2\2\2\u0b23\u0b25\3\2\2\2\u0b24\u0b26\5\u01a8\u00d5\2\u0b25"+
		"\u0b24\3\2\2\2\u0b25\u0b26\3\2\2\2\u0b26\u0b28\3\2\2\2\u0b27\u0b29\5\u018a"+
		"\u00c6\2\u0b28\u0b27\3\2\2\2\u0b28\u0b29\3\2\2\2\u0b29\u0b2b\3\2\2\2\u0b2a"+
		"\u0b2c\7\u020c\2\2\u0b2b\u0b2a\3\2\2\2\u0b2b\u0b2c\3\2\2\2\u0b2c\u014f"+
		"\3\2\2\2\u0b2d\u0b2f\5\u0154\u00ab\2\u0b2e\u0b30\5\u0298\u014d\2\u0b2f"+
		"\u0b2e\3\2\2\2\u0b2f\u0b30\3\2\2\2\u0b30\u0151\3\2\2\2\u0b31\u0b32\7\u00a2"+
		"\2\2\u0b32\u0b33\5\u0156\u00ac\2\u0b33\u0153\3\2\2\2\u0b34\u0b35\5\u02e2"+
		"\u0172\2\u0b35\u0b36\7\u01f9\2\2\u0b36\u0b37\7\u0203\2\2\u0b37\u0b3a\3"+
		"\2\2\2\u0b38\u0b3a\5\u0202\u0102\2\u0b39\u0b34\3\2\2\2\u0b39\u0b38\3\2"+
		"\2\2\u0b3a\u0155\3\2\2\2\u0b3b\u0b40\5\u0158\u00ad\2\u0b3c\u0b3d\7\u0206"+
		"\2\2\u0b3d\u0b3f\5\u0158\u00ad\2\u0b3e\u0b3c\3\2\2\2\u0b3f\u0b42\3\2\2"+
		"\2\u0b40\u0b3e\3\2\2\2\u0b40\u0b41\3\2\2\2\u0b41\u0157\3\2\2\2\u0b42\u0b40"+
		"\3\2\2\2\u0b43\u0b47\5\u015a\u00ae\2\u0b44\u0b46\5\u015c\u00af\2\u0b45"+
		"\u0b44\3\2\2\2\u0b46\u0b49\3\2\2\2\u0b47\u0b45\3\2\2\2\u0b47\u0b48\3\2"+
		"\2\2\u0b48\u0b4c\3\2\2\2\u0b49\u0b47\3\2\2\2\u0b4a\u0b4d\5\u0168\u00b5"+
		"\2\u0b4b\u0b4d\5\u0174\u00bb\2\u0b4c\u0b4a\3\2\2\2\u0b4c\u0b4b\3\2\2\2"+
		"\u0b4c\u0b4d\3\2\2\2\u0b4d\u0159\3\2\2\2\u0b4e\u0b51\5\u01ea\u00f6\2\u0b4f"+
		"\u0b52\5\u0168\u00b5\2\u0b50\u0b52\5\u0174\u00bb\2\u0b51\u0b4f\3\2\2\2"+
		"\u0b51\u0b50\3\2\2\2\u0b51\u0b52\3\2\2\2\u0b52\u0b6c\3\2\2\2\u0b53\u0b54"+
		"\7\u0200\2\2\u0b54\u0b58\5\u0158\u00ad\2\u0b55\u0b57\5\u014a\u00a6\2\u0b56"+
		"\u0b55\3\2\2\2\u0b57\u0b5a\3\2\2\2\u0b58\u0b56\3\2\2\2\u0b58\u0b59\3\2"+
		"\2\2\u0b59\u0b5b\3\2\2\2\u0b5a\u0b58\3\2\2\2\u0b5b\u0b5e\7\u0201\2\2\u0b5c"+
		"\u0b5f\5\u0168\u00b5\2\u0b5d\u0b5f\5\u0174\u00bb\2\u0b5e\u0b5c\3\2\2\2"+
		"\u0b5e\u0b5d\3\2\2\2\u0b5e\u0b5f\3\2\2\2\u0b5f\u0b6c\3\2\2\2\u0b60\u0b61"+
		"\7\u0114\2\2\u0b61\u0b62\7\u0200\2\2\u0b62\u0b63\5\u01ea\u00f6\2\u0b63"+
		"\u0b64\7\u0201\2\2\u0b64\u0b6c\3\2\2\2\u0b65\u0b68\5\u01ea\u00f6\2\u0b66"+
		"\u0b69\5\u0168\u00b5\2\u0b67\u0b69\5\u0174\u00bb\2\u0b68\u0b66\3\2\2\2"+
		"\u0b68\u0b67\3\2\2\2\u0b68\u0b69\3\2\2\2\u0b69\u0b6c\3\2\2\2\u0b6a\u0b6c"+
		"\5\u0252\u012a\2\u0b6b\u0b4e\3\2\2\2\u0b6b\u0b53\3\2\2\2\u0b6b\u0b60\3"+
		"\2\2\2\u0b6b\u0b65\3\2\2\2\u0b6b\u0b6a\3\2\2\2\u0b6c\u0b70\3\2\2\2\u0b6d"+
		"\u0b6f\5\u0166\u00b4\2\u0b6e\u0b6d\3\2\2\2\u0b6f\u0b72\3\2\2\2\u0b70\u0b6e"+
		"\3\2\2\2\u0b70\u0b71\3\2\2\2\u0b71\u0b74\3\2\2\2\u0b72\u0b70\3\2\2\2\u0b73"+
		"\u0b75\5\u029a\u014e\2\u0b74\u0b73\3\2\2\2\u0b74\u0b75\3\2\2\2\u0b75\u015b"+
		"\3\2\2\2\u0b76\u0b78\5\u0164\u00b3\2\u0b77\u0b76\3\2\2\2\u0b77\u0b78\3"+
		"\2\2\2\u0b78\u0b7a\3\2\2\2\u0b79\u0b7b\t\37\2\2\u0b7a\u0b79\3\2\2\2\u0b7a"+
		"\u0b7b\3\2\2\2\u0b7b\u0b7e\3\2\2\2\u0b7c\u0b7f\7\u00bb\2\2\u0b7d\u0b7f"+
		"\5\u0162\u00b2\2\u0b7e\u0b7c\3\2\2\2\u0b7e\u0b7d\3\2\2\2\u0b7e\u0b7f\3"+
		"\2\2\2\u0b7f\u0b80\3\2\2\2\u0b80\u0b81\7\u00ca\2\2\u0b81\u0b83\5\u015a"+
		"\u00ae\2\u0b82\u0b84\5\u0164\u00b3\2\u0b83\u0b82\3\2\2\2\u0b83\u0b84\3"+
		"\2\2\2\u0b84\u0b89\3\2\2\2\u0b85\u0b88\5\u015e\u00b0\2\u0b86\u0b88\5\u0160"+
		"\u00b1\2\u0b87\u0b85\3\2\2\2\u0b87\u0b86\3\2\2\2\u0b88\u0b8b\3\2\2\2\u0b89"+
		"\u0b87\3\2\2\2\u0b89\u0b8a\3\2\2\2\u0b8a\u015d\3\2\2\2\u0b8b\u0b89\3\2"+
		"\2\2\u0b8c\u0b8d\7\u0113\2\2\u0b8d\u0b8e\5\u01fe\u0100\2\u0b8e\u015f\3"+
		"\2\2\2\u0b8f\u0b90\7\u01ae\2\2\u0b90\u0b91\7\u0200\2\2\u0b91\u0b96\5\u02e0"+
		"\u0171\2\u0b92\u0b93\7\u0206\2\2\u0b93\u0b95\5\u02e0\u0171\2\u0b94\u0b92"+
		"\3\2\2\2\u0b95\u0b98\3\2\2\2\u0b96\u0b94\3\2\2\2\u0b96\u0b97\3\2\2\2\u0b97"+
		"\u0b99\3\2\2\2\u0b98\u0b96\3\2\2\2\u0b99\u0b9a\7\u0201\2\2\u0b9a\u0161"+
		"\3\2\2\2\u0b9b\u0b9d\t \2\2\u0b9c\u0b9e\7\u011d\2\2\u0b9d\u0b9c\3\2\2"+
		"\2\u0b9d\u0b9e\3\2\2\2\u0b9e\u0163\3\2\2\2\u0b9f\u0ba0\7\u0124\2\2\u0ba0"+
		"\u0bae\7\61\2\2\u0ba1\u0ba2\7\u0200\2\2\u0ba2\u0ba3\5\u0148\u00a5\2\u0ba3"+
		"\u0ba4\7\u0201\2\2\u0ba4\u0baf\3\2\2\2\u0ba5\u0baf\5\u01fc\u00ff\2\u0ba6"+
		"\u0bab\5\u0202\u0102\2\u0ba7\u0ba8\7\u0206\2\2\u0ba8\u0baa\5\u0202\u0102"+
		"\2\u0ba9\u0ba7\3\2\2\2\u0baa\u0bad\3\2\2\2\u0bab\u0ba9\3\2\2\2\u0bab\u0bac"+
		"\3\2\2\2\u0bac\u0baf\3\2\2\2\u0bad\u0bab\3\2\2\2\u0bae\u0ba1\3\2\2\2\u0bae"+
		"\u0ba5\3\2\2\2\u0bae\u0ba6\3\2\2\2\u0baf\u0165\3\2\2\2\u0bb0\u0bb1\7\u01b8"+
		"\2\2\u0bb1\u0bb2\7%\2\2\u0bb2\u0bb3\t!\2\2\u0bb3\u0bb9\5\u0202\u0102\2"+
		"\u0bb4\u0bb5\7\27\2\2\u0bb5\u0bb6\7\u010f\2\2\u0bb6\u0bb7\t\"\2\2\u0bb7"+
		"\u0bb9\5\u0202\u0102\2\u0bb8\u0bb0\3\2\2\2\u0bb8\u0bb4\3\2\2\2\u0bb9\u0167"+
		"\3\2\2\2\u0bba\u0bbc\7\u012f\2\2\u0bbb\u0bbd\7\u01c4\2\2\u0bbc\u0bbb\3"+
		"\2\2\2\u0bbc\u0bbd\3\2\2\2\u0bbd\u0bbe\3\2\2\2\u0bbe\u0bbf\7\u0200\2\2"+
		"\u0bbf\u0bc4\5\u016a\u00b6\2\u0bc0\u0bc1\7\u0206\2\2\u0bc1\u0bc3\5\u016a"+
		"\u00b6\2\u0bc2\u0bc0\3\2\2\2\u0bc3\u0bc6\3\2\2\2\u0bc4\u0bc2\3\2\2\2\u0bc4"+
		"\u0bc5\3\2\2\2\u0bc5\u0bc7\3\2\2\2\u0bc6\u0bc4\3\2\2\2\u0bc7\u0bc8\5\u016c"+
		"\u00b7\2\u0bc8\u0bc9\5\u016e\u00b8\2\u0bc9\u0bca\7\u0201\2\2\u0bca\u0169"+
		"\3\2\2\2\u0bcb\u0bcc\5\u02c0\u0161\2\u0bcc\u0bcd\7\u0200\2\2\u0bcd\u0bce"+
		"\5\u0202\u0102\2\u0bce\u0bd0\7\u0201\2\2\u0bcf\u0bd1\5\u0298\u014d\2\u0bd0"+
		"\u0bcf\3\2\2\2\u0bd0\u0bd1\3\2\2\2\u0bd1\u016b\3\2\2\2\u0bd2\u0bdf\7\u009f"+
		"\2\2\u0bd3\u0be0\5\u02e0\u0171\2\u0bd4\u0bd5\7\u0200\2\2\u0bd5\u0bda\5"+
		"\u02e0\u0171\2\u0bd6\u0bd7\7\u0206\2\2\u0bd7\u0bd9\5\u02e0\u0171\2\u0bd8"+
		"\u0bd6\3\2\2\2\u0bd9\u0bdc\3\2\2\2\u0bda\u0bd8\3\2\2\2\u0bda\u0bdb\3\2"+
		"\2\2\u0bdb\u0bdd\3\2\2\2\u0bdc\u0bda\3\2\2\2\u0bdd\u0bde\7\u0201\2\2\u0bde"+
		"\u0be0\3\2\2\2\u0bdf\u0bd3\3\2\2\2\u0bdf\u0bd4\3\2\2\2\u0be0\u016d\3\2"+
		"\2\2\u0be1\u0be2\7\u00b0\2\2\u0be2\u0bf4\7\u0200\2\2\u0be3\u0bf5\5\u0148"+
		"\u00a5\2\u0be4\u0be9\7\25\2\2\u0be5\u0be6\7\u0206\2\2\u0be6\u0be8\7\25"+
		"\2\2\u0be7\u0be5\3\2\2\2\u0be8\u0beb\3\2\2\2\u0be9\u0be7\3\2\2\2\u0be9"+
		"\u0bea\3\2\2\2\u0bea\u0bf5\3\2\2\2\u0beb\u0be9\3\2\2\2\u0bec\u0bf1\5\u0170"+
		"\u00b9\2\u0bed\u0bee\7\u0206\2\2\u0bee\u0bf0\5\u0170\u00b9\2\u0bef\u0bed"+
		"\3\2\2\2\u0bf0\u0bf3\3\2\2\2\u0bf1\u0bef\3\2\2\2\u0bf1\u0bf2\3\2\2\2\u0bf2"+
		"\u0bf5\3\2\2\2\u0bf3\u0bf1\3\2\2\2\u0bf4\u0be3\3\2\2\2\u0bf4\u0be4\3\2"+
		"\2\2\u0bf4\u0bec\3\2\2\2\u0bf5\u0bf6\3\2\2\2\u0bf6\u0bf7\7\u0201\2\2\u0bf7"+
		"\u016f\3\2\2\2\u0bf8\u0bfa\5\u0172\u00ba\2\u0bf9\u0bfb\5\u0298\u014d\2"+
		"\u0bfa\u0bf9\3\2\2\2\u0bfa\u0bfb\3\2\2\2\u0bfb\u0171\3\2\2\2\u0bfc\u0bff"+
		"\5\u0202\u0102\2\u0bfd\u0bff\5\u01fc\u00ff\2\u0bfe\u0bfc\3\2\2\2\u0bfe"+
		"\u0bfd\3\2\2\2\u0bff\u0173\3\2\2\2\u0c00\u0c03\7\u01a7\2\2\u0c01\u0c02"+
		"\t#\2\2\u0c02\u0c04\7\u010a\2\2\u0c03\u0c01\3\2\2\2\u0c03\u0c04\3\2\2"+
		"\2\u0c04\u0c05\3\2\2\2\u0c05\u0c12\7\u0200\2\2\u0c06\u0c13\5\u02e0\u0171"+
		"\2\u0c07\u0c08\7\u0200\2\2\u0c08\u0c0d\5\u02e0\u0171\2\u0c09\u0c0a\7\u0206"+
		"\2\2\u0c0a\u0c0c\5\u02e0\u0171\2\u0c0b\u0c09\3\2\2\2\u0c0c\u0c0f\3\2\2"+
		"\2\u0c0d\u0c0b\3\2\2\2\u0c0d\u0c0e\3\2\2\2\u0c0e\u0c10\3\2\2\2\u0c0f\u0c0d"+
		"\3\2\2\2\u0c10\u0c11\7\u0201\2\2\u0c11\u0c13\3\2\2\2\u0c12\u0c06\3\2\2"+
		"\2\u0c12\u0c07\3\2\2\2\u0c13\u0c14\3\2\2\2\u0c14\u0c15\5\u016c\u00b7\2"+
		"\u0c15\u0c16\5\u0176\u00bc\2\u0c16\u0c17\7\u0201\2\2\u0c17\u0175\3\2\2"+
		"\2\u0c18\u0c19\7\u00b0\2\2\u0c19\u0c1a\7\u0200\2\2\u0c1a\u0c1f\5\u0178"+
		"\u00bd\2\u0c1b\u0c1c\7\u0206\2\2\u0c1c\u0c1e\5\u0178\u00bd\2\u0c1d\u0c1b"+
		"\3\2\2\2\u0c1e\u0c21\3\2\2\2\u0c1f\u0c1d\3\2\2\2\u0c1f\u0c20\3\2\2\2\u0c20"+
		"\u0c22\3\2\2\2\u0c21\u0c1f\3\2\2\2\u0c22\u0c23\7\u0201\2\2\u0c23\u0177"+
		"\3\2\2\2\u0c24\u0c31\5\u02e0\u0171\2\u0c25\u0c26\7\u0200\2\2\u0c26\u0c2b"+
		"\5\u02e0\u0171\2\u0c27\u0c28\7\u0206\2\2\u0c28\u0c2a\5\u02e0\u0171\2\u0c29"+
		"\u0c27\3\2\2\2\u0c2a\u0c2d\3\2\2\2\u0c2b\u0c29\3\2\2\2\u0c2b\u0c2c\3\2"+
		"\2\2\u0c2c\u0c2e\3\2\2\2\u0c2d\u0c2b\3\2\2\2\u0c2e\u0c2f\7\u0201\2\2\u0c2f"+
		"\u0c31\3\2\2\2\u0c30\u0c24\3\2\2\2\u0c30\u0c25\3\2\2\2\u0c31\u0c41\3\2"+
		"\2\2\u0c32\u0c3f\7\27\2\2\u0c33\u0c40\5\u0302\u0182\2\u0c34\u0c35\7\u0200"+
		"\2\2\u0c35\u0c3a\5\u0302\u0182\2\u0c36\u0c37\7\u0206\2\2\u0c37\u0c39\5"+
		"\u0302\u0182\2\u0c38\u0c36\3\2\2\2\u0c39\u0c3c\3\2\2\2\u0c3a\u0c38\3\2"+
		"\2\2\u0c3a\u0c3b\3\2\2\2\u0c3b\u0c3d\3\2\2\2\u0c3c\u0c3a\3\2\2\2\u0c3d"+
		"\u0c3e\7\u0201\2\2\u0c3e\u0c40\3\2\2\2\u0c3f\u0c33\3\2\2\2\u0c3f\u0c34"+
		"\3\2\2\2\u0c40\u0c42\3\2\2\2\u0c41\u0c32\3\2\2\2\u0c41\u0c42\3\2\2\2\u0c42"+
		"\u0179\3\2\2\2\u0c43\u0c44\7J\2\2\u0c44\u0c46\7\61\2\2\u0c45\u0c47\7\u0100"+
		"\2\2\u0c46\u0c45\3\2\2\2\u0c46\u0c47\3\2\2\2\u0c47\u0c48\3\2\2\2\u0c48"+
		"\u0c4a\5\u01fe\u0100\2\u0c49\u0c4b\5\u017c\u00bf\2\u0c4a\u0c49\3\2\2\2"+
		"\u0c4a\u0c4b\3\2\2\2\u0c4b\u0c55\3\2\2\2\u0c4c\u0c4d\5\u017c\u00bf\2\u0c4d"+
		"\u0c4e\7J\2\2\u0c4e\u0c50\7\61\2\2\u0c4f\u0c51\7\u0100\2\2\u0c50\u0c4f"+
		"\3\2\2\2\u0c50\u0c51\3\2\2\2\u0c51\u0c52\3\2\2\2\u0c52\u0c53\5\u01fe\u0100"+
		"\2\u0c53\u0c55\3\2\2\2\u0c54\u0c43\3\2\2\2\u0c54\u0c4c\3\2\2\2\u0c55\u017b"+
		"\3\2\2\2\u0c56\u0c57\7\u017d\2\2\u0c57\u0c58\7\u01c0\2\2\u0c58\u0c59\5"+
		"\u01fe\u0100\2\u0c59\u017d\3\2\2\2\u0c5a\u0c5b\7\u00a7\2\2\u0c5b\u0c5c"+
		"\7\61\2\2\u0c5c\u0c61\5\u0180\u00c1\2\u0c5d\u0c5e\7\u0206\2\2\u0c5e\u0c60"+
		"\5\u0180\u00c1\2\u0c5f\u0c5d\3\2\2\2\u0c60\u0c63\3\2\2\2\u0c61\u0c5f\3"+
		"\2\2\2\u0c61\u0c62\3\2\2\2\u0c62\u0c65\3\2\2\2\u0c63\u0c61\3\2\2\2\u0c64"+
		"\u0c66\5\u0188\u00c5\2\u0c65\u0c64\3\2\2\2\u0c65\u0c66\3\2\2\2\u0c66\u0c75"+
		"\3\2\2\2\u0c67\u0c72\5\u0188\u00c5\2\u0c68\u0c69\7\u00a7\2\2\u0c69\u0c6a"+
		"\7\61\2\2\u0c6a\u0c6f\5\u0180\u00c1\2\u0c6b\u0c6c\7\u0206\2\2\u0c6c\u0c6e"+
		"\5\u0180\u00c1\2\u0c6d\u0c6b\3\2\2\2\u0c6e\u0c71\3\2\2\2\u0c6f\u0c6d\3"+
		"\2\2\2\u0c6f\u0c70\3\2\2\2\u0c70\u0c73\3\2\2\2\u0c71\u0c6f\3\2\2\2\u0c72"+
		"\u0c68\3\2\2\2\u0c72\u0c73\3\2\2\2\u0c73\u0c75\3\2\2\2\u0c74\u0c5a\3\2"+
		"\2\2\u0c74\u0c67\3\2\2\2\u0c75\u017f\3\2\2\2\u0c76\u0c7a\5\u0184\u00c3"+
		"\2\u0c77\u0c7a\5\u0182\u00c2\2\u0c78\u0c7a\5\u0202\u0102\2\u0c79\u0c76"+
		"\3\2\2\2\u0c79\u0c77\3\2\2\2\u0c79\u0c78\3\2\2\2\u0c7a\u0181\3\2\2\2\u0c7b"+
		"\u0c7c\t$\2\2\u0c7c\u0c7d\7\u0200\2\2\u0c7d\u0c82\5\u0186\u00c4\2\u0c7e"+
		"\u0c7f\7\u0206\2\2\u0c7f\u0c81\5\u0186\u00c4\2\u0c80\u0c7e\3\2\2\2\u0c81"+
		"\u0c84\3\2\2\2\u0c82\u0c80\3\2\2\2\u0c82\u0c83\3\2\2\2\u0c83\u0c85\3\2"+
		"\2\2\u0c84\u0c82\3\2\2\2\u0c85\u0c86\7\u0201\2\2\u0c86\u0183\3\2\2\2\u0c87"+
		"\u0c88\7\u00a8\2\2\u0c88\u0c89\7\u016a\2\2\u0c89\u0c8a\7\u0200\2\2\u0c8a"+
		"\u0c8f\5\u0186\u00c4\2\u0c8b\u0c8c\7\u0206\2\2\u0c8c\u0c8e\5\u0186\u00c4"+
		"\2\u0c8d\u0c8b\3\2\2\2\u0c8e\u0c91\3\2\2\2\u0c8f\u0c8d\3\2\2\2\u0c8f\u0c90"+
		"\3\2\2\2\u0c90\u0c92\3\2\2\2\u0c91\u0c8f\3\2\2\2\u0c92\u0c93\7\u0201\2"+
		"\2\u0c93\u0185\3\2\2\2\u0c94\u0c98\5\u0182\u00c2\2\u0c95\u0c98\5\u01fc"+
		"\u00ff\2\u0c96\u0c98\5\u0202\u0102\2\u0c97\u0c94\3\2\2\2\u0c97\u0c95\3"+
		"\2\2\2\u0c97\u0c96\3\2\2\2\u0c98\u0187\3\2\2\2\u0c99\u0c9a\7\u00aa\2\2"+
		"\u0c9a\u0c9b\5\u01fe\u0100\2\u0c9b\u0189\3\2\2\2\u0c9c\u0ca0\7\u00ed\2"+
		"\2\u0c9d\u0c9f\5\u018c\u00c7\2\u0c9e\u0c9d\3\2\2\2\u0c9f\u0ca2\3\2\2\2"+
		"\u0ca0\u0c9e\3\2\2\2\u0ca0\u0ca1\3\2\2\2\u0ca1\u0ca4\3\2\2\2\u0ca2\u0ca0"+
		"\3\2\2\2\u0ca3\u0ca5\5\u018e\u00c8\2\u0ca4\u0ca3\3\2\2\2\u0ca4\u0ca5\3"+
		"\2\2\2\u0ca5\u0ca9\3\2\2\2\u0ca6\u0ca8\5\u0190\u00c9\2\u0ca7\u0ca6\3\2"+
		"\2\2\u0ca8\u0cab\3\2\2\2\u0ca9\u0ca7\3\2\2\2\u0ca9\u0caa\3\2\2\2\u0caa"+
		"\u0cac\3\2\2\2\u0cab\u0ca9\3\2\2\2\u0cac\u0cad\5\u0192\u00ca\2\u0cad\u018b"+
		"\3\2\2\2\u0cae\u0caf\t%\2\2\u0caf\u0cb7\7\u00f5\2\2\u0cb0\u0cb4\7\u01a5"+
		"\2\2\u0cb1\u0cb5\7u\2\2\u0cb2\u0cb3\7\u0172\2\2\u0cb3\u0cb5\7\u0141\2"+
		"\2\u0cb4\u0cb1\3\2\2\2\u0cb4\u0cb2\3\2\2\2\u0cb5\u0cb7\3\2\2\2\u0cb6\u0cae"+
		"\3\2\2\2\u0cb6\u0cb0\3\2\2\2\u0cb7\u018d\3\2\2\2\u0cb8\u0cb9\7\u014b\2"+
		"\2\u0cb9\u0cba\t&\2\2\u0cba\u0cbb\7\u0155\2\2\u0cbb\u018f\3\2\2\2\u0cbc"+
		"\u0cbd\7\u0141\2\2\u0cbd\u0cbe\5\u02bc\u015f\2\u0cbe\u0cbf\7\u0113\2\2"+
		"\u0cbf\u0cc0\7\u0200\2\2\u0cc0\u0cc1\5\u0148\u00a5\2\u0cc1\u0cc2\7\u0201"+
		"\2\2\u0cc2\u0cc6\5\u0194\u00cb\2\u0cc3\u0cc5\5\u018c\u00c7\2\u0cc4\u0cc3"+
		"\3\2\2\2\u0cc5\u0cc8\3\2\2\2\u0cc6\u0cc4\3\2\2\2\u0cc6\u0cc7\3\2\2\2\u0cc7"+
		"\u0191\3\2\2\2\u0cc8\u0cc6\3\2\2\2\u0cc9\u0cca\7\u00e0\2\2\u0cca\u0ccc"+
		"\5\u02be\u0160\2\u0ccb\u0cc9\3\2\2\2\u0ccb\u0ccc\3\2\2\2\u0ccc\u0ccd\3"+
		"\2\2\2\u0ccd\u0cd1\5\u0194\u00cb\2\u0cce\u0cd0\5\u018c\u00c7\2\u0ccf\u0cce"+
		"\3\2\2\2\u0cd0\u0cd3\3\2\2\2\u0cd1\u0ccf\3\2\2\2\u0cd1\u0cd2\3\2\2\2\u0cd2"+
		"\u0cd4\3\2\2\2\u0cd3\u0cd1\3\2\2\2\u0cd4\u0cd5\5\u019c\u00cf\2\u0cd5\u0193"+
		"\3\2\2\2\u0cd6\u0cd8\5\u0196\u00cc\2\u0cd7\u0cd6\3\2\2\2\u0cd7\u0cd8\3"+
		"\2\2\2\u0cd8\u0cd9\3\2\2\2\u0cd9\u0cda\7u\2\2\u0cda\u0cdb\7\61\2\2\u0cdb"+
		"\u0cdc\5\u0198\u00cd\2\u0cdc\u0cdd\7\u00e4\2\2\u0cdd\u0cde\5\u0198\u00cd"+
		"\2\u0cde\u0195\3\2\2\2\u0cdf\u0ce0\7\u0124\2\2\u0ce0\u0ce1\7\61\2\2\u0ce1"+
		"\u0ce2\5\u0198\u00cd\2\u0ce2\u0197\3\2\2\2\u0ce3\u0ce4\7\u0200\2\2\u0ce4"+
		"\u0ce9\5\u019a\u00ce\2\u0ce5\u0ce6\7\u0206\2\2\u0ce6\u0ce8\5\u019a\u00ce"+
		"\2\u0ce7\u0ce5\3\2\2\2\u0ce8\u0ceb\3\2\2\2\u0ce9\u0ce7\3\2\2\2\u0ce9\u0cea"+
		"\3\2\2\2\u0cea\u0cec\3\2\2\2\u0ceb\u0ce9\3\2\2\2\u0cec\u0ced\7\u0201\2"+
		"\2\u0ced\u0199\3\2\2\2\u0cee\u0cf0\5\u0202\u0102\2\u0cef\u0cf1\5\u029a"+
		"\u014e\2\u0cf0\u0cef\3\2\2\2\u0cf0\u0cf1\3\2\2\2\u0cf1\u019b\3\2\2\2\u0cf2"+
		"\u0cf4\5\u019e\u00d0\2\u0cf3\u0cf2\3\2\2\2\u0cf3\u0cf4\3\2\2\2\u0cf4\u0cf5"+
		"\3\2\2\2\u0cf5\u0cf6\7\u0200\2\2\u0cf6\u0cfb\5\u01a0\u00d1\2\u0cf7\u0cf8"+
		"\7\u0206\2\2\u0cf8\u0cfa\5\u01a0\u00d1\2\u0cf9\u0cf7\3\2\2\2\u0cfa\u0cfd"+
		"\3\2\2\2\u0cfb\u0cf9\3\2\2\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u0cfe\3\2\2\2\u0cfd"+
		"\u0cfb\3\2\2\2\u0cfe\u0cff\7\u0201\2\2\u0cff\u019d\3\2\2\2\u0d00\u0d06"+
		"\7\u0156\2\2\u0d01\u0d07\7\u01a9\2\2\u0d02\u0d04\7\u01ab\2\2\u0d03\u0d05"+
		"\7\21\2\2\u0d04\u0d03\3\2\2\2\u0d04\u0d05\3\2\2\2\u0d05\u0d07\3\2\2\2"+
		"\u0d06\u0d01\3\2\2\2\u0d06\u0d02\3\2\2\2\u0d06\u0d07\3\2\2\2\u0d07\u0d0a"+
		"\3\2\2\2\u0d08\u0d09\t\'\2\2\u0d09\u0d0b\7\u0119\2\2\u0d0a\u0d08\3\2\2"+
		"\2\u0d0a\u0d0b\3\2\2\2\u0d0b\u0d0d\3\2\2\2\u0d0c\u0d0e\5\u01a4\u00d3\2"+
		"\u0d0d\u0d0c\3\2\2\2\u0d0d\u0d0e\3\2\2\2\u0d0e\u019f\3\2\2\2\u0d0f\u0d15"+
		"\7\u01a9\2\2\u0d10\u0d12\7\u01ab\2\2\u0d11\u0d13\7\21\2\2\u0d12\u0d11"+
		"\3\2\2\2\u0d12\u0d13\3\2\2\2\u0d13\u0d15\3\2\2\2\u0d14\u0d0f\3\2\2\2\u0d14"+
		"\u0d10\3\2\2\2\u0d14\u0d15\3\2\2\2\u0d15\u0d16\3\2\2\2\u0d16\u0d18\5\u01a2"+
		"\u00d2\2\u0d17\u0d19\5\u01a8\u00d5\2\u0d18\u0d17\3\2\2\2\u0d18\u0d19\3"+
		"\2\2\2\u0d19\u0d1a\3\2\2\2\u0d1a\u0d1b\7\u0217\2\2\u0d1b\u0d1c\5\u0202"+
		"\u0102\2\u0d1c\u01a1\3\2\2\2\u0d1d\u0d1e\5\u022a\u0116\2\u0d1e\u01a3\3"+
		"\2\2\2\u0d1f\u0d20\7\u00c8\2\2\u0d20\u0d21\7\u0200\2\2\u0d21\u0d22\5\u0202"+
		"\u0102\2\u0d22\u0d24\7\u0201\2\2\u0d23\u0d25\5\u01a6\u00d4\2\u0d24\u0d23"+
		"\3\2\2\2\u0d24\u0d25\3\2\2\2\u0d25\u01a5\3\2\2\2\u0d26\u0d27\7\u01a8\2"+
		"\2\u0d27\u0d28\7\u0200\2\2\u0d28\u0d29\5\u01fe\u0100\2\u0d29\u0d2a\7\u0201"+
		"\2\2\u0d2a\u01a7\3\2\2\2\u0d2b\u0d2d\7\u0119\2\2\u0d2c\u0d2e\7\u016f\2"+
		"\2\u0d2d\u0d2c\3\2\2\2\u0d2d\u0d2e\3\2\2\2\u0d2e\u0d2f\3\2\2\2\u0d2f\u0d30"+
		"\7\61\2\2\u0d30\u0d35\5\u01aa\u00d6\2\u0d31\u0d32\7\u0206\2\2\u0d32\u0d34"+
		"\5\u01aa\u00d6\2\u0d33\u0d31\3\2\2\2\u0d34\u0d37\3\2\2\2\u0d35\u0d33\3"+
		"\2\2\2\u0d35\u0d36\3\2\2\2\u0d36\u01a9\3\2\2\2\u0d37\u0d35\3\2\2\2\u0d38"+
		"\u0d3a\5\u0202\u0102\2\u0d39\u0d3b\t(\2\2\u0d3a\u0d39\3\2\2\2\u0d3a\u0d3b"+
		"\3\2\2\2\u0d3b\u0d3e\3\2\2\2\u0d3c\u0d3d\7\u010a\2\2\u0d3d\u0d3f\t)\2"+
		"\2\u0d3e\u0d3c\3\2\2\2\u0d3e\u0d3f\3\2\2\2\u0d3f\u01ab\3\2\2\2\u0d40\u0d41"+
		"\7\u009f\2\2\u0d41\u0d43\7\u01a9\2\2\u0d42\u0d44\5\u01ae\u00d8\2\u0d43"+
		"\u0d42\3\2\2\2\u0d43\u0d44\3\2\2\2\u0d44\u0d46\3\2\2\2\u0d45\u0d47\5\u01b0"+
		"\u00d9\2\u0d46\u0d45\3\2\2\2\u0d46\u0d47\3\2\2\2\u0d47\u01ad\3\2\2\2\u0d48"+
		"\u0d49\7\u010f\2\2\u0d49\u0d4e\5\u02e0\u0171\2\u0d4a\u0d4b\7\u0206\2\2"+
		"\u0d4b\u0d4d\5\u02e0\u0171\2\u0d4c\u0d4a\3\2\2\2\u0d4d\u0d50\3\2\2\2\u0d4e"+
		"\u0d4c\3\2\2\2\u0d4e\u0d4f\3\2\2\2\u0d4f\u01af\3\2\2\2\u0d50\u0d4e\3\2"+
		"\2\2\u0d51\u0d52\7\u0174\2\2\u0d52\u0d57\7\u00da\2\2\u0d53\u0d57\7\u0108"+
		"\2\2\u0d54\u0d55\7\u01b9\2\2\u0d55\u0d57\5\u0202\u0102\2\u0d56\u0d51\3"+
		"\2\2\2\u0d56\u0d53\3\2\2\2\u0d56\u0d54\3\2\2\2\u0d57\u01b1\3\2\2\2\u0d58"+
		"\u0d59\7\u01a9\2\2\u0d59\u0d5a\5\u01e0\u00f1\2\u0d5a\u0d5c\5\u01b4\u00db"+
		"\2\u0d5b\u0d5d\5\u029e\u0150\2\u0d5c\u0d5b\3\2\2\2\u0d5c\u0d5d\3\2\2\2"+
		"\u0d5d\u0d5f\3\2\2\2\u0d5e\u0d60\5\u01e2\u00f2\2\u0d5f\u0d5e\3\2\2\2\u0d5f"+
		"\u0d60\3\2\2\2\u0d60\u0d62\3\2\2\2\u0d61\u0d63\5\u01e4\u00f3\2\u0d62\u0d61"+
		"\3\2\2\2\u0d62\u0d63\3\2\2\2\u0d63\u01b3\3\2\2\2\u0d64\u0d74\7\u0169\2"+
		"\2\u0d65\u0d6a\5\u01b6\u00dc\2\u0d66\u0d67\7\u0206\2\2\u0d67\u0d69\5\u01b6"+
		"\u00dc\2\u0d68\u0d66\3\2\2\2\u0d69\u0d6c\3\2\2\2\u0d6a\u0d68\3\2\2\2\u0d6a"+
		"\u0d6b\3\2\2\2\u0d6b\u0d75\3\2\2\2\u0d6c\u0d6a\3\2\2\2\u0d6d\u0d6e\7\u01b0"+
		"\2\2\u0d6e\u0d6f\7\u0200\2\2\u0d6f\u0d70\5\u0308\u0185\2\u0d70\u0d71\7"+
		"\u0201\2\2\u0d71\u0d72\7\u0217\2\2\u0d72\u0d73\5\u0202\u0102\2\u0d73\u0d75"+
		"\3\2\2\2\u0d74\u0d65\3\2\2\2\u0d74\u0d6d\3\2\2\2\u0d75\u01b5\3\2\2\2\u0d76"+
		"\u0d77\5\u02e0\u0171\2\u0d77\u0d78\7\u0217\2\2\u0d78\u0d79\5\u0202\u0102"+
		"\2\u0d79\u0d88\3\2\2\2\u0d7a\u0d7b\7\u0200\2\2\u0d7b\u0d80\5\u02e0\u0171"+
		"\2\u0d7c\u0d7d\7\u0206\2\2\u0d7d\u0d7f\5\u02e0\u0171\2\u0d7e\u0d7c\3\2"+
		"\2\2\u0d7f\u0d82\3\2\2\2\u0d80\u0d7e\3\2\2\2\u0d80\u0d81\3\2\2\2\u0d81"+
		"\u0d83\3\2\2\2\u0d82\u0d80\3\2\2\2\u0d83\u0d84\7\u0201\2\2\u0d84\u0d85"+
		"\7\u0217\2\2\u0d85\u0d86\5\u0148\u00a5\2\u0d86\u0d88\3\2\2\2\u0d87\u0d76"+
		"\3\2\2\2\u0d87\u0d7a\3\2\2\2\u0d88\u01b7\3\2\2\2\u0d89\u0d8b\7q\2\2\u0d8a"+
		"\u0d8c\7\u00a2\2\2\u0d8b\u0d8a\3\2\2\2\u0d8b\u0d8c\3\2\2\2\u0d8c\u0d8d"+
		"\3\2\2\2\u0d8d\u0d8f\5\u01e0\u00f1\2\u0d8e\u0d90\5\u029e\u0150\2\u0d8f"+
		"\u0d8e\3\2\2\2\u0d8f\u0d90\3\2\2\2\u0d90\u0d92\3\2\2\2\u0d91\u0d93\5\u01e2"+
		"\u00f2\2\u0d92\u0d91\3\2\2\2\u0d92\u0d93\3\2\2\2\u0d93\u0d95\3\2\2\2\u0d94"+
		"\u0d96\5\u01e4\u00f3\2\u0d95\u0d94\3\2\2\2\u0d95\u0d96\3\2\2\2\u0d96\u01b9"+
		"\3\2\2\2\u0d97\u0d9a\7\u00bd\2\2\u0d98\u0d9b\5\u01bc\u00df\2\u0d99\u0d9b"+
		"\5\u01be\u00e0\2\u0d9a\u0d98\3\2\2\2\u0d9a\u0d99\3\2\2\2\u0d9b\u01bb\3"+
		"\2\2\2\u0d9c\u0da2\5\u01c8\u00e5\2\u0d9d\u0d9f\5\u01ca\u00e6\2\u0d9e\u0da0"+
		"\5\u01e2\u00f2\2\u0d9f\u0d9e\3\2\2\2\u0d9f\u0da0\3\2\2\2\u0da0\u0da3\3"+
		"\2\2\2\u0da1\u0da3\5\u013e\u00a0\2\u0da2\u0d9d\3\2\2\2\u0da2\u0da1\3\2"+
		"\2\2\u0da3\u0da5\3\2\2\2\u0da4\u0da6\5\u01e4\u00f3\2\u0da5\u0da4\3\2\2"+
		"\2\u0da5\u0da6\3\2\2\2\u0da6\u01bd\3\2\2\2\u0da7\u0da9\7\21\2\2\u0da8"+
		"\u0daa\5\u01c0\u00e1\2\u0da9\u0da8\3\2\2\2\u0daa\u0dab\3\2\2\2\u0dab\u0da9"+
		"\3\2\2\2\u0dab\u0dac\3\2\2\2\u0dac\u0daf\3\2\2\2\u0dad\u0daf\5\u01c2\u00e2"+
		"\2\u0dae\u0da7\3\2\2\2\u0dae\u0dad\3\2\2\2\u0daf\u0db0\3\2\2\2\u0db0\u0db1"+
		"\5\u013e\u00a0\2\u0db1\u01bf\3\2\2\2\u0db2\u0db4\5\u01c8\u00e5\2\u0db3"+
		"\u0db5\5\u01ca\u00e6\2\u0db4\u0db3\3\2\2\2\u0db4\u0db5\3\2\2\2\u0db5\u0db7"+
		"\3\2\2\2\u0db6\u0db8\5\u01e4\u00f3\2\u0db7\u0db6\3\2\2\2\u0db7\u0db8\3"+
		"\2\2\2\u0db8\u01c1\3\2\2\2\u0db9\u0dbb\t*\2\2\u0dba\u0db9\3\2\2\2\u0dba"+
		"\u0dbb\3\2\2\2\u0dbb\u0dbd\3\2\2\2\u0dbc\u0dbe\5\u01c4\u00e3\2\u0dbd\u0dbc"+
		"\3\2\2\2\u0dbe\u0dbf\3\2\2\2\u0dbf\u0dbd\3\2\2\2\u0dbf\u0dc0\3\2\2\2\u0dc0"+
		"\u0dc2\3\2\2\2\u0dc1\u0dc3\5\u01c6\u00e4\2\u0dc2\u0dc1\3\2\2\2\u0dc2\u0dc3"+
		"\3\2\2\2\u0dc3\u01c3\3\2\2\2\u0dc4\u0dc5\7\u01bc\2\2\u0dc5\u0dc6\5\u01fe"+
		"\u0100\2\u0dc6\u0dc8\7\u018c\2\2\u0dc7\u0dc9\5\u01c0\u00e1\2\u0dc8\u0dc7"+
		"\3\2\2\2\u0dc9\u0dca\3\2\2\2\u0dca\u0dc8\3\2\2\2\u0dca\u0dcb\3\2\2\2\u0dcb"+
		"\u01c5\3\2\2\2\u0dcc\u0dce\7\177\2\2\u0dcd\u0dcf\5\u01c0\u00e1\2\u0dce"+
		"\u0dcd\3\2\2\2\u0dcf\u0dd0\3\2\2\2\u0dd0\u0dce\3\2\2\2\u0dd0\u0dd1\3\2"+
		"\2\2\u0dd1\u01c7\3\2\2\2\u0dd2\u0dd3\7\u00c4\2\2\u0dd3\u0ddf\5\u01e0\u00f1"+
		"\2\u0dd4\u0dd5\7\u0200\2\2\u0dd5\u0dda\5\u02e0\u0171\2\u0dd6\u0dd7\7\u0206"+
		"\2\2\u0dd7\u0dd9\5\u02e0\u0171\2\u0dd8\u0dd6\3\2\2\2\u0dd9\u0ddc\3\2\2"+
		"\2\u0dda\u0dd8\3\2\2\2\u0dda\u0ddb\3\2\2\2\u0ddb\u0ddd\3\2\2\2\u0ddc\u0dda"+
		"\3\2\2\2\u0ddd\u0dde\7\u0201\2\2\u0dde\u0de0\3\2\2\2\u0ddf\u0dd4\3\2\2"+
		"\2\u0ddf\u0de0\3\2\2\2\u0de0\u01c9\3\2\2\2\u0de1\u0de5\7\u01b1\2\2\u0de2"+
		"\u0de6\5\u01fc\u00ff\2\u0de3\u0de6\5\u02da\u016e\2\u0de4\u0de6\5\u01f8"+
		"\u00fd\2\u0de5\u0de2\3\2\2\2\u0de5\u0de3\3\2\2\2\u0de5\u0de4\3\2\2\2\u0de6"+
		"\u01cb\3\2\2\2\u0de7\u0de8\7\u00e6\2\2\u0de8\u0de9\7\u00c4\2\2\u0de9\u0deb"+
		"\5\u02e2\u0172\2\u0dea\u0dec\5\u029a\u014e\2\u0deb\u0dea\3\2\2\2\u0deb"+
		"\u0dec\3\2\2\2\u0dec\u0ded\3\2\2\2\u0ded\u0dee\7\u01ae\2\2\u0dee\u0def"+
		"\5\u01d6\u00ec\2\u0def\u0df0\7\u0113\2\2\u0df0\u0df1\7\u0200\2\2\u0df1"+
		"\u0df2\5\u01fe\u0100\2\u0df2\u0dfb\7\u0201\2\2\u0df3\u0df5\5\u01ce\u00e8"+
		"\2\u0df4\u0df6\5\u01d4\u00eb\2\u0df5\u0df4\3\2\2\2\u0df5\u0df6\3\2\2\2"+
		"\u0df6\u0dfc\3\2\2\2\u0df7\u0df9\5\u01d4\u00eb\2\u0df8\u0dfa\5\u01ce\u00e8"+
		"\2\u0df9\u0df8\3\2\2\2\u0df9\u0dfa\3\2\2\2\u0dfa\u0dfc\3\2\2\2\u0dfb\u0df3"+
		"\3\2\2\2\u0dfb\u0df7\3\2\2\2\u0dfb\u0dfc\3\2\2\2\u0dfc\u0dfe\3\2\2\2\u0dfd"+
		"\u0dff\5\u01e4\u00f3\2\u0dfe\u0dfd\3\2\2\2\u0dfe\u0dff\3\2\2\2\u0dff\u01cd"+
		"\3\2\2\2\u0e00\u0e01\7\u01bc\2\2\u0e01\u0e02\7\u00e2\2\2\u0e02\u0e03\7"+
		"\u018c\2\2\u0e03\u0e04\7\u01a9\2\2\u0e04\u0e05\7\u0169\2\2\u0e05\u0e0a"+
		"\5\u01d0\u00e9\2\u0e06\u0e07\7\u0206\2\2\u0e07\u0e09\5\u01d0\u00e9\2\u0e08"+
		"\u0e06\3\2\2\2\u0e09\u0e0c\3\2\2\2\u0e0a\u0e08\3\2\2\2\u0e0a\u0e0b\3\2"+
		"\2\2\u0e0b\u0e0e\3\2\2\2\u0e0c\u0e0a\3\2\2\2\u0e0d\u0e0f\5\u029e\u0150"+
		"\2\u0e0e\u0e0d\3\2\2\2\u0e0e\u0e0f\3\2\2\2\u0e0f\u0e11\3\2\2\2\u0e10\u0e12"+
		"\5\u01d2\u00ea\2\u0e11\u0e10\3\2\2\2\u0e11\u0e12\3\2\2\2\u0e12\u01cf\3"+
		"\2\2\2\u0e13\u0e14\5\u02e0\u0171\2\u0e14\u0e15\7\u0217\2\2\u0e15\u0e16"+
		"\5\u0202\u0102\2\u0e16\u01d1\3\2\2\2\u0e17\u0e18\7q\2\2\u0e18\u0e19\5"+
		"\u029e\u0150\2\u0e19\u01d3\3\2\2\2\u0e1a\u0e1b\7\u01bc\2\2\u0e1b\u0e1c"+
		"\7\u0107\2\2\u0e1c\u0e1d\7\u00e2\2\2\u0e1d\u0e1e\7\u018c\2\2\u0e1e\u0e2a"+
		"\7\u00bd\2\2\u0e1f\u0e20\7\u0200\2\2\u0e20\u0e25\5\u02e0\u0171\2\u0e21"+
		"\u0e22\7\u0206\2\2\u0e22\u0e24\5\u02e0\u0171\2\u0e23\u0e21\3\2\2\2\u0e24"+
		"\u0e27\3\2\2\2\u0e25\u0e23\3\2\2\2\u0e25\u0e26\3\2\2\2\u0e26\u0e28\3\2"+
		"\2\2\u0e27\u0e25\3\2\2\2\u0e28\u0e29\7\u0201\2\2\u0e29\u0e2b\3\2\2\2\u0e2a"+
		"\u0e1f\3\2\2\2\u0e2a\u0e2b\3\2\2\2\u0e2b\u0e2c\3\2\2\2\u0e2c\u0e2d\7\u01b1"+
		"\2\2\u0e2d\u0e2f\5\u01fc\u00ff\2\u0e2e\u0e30\5\u029e\u0150\2\u0e2f\u0e2e"+
		"\3\2\2\2\u0e2f\u0e30\3\2\2\2\u0e30\u01d5\3\2\2\2\u0e31\u0e37\5\u02e2\u0172"+
		"\2\u0e32\u0e33\7\u0200\2\2\u0e33\u0e34\5\u013e\u00a0\2\u0e34\u0e35\7\u0201"+
		"\2\2\u0e35\u0e37\3\2\2\2\u0e36\u0e31\3\2\2\2\u0e36\u0e32\3\2\2\2\u0e37"+
		"\u0e39\3\2\2\2\u0e38\u0e3a\5\u029a\u014e\2\u0e39\u0e38\3\2\2\2\u0e39\u0e3a"+
		"\3\2\2\2\u0e3a\u01d7\3\2\2\2\u0e3b\u0e3c\7\u00d9\2\2\u0e3c\u0e3d\7\u018a"+
		"\2\2\u0e3d\u0e42\5\u01dc\u00ef\2\u0e3e\u0e3f\7\u0206\2\2\u0e3f\u0e41\5"+
		"\u01dc\u00ef\2\u0e40\u0e3e\3\2\2\2\u0e41\u0e44\3\2\2\2\u0e42\u0e40\3\2"+
		"\2\2\u0e42\u0e43\3\2\2\2\u0e43\u0e45\3\2\2\2\u0e44\u0e42\3\2\2\2\u0e45"+
		"\u0e46\7\u00b0\2\2\u0e46\u0e47\5\u01de\u00f0\2\u0e47\u0e49\7\u00ec\2\2"+
		"\u0e48\u0e4a\5\u01da\u00ee\2\u0e49\u0e48\3\2\2\2\u0e49\u0e4a\3\2\2\2\u0e4a"+
		"\u01d9\3\2\2\2\u0e4b\u0e4c\7\u01b9\2\2\u0e4c\u0e4f\5\u0202\u0102\2\u0e4d"+
		"\u0e4f\7\u0108\2\2\u0e4e\u0e4b\3\2\2\2\u0e4e\u0e4d\3\2\2\2\u0e4f\u01db"+
		"\3\2\2\2\u0e50\u0e52\5\u02e2\u0172\2\u0e51\u0e53\5\u0296\u014c\2\u0e52"+
		"\u0e51\3\2\2\2\u0e52\u0e53\3\2\2\2\u0e53\u01dd\3\2\2\2\u0e54\u0e55\7\u0153"+
		"\2\2\u0e55\u0e61\7\u016c\2\2\u0e56\u0e57\7\u0153\2\2\u0e57\u0e61\7\u008e"+
		"\2\2\u0e58\u0e5a\7\u016c\2\2\u0e59\u0e5b\7\u01a9\2\2\u0e5a\u0e59\3\2\2"+
		"\2\u0e5a\u0e5b\3\2\2\2\u0e5b\u0e61\3\2\2\2\u0e5c\u0e5d\7\u016c\2\2\u0e5d"+
		"\u0e5e\7\u0153\2\2\u0e5e\u0e61\7\u008e\2\2\u0e5f\u0e61\7\u008e\2\2\u0e60"+
		"\u0e54\3\2\2\2\u0e60\u0e56\3\2\2\2\u0e60\u0e58\3\2\2\2\u0e60\u0e5c\3\2"+
		"\2\2\u0e60\u0e5f\3\2\2\2\u0e61\u01df\3\2\2\2\u0e62\u0e69\5\u01ea\u00f6"+
		"\2\u0e63\u0e64\7\u0114\2\2\u0e64\u0e65\7\u0200\2\2\u0e65\u0e66\5\u01ea"+
		"\u00f6\2\u0e66\u0e67\7\u0201\2\2\u0e67\u0e69\3\2\2\2\u0e68\u0e62\3\2\2"+
		"\2\u0e68\u0e63\3\2\2\2\u0e69\u0e6b\3\2\2\2\u0e6a\u0e6c\5\u029a\u014e\2"+
		"\u0e6b\u0e6a\3\2\2\2\u0e6b\u0e6c\3\2\2\2\u0e6c\u01e1\3\2\2\2\u0e6d\u0e6e"+
		"\t\27\2\2\u0e6e\u0e73\5\u0202\u0102\2\u0e6f\u0e70\7\u0206\2\2\u0e70\u0e72"+
		"\5\u0202\u0102\2\u0e71\u0e6f\3\2\2\2\u0e72\u0e75\3\2\2\2\u0e73\u0e71\3"+
		"\2\2\2\u0e73\u0e74\3\2\2\2\u0e74\u0e76\3\2\2\2\u0e75\u0e73\3\2\2\2\u0e76"+
		"\u0e77\5\u02a4\u0153\2\u0e77\u01e3\3\2\2\2\u0e78\u0e79\7\u00db\2\2\u0e79"+
		"\u0e7b\7\u0086\2\2\u0e7a\u0e7c\5\u01e6\u00f4\2\u0e7b\u0e7a\3\2\2\2\u0e7b"+
		"\u0e7c\3\2\2\2\u0e7c\u0e7e\3\2\2\2\u0e7d\u0e7f\5\u0204\u0103\2\u0e7e\u0e7d"+
		"\3\2\2\2\u0e7e\u0e7f\3\2\2\2\u0e7f\u0e81\3\2\2\2\u0e80\u0e82\5\u01e8\u00f5"+
		"\2\u0e81\u0e80\3\2\2\2\u0e81\u0e82\3\2\2\2\u0e82\u01e5\3\2\2\2\u0e83\u0e84"+
		"\7\u00c4\2\2\u0e84\u0e85\5\u02e2\u0172\2\u0e85\u01e7\3\2\2\2\u0e86\u0e87"+
		"\7\u0143\2\2\u0e87\u0e8a\7\u00d7\2\2\u0e88\u0e8b\7\u01a6\2\2\u0e89\u0e8b"+
		"\5\u0204\u0103\2\u0e8a\u0e88\3\2\2\2\u0e8a\u0e89\3\2\2\2\u0e8b\u01e9\3"+
		"\2\2\2\u0e8c\u0e99\5\u01ec\u00f7\2\u0e8d\u0e8e\7\u0200\2\2\u0e8e\u0e90"+
		"\5\u013e\u00a0\2\u0e8f\u0e91\5\u01ee\u00f8\2\u0e90\u0e8f\3\2\2\2\u0e90"+
		"\u0e91\3\2\2\2\u0e91\u0e92\3\2\2\2\u0e92\u0e93\7\u0201\2\2\u0e93\u0e99"+
		"\3\2\2\2\u0e94\u0e96\5\u02e2\u0172\2\u0e95\u0e97\5\u01f0\u00f9\2\u0e96"+
		"\u0e95\3\2\2\2\u0e96\u0e97\3\2\2\2\u0e97\u0e99\3\2\2\2\u0e98\u0e8c\3\2"+
		"\2\2\u0e98\u0e8d\3\2\2\2\u0e98\u0e94\3\2\2\2\u0e99\u01eb\3\2\2\2\u0e9a"+
		"\u0ea7\t+\2\2\u0e9b\u0e9c\7\u0200\2\2\u0e9c\u0e9d\5\u0148\u00a5\2\u0e9d"+
		"\u0e9e\7\u0201\2\2\u0e9e\u0ea8\3\2\2\2\u0e9f\u0ea0\7\u0200\2\2\u0ea0\u0ea1"+
		"\5\u0202\u0102\2\u0ea1\u0ea5\7\u0201\2\2\u0ea2\u0ea3\7\u0200\2\2\u0ea3"+
		"\u0ea4\7\u0204\2\2\u0ea4\u0ea6\7\u0201\2\2\u0ea5\u0ea2\3\2\2\2\u0ea5\u0ea6"+
		"\3\2\2\2\u0ea6\u0ea8\3\2\2\2\u0ea7\u0e9b\3\2\2\2\u0ea7\u0e9f\3\2\2\2\u0ea8"+
		"\u01ed\3\2\2\2\u0ea9\u0eb2\7\u01c0\2\2\u0eaa\u0eab\7\u013d\2\2\u0eab\u0eb3"+
		"\7\u0114\2\2\u0eac\u0ead\7=\2\2\u0ead\u0eb0\7\u0116\2\2\u0eae\u0eaf\7"+
		"M\2\2\u0eaf\u0eb1\5\u02c4\u0163\2\u0eb0\u0eae\3\2\2\2\u0eb0\u0eb1\3\2"+
		"\2\2\u0eb1\u0eb3\3\2\2\2\u0eb2\u0eaa\3\2\2\2\u0eb2\u0eac\3\2\2\2\u0eb3"+
		"\u01ef\3\2\2\2\u0eb4\u0eb6\7\u0157\2\2\u0eb5\u0eb7\7+\2\2\u0eb6\u0eb5"+
		"\3\2\2\2\u0eb6\u0eb7\3\2\2\2\u0eb7\u0eb8\3\2\2\2\u0eb8\u0eb9\7\u0200\2"+
		"\2\u0eb9\u0ebc\5\u0202\u0102\2\u0eba\u0ebb\7\u0206\2\2\u0ebb\u0ebd\5\u0202"+
		"\u0102\2\u0ebc\u0eba\3\2\2\2\u0ebc\u0ebd\3\2\2\2\u0ebd\u0ebe\3\2\2\2\u0ebe"+
		"\u0ec0\7\u0201\2\2\u0ebf\u0ec1\5\u01f2\u00fa\2\u0ec0\u0ebf\3\2\2\2\u0ec0"+
		"\u0ec1\3\2\2\2\u0ec1\u01f1\3\2\2\2\u0ec2\u0ec3\7\u015f\2\2\u0ec3\u0ec4"+
		"\7\u0200\2\2\u0ec4\u0ec5\5\u0202\u0102\2\u0ec5\u0ec6\7\u0201\2\2\u0ec6"+
		"\u01f3\3\2\2\2\u0ec7\u0ec8\7]\2\2\u0ec8\u0ec9\7\u0200\2\2\u0ec9\u0eca"+
		"\5\u0148\u00a5\2\u0eca\u0ecb\7\u0201\2\2\u0ecb\u0eda\3\2\2\2\u0ecc\u0ecd"+
		"\5\u02d8\u016d\2\u0ecd\u0ece\7\u012b\2\2\u0ece\u0eda\3\2\2\2\u0ecf\u0ed0"+
		"\5\u02d8\u016d\2\u0ed0\u0ed1\7\u012a\2\2\u0ed1\u0eda\3\2\2\2\u0ed2\u0ed3"+
		"\5\u02d8\u016d\2\u0ed3\u0ed4\7\u0127\2\2\u0ed4\u0eda\3\2\2\2\u0ed5\u0ed6"+
		"\5\u02d8\u016d\2\u0ed6\u0ed7\7\u012c\2\2\u0ed7\u0eda\3\2\2\2\u0ed8\u0eda"+
		"\5\u01f6\u00fc\2\u0ed9\u0ec7\3\2\2\2\u0ed9\u0ecc\3\2\2\2\u0ed9\u0ecf\3"+
		"\2\2\2\u0ed9\u0ed2\3\2\2\2\u0ed9\u0ed5\3\2\2\2\u0ed9\u0ed8\3\2\2\2\u0eda"+
		"\u01f5\3\2\2\2\u0edb\u0edc\7\u017b\2\2\u0edc\u01f7\3\2\2\2\u0edd\u0ee4"+
		"\5\u02dc\u016f\2\u0ede\u0edf\7\u0200\2\2\u0edf\u0ee0\5\u0202\u0102\2\u0ee0"+
		"\u0ee1\7\u0201\2\2\u0ee1\u0ee3\3\2\2\2\u0ee2\u0ede\3\2\2\2\u0ee3\u0ee6"+
		"\3\2\2\2\u0ee4\u0ee2\3\2\2\2\u0ee4\u0ee5\3\2\2\2\u0ee5\u0ee9\3\2\2\2\u0ee6"+
		"\u0ee4\3\2\2\2\u0ee7\u0ee8\7\u01f9\2\2\u0ee8\u0eea\5\u02d4\u016b\2\u0ee9"+
		"\u0ee7\3\2\2\2\u0ee9\u0eea\3\2\2\2\u0eea\u01f9\3\2\2\2\u0eeb\u0f12\5\u01f8"+
		"\u00fd\2\u0eec\u0eed\5\u01f8\u00fd\2\u0eed\u0eee\7\u01f9\2\2\u0eee\u0eef"+
		"\7\u009a\2\2\u0eef\u0f12\3\2\2\2\u0ef0\u0ef1\5\u01f8\u00fd\2\u0ef1\u0ef2"+
		"\7\u01f9\2\2\u0ef2\u0ef3\7\u00cd\2\2\u0ef3\u0f12\3\2\2\2\u0ef4\u0ef5\5"+
		"\u01f8\u00fd\2\u0ef5\u0ef6\7\u01f9\2\2\u0ef6\u0ef7\7\u0090\2\2\u0ef7\u0ef8"+
		"\7\u0200\2\2\u0ef8\u0ef9\5\u0202\u0102\2\u0ef9\u0efa\7\u0201\2\2\u0efa"+
		"\u0f12\3\2\2\2\u0efb\u0efc\5\u01f8\u00fd\2\u0efc\u0efd\7\u01f9\2\2\u0efd"+
		"\u0efe\7\u0138\2\2\u0efe\u0eff\7\u0200\2\2\u0eff\u0f00\5\u0202\u0102\2"+
		"\u0f00\u0f01\7\u0201\2\2\u0f01\u0f12\3\2\2\2\u0f02\u0f03\5\u01f8\u00fd"+
		"\2\u0f03\u0f04\7\u01f9\2\2\u0f04\u0f05\7\u00fb\2\2\u0f05\u0f06\7\u0200"+
		"\2\2\u0f06\u0f07\5\u0202\u0102\2\u0f07\u0f08\7\u0201\2\2\u0f08\u0f12\3"+
		"\2\2\2\u0f09\u0f0a\5\u01f8\u00fd\2\u0f0a\u0f0b\7\u01f9\2\2\u0f0b\u0f0c"+
		"\7W\2\2\u0f0c\u0f12\3\2\2\2\u0f0d\u0f0e\5\u01f8\u00fd\2\u0f0e\u0f0f\7"+
		"\u01f9\2\2\u0f0f\u0f10\7\u00d7\2\2\u0f10\u0f12\3\2\2\2\u0f11\u0eeb\3\2"+
		"\2\2\u0f11\u0eec\3\2\2\2\u0f11\u0ef0\3\2\2\2\u0f11\u0ef4\3\2\2\2\u0f11"+
		"\u0efb\3\2\2\2\u0f11\u0f02\3\2\2\2\u0f11\u0f09\3\2\2\2\u0f11\u0f0d\3\2"+
		"\2\2\u0f12\u01fb\3\2\2\2\u0f13\u0f15\7\u0200\2\2\u0f14\u0f16\5\u0202\u0102"+
		"\2\u0f15\u0f14\3\2\2\2\u0f15\u0f16\3\2\2\2\u0f16\u0f1b\3\2\2\2\u0f17\u0f18"+
		"\7\u0206\2\2\u0f18\u0f1a\5\u0202\u0102\2\u0f19\u0f17\3\2\2\2\u0f1a\u0f1d"+
		"\3\2\2\2\u0f1b\u0f19\3\2\2\2\u0f1b\u0f1c\3\2\2\2\u0f1c\u0f1e\3\2\2\2\u0f1d"+
		"\u0f1b\3\2\2\2\u0f1e\u0f1f\7\u0201\2\2\u0f1f\u01fd\3\2\2\2\u0f20\u0f21"+
		"\5\u0202\u0102\2\u0f21\u01ff\3\2\2\2\u0f22\u0f23\5\u0202\u0102\2\u0f23"+
		"\u0201\3\2\2\2\u0f24\u0f29\5\u0206\u0104\2\u0f25\u0f26\7\u0117\2\2\u0f26"+
		"\u0f28\5\u0202\u0102\2\u0f27\u0f25\3\2\2\2\u0f28\u0f2b\3\2\2\2\u0f29\u0f27"+
		"\3\2\2\2\u0f29\u0f2a\3\2\2\2\u0f2a\u0203\3\2\2\2\u0f2b\u0f29\3\2\2\2\u0f2c"+
		"\u0f2d\5\u0202\u0102\2\u0f2d\u0205\3\2\2\2\u0f2e\u0f33\5\u0208\u0105\2"+
		"\u0f2f\u0f30\7\24\2\2\u0f30\u0f32\5\u0208\u0105\2\u0f31\u0f2f\3\2\2\2"+
		"\u0f32\u0f35\3\2\2\2\u0f33\u0f31\3\2\2\2\u0f33\u0f34\3\2\2\2\u0f34\u0207"+
		"\3\2\2\2\u0f35\u0f33\3\2\2\2\u0f36\u0f37\7\u0107\2\2\u0f37\u0f3a\5\u0208"+
		"\u0105\2\u0f38\u0f3a\5\u020a\u0106\2\u0f39\u0f36\3\2\2\2\u0f39\u0f38\3"+
		"\2\2\2\u0f3a\u0209\3\2\2\2\u0f3b\u0f63\5\u01fa\u00fe\2\u0f3c\u0f5e\5\u020e"+
		"\u0108\2\u0f3d\u0f3f\7\u00c6\2\2\u0f3e\u0f40\7\u0107\2\2\u0f3f\u0f3e\3"+
		"\2\2\2\u0f3f\u0f40\3\2\2\2\u0f40\u0f5a\3\2\2\2\u0f41\u0f5b\7\u0109\2\2"+
		"\u0f42\u0f5b\7\u00f2\2\2\u0f43\u0f5b\7\u0137\2\2\u0f44\u0f5b\7\u00b9\2"+
		"\2\u0f45\u0f46\7\f\2\2\u0f46\u0f5b\7\u0169\2\2\u0f47\u0f5b\7\u0081\2\2"+
		"\u0f48\u0f4a\7\u010f\2\2\u0f49\u0f4b\7\u01a1\2\2\u0f4a\u0f49\3\2\2\2\u0f4a"+
		"\u0f4b\3\2\2\2\u0f4b\u0f4c\3\2\2\2\u0f4c\u0f4e\7\u0200\2\2\u0f4d\u0f4f"+
		"\7\u0114\2\2\u0f4e\u0f4d\3\2\2\2\u0f4e\u0f4f\3\2\2\2\u0f4f\u0f50\3\2\2"+
		"\2\u0f50\u0f55\5\u02f2\u017a\2\u0f51\u0f52\7\u0206\2\2\u0f52\u0f54\5\u02f2"+
		"\u017a\2\u0f53\u0f51\3\2\2\2\u0f54\u0f57\3\2\2\2\u0f55\u0f53\3\2\2\2\u0f55"+
		"\u0f56\3\2\2\2\u0f56\u0f58\3\2\2\2\u0f57\u0f55\3\2\2\2\u0f58\u0f59\7\u0201"+
		"\2\2\u0f59\u0f5b\3\2\2\2\u0f5a\u0f41\3\2\2\2\u0f5a\u0f42\3\2\2\2\u0f5a"+
		"\u0f43\3\2\2\2\u0f5a\u0f44\3\2\2\2\u0f5a\u0f45\3\2\2\2\u0f5a\u0f47\3\2"+
		"\2\2\u0f5a\u0f48\3\2\2\2\u0f5b\u0f5d\3\2\2\2\u0f5c\u0f3d\3\2\2\2\u0f5d"+
		"\u0f60\3\2\2\2\u0f5e\u0f5c\3\2\2\2\u0f5e\u0f5f\3\2\2\2\u0f5f\u0f63\3\2"+
		"\2\2\u0f60\u0f5e\3\2\2\2\u0f61\u0f63\5\u01f4\u00fb\2\u0f62\u0f3b\3\2\2"+
		"\2\u0f62\u0f3c\3\2\2\2\u0f62\u0f61\3\2\2\2\u0f63\u020b\3\2\2\2\u0f64\u0f68"+
		"\5\u02dc\u016f\2\u0f65\u0f68\5\u01f8\u00fd\2\u0f66\u0f68\5\u010c\u0087"+
		"\2\u0f67\u0f64\3\2\2\2\u0f67\u0f65\3\2\2\2\u0f67\u0f66\3\2\2\2\u0f68\u020d"+
		"\3\2\2\2\u0f69\u0f70\5\u020c\u0107\2\u0f6a\u0f6b\7\u00f0\2\2\u0f6b\u0f6d"+
		"\t,\2\2\u0f6c\u0f6e\t-\2\2\u0f6d\u0f6c\3\2\2\2\u0f6d\u0f6e\3\2\2\2\u0f6e"+
		"\u0f6f\3\2\2\2\u0f6f\u0f71\5\u020c\u0107\2\u0f70\u0f6a\3\2\2\2\u0f71\u0f72"+
		"\3\2\2\2\u0f72\u0f70\3\2\2\2\u0f72\u0f73\3\2\2\2\u0f73\u0f81\3\2\2\2\u0f74"+
		"\u0f7e\5\u0212\u010a\2\u0f75\u0f77\7\u0107\2\2\u0f76\u0f75\3\2\2\2\u0f76"+
		"\u0f77\3\2\2\2\u0f77\u0f78\3\2\2\2\u0f78\u0f7a\5\u0210\u0109\2\u0f79\u0f7b"+
		"\7\u010f\2\2\u0f7a\u0f79\3\2\2\2\u0f7a\u0f7b\3\2\2\2\u0f7b\u0f7c\3\2\2"+
		"\2\u0f7c\u0f7d\5\u021e\u0110\2\u0f7d\u0f7f\3\2\2\2\u0f7e\u0f76\3\2\2\2"+
		"\u0f7e\u0f7f\3\2\2\2\u0f7f\u0f81\3\2\2\2\u0f80\u0f69\3\2\2\2\u0f80\u0f74"+
		"\3\2\2\2\u0f81\u020f\3\2\2\2\u0f82\u0f83\t.\2\2\u0f83\u0211\3\2\2\2\u0f84"+
		"\u0f90\5\u0214\u010b\2\u0f85\u0f8c\7\u0217\2\2\u0f86\u0f8c\5\u030c\u0187"+
		"\2\u0f87\u0f8c\7\u020e\2\2\u0f88\u0f8c\7\u0214\2\2\u0f89\u0f8c\5\u0310"+
		"\u0189\2\u0f8a\u0f8c\5\u030e\u0188\2\u0f8b\u0f85\3\2\2\2\u0f8b\u0f86\3"+
		"\2\2\2\u0f8b\u0f87\3\2\2\2\u0f8b\u0f88\3\2\2\2\u0f8b\u0f89\3\2\2\2\u0f8b"+
		"\u0f8a\3\2\2\2\u0f8c\u0f8d\3\2\2\2\u0f8d\u0f8f\5\u0214\u010b\2\u0f8e\u0f8b"+
		"\3\2\2\2\u0f8f\u0f92\3\2\2\2\u0f90\u0f8e\3\2\2\2\u0f90\u0f91\3\2\2\2\u0f91"+
		"\u0213\3\2\2\2\u0f92\u0f90\3\2\2\2\u0f93\u0fa2\5\u021e\u0110\2\u0f94\u0f96"+
		"\7\u0107\2\2\u0f95\u0f94\3\2\2\2\u0f95\u0f96\3\2\2\2\u0f96\u0fa0\3\2\2"+
		"\2\u0f97\u0f98\7\u00b0\2\2\u0f98\u0fa1\5\u021a\u010e\2\u0f99\u0f9a\7%"+
		"\2\2\u0f9a\u0fa1\5\u021c\u010f\2\u0f9b\u0f9c\5\u0216\u010c\2\u0f9c\u0f9e"+
		"\5\u021e\u0110\2\u0f9d\u0f9f\5\u0218\u010d\2\u0f9e\u0f9d\3\2\2\2\u0f9e"+
		"\u0f9f\3\2\2\2\u0f9f\u0fa1\3\2\2\2\u0fa0\u0f97\3\2\2\2\u0fa0\u0f99\3\2"+
		"\2\2\u0fa0\u0f9b\3\2\2\2\u0fa1\u0fa3\3\2\2\2\u0fa2\u0f95\3\2\2\2\u0fa2"+
		"\u0fa3\3\2\2\2\u0fa3\u0215\3\2\2\2\u0fa4\u0fa5\t/\2\2\u0fa5\u0217\3\2"+
		"\2\2\u0fa6\u0fa7\7\u0087\2\2\u0fa7\u0fa8\5\u021e\u0110\2\u0fa8\u0219\3"+
		"\2\2\2\u0fa9\u0faa\7\u0200\2\2\u0faa\u0fab\5\u0148\u00a5\2\u0fab\u0fac"+
		"\7\u0201\2\2\u0fac\u0fbc\3\2\2\2\u0fad\u0fae\7\u0200\2\2\u0fae\u0fb3\5"+
		"\u0220\u0111\2\u0faf\u0fb0\7\u0206\2\2\u0fb0\u0fb2\5\u0220\u0111\2\u0fb1"+
		"\u0faf\3\2\2\2\u0fb2\u0fb5\3\2\2\2\u0fb3\u0fb1\3\2\2\2\u0fb3\u0fb4\3\2"+
		"\2\2\u0fb4\u0fb6\3\2\2\2\u0fb5\u0fb3\3\2\2\2\u0fb6\u0fb7\7\u0201\2\2\u0fb7"+
		"\u0fbc\3\2\2\2\u0fb8\u0fbc\5\u0302\u0182\2\u0fb9\u0fbc\5\u02fa\u017e\2"+
		"\u0fba\u0fbc\5\u02fc\u017f\2\u0fbb\u0fa9\3\2\2\2\u0fbb\u0fad\3\2\2\2\u0fbb"+
		"\u0fb8\3\2\2\2\u0fbb\u0fb9\3\2\2\2\u0fbb\u0fba\3\2\2\2\u0fbc\u021b\3\2"+
		"\2\2\u0fbd\u0fbe\5\u021e\u0110\2\u0fbe\u0fbf\7\24\2\2\u0fbf\u0fc0\5\u021e"+
		"\u0110\2\u0fc0\u021d\3\2\2\2\u0fc1\u0fc7\5\u0222\u0112\2\u0fc2\u0fc3\5"+
		"\u0312\u018a\2\u0fc3\u0fc4\5\u0222\u0112\2\u0fc4\u0fc6\3\2\2\2\u0fc5\u0fc2"+
		"\3\2\2\2\u0fc6\u0fc9\3\2\2\2\u0fc7\u0fc5\3\2\2\2\u0fc7\u0fc8\3\2\2\2\u0fc8"+
		"\u021f\3\2\2\2\u0fc9\u0fc7\3\2\2\2\u0fca\u0fcb\5\u021e\u0110\2\u0fcb\u0221"+
		"\3\2\2\2\u0fcc\u0fd1\5\u0224\u0113\2\u0fcd\u0fce\t\60\2\2\u0fce\u0fd0"+
		"\5\u0224\u0113\2\u0fcf\u0fcd\3\2\2\2\u0fd0\u0fd3\3\2\2\2\u0fd1\u0fcf\3"+
		"\2\2\2\u0fd1\u0fd2\3\2\2\2\u0fd2\u0223\3\2\2\2\u0fd3\u0fd1\3\2\2\2\u0fd4"+
		"\u0fd9\5\u0226\u0114\2\u0fd5\u0fd6\t\61\2\2\u0fd6\u0fd8\5\u0226\u0114"+
		"\2\u0fd7\u0fd5\3\2\2\2\u0fd8\u0fdb\3\2\2\2\u0fd9\u0fd7\3\2\2\2\u0fd9\u0fda"+
		"\3\2\2\2\u0fda\u0225\3\2\2\2\u0fdb\u0fd9\3\2\2\2\u0fdc\u0fe5\5\u022a\u0116"+
		"\2\u0fdd\u0fe2\7\33\2\2\u0fde\u0fe3\7\u00d8\2\2\u0fdf\u0fe0\7\u018d\2"+
		"\2\u0fe0\u0fe1\7\u01d6\2\2\u0fe1\u0fe3\5\u0220\u0111\2\u0fe2\u0fde\3\2"+
		"\2\2\u0fe2\u0fdf\3\2\2\2\u0fe3\u0fe6\3\2\2\2\u0fe4\u0fe6\5\u0228\u0115"+
		"\2\u0fe5\u0fdd\3\2\2\2\u0fe5\u0fe4\3\2\2\2\u0fe5\u0fe6\3\2\2\2\u0fe6\u0227"+
		"\3\2\2\2\u0fe7\u0fec\7c\2\2\u0fe8\u0fe9\7\u0200\2\2\u0fe9\u0fea\5\u0220"+
		"\u0111\2\u0fea\u0feb\7\u0201\2\2\u0feb\u0fed\3\2\2\2\u0fec\u0fe8\3\2\2"+
		"\2\u0fec\u0fed\3\2\2\2\u0fed\u0fee\3\2\2\2\u0fee\u0fef\7\u0196\2\2\u0fef"+
		"\u0ff4\7\u015e\2\2\u0ff0\u0ff1\7\u0200\2\2\u0ff1\u0ff2\5\u0220\u0111\2"+
		"\u0ff2\u0ff3\7\u0201\2\2\u0ff3\u0ff5\3\2\2\2\u0ff4\u0ff0\3\2\2\2\u0ff4"+
		"\u0ff5\3\2\2\2\u0ff5\u1000\3\2\2\2\u0ff6\u0ffb\7\u01d3\2\2\u0ff7\u0ff8"+
		"\7\u0200\2\2\u0ff8\u0ff9\5\u0220\u0111\2\u0ff9\u0ffa\7\u0201\2\2\u0ffa"+
		"\u0ffc\3\2\2\2\u0ffb\u0ff7\3\2\2\2\u0ffb\u0ffc\3\2\2\2\u0ffc\u0ffd\3\2"+
		"\2\2\u0ffd\u0ffe\7\u0196\2\2\u0ffe\u1000\7\u00ef\2\2\u0fff\u0fe7\3\2\2"+
		"\2\u0fff\u0ff6\3\2\2\2\u1000\u0229\3\2\2\2\u1001\u1006\5\u0236\u011c\2"+
		"\u1002\u1003\7\u0218\2\2\u1003\u1004\5\u022c\u0117\2\u1004\u1005\7\u0219"+
		"\2\2\u1005\u1007\3\2\2\2\u1006\u1002\3\2\2\2\u1006\u1007\3\2\2\2\u1007"+
		"\u022b\3\2\2\2\u1008\u100b\7\25\2\2\u1009\u100b\5\u0200\u0101\2\u100a"+
		"\u1008\3\2\2\2\u100a\u1009\3\2\2\2\u100b\u1013\3\2\2\2\u100c\u100f\7\u0206"+
		"\2\2\u100d\u1010\7\25\2\2\u100e\u1010\5\u0200\u0101\2\u100f\u100d\3\2"+
		"\2\2\u100f\u100e\3\2\2\2\u1010\u1012\3\2\2\2\u1011\u100c\3\2\2\2\u1012"+
		"\u1015\3\2\2\2\u1013\u1011\3\2\2\2\u1013\u1014\3\2\2\2\u1014\u1020\3\2"+
		"\2\2\u1015\u1013\3\2\2\2\u1016\u101b\5\u022e\u0118\2\u1017\u1018\7\u0206"+
		"\2\2\u1018\u101a\5\u022e\u0118\2\u1019\u1017\3\2\2\2\u101a\u101d\3\2\2"+
		"\2\u101b\u1019\3\2\2\2\u101b\u101c\3\2\2\2\u101c\u1020\3\2\2\2\u101d\u101b"+
		"\3\2\2\2\u101e\u1020\5\u0234\u011b\2\u101f\u100a\3\2\2\2\u101f\u1016\3"+
		"\2\2\2\u101f\u101e\3\2\2\2\u1020\u022d\3\2\2\2\u1021\u1022\7\u009f\2\2"+
		"\u1022\u102f\5\u02e0\u0171\2\u1023\u1024\7\u00b0\2\2\u1024\u1030\5\u01fc"+
		"\u00ff\2\u1025\u1027\5\u0230\u0119\2\u1026\u1025\3\2\2\2\u1026\u1027\3"+
		"\2\2\2\u1027\u1028\3\2\2\2\u1028\u1029\7\u00a2\2\2\u1029\u102a\5\u0202"+
		"\u0102\2\u102a\u102b\7\u0196\2\2\u102b\u102c\5\u0202\u0102\2\u102c\u102d"+
		"\5\u0232\u011a\2\u102d\u102e\5\u0202\u0102\2\u102e\u1030\3\2\2\2\u102f"+
		"\u1023\3\2\2\2\u102f\u1026\3\2\2\2\u1030\u022f\3\2\2\2\u1031\u1032\7\u00d3"+
		"\2\2\u1032\u1033\5\u0202\u0102\2\u1033\u0231\3\2\2\2\u1034\u1035\t\62"+
		"\2\2\u1035\u0233\3\2\2\2\u1036\u1037\7\u009f\2\2\u1037\u1038\7\u0200\2"+
		"\2\u1038\u103d\5\u02e0\u0171\2\u1039\u103a\7\u0206\2\2\u103a\u103c\5\u02e0"+
		"\u0171\2\u103b\u1039\3\2\2\2\u103c\u103f\3\2\2\2\u103d\u103b\3\2\2\2\u103d"+
		"\u103e\3\2\2\2\u103e\u1040\3\2\2\2\u103f\u103d\3\2\2\2\u1040\u1041\7\u0201"+
		"\2\2\u1041\u1042\7\u00b0\2\2\u1042\u104f\7\u0200\2\2\u1043\u1050\5\u0148"+
		"\u00a5\2\u1044\u1045\7\u0200\2\2\u1045\u104a\5\u01fc\u00ff\2\u1046\u1047"+
		"\7\u0206\2\2\u1047\u1049\5\u01fc\u00ff\2\u1048\u1046\3\2\2\2\u1049\u104c"+
		"\3\2\2\2\u104a\u1048\3\2\2\2\u104a\u104b\3\2\2\2\u104b\u104d\3\2\2\2\u104c"+
		"\u104a\3\2\2\2\u104d\u104e\7\u0201\2\2\u104e\u1050\3\2\2\2\u104f\u1043"+
		"\3\2\2\2\u104f\u1044\3\2\2\2\u1050\u1051\3\2\2\2\u1051\u1052\7\u0201\2"+
		"\2\u1052\u0235\3\2\2\2\u1053\u1054\7\u0205\2\2\u1054\u1066\5\u0236\u011c"+
		"\2\u1055\u1056\7\u0204\2\2\u1056\u1066\5\u0236\u011c\2\u1057\u1058\7\u0138"+
		"\2\2\u1058\u1066\5\u0236\u011c\2\u1059\u105a\7K\2\2\u105a\u1066\5\u0236"+
		"\u011c\2\u105b\u105c\7\u00fa\2\2\u105c\u1066\5\u0236\u011c\2\u105d\u105e"+
		"\7x\2\2\u105e\u1066\5\u0236\u011c\2\u105f\u1060\7\21\2\2\u1060\u1066\5"+
		"\u0236\u011c\2\u1061\u1066\5\u0238\u011d\2\u1062\u1066\5\u024a\u0126\2"+
		"\u1063\u1066\5\u0254\u012b\2\u1064\u1066\5\u0244\u0123\2\u1065\u1053\3"+
		"\2\2\2\u1065\u1055\3\2\2\2\u1065\u1057\3\2\2\2\u1065\u1059\3\2\2\2\u1065"+
		"\u105b\3\2\2\2\u1065\u105d\3\2\2\2\u1065\u105f\3\2\2\2\u1065\u1061\3\2"+
		"\2\2\u1065\u1062\3\2\2\2\u1065\u1063\3\2\2\2\u1065\u1064\3\2\2\2\u1066"+
		"\u0237\3\2\2\2\u1067\u106a\5\u023e\u0120\2\u1068\u106a\5\u023a\u011e\2"+
		"\u1069\u1067\3\2\2\2\u1069\u1068\3\2\2\2\u106a\u0239\3\2\2\2\u106b\u106d"+
		"\5\u02c6\u0164\2\u106c\u106b\3\2\2\2\u106c\u106d\3\2\2\2\u106d\u106e\3"+
		"\2\2\2\u106e\u106f\78\2\2\u106f\u1071\5\u0202\u0102\2\u1070\u1072\5\u023c"+
		"\u011f\2\u1071\u1070\3\2\2\2\u1072\u1073\3\2\2\2\u1073\u1071\3\2\2\2\u1073"+
		"\u1074\3\2\2\2\u1074\u1076\3\2\2\2\u1075\u1077\5\u0242\u0122\2\u1076\u1075"+
		"\3\2\2\2\u1076\u1077\3\2\2\2\u1077\u1078\3\2\2\2\u1078\u107a\7\u0084\2"+
		"\2\u1079\u107b\78\2\2\u107a\u1079\3\2\2\2\u107a\u107b\3\2\2\2\u107b\u107d"+
		"\3\2\2\2\u107c\u107e\5\u02c6\u0164\2\u107d\u107c\3\2\2\2\u107d\u107e\3"+
		"\2\2\2\u107e\u023b\3\2\2\2\u107f\u1080\7\u01bc\2\2\u1080\u1081\5\u0204"+
		"\u0103\2\u1081\u1084\7\u018c\2\2\u1082\u1085\5\u00e4s\2\u1083\u1085\5"+
		"\u0204\u0103\2\u1084\u1082\3\2\2\2\u1084\u1083\3\2\2\2\u1085\u023d\3\2"+
		"\2\2\u1086\u1088\5\u02c6\u0164\2\u1087\u1086\3\2\2\2\u1087\u1088\3\2\2"+
		"\2\u1088\u1089\3\2\2\2\u1089\u108b\78\2\2\u108a\u108c\5\u0240\u0121\2"+
		"\u108b\u108a\3\2\2\2\u108c\u108d\3\2\2\2\u108d\u108b\3\2\2\2\u108d\u108e"+
		"\3\2\2\2\u108e\u1090\3\2\2\2\u108f\u1091\5\u0242\u0122\2\u1090\u108f\3"+
		"\2\2\2\u1090\u1091\3\2\2\2\u1091\u1092\3\2\2\2\u1092\u1094\7\u0084\2\2"+
		"\u1093\u1095\78\2\2\u1094\u1093\3\2\2\2\u1094\u1095\3\2\2\2\u1095\u1097"+
		"\3\2\2\2\u1096\u1098\5\u02c6\u0164\2\u1097\u1096\3\2\2\2\u1097\u1098\3"+
		"\2\2\2\u1098\u023f\3\2\2\2\u1099\u109a\7\u01bc\2\2\u109a\u109b\5\u0200"+
		"\u0101\2\u109b\u109e\7\u018c\2\2\u109c\u109f\5\u00e4s\2\u109d\u109f\5"+
		"\u0204\u0103\2\u109e\u109c\3\2\2\2\u109e\u109d\3\2\2\2\u109f\u0241\3\2"+
		"\2\2\u10a0\u10a3\7\177\2\2\u10a1\u10a4\5\u00e4s\2\u10a2\u10a4\5\u0204"+
		"\u0103\2\u10a3\u10a1\3\2\2\2\u10a3\u10a2\3\2\2\2\u10a4\u0243\3\2\2\2\u10a5"+
		"\u10a6\5\u0300\u0181\2\u10a6\u10a7\5\u0314\u018b\2\u10a7\u10bb\3\2\2\2"+
		"\u10a8\u10bb\5\u02fa\u017e\2\u10a9\u10bb\5\u0302\u0182\2\u10aa\u10bb\5"+
		"\u02fc\u017f\2\u10ab\u10b7\7\u0200\2\2\u10ac\u10ad\5\u0148\u00a5\2\u10ad"+
		"\u10b1\7\u0201\2\2\u10ae\u10b0\5\u014a\u00a6\2\u10af\u10ae\3\2\2\2\u10b0"+
		"\u10b3\3\2\2\2\u10b1\u10af\3\2\2\2\u10b1\u10b2\3\2\2\2\u10b2\u10b8\3\2"+
		"\2\2\u10b3\u10b1\3\2\2\2\u10b4\u10b5\5\u0246\u0124\2\u10b5\u10b6\7\u0201"+
		"\2\2\u10b6\u10b8\3\2\2\2\u10b7\u10ac\3\2\2\2\u10b7\u10b4\3\2\2\2\u10b8"+
		"\u10bb\3\2\2\2\u10b9\u10bb\5\u01fa\u00fe\2\u10ba\u10a5\3\2\2\2\u10ba\u10a8"+
		"\3\2\2\2\u10ba\u10a9\3\2\2\2\u10ba\u10aa\3\2\2\2\u10ba\u10ab\3\2\2\2\u10ba"+
		"\u10b9\3\2\2\2\u10bb\u0245\3\2\2\2\u10bc\u10be\5\u0202\u0102\2\u10bd\u10bf"+
		"\5\u0248\u0125\2\u10be\u10bd\3\2\2\2\u10be\u10bf\3\2\2\2\u10bf\u0247\3"+
		"\2\2\2\u10c0\u10c1\7\u0206\2\2\u10c1\u10c6\5\u0202\u0102\2\u10c2\u10c3"+
		"\7\u0206\2\2\u10c3\u10c5\5\u0202\u0102\2\u10c4\u10c2\3\2\2\2\u10c5\u10c8"+
		"\3\2\2\2\u10c6\u10c4\3\2\2\2\u10c6\u10c7\3\2\2\2\u10c7\u0249\3\2\2\2\u10c8"+
		"\u10c6\3\2\2\2\u10c9\u10d9\t\63\2\2\u10ca\u10cb\7\u0200\2\2\u10cb\u10cc"+
		"\5\u0148\u00a5\2\u10cc\u10cd\7\u0201\2\2\u10cd\u10da\3\2\2\2\u10ce\u10cf"+
		"\7\u0200\2\2\u10cf\u10d4\5\u0202\u0102\2\u10d0\u10d1\7\u0206\2\2\u10d1"+
		"\u10d3\5\u0202\u0102\2\u10d2\u10d0\3\2\2\2\u10d3\u10d6\3\2\2\2\u10d4\u10d2"+
		"\3\2\2\2\u10d4\u10d5\3\2\2\2\u10d5\u10d7\3\2\2\2\u10d6\u10d4\3\2\2\2\u10d7"+
		"\u10d8\7\u0201\2\2\u10d8\u10da\3\2\2\2\u10d9\u10ca\3\2\2\2\u10d9\u10ce"+
		"\3\2\2\2\u10da\u024b\3\2\2\2\u10db\u10dc\7\u0197\2\2\u10dc\u10dd\7\u0200"+
		"\2\2\u10dd\u10e2\5\u0202\u0102\2\u10de\u10df\7\u0206\2\2\u10df\u10e1\5"+
		"\u0202\u0102\2\u10e0\u10de\3\2\2\2\u10e1\u10e4\3\2\2\2\u10e2\u10e0\3\2"+
		"\2\2\u10e2\u10e3\3\2\2\2\u10e3\u10e5\3\2\2\2\u10e4\u10e2\3\2\2\2\u10e5"+
		"\u10e6\7\u0201\2\2\u10e6\u10f4\3\2\2\2\u10e7\u10e8\7\u0198\2\2\u10e8\u10e9"+
		"\7\u0200\2\2\u10e9\u10ee\5\u0202\u0102\2\u10ea\u10eb\7\u0206\2\2\u10eb"+
		"\u10ed\5\u0202\u0102\2\u10ec\u10ea\3\2\2\2\u10ed\u10f0\3\2\2\2\u10ee\u10ec"+
		"\3\2\2\2\u10ee\u10ef\3\2\2\2\u10ef\u10f1\3\2\2\2\u10f0\u10ee\3\2\2\2\u10f1"+
		"\u10f2\7\u0201\2\2\u10f2\u10f4\3\2\2\2\u10f3\u10db\3\2\2\2\u10f3\u10e7"+
		"\3\2\2\2\u10f4\u024d\3\2\2\2\u10f5\u10f6\t\64\2\2\u10f6\u10fd\7\u0200"+
		"\2\2\u10f7\u10f8\7\u00f0\2\2\u10f8\u10f9\7\u0200\2\2\u10f9\u10fa\5\u0148"+
		"\u00a5\2\u10fa\u10fb\7\u0201\2\2\u10fb\u10fe\3\2\2\2\u10fc\u10fe\5\u0220"+
		"\u0111\2\u10fd\u10f7\3\2\2\2\u10fd\u10fc\3\2\2\2\u10fe\u10ff\3\2\2\2\u10ff"+
		"\u1100\7\27\2\2\u1100\u1101\5\u02f2\u017a\2\u1101\u1102\7\u0201\2\2\u1102"+
		"\u1105\3\2\2\2\u1103\u1105\5\u024c\u0127\2\u1104\u10f5\3\2\2\2\u1104\u1103"+
		"\3\2\2\2\u1105\u024f\3\2\2\2\u1106\u1107\7C\2\2\u1107\u110c\5\u0274\u013b"+
		"\2\u1108\u1109\7\u0206\2\2\u1109\u110b\5\u0274\u013b\2\u110a\u1108\3\2"+
		"\2\2\u110b\u110e\3\2\2\2\u110c\u110a\3\2\2\2\u110c\u110d\3\2\2\2\u110d"+
		"\u0251\3\2\2\2\u110e\u110c\3\2\2\2\u110f\u1110\7\u01d2\2\2\u1110\u1114"+
		"\7\u0200\2\2\u1111\u1112\5\u0272\u013a\2\u1112\u1113\7\u0206\2\2\u1113"+
		"\u1115\3\2\2\2\u1114\u1111\3\2\2\2\u1114\u1115\3\2\2\2\u1115\u1116\3\2"+
		"\2\2\u1116\u1118\5\u0220\u0111\2\u1117\u1119\5\u026e\u0138\2\u1118\u1117"+
		"\3\2\2\2\u1118\u1119\3\2\2\2\u1119\u111b\3\2\2\2\u111a\u111c\5\u0250\u0129"+
		"\2\u111b\u111a\3\2\2\2\u111b\u111c\3\2\2\2\u111c\u111d\3\2\2\2\u111d\u1120"+
		"\7\u0201\2\2\u111e\u111f\7\u01f9\2\2\u111f\u1121\5\u02fe\u0180\2\u1120"+
		"\u111e\3\2\2\2\u1120\u1121\3\2\2\2\u1121\u0253\3\2\2\2\u1122\u1123\5\u0256"+
		"\u012c\2\u1123\u1125\5\u02ea\u0176\2\u1124\u1126\5\u025c\u012f\2\u1125"+
		"\u1124\3\2\2\2\u1125\u1126\3\2\2\2\u1126\u1243\3\2\2\2\u1127\u1128\5\u0316"+
		"\u018c\2\u1128\u112a\5\u02ec\u0177\2\u1129\u112b\5\u0264\u0133\2\u112a"+
		"\u1129\3\2\2\2\u112a\u112b\3\2\2\2\u112b\u1243\3\2\2\2\u112c\u112d\7W"+
		"\2\2\u112d\u1133\7\u0200\2\2\u112e\u1134\7\u0203\2\2\u112f\u1131\t\36"+
		"\2\2\u1130\u112f\3\2\2\2\u1130\u1131\3\2\2\2\u1131\u1132\3\2\2\2\u1132"+
		"\u1134\5\u0220\u0111\2\u1133\u112e\3\2\2\2\u1133\u1130\3\2\2\2\u1134\u1135"+
		"\3\2\2\2\u1135\u1137\7\u0201\2\2\u1136\u1138\5\u025c\u012f\2\u1137\u1136"+
		"\3\2\2\2\u1137\u1138\3\2\2\2\u1138\u1243\3\2\2\2\u1139\u1243\5\u024e\u0128"+
		"\2\u113a\u113b\7>\2\2\u113b\u113c\7\u0200\2\2\u113c\u113d\5\u0220\u0111"+
		"\2\u113d\u113e\7\u01ae\2\2\u113e\u113f\7\u00f7\2\2\u113f\u1140\7\u0201"+
		"\2\2\u1140\u1243\3\2\2\2\u1141\u1142\7B\2\2\u1142\u1144\7\u0200\2\2\u1143"+
		"\u1145\t\65\2\2\u1144\u1143\3\2\2\2\u1144\u1145\3\2\2\2\u1145\u1146\3"+
		"\2\2\2\u1146\u1148\5\u0220\u0111\2\u1147\u1149\5\u0268\u0135\2\u1148\u1147"+
		"\3\2\2\2\u1148\u1149\3\2\2\2\u1149\u114a\3\2\2\2\u114a\u114b\7\u0201\2"+
		"\2\u114b\u1243\3\2\2\2\u114c\u114d\5\u0258\u012d\2\u114d\u114f\5\u02e8"+
		"\u0175\2\u114e\u1150\5\u026a\u0136\2\u114f\u114e\3\2\2\2\u1150\u1151\3"+
		"\2\2\2\u1151\u114f\3\2\2\2\u1151\u1152\3\2\2\2\u1152\u1243\3\2\2\2\u1153"+
		"\u1154\7k\2\2\u1154\u1155\7\u0200\2\2\u1155\u1157\5\u0220\u0111\2\u1156"+
		"\u1158\t\66\2\2\u1157\u1156\3\2\2\2\u1157\u1158\3\2\2\2\u1158\u1159\3"+
		"\2\2\2\u1159\u115a\7\u0201\2\2\u115a\u1243\3\2\2\2\u115b\u115c\7\u0095"+
		"\2\2\u115c\u115d\7\u0200\2\2\u115d\u115e\5\u0316\u018c\2\u115e\u115f\7"+
		"\u00a2\2\2\u115f\u1160\5\u0220\u0111\2\u1160\u1161\7\u0201\2\2\u1161\u1243"+
		"\3\2\2\2\u1162\u1163\t\67\2\2\u1163\u1165\5\u02ea\u0176\2\u1164\u1166"+
		"\5\u02ee\u0178\2\u1165\u1164\3\2\2\2\u1165\u1166\3\2\2\2\u1166\u1167\3"+
		"\2\2\2\u1167\u1168\5\u025c\u012f\2\u1168\u1243\3\2\2\2\u1169\u116a\5\u025a"+
		"\u012e\2\u116a\u116b\7\u0200\2\2\u116b\u1170\5\u0204\u0103\2\u116c\u116d"+
		"\7\u0206\2\2\u116d\u116f\5\u0204\u0103\2\u116e\u116c\3\2\2\2\u116f\u1172"+
		"\3\2\2\2\u1170\u116e\3\2\2\2\u1170\u1171\3\2\2\2\u1171\u1174\3\2\2\2\u1172"+
		"\u1170\3\2\2\2\u1173\u1175\5\u026c\u0137\2\u1174\u1173\3\2\2\2\u1174\u1175"+
		"\3\2\2\2\u1175\u1177\3\2\2\2\u1176\u1178\5\u0264\u0133\2\u1177\u1176\3"+
		"\2\2\2\u1177\u1178\3\2\2\2\u1178\u1179\3\2\2\2\u1179\u117a\7\u0201\2\2"+
		"\u117a\u1243\3\2\2\2\u117b\u117c\7\u00eb\2\2\u117c\u117d\7\u0200\2\2\u117d"+
		"\u117e\5\u0202\u0102\2\u117e\u117f\7\u0206\2\2\u117f\u1180\5\u0202\u0102"+
		"\2\u1180\u1181\7\u0201\2\2\u1181\u1243\3\2\2\2\u1182\u1183\7\u019b\2\2"+
		"\u1183\u1184\7\u0200\2\2\u1184\u1187\5\u0204\u0103\2\u1185\u1186\7\u01ae"+
		"\2\2\u1186\u1188\t8\2\2\u1187\u1185\3\2\2\2\u1187\u1188\3\2\2\2\u1188"+
		"\u118d\3\2\2\2\u1189\u118a\7\u0206\2\2\u118a\u118c\5\u0204\u0103\2\u118b"+
		"\u1189\3\2\2\2\u118c\u118f\3\2\2\2\u118d\u118b\3\2\2\2\u118d\u118e\3\2"+
		"\2\2\u118e\u1190\3\2\2\2\u118f\u118d\3\2\2\2\u1190\u1191\7\u0201\2\2\u1191"+
		"\u1243\3\2\2\2\u1192\u1193\7\u019c\2\2\u1193\u1194\7\u0200\2\2\u1194\u1195"+
		"\5\u0204\u0103\2\u1195\u1197\7\27\2\2\u1196\u1198\7\u0140\2\2\u1197\u1196"+
		"\3\2\2\2\u1197\u1198\3\2\2\2\u1198\u1199\3\2\2\2\u1199\u119a\5\u02f2\u017a"+
		"\2\u119a\u119b\7\u0201\2\2\u119b\u1243\3\2\2\2\u119c\u119d\7\u019e\2\2"+
		"\u119d\u11a5\7\u0200\2\2\u119e\u11a0\t9\2\2\u119f\u119e\3\2\2\2\u119f"+
		"\u11a0\3\2\2\2\u11a0\u11a2\3\2\2\2\u11a1\u11a3\5\u0204\u0103\2\u11a2\u11a1"+
		"\3\2\2\2\u11a2\u11a3\3\2\2\2\u11a3\u11a4\3\2\2\2\u11a4\u11a6\7\u00a2\2"+
		"\2\u11a5\u119f\3\2\2\2\u11a5\u11a6\3\2\2\2\u11a6\u11a7\3\2\2\2\u11a7\u11a8"+
		"\5\u0204\u0103\2\u11a8\u11a9\7\u0201\2\2\u11a9\u1243\3\2\2\2\u11aa\u11ab"+
		"\7\u01c5\2\2\u11ab\u11ac\7\u0200\2\2\u11ac\u11ae\5\u0204\u0103\2\u11ad"+
		"\u11af\5\u01a8\u00d5\2\u11ae\u11ad\3\2\2\2\u11ae\u11af\3\2\2\2\u11af\u11b0"+
		"\3\2\2\2\u11b0\u11b3\7\u0201\2\2\u11b1\u11b2\7\u01f9\2\2\u11b2\u11b4\5"+
		"\u02fe\u0180\2\u11b3\u11b1\3\2\2\2\u11b3\u11b4\3\2\2\2\u11b4\u1243\3\2"+
		"\2\2\u11b5\u11b6\t:\2\2\u11b6\u11b7\7\u0200\2\2\u11b7\u11bc\5\u0278\u013d"+
		"\2\u11b8\u11b9\7\u0206\2\2\u11b9\u11bb\5\u0278\u013d\2\u11ba\u11b8\3\2"+
		"\2\2\u11bb\u11be\3\2\2\2\u11bc\u11ba\3\2\2\2\u11bc\u11bd\3\2\2\2\u11bd"+
		"\u11bf\3\2\2\2\u11be\u11bc\3\2\2\2\u11bf\u11c2\7\u0201\2\2\u11c0\u11c1"+
		"\7\u01f9\2\2\u11c1\u11c3\5\u02fe\u0180\2\u11c2\u11c0\3\2\2\2\u11c2\u11c3"+
		"\3\2\2\2\u11c3\u1243\3\2\2\2\u11c4\u11c5\7\u01c9\2\2\u11c5\u11c7\7\u0200"+
		"\2\2\u11c6\u11c8\t;\2\2\u11c7\u11c6\3\2\2\2\u11c7\u11c8\3\2\2\2\u11c8"+
		"\u11ca\3\2\2\2\u11c9\u11cb\t<\2\2\u11ca\u11c9\3\2\2\2\u11ca\u11cb\3\2"+
		"\2\2\u11cb\u11cc\3\2\2\2\u11cc\u11cf\5\u0204\u0103\2\u11cd\u11ce\7\u0206"+
		"\2\2\u11ce\u11d0\5\u0270\u0139\2\u11cf\u11cd\3\2\2\2\u11cf\u11d0\3\2\2"+
		"\2\u11d0\u11d8\3\2\2\2\u11d1\u11d2\7\u0206\2\2\u11d2\u11d4\5\u0204\u0103"+
		"\2\u11d3\u11d5\5\u0298\u014d\2\u11d4\u11d3\3\2\2\2\u11d4\u11d5\3\2\2\2"+
		"\u11d5\u11d7\3\2\2\2\u11d6\u11d1\3\2\2\2\u11d7\u11da\3\2\2\2\u11d8\u11d6"+
		"\3\2\2\2\u11d8\u11d9\3\2\2\2\u11d9\u11db\3\2\2\2\u11da\u11d8\3\2\2\2\u11db"+
		"\u11de\7\u0201\2\2\u11dc\u11dd\7\u01f9\2\2\u11dd\u11df\5\u02fe\u0180\2"+
		"\u11de\u11dc\3\2\2\2\u11de\u11df\3\2\2\2\u11df\u1243\3\2\2\2\u11e0\u11e1"+
		"\7\u01ca\2\2\u11e1\u11e2\7\u0200\2\2\u11e2\u11e4\5\u0204\u0103\2\u11e3"+
		"\u11e5\5\u026e\u0138\2\u11e4\u11e3\3\2\2\2\u11e4\u11e5\3\2\2\2\u11e5\u11e6"+
		"\3\2\2\2\u11e6\u11e7\7\u0201\2\2\u11e7\u1243\3\2\2\2\u11e8\u11e9\7\u01cd"+
		"\2\2\u11e9\u11ea\7\u0200\2\2\u11ea\u11eb\t=\2\2\u11eb\u11ed\5\u0220\u0111"+
		"\2\u11ec\u11ee\7\u01bb\2\2\u11ed\u11ec\3\2\2\2\u11ed\u11ee\3\2\2\2\u11ee"+
		"\u11ef\3\2\2\2\u11ef\u11f2\7\u0201\2\2\u11f0\u11f1\7\u01f9\2\2\u11f1\u11f3"+
		"\5\u02fe\u0180\2\u11f2\u11f0\3\2\2\2\u11f2\u11f3\3\2\2\2\u11f3\u1243\3"+
		"\2\2\2\u11f4\u11f5\7\u01ce\2\2\u11f5\u11fa\7\u0200\2\2\u11f6\u11f7\7\u00f1"+
		"\2\2\u11f7\u11fb\5\u0308\u0185\2\u11f8\u11f9\7\u0089\2\2\u11f9\u11fb\5"+
		"\u0220\u0111\2\u11fa\u11f6\3\2\2\2\u11fa\u11f8\3\2\2\2\u11fb\u11fe\3\2"+
		"\2\2\u11fc\u11fd\7\u0206\2\2\u11fd\u11ff\5\u0220\u0111\2\u11fe\u11fc\3"+
		"\2\2\2\u11fe\u11ff\3\2\2\2\u11ff\u1200\3\2\2\2\u1200\u1203\7\u0201\2\2"+
		"\u1201\u1202\7\u01f9\2\2\u1202\u1204\5\u02fe\u0180\2\u1203\u1201\3\2\2"+
		"\2\u1203\u1204\3\2\2\2\u1204\u1243\3\2\2\2\u1205\u1206\7\u01cf\2\2\u1206"+
		"\u1207\7\u0200\2\2\u1207\u1209\5\u0220\u0111\2\u1208\u120a\5\u026e\u0138"+
		"\2\u1209\u1208\3\2\2\2\u1209\u120a\3\2\2\2\u120a\u120b\3\2\2\2\u120b\u120c"+
		"\7\u014c\2\2\u120c\u1210\7P\2\2\u120d\u120e\7\u0109\2\2\u120e\u120f\7"+
		"\u0113\2\2\u120f\u1211\7\u0081\2\2\u1210\u120d\3\2\2\2\u1210\u1211\3\2"+
		"\2\2\u1211\u1212\3\2\2\2\u1212\u1215\7\u0201\2\2\u1213\u1214\7\u01f9\2"+
		"\2\u1214\u1216\5\u02fe\u0180\2\u1215\u1213\3\2\2\2\u1215\u1216\3\2\2\2"+
		"\u1216\u1243\3\2\2\2\u1217\u1218\7\u01d0\2\2\u1218\u1219\7\u0200\2\2\u1219"+
		"\u121c\5\u0220\u0111\2\u121a\u121b\7\u0206\2\2\u121b\u121d\5\u027a\u013e"+
		"\2\u121c\u121a\3\2\2\2\u121c\u121d\3\2\2\2\u121d\u1220\3\2\2\2\u121e\u121f"+
		"\7\u0206\2\2\u121f\u1221\5\u027c\u013f\2\u1220\u121e\3\2\2\2\u1220\u1221"+
		"\3\2\2\2\u1221\u1222\3\2\2\2\u1222\u1225\7\u0201\2\2\u1223\u1224\7\u01f9"+
		"\2\2\u1224\u1226\5\u02fe\u0180\2\u1225\u1223\3\2\2\2\u1225\u1226\3\2\2"+
		"\2\u1226\u1243\3\2\2\2\u1227\u1228\7\u01d1\2\2\u1228\u1229\7\u0200\2\2"+
		"\u1229\u122a\t=\2\2\u122a\u122d\5\u0220\u0111\2\u122b\u122c\7\27\2\2\u122c"+
		"\u122e\5\u02f2\u017a\2\u122d\u122b\3\2\2\2\u122d\u122e\3\2\2\2\u122e\u1230"+
		"\3\2\2\2\u122f\u1231\5\u027e\u0140\2\u1230\u122f\3\2\2\2\u1230\u1231\3"+
		"\2\2\2\u1231\u1233\3\2\2\2\u1232\u1234\5\u0280\u0141\2\u1233\u1232\3\2"+
		"\2\2\u1233\u1234\3\2\2\2\u1234\u1236\3\2\2\2\u1235\u1237\5\u0282\u0142"+
		"\2\u1236\u1235\3\2\2\2\u1236\u1237\3\2\2\2\u1237\u123a\3\2\2\2\u1238\u1239"+
		"\t>\2\2\u1239\u123b\7n\2\2\u123a\u1238\3\2\2\2\u123a\u123b\3\2\2\2\u123b"+
		"\u123c\3\2\2\2\u123c\u123f\7\u0201\2\2\u123d\u123e\7\u01f9\2\2\u123e\u1240"+
		"\5\u02fe\u0180\2\u123f\u123d\3\2\2\2\u123f\u1240\3\2\2\2\u1240\u1243\3"+
		"\2\2\2\u1241\u1243\5\u0252\u012a\2\u1242\u1122\3\2\2\2\u1242\u1127\3\2"+
		"\2\2\u1242\u112c\3\2\2\2\u1242\u1139\3\2\2\2\u1242\u113a\3\2\2\2\u1242"+
		"\u1141\3\2\2\2\u1242\u114c\3\2\2\2\u1242\u1153\3\2\2\2\u1242\u115b\3\2"+
		"\2\2\u1242\u1162\3\2\2\2\u1242\u1169\3\2\2\2\u1242\u117b\3\2\2\2\u1242"+
		"\u1182\3\2\2\2\u1242\u1192\3\2\2\2\u1242\u119c\3\2\2\2\u1242\u11aa\3\2"+
		"\2\2\u1242\u11b5\3\2\2\2\u1242\u11c4\3\2\2\2\u1242\u11e0\3\2\2\2\u1242"+
		"\u11e8\3\2\2\2\u1242\u11f4\3\2\2\2\u1242\u1205\3\2\2\2\u1242\u1217\3\2"+
		"\2\2\u1242\u1227\3\2\2\2\u1242\u1241\3\2\2\2\u1243\u0255\3\2\2\2\u1244"+
		"\u1245\t?\2\2\u1245\u0257\3\2\2\2\u1246\u1247\t@\2\2\u1247\u0259\3\2\2"+
		"\2\u1248\u1249\tA\2\2\u1249\u025b\3\2\2\2\u124a\u124b\7\u011e\2\2\u124b"+
		"\u124d\7\u0200\2\2\u124c\u124e\5\u0164\u00b3\2\u124d\u124c\3\2\2\2\u124d"+
		"\u124e\3\2\2\2\u124e\u1253\3\2\2\2\u124f\u1251\5\u01a8\u00d5\2\u1250\u1252"+
		"\5\u025e\u0130\2\u1251\u1250\3\2\2";
	private static final String _serializedATNSegment2 =
		"\2\u1251\u1252\3\2\2\2\u1252\u1254\3\2\2\2\u1253\u124f\3\2\2\2\u1253\u1254"+
		"\3\2\2\2\u1254\u1255\3\2\2\2\u1255\u1256\7\u0201\2\2\u1256\u025d\3\2\2"+
		"\2\u1257\u125e\5\u0260\u0131\2\u1258\u1259\7%\2\2\u1259\u125a\5\u0262"+
		"\u0132\2\u125a\u125b\7\24\2\2\u125b\u125c\5\u0262\u0132\2\u125c\u125f"+
		"\3\2\2\2\u125d\u125f\5\u0262\u0132\2\u125e\u1258\3\2\2\2\u125e\u125d\3"+
		"\2\2\2\u125f\u025f\3\2\2\2\u1260\u1261\tB\2\2\u1261\u0261\3\2\2\2\u1262"+
		"\u1263\7\u01a2\2\2\u1263\u126a\7\u0135\2\2\u1264\u1265\7[\2\2\u1265\u126a"+
		"\7\u0153\2\2\u1266\u1267\5\u0220\u0111\2\u1267\u1268\tC\2\2\u1268\u126a"+
		"\3\2\2\2\u1269\u1262\3\2\2\2\u1269\u1264\3\2\2\2\u1269\u1266\3\2\2\2\u126a"+
		"\u0263\3\2\2\2\u126b\u1275\7\u01ae\2\2\u126c\u1276\7\u0203\2\2\u126d\u1272"+
		"\5\u0266\u0134\2\u126e\u126f\7\u0206\2\2\u126f\u1271\5\u0266\u0134\2\u1270"+
		"\u126e\3\2\2\2\u1271\u1274\3\2\2\2\u1272\u1270\3\2\2\2\u1272\u1273\3\2"+
		"\2\2\u1273\u1276\3\2\2\2\u1274\u1272\3\2\2\2\u1275\u126c\3\2\2\2\u1275"+
		"\u126d\3\2\2\2\u1276\u0265\3\2\2\2\u1277\u1279\7\u00b0\2\2\u1278\u127a"+
		"\7\u011c\2\2\u1279\u1278\3\2\2\2\u1279\u127a\3\2\2\2\u127a\u127d\3\2\2"+
		"\2\u127b\u127d\7\u011c\2\2\u127c\u1277\3\2\2\2\u127c\u127b\3\2\2\2\u127c"+
		"\u127d\3\2\2\2\u127d\u127e\3\2\2\2\u127e\u1280\5\u0154\u00ab\2\u127f\u1281"+
		"\5\u0298\u014d\2\u1280\u127f\3\2\2\2\u1280\u1281\3\2\2\2\u1281\u0267\3"+
		"\2\2\2\u1282\u1283\7\u0119\2\2\u1283\u1284\7\61\2\2\u1284\u1285\5\u0220"+
		"\u0111\2\u1285\u0269\3\2\2\2\u1286\u1287\7\u01c1\2\2\u1287\u1288\7\u00a7"+
		"\2\2\u1288\u1289\7\u0200\2\2\u1289\u128a\5\u01a8\u00d5\2\u128a\u128b\7"+
		"\u0201\2\2\u128b\u128e\3\2\2\2\u128c\u128e\5\u025c\u012f\2\u128d\u1286"+
		"\3\2\2\2\u128d\u128c\3\2\2\2\u128e\u026b\3\2\2\2\u128f\u12a1\7V\2\2\u1290"+
		"\u1292\7\u00ed\2\2\u1291\u1293\7\37\2\2\u1292\u1291\3\2\2\2\u1292\u1293"+
		"\3\2\2\2\u1293\u12a2\3\2\2\2\u1294\u1295\7\u0200\2\2\u1295\u129a\5\u02a8"+
		"\u0155\2\u1296\u1297\7\u0206\2\2\u1297\u1299\5\u02a8\u0155\2\u1298\u1296"+
		"\3\2\2\2\u1299\u129c\3\2\2\2\u129a\u1298\3\2\2\2\u129a\u129b\3\2\2\2\u129b"+
		"\u129d\3\2\2\2\u129c\u129a\3\2\2\2\u129d\u129e\7\u0201\2\2\u129e\u129f"+
		"\7\u01b1\2\2\u129f\u12a0\5\u01fc\u00ff\2\u12a0\u12a2\3\2\2\2\u12a1\u1290"+
		"\3\2\2\2\u12a1\u1294\3\2\2\2\u12a2\u026d\3\2\2\2\u12a3\u12a6\7\u0125\2"+
		"\2\u12a4\u12a5\7\61\2\2\u12a5\u12a7\7\u01b0\2\2\u12a6\u12a4\3\2\2\2\u12a6"+
		"\u12a7\3\2\2\2\u12a7\u12a8\3\2\2\2\u12a8\u12aa\5\u0204\u0103\2\u12a9\u12ab"+
		"\5\u0298\u014d\2\u12aa\u12a9\3\2\2\2\u12aa\u12ab\3\2\2\2\u12ab\u12b3\3"+
		"\2\2\2\u12ac\u12ad\7\u0206\2\2\u12ad\u12af\5\u0204\u0103\2\u12ae\u12b0"+
		"\5\u0298\u014d\2\u12af\u12ae\3\2\2\2\u12af\u12b0\3\2\2\2\u12b0\u12b2\3"+
		"\2\2\2\u12b1\u12ac\3\2\2\2\u12b2\u12b5\3\2\2\2\u12b3\u12b1\3\2\2\2\u12b3"+
		"\u12b4\3\2\2\2\u12b4\u026f\3\2\2\2\u12b5\u12b3\3\2\2\2\u12b6\u12b7\7\u01c6"+
		"\2\2\u12b7\u12b9\7\u0200\2\2\u12b8\u12ba\t;\2\2\u12b9\u12b8\3\2\2\2\u12b9"+
		"\u12ba\3\2\2\2\u12ba\u12bc\3\2\2\2\u12bb\u12bd\tD\2\2\u12bc\u12bb\3\2"+
		"\2\2\u12bc\u12bd\3\2\2\2\u12bd\u12be\3\2\2\2\u12be\u12c3\5\u0278\u013d"+
		"\2\u12bf\u12c0\7\u0206\2\2\u12c0\u12c2\5\u0278\u013d\2\u12c1\u12bf\3\2"+
		"\2\2\u12c2\u12c5\3\2\2\2\u12c3\u12c1\3\2\2\2\u12c3\u12c4\3\2\2\2\u12c4"+
		"\u12c6\3\2\2\2\u12c5\u12c3\3\2\2\2\u12c6\u12c7\7\u0201\2\2\u12c7\u0271"+
		"\3\2\2\2\u12c8\u12c9\7\u01cc\2\2\u12c9\u12d5\7\u0200\2\2\u12ca\u12cb\5"+
		"\u0220\u0111\2\u12cb\u12d2\5\u0298\u014d\2\u12cc\u12cd\7\u0206\2\2\u12cd"+
		"\u12ce\5\u0220\u0111\2\u12ce\u12cf\5\u0298\u014d\2\u12cf\u12d1\3\2\2\2"+
		"\u12d0\u12cc\3\2\2\2\u12d1\u12d4\3\2\2\2\u12d2\u12d0\3\2\2\2\u12d2\u12d3"+
		"\3\2\2\2\u12d3\u12d6\3\2\2\2\u12d4\u12d2\3\2\2\2\u12d5\u12ca\3\2\2\2\u12d5"+
		"\u12d6\3\2\2\2\u12d6\u12d8\3\2\2\2\u12d7\u12d9\5\u0276\u013c\2\u12d8\u12d7"+
		"\3\2\2\2\u12d8\u12d9\3\2\2\2\u12d9\u12da\3\2\2\2\u12da\u12db\7\u0201\2"+
		"\2\u12db\u0273\3\2\2\2\u12dc\u12e7\5\u02a6\u0154\2\u12dd\u12de\7\u009f"+
		"\2\2\u12de\u12e8\7\u011a\2\2\u12df\u12e2\5\u02f2\u017a\2\u12e0\u12e1\7"+
		"\u0126\2\2\u12e1\u12e3\5\u0220\u0111\2\u12e2\u12e0\3\2\2\2\u12e2\u12e3"+
		"\3\2\2\2\u12e3\u12e5\3\2\2\2\u12e4\u12e6\5\u0276\u013c\2\u12e5\u12e4\3"+
		"\2\2\2\u12e5\u12e6\3\2\2\2\u12e6\u12e8\3\2\2\2\u12e7\u12dd\3\2\2\2\u12e7"+
		"\u12df\3\2\2\2\u12e8\u0275\3\2\2\2\u12e9\u12ea\7m\2\2\u12ea\u12eb\5\u0220"+
		"\u0111\2\u12eb\u0277\3\2\2\2\u12ec\u12f3\5\u0202\u0102\2\u12ed\u12f1\7"+
		"\27\2\2\u12ee\u12f2\5\u030a\u0186\2\u12ef\u12f0\7\u0089\2\2\u12f0\u12f2"+
		"\5\u021e\u0110\2\u12f1\u12ee\3\2\2\2\u12f1\u12ef\3\2\2\2\u12f2\u12f4\3"+
		"\2\2\2\u12f3\u12ed\3\2\2\2\u12f3\u12f4\3\2\2\2\u12f4\u0279\3\2\2\2\u12f5"+
		"\u12f9\7\u01b7\2\2\u12f6\u12f7\7\u00fc\2\2\u12f7\u12fa\7\u01b0\2\2\u12f8"+
		"\u12fa\5\u0204\u0103\2\u12f9\u12f6\3\2\2\2\u12f9\u12f8\3\2\2\2\u12fa\u027b"+
		"\3\2\2\2\u12fb\u1301\7\u017c\2\2\u12fc\u1302\7\u01d4\2\2\u12fd\u12ff\7"+
		"\u00fc\2\2\u12fe\u1300\7\u01b0\2\2\u12ff\u12fe\3\2\2\2\u12ff\u1300\3\2"+
		"\2\2\u1300\u1302\3\2\2\2\u1301\u12fc\3\2\2\2\u1301\u12fd\3\2\2\2\u1302"+
		"\u027d\3\2\2\2\u1303\u1304\7\u0083\2\2\u1304\u1305\5\u0220\u0111\2\u1305"+
		"\u027f\3\2\2\2\u1306\u1307\7\u01b7\2\2\u1307\u1308\5\u0220\u0111\2\u1308"+
		"\u0281\3\2\2\2\u1309\u130a\7\u00fc\2\2\u130a\u1312\7\u00b4\2\2\u130b\u130f"+
		"\7\u00b4\2\2\u130c\u130d\7\u0173\2\2\u130d\u130e\7\u0217\2\2\u130e\u1310"+
		"\5\u0220\u0111\2\u130f\u130c\3\2\2\2\u130f\u1310\3\2\2\2\u1310\u1312\3"+
		"\2\2\2\u1311\u1309\3\2\2\2\u1311\u130b\3\2\2\2\u1312\u0283\3\2\2\2\u1313"+
		"\u1314\5\u0202\u0102\2\u1314\u0285\3\2\2\2\u1315\u1317\5\u00c4c\2\u1316"+
		"\u1315\3\2\2\2\u1317\u1318\3\2\2\2\u1318\u1316\3\2\2\2\u1318\u1319\3\2"+
		"\2\2\u1319\u131d\3\2\2\2\u131a\u131d\5\u00e4s\2\u131b\u131d\5\6\4\2\u131c"+
		"\u1316\3\2\2\2\u131c\u131a\3\2\2\2\u131c\u131b\3\2\2\2\u131d\u0287\3\2"+
		"\2\2\u131e\u131f\7\4\2\2\u131f\u1320\5\u0284\u0143\2\u1320\u1322\7\5\2"+
		"\2\u1321\u1323\5\u0286\u0144\2\u1322\u1321\3\2\2\2\u1322\u1323\3\2\2\2"+
		"\u1323\u132c\3\2\2\2\u1324\u1325\7\7\2\2\u1325\u1326\5\u0284\u0143\2\u1326"+
		"\u1328\7\5\2\2\u1327\u1329\5\u0286\u0144\2\u1328\u1327\3\2\2\2\u1328\u1329"+
		"\3\2\2\2\u1329\u132b\3\2\2\2\u132a\u1324\3\2\2\2\u132b\u132e\3\2\2\2\u132c"+
		"\u132a\3\2\2\2\u132c\u132d\3\2\2\2\u132d\u1333\3\2\2\2\u132e\u132c\3\2"+
		"\2\2\u132f\u1331\7\6\2\2\u1330\u1332\5\u0286\u0144\2\u1331\u1330\3\2\2"+
		"\2\u1331\u1332\3\2\2\2\u1332\u1334\3\2\2\2\u1333\u132f\3\2\2\2\u1333\u1334"+
		"\3\2\2\2\u1334\u1335\3\2\2\2\u1335\u1336\7\b\2\2\u1336\u0289\3\2\2\2\u1337"+
		"\u133e\7\u0207\2\2\u1338\u133e\5\u028c\u0147\2\u1339\u133e\5\u0290\u0149"+
		"\2\u133a\u133e\5\u0292\u014a\2\u133b\u133e\5\u028e\u0148\2\u133c\u133e"+
		"\5\u0294\u014b\2\u133d\u1337\3\2\2\2\u133d\u1338\3\2\2\2\u133d\u1339\3"+
		"\2\2\2\u133d\u133a\3\2\2\2\u133d\u133b\3\2\2\2\u133d\u133c\3\2\2\2\u133e"+
		"\u028b\3\2\2\2\u133f\u1340\7\u01bd\2\2\u1340\u1346\tE\2\2\u1341\u1342"+
		"\7\u0091\2\2\u1342\u1343\tF\2\2\u1343\u1347\tG\2\2\u1344\u1345\7R\2\2"+
		"\u1345\u1347\tH\2\2\u1346\u1341\3\2\2\2\u1346\u1344\3\2\2\2\u1347\u028d"+
		"\3\2\2\2\u1348\u1349\7\u0169\2\2\u1349\u134f\5\u0316\u018c\2\u134a\u1350"+
		"\7\u01fc\2\2\u134b\u1350\7\u0113\2\2\u134c\u1350\7\u0110\2\2\u134d\u1350"+
		"\5\u0304\u0183\2\u134e\u1350\5\u0316\u018c\2\u134f\u134a\3\2\2\2\u134f"+
		"\u134b\3\2\2\2\u134f\u134c\3\2\2\2\u134f\u134d\3\2\2\2\u134f\u134e\3\2"+
		"\2\2\u1350\u028f\3\2\2\2\u1351\u1352\7\u0091\2\2\u1352\u0291\3\2\2\2\u1353"+
		"\u1354\7\n\2\2\u1354\u0293\3\2\2\2\u1355\u1356\7\13\2\2\u1356\u0295\3"+
		"\2\2\2\u1357\u1359\tI\2\2\u1358\u135a\7\u009f\2\2\u1359\u1358\3\2\2\2"+
		"\u1359\u135a\3\2\2\2\u135a\u135b\3\2\2\2\u135b\u135c\5\u01fc\u00ff\2\u135c"+
		"\u0297\3\2\2\2\u135d\u135f\7\27\2\2\u135e\u135d\3\2\2\2\u135e\u135f\3"+
		"\2\2\2\u135f\u1362\3\2\2\2\u1360\u1363\5\u0308\u0185\2\u1361\u1363\5\u029c"+
		"\u014f\2\u1362\u1360\3\2\2\2\u1362\u1361\3\2\2\2\u1363\u1366\3\2\2\2\u1364"+
		"\u1366\7\27\2\2\u1365\u135e\3\2\2\2\u1365\u1364\3\2\2\2\u1366\u0299\3"+
		"\2\2\2\u1367\u136a\5\u0308\u0185\2\u1368\u136a\5\u029c\u014f\2\u1369\u1367"+
		"\3\2\2\2\u1369\u1368\3\2\2\2\u136a\u029b\3\2\2\2\u136b\u136c\5\u0306\u0184"+
		"\2\u136c\u029d\3\2\2\2\u136d\u1370\7\u01be\2\2\u136e\u1371\5\u02a0\u0151"+
		"\2\u136f\u1371\5\u0200\u0101\2\u1370\u136e\3\2\2\2\u1370\u136f\3\2\2\2"+
		"\u1371\u029f\3\2\2\2\u1372\u1373\7[\2\2\u1373\u1374\7\u010f\2\2\u1374"+
		"\u1375\5\u02d8\u016d\2\u1375\u02a1\3\2\2\2\u1376\u1379\5\u02d4\u016b\2"+
		"\u1377\u1379\5\u01f8\u00fd\2\u1378\u1376\3\2\2\2\u1378\u1377\3\2\2\2\u1379"+
		"\u02a3\3\2\2\2\u137a\u137b\7\u00c4\2\2\u137b\u1380\5\u02a2\u0152\2\u137c"+
		"\u137d\7\u0206\2\2\u137d\u137f\5\u02a2\u0152\2\u137e\u137c\3\2\2\2\u137f"+
		"\u1382\3\2\2\2\u1380\u137e\3\2\2\2\u1380\u1381\3\2\2\2\u1381\u138f\3\2"+
		"\2\2\u1382\u1380\3\2\2\2\u1383\u1384\7\60\2\2\u1384\u1385\7B\2\2\u1385"+
		"\u1386\7\u00c4\2\2\u1386\u138b\5\u02a2\u0152\2\u1387\u1388\7\u0206\2\2"+
		"\u1388\u138a\5\u02a2\u0152\2\u1389\u1387\3\2\2\2\u138a\u138d\3\2\2\2\u138b"+
		"\u1389\3\2\2\2\u138b\u138c\3\2\2\2\u138c\u138f\3\2\2\2\u138d\u138b\3\2"+
		"\2\2\u138e\u137a\3\2\2\2\u138e\u1383\3\2\2\2\u138f\u02a5\3\2\2\2\u1390"+
		"\u1393\5\u0308\u0185\2\u1391\u1393\5\u0306\u0184\2\u1392\u1390\3\2\2\2"+
		"\u1392\u1391\3\2\2\2\u1393\u02a7\3\2\2\2\u1394\u1395\5\u0308\u0185\2\u1395"+
		"\u02a9\3\2\2\2\u1396\u1397\5\u0308\u0185\2\u1397\u02ab\3\2\2\2\u1398\u1399"+
		"\5\u0308\u0185\2\u1399\u02ad\3\2\2\2\u139a\u139b\5\u0308\u0185\2\u139b"+
		"\u02af\3\2\2\2\u139c\u139d\5\u0308\u0185\2\u139d\u02b1\3\2\2\2\u139e\u139f"+
		"\5\u0308\u0185\2\u139f\u02b3\3\2\2\2\u13a0\u13a5\5\u0308\u0185\2\u13a1"+
		"\u13a2\7\u01f9\2\2\u13a2\u13a4\5\u030a\u0186\2\u13a3\u13a1\3\2\2\2\u13a4"+
		"\u13a7\3\2\2\2\u13a5\u13a3\3\2\2\2\u13a5\u13a6\3\2\2\2\u13a6\u13aa\3\2"+
		"\2\2\u13a7\u13a5\3\2\2\2\u13a8\u13a9\7\u0208\2\2\u13a9\u13ab\5\u02de\u0170"+
		"\2\u13aa\u13a8\3\2\2\2\u13aa\u13ab\3\2\2\2\u13ab\u02b5\3\2\2\2\u13ac\u13ad"+
		"\5\u02b2\u015a\2\u13ad\u13ae\7\u01f9\2\2\u13ae\u13b0\3\2\2\2\u13af\u13ac"+
		"\3\2\2\2\u13af\u13b0\3\2\2\2\u13b0\u13b1\3\2\2\2\u13b1\u13b2\5\u0308\u0185"+
		"\2\u13b2\u02b7\3\2\2\2\u13b3\u13b6\5\u0308\u0185\2\u13b4\u13b5\7\u01f9"+
		"\2\2\u13b5\u13b7\5\u030a\u0186\2\u13b6\u13b4\3\2\2\2\u13b6\u13b7\3\2\2"+
		"\2\u13b7\u02b9\3\2\2\2\u13b8\u13b9\5\u0308\u0185\2\u13b9\u02bb\3\2\2\2"+
		"\u13ba\u13bb\5\u0308\u0185\2\u13bb\u02bd\3\2\2\2\u13bc\u13bd\5\u0308\u0185"+
		"\2\u13bd\u02bf\3\2\2\2\u13be\u13c3\5\u0308\u0185\2\u13bf\u13c0\7\u01f9"+
		"\2\2\u13c0\u13c2\5\u030a\u0186\2\u13c1\u13bf\3\2\2\2\u13c2\u13c5\3\2\2"+
		"\2\u13c3\u13c1\3\2\2\2\u13c3\u13c4\3\2\2\2\u13c4\u02c1\3\2\2\2\u13c5\u13c3"+
		"\3\2\2\2\u13c6\u13c7\5\u0308\u0185\2\u13c7\u02c3\3\2\2\2\u13c8\u13cd\5"+
		"\u0308\u0185\2\u13c9\u13ca\7\u01f9\2\2\u13ca\u13cc\5\u030a\u0186\2\u13cb"+
		"\u13c9\3\2\2\2\u13cc\u13cf\3\2\2\2\u13cd\u13cb\3\2\2\2\u13cd\u13ce\3\2"+
		"\2\2\u13ce\u13d2\3\2\2\2\u13cf\u13cd\3\2\2\2\u13d0\u13d1\7\u0208\2\2\u13d1"+
		"\u13d3\5\u02de\u0170\2\u13d2\u13d0\3\2\2\2\u13d2\u13d3\3\2\2\2\u13d3\u02c5"+
		"\3\2\2\2\u13d4\u13d5\5\u030a\u0186\2\u13d5\u02c7\3\2\2\2\u13d6\u13db\5"+
		"\u030a\u0186\2\u13d7\u13d8\7\u01f9\2\2\u13d8\u13da\5\u030a\u0186\2\u13d9"+
		"\u13d7\3\2\2\2\u13da\u13dd\3\2\2\2\u13db\u13d9\3\2\2\2\u13db\u13dc\3\2"+
		"\2\2\u13dc\u02c9\3\2\2\2\u13dd\u13db\3\2\2\2\u13de\u13e3\5\u030a\u0186"+
		"\2\u13df\u13e0\7\u01f9\2\2\u13e0\u13e2\5\u030a\u0186\2\u13e1\u13df\3\2"+
		"\2\2\u13e2\u13e5\3\2\2\2\u13e3\u13e1\3\2\2\2\u13e3\u13e4\3\2\2\2\u13e4"+
		"\u02cb\3\2\2\2\u13e5\u13e3\3\2\2\2\u13e6\u13eb\5\u0308\u0185\2\u13e7\u13e8"+
		"\7\u01f9\2\2\u13e8\u13ea\5\u030a\u0186\2\u13e9\u13e7\3\2\2\2\u13ea\u13ed"+
		"\3\2\2\2\u13eb\u13e9\3\2\2\2\u13eb\u13ec\3\2\2\2\u13ec\u02cd\3\2\2\2\u13ed"+
		"\u13eb\3\2\2\2\u13ee\u13f1\5\u0308\u0185\2\u13ef\u13f0\7\u01f9\2\2\u13f0"+
		"\u13f2\5\u030a\u0186\2\u13f1\u13ef\3\2\2\2\u13f1\u13f2\3\2\2\2\u13f2\u02cf"+
		"\3\2\2\2\u13f3\u13f6\5\u0308\u0185\2\u13f4\u13f5\7\u01f9\2\2\u13f5\u13f7"+
		"\5\u030a\u0186\2\u13f6\u13f4\3\2\2\2\u13f6\u13f7\3\2\2\2\u13f7\u02d1\3"+
		"\2\2\2\u13f8\u13fb\5\u0308\u0185\2\u13f9\u13fa\7\u01f9\2\2\u13fa\u13fc"+
		"\5\u030a\u0186\2\u13fb\u13f9\3\2\2\2\u13fb\u13fc\3\2\2\2\u13fc\u02d3\3"+
		"\2\2\2\u13fd\u13fe\7\u021a\2\2\u13fe\u1400\5\u02e4\u0173\2\u13ff\u13fd"+
		"\3\2\2\2\u13ff\u1400\3\2\2\2\u1400\u1401\3\2\2\2\u1401\u1404\5\u030a\u0186"+
		"\2\u1402\u1403\7\u01f9\2\2\u1403\u1405\5\u030a\u0186\2\u1404\u1402\3\2"+
		"\2\2\u1404\u1405\3\2\2\2\u1405\u1408\3\2\2\2\u1406\u1408\5\u02fa\u017e"+
		"\2\u1407\u13ff\3\2\2\2\u1407\u1406\3\2\2\2\u1408\u02d5\3\2\2\2\u1409\u140a"+
		"\5\u0308\u0185\2\u140a\u02d7\3\2\2\2\u140b\u140e\5\u0308\u0185\2\u140c"+
		"\u140e\5\u02fa\u017e\2\u140d\u140b\3\2\2\2\u140d\u140c\3\2\2\2\u140e\u02d9"+
		"\3\2\2\2\u140f\u1412\5\u0308\u0185\2\u1410\u1412\5\u02fa\u017e\2\u1411"+
		"\u140f\3\2\2\2\u1411\u1410\3\2\2\2\u1412\u02db\3\2\2\2\u1413\u1416\5\u0308"+
		"\u0185\2\u1414\u1415\7\u01f9\2\2\u1415\u1417\5\u030a\u0186\2\u1416\u1414"+
		"\3\2\2\2\u1416\u1417\3\2\2\2\u1417\u02dd\3\2\2\2\u1418\u1419\5\u0308\u0185"+
		"\2\u1419\u02df\3\2\2\2\u141a\u141f\5\u0308\u0185\2\u141b\u141c\7\u01f9"+
		"\2\2\u141c\u141e\5\u030a\u0186\2\u141d\u141b\3\2\2\2\u141e\u1421\3\2\2"+
		"\2\u141f\u141d\3\2\2\2\u141f\u1420\3\2\2\2\u1420\u02e1\3\2\2\2\u1421\u141f"+
		"\3\2\2\2\u1422\u1425\5\u0308\u0185\2\u1423\u1424\7\u01f9\2\2\u1424\u1426"+
		"\5\u030a\u0186\2\u1425\u1423\3\2\2\2\u1425\u1426\3\2\2\2\u1426\u142a\3"+
		"\2\2\2\u1427\u1428\7\u0208\2\2\u1428\u142b\5\u02de\u0170\2\u1429\u142b"+
		"\5\u0296\u014c\2\u142a\u1427\3\2\2\2\u142a\u1429\3\2\2\2\u142a\u142b\3"+
		"\2\2\2\u142b\u02e3\3\2\2\2\u142c\u1431\5\u030a\u0186\2\u142d\u142e\7\u01f9"+
		"\2\2\u142e\u1430\5\u030a\u0186\2\u142f\u142d\3\2\2\2\u1430\u1433\3\2\2"+
		"\2\u1431\u142f\3\2\2\2\u1431\u1432\3\2\2\2\u1432\u02e5\3\2\2\2\u1433\u1431"+
		"\3\2\2\2\u1434\u1435\7\u00cb\2\2\u1435\u1436\7\u0200\2\2\u1436\u1437\7"+
		"\u01de\2\2\u1437\u1438\t)\2\2\u1438\u1439\5\u01a8\u00d5\2\u1439\u143b"+
		"\7\u0201\2\2\u143a\u143c\5\u025c\u012f\2\u143b\u143a\3\2\2\2\u143b\u143c"+
		"\3\2\2\2\u143c\u02e7\3\2\2\2\u143d\u143f\7\u0200\2\2\u143e\u1440\5\u02f0"+
		"\u0179\2\u143f\u143e\3\2\2\2\u143f\u1440\3\2\2\2\u1440\u1445\3\2\2\2\u1441"+
		"\u1442\7\u0206\2\2\u1442\u1444\5\u02f0\u0179\2\u1443\u1441\3\2\2\2\u1444"+
		"\u1447\3\2\2\2\u1445\u1443\3\2\2\2\u1445\u1446\3\2\2\2\u1446\u1448\3\2"+
		"\2\2\u1447\u1445\3\2\2\2\u1448\u144a\7\u0201\2\2\u1449\u144b\5\u02e6\u0174"+
		"\2\u144a\u1449\3\2\2\2\u144a\u144b\3\2\2\2\u144b\u02e9\3\2\2\2\u144c\u1451"+
		"\7\u0200\2\2\u144d\u144f\5\u02f0\u0179\2\u144e\u1450\5\u02ee\u0178\2\u144f"+
		"\u144e\3\2\2\2\u144f\u1450\3\2\2\2\u1450\u1452\3\2\2\2\u1451\u144d\3\2"+
		"\2\2\u1451\u1452\3\2\2\2\u1452\u145a\3\2\2\2\u1453\u1454\7\u0206\2\2\u1454"+
		"\u1456\5\u02f0\u0179\2\u1455\u1457\5\u02ee\u0178\2\u1456\u1455\3\2\2\2"+
		"\u1456\u1457\3\2\2\2\u1457\u1459\3\2\2\2\u1458\u1453\3\2\2\2\u1459\u145c"+
		"\3\2\2\2\u145a\u1458\3\2\2\2\u145a\u145b\3\2\2\2\u145b\u145d\3\2\2\2\u145c"+
		"\u145a\3\2\2\2\u145d\u145f\7\u0201\2\2\u145e\u1460\5\u02e6\u0174\2\u145f"+
		"\u145e\3\2\2\2\u145f\u1460\3\2\2\2\u1460\u02eb\3\2\2\2\u1461\u1462\7\u0200"+
		"\2\2\u1462\u146f\5\u02e0\u0171\2\u1463\u1466\7\u0206\2\2\u1464\u1467\5"+
		"\u0304\u0183\2\u1465\u1467\7\u0109\2\2\u1466\u1464\3\2\2\2\u1466\u1465"+
		"\3\2\2\2\u1467\u146d\3\2\2\2\u1468\u146b\7\u0206\2\2\u1469\u146c\5\u0304"+
		"\u0183\2\u146a\u146c\7\u0109\2\2\u146b\u1469\3\2\2\2\u146b\u146a\3\2\2"+
		"\2\u146c\u146e\3\2\2\2\u146d\u1468\3\2\2\2\u146d\u146e\3\2\2\2\u146e\u1470"+
		"\3\2\2\2\u146f\u1463\3\2\2\2\u146f\u1470\3\2\2\2\u1470\u1471\3\2\2\2\u1471"+
		"\u1485\7\u01ae\2\2\u1472\u1473\5\u02e2\u0172\2\u1473\u1474\7\u01f9\2\2"+
		"\u1474\u1475\7\u0203\2\2\u1475\u1486\3\2\2\2\u1476\u1486\7\u0203\2\2\u1477"+
		"\u1479\5\u0202\u0102\2\u1478\u147a\5\u0298\u014d\2\u1479\u1478\3\2\2\2"+
		"\u1479\u147a\3\2\2\2\u147a\u1482\3\2\2\2\u147b\u147c\7\u0206\2\2\u147c"+
		"\u147e\5\u0202\u0102\2\u147d\u147f\5\u0298\u014d\2\u147e\u147d\3\2\2\2"+
		"\u147e\u147f\3\2\2\2\u147f\u1481\3\2\2\2\u1480\u147b\3\2\2\2\u1481\u1484"+
		"\3\2\2\2\u1482\u1480\3\2\2\2\u1482\u1483\3\2\2\2\u1483\u1486\3\2\2\2\u1484"+
		"\u1482\3\2\2\2\u1485\u1472\3\2\2\2\u1485\u1476\3\2\2\2\u1485\u1477\3\2"+
		"\2\2\u1486\u1487\3\2\2\2\u1487\u1489\7\u0201\2\2\u1488\u148a\5\u02e6\u0174"+
		"\2\u1489\u1488\3\2\2\2\u1489\u148a\3\2\2\2\u148a\u02ed\3\2\2\2\u148b\u148c"+
		"\tJ\2\2\u148c\u148d\7\u010a\2\2\u148d\u02ef\3\2\2\2\u148e\u148f\5\u0308"+
		"\u0185\2\u148f\u1490\7\32\2\2\u1490\u1492\3\2\2\2\u1491\u148e\3\2\2\2"+
		"\u1491\u1492\3\2\2\2\u1492\u1493\3\2\2\2\u1493\u1494\5\u0204\u0103\2\u1494"+
		"\u02f1\3\2\2\2\u1495\u14a2\5\u02f4\u017b\2\u1496\u1498\7\u0140\2\2\u1497"+
		"\u1496\3\2\2\2\u1497\u1498\3\2\2\2\u1498\u1499\3\2\2\2\u1499\u149c\5\u02c8"+
		"\u0165\2\u149a\u149b\7\u0208\2\2\u149b\u149d\5\u02de\u0170\2\u149c\u149a"+
		"\3\2\2\2\u149c\u149d\3\2\2\2\u149d\u149f\3\2\2\2\u149e\u14a0\tK\2\2\u149f"+
		"\u149e\3\2\2\2\u149f\u14a0\3\2\2\2\u14a0\u14a2\3\2\2\2\u14a1\u1495\3\2"+
		"\2\2\u14a1\u1497\3\2\2\2\u14a2\u02f3\3\2\2\2\u14a3\u14a5\5\u02f8\u017d"+
		"\2\u14a4\u14a6\5\u02f6\u017c\2\u14a5\u14a4\3\2\2\2\u14a5\u14a6\3\2\2\2"+
		"\u14a6\u14ad\3\2\2\2\u14a7\u14a9\7\u01c0\2\2\u14a8\u14aa\7\u00d8\2\2\u14a9"+
		"\u14a8\3\2\2\2\u14a9\u14aa\3\2\2\2\u14aa\u14ab\3\2\2\2\u14ab\u14ac\7\u018d"+
		"\2\2\u14ac\u14ae\7\u01d6\2\2\u14ad\u14a7\3\2\2\2\u14ad\u14ae\3\2\2\2\u14ae"+
		"\u14c0\3\2\2\2\u14af\u14b0\7\u00c3\2\2\u14b0\u14b5\tL\2\2\u14b1\u14b2"+
		"\7\u0200\2\2\u14b2\u14b3\5\u0204\u0103\2\u14b3\u14b4\7\u0201\2\2\u14b4"+
		"\u14b6\3\2\2\2\u14b5\u14b1\3\2\2\2\u14b5\u14b6\3\2\2\2\u14b6\u14b7\3\2"+
		"\2\2\u14b7\u14b8\7\u0196\2\2\u14b8\u14bd\tM\2\2\u14b9\u14ba\7\u0200\2"+
		"\2\u14ba\u14bb\5\u0204\u0103\2\u14bb\u14bc\7\u0201\2\2\u14bc\u14be\3\2"+
		"\2\2\u14bd\u14b9\3\2\2\2\u14bd\u14be\3\2\2\2\u14be\u14c0\3\2\2\2\u14bf"+
		"\u14a3\3\2\2\2\u14bf\u14af\3\2\2\2\u14c0\u02f5\3\2\2\2\u14c1\u14c2\7\u0200"+
		"\2\2\u14c2\u14c5\5\u0304\u0183\2\u14c3\u14c4\7\u0206\2\2\u14c4\u14c6\5"+
		"\u0304\u0183\2\u14c5\u14c3\3\2\2\2\u14c5\u14c6\3\2\2\2\u14c6\u14c8\3\2"+
		"\2\2\u14c7\u14c9\tN\2\2\u14c8\u14c7\3\2\2\2\u14c8\u14c9\3\2\2\2\u14c9"+
		"\u14ca\3\2\2\2\u14ca\u14cb\7\u0201\2\2\u14cb\u02f7\3\2\2\2\u14cc\u1509"+
		"\7)\2\2\u14cd\u1509\7\u0131\2\2\u14ce\u1509\7\u00f3\2\2\u14cf\u1509\7"+
		"(\2\2\u14d0\u1509\7\'\2\2\u14d1\u1509\7\u00f4\2\2\u14d2\u1509\7\u0132"+
		"\2\2\u14d3\u1509\7\u0133\2\2\u14d4\u1509\7\u0170\2\2\u14d5\u1509\7\u0171"+
		"\2\2\u14d6\u1509\7\u010d\2\2\u14d7\u1509\7h\2\2\u14d8\u1509\7\u00c1\2"+
		"\2\u14d9\u1509\7\u00c0\2\2\u14da\u1509\7\u010c\2\2\u14db\u1509\7\u0175"+
		"\2\2\u14dc\u1509\7\u010b\2\2\u14dd\u1509\7i\2\2\u14de\u14e0\7z\2\2\u14df"+
		"\u14e1\7\u0136\2\2\u14e0\u14df\3\2\2\2\u14e0\u14e1\3\2\2\2\u14e1\u1509"+
		"\3\2\2\2\u14e2\u1509\7\u009c\2\2\u14e3\u1509\7\u013e\2\2\u14e4\u1509\7"+
		"\u00f6\2\2\u14e5\u14e7\7\u00de\2\2\u14e6\u14e8\7\u013c\2\2\u14e7\u14e6"+
		"\3\2\2\2\u14e7\u14e8\3\2\2\2\u14e8\u1509\3\2\2\2\u14e9\u1509\7:\2\2\u14ea"+
		"\u1509\7<\2\2\u14eb\u1509\7\u01b3\2\2\u14ec\u1509\7\u01b2\2\2\u14ed\u1509"+
		"\7\u0183\2\2\u14ee\u1509\7\u013c\2\2\u14ef\u1509\7-\2\2\u14f0\u1509\7"+
		"b\2\2\u14f1\u1509\7\u0154\2\2\u14f2\u1509\7\u01ac\2\2\u14f3\u1509\7\u01d3"+
		"\2\2\u14f4\u1509\7\u00ef\2\2\u14f5\u1509\7c\2\2\u14f6\u1509\7\u00ac\2"+
		"\2\u14f7\u1509\7\u00e8\2\2\u14f8\u1509\7\u015e\2\2\u14f9\u1509\7\u0193"+
		"\2\2\u14fa\u1509\7\u0194\2\2\u14fb\u1509\7\u0195\2\2\u14fc\u1509\7\u0192"+
		"\2\2\u14fd\u1509\7\u018e\2\2\u14fe\u1509\7\u0191\2\2\u14ff\u1509\7\u0190"+
		"\2\2\u1500\u1509\7\u018f\2\2\u1501\u1509\7\u01d5\2\2\u1502\u1509\7|\2"+
		"\2\u1503\u1509\7&\2\2\u1504\u1509\7*\2\2\u1505\u1509\7?\2\2\u1506\u1509"+
		"\7\u00f8\2\2\u1507\u1509\7\u00ea\2\2\u1508\u14cc\3\2\2\2\u1508\u14cd\3"+
		"\2\2\2\u1508\u14ce\3\2\2\2\u1508\u14cf\3\2\2\2\u1508\u14d0\3\2\2\2\u1508"+
		"\u14d1\3\2\2\2\u1508\u14d2\3\2\2\2\u1508\u14d3\3\2\2\2\u1508\u14d4\3\2"+
		"\2\2\u1508\u14d5\3\2\2\2\u1508\u14d6\3\2\2\2\u1508\u14d7\3\2\2\2\u1508"+
		"\u14d8\3\2\2\2\u1508\u14d9\3\2\2\2\u1508\u14da\3\2\2\2\u1508\u14db\3\2"+
		"\2\2\u1508\u14dc\3\2\2\2\u1508\u14dd\3\2\2\2\u1508\u14de\3\2\2\2\u1508"+
		"\u14e2\3\2\2\2\u1508\u14e3\3\2\2\2\u1508\u14e4\3\2\2\2\u1508\u14e5\3\2"+
		"\2\2\u1508\u14e9\3\2\2\2\u1508\u14ea\3\2\2\2\u1508\u14eb\3\2\2\2\u1508"+
		"\u14ec\3\2\2\2\u1508\u14ed\3\2\2\2\u1508\u14ee\3\2\2\2\u1508\u14ef\3\2"+
		"\2\2\u1508\u14f0\3\2\2\2\u1508\u14f1\3\2\2\2\u1508\u14f2\3\2\2\2\u1508"+
		"\u14f3\3\2\2\2\u1508\u14f4\3\2\2\2\u1508\u14f5\3\2\2\2\u1508\u14f6\3\2"+
		"\2\2\u1508\u14f7\3\2\2\2\u1508\u14f8\3\2\2\2\u1508\u14f9\3\2\2\2\u1508"+
		"\u14fa\3\2\2\2\u1508\u14fb\3\2\2\2\u1508\u14fc\3\2\2\2\u1508\u14fd\3\2"+
		"\2\2\u1508\u14fe\3\2\2\2\u1508\u14ff\3\2\2\2\u1508\u1500\3\2\2\2\u1508"+
		"\u1501\3\2\2\2\u1508\u1502\3\2\2\2\u1508\u1503\3\2\2\2\u1508\u1504\3\2"+
		"\2\2\u1508\u1505\3\2\2\2\u1508\u1506\3\2\2\2\u1508\u1507\3\2\2\2\u1509"+
		"\u02f9\3\2\2\2\u150a\u150e\7\u020a\2\2\u150b\u150c\7\u020b\2\2\u150c\u150e"+
		"\7\u01fa\2\2\u150d\u150a\3\2\2\2\u150d\u150b\3\2\2\2\u150e\u1517\3\2\2"+
		"\2\u150f\u1511\7\u00b7\2\2\u1510\u150f\3\2\2\2\u1510\u1511\3\2\2\2\u1511"+
		"\u1515\3\2\2\2\u1512\u1516\7\u020a\2\2\u1513\u1514\7\u020b\2\2\u1514\u1516"+
		"\7\u01fa\2\2\u1515\u1512\3\2\2\2\u1515\u1513\3\2\2\2\u1516\u1518\3\2\2"+
		"\2\u1517\u1510\3\2\2\2\u1517\u1518\3\2\2\2\u1518\u151d\3\2\2\2\u1519\u151a"+
		"\7\u01f9\2\2\u151a\u151c\5\u02fe\u0180\2\u151b\u1519\3\2\2\2\u151c\u151f"+
		"\3\2\2\2\u151d\u151b\3\2\2\2\u151d\u151e\3\2\2\2\u151e\u02fb\3\2\2\2\u151f"+
		"\u151d\3\2\2\2\u1520\u1525\5\u02fe\u0180\2\u1521\u1522\7\u01f9\2\2\u1522"+
		"\u1524\5\u02fe\u0180\2\u1523\u1521\3\2\2\2\u1524\u1527\3\2\2\2\u1525\u1523"+
		"\3\2\2\2\u1525\u1526\3\2\2\2\u1526\u02fd\3\2\2\2\u1527\u1525\3\2\2\2\u1528"+
		"\u1529\7\u021a\2\2\u1529\u152b\5\u02e4\u0173\2\u152a\u1528\3\2\2\2\u152a"+
		"\u152b\3\2\2\2\u152b\u152c\3\2\2\2\u152c\u1531\5\u030a\u0186\2\u152d\u152e"+
		"\7\u01f9\2\2\u152e\u1530\5\u030a\u0186\2\u152f\u152d\3\2\2\2\u1530\u1533"+
		"\3\2\2\2\u1531\u152f\3\2\2\2\u1531\u1532\3\2\2\2\u1532\u1535\3\2\2\2\u1533"+
		"\u1531\3\2\2\2\u1534\u1536\5\u02e8\u0175\2\u1535\u1534\3\2\2\2\u1535\u1536"+
		"\3\2\2\2\u1536\u02ff\3\2\2\2\u1537\u1538\7\u021a\2\2\u1538\u153a\5\u02e4"+
		"\u0173\2\u1539\u1537\3\2\2\2\u1539\u153a\3\2\2\2\u153a\u153b\3\2\2\2\u153b"+
		"\u1540\5\u030a\u0186\2\u153c\u153d\7\u01f9\2\2\u153d\u153f\5\u030a\u0186"+
		"\2\u153e\u153c\3\2\2\2\u153f\u1542\3\2\2\2\u1540\u153e\3\2\2\2\u1540\u1541"+
		"\3\2\2\2\u1541\u0301\3\2\2\2\u1542\u1540\3\2\2\2\u1543\u1546\7\u018e\2"+
		"\2\u1544\u1547\5\u0306\u0184\2\u1545\u1547\5\u02fa\u017e\2\u1546\u1544"+
		"\3\2\2\2\u1546\u1545\3\2\2\2\u1547\u154c\3\2\2\2\u1548\u1549\7\33\2\2"+
		"\u1549\u154a\7\u018d\2\2\u154a\u154b\7\u01d6\2\2\u154b\u154d\5\u0306\u0184"+
		"\2\u154c\u1548\3\2\2\2\u154c\u154d\3\2\2\2\u154d\u1582\3\2\2\2\u154e\u1552"+
		"\7\u00c3\2\2\u154f\u1553\5\u0306\u0184\2\u1550\u1553\5\u02fa\u017e\2\u1551"+
		"\u1553\5\u02fe\u0180\2\u1552\u154f\3\2\2\2\u1552\u1550\3\2\2\2\u1552\u1551"+
		"\3\2\2\2\u1553\u1554\3\2\2\2\u1554\u1562\tO\2\2\u1555\u1558\7\u0200\2"+
		"\2\u1556\u1559\7\u01fa\2\2\u1557\u1559\5\u02fa\u017e\2\u1558\u1556\3\2"+
		"\2\2\u1558\u1557\3\2\2\2\u1559\u155f\3\2\2\2\u155a\u155d\7\u0206\2\2\u155b"+
		"\u155e\7\u01fa\2\2\u155c\u155e\5\u02fa\u017e\2\u155d\u155b\3\2\2\2\u155d"+
		"\u155c\3\2\2\2\u155e\u1560\3\2\2\2\u155f\u155a\3\2\2\2\u155f\u1560\3\2"+
		"\2\2\u1560\u1561\3\2\2\2\u1561\u1563\7\u0201\2\2\u1562\u1555\3\2\2\2\u1562"+
		"\u1563\3\2\2\2\u1563\u1573\3\2\2\2\u1564\u1571\7\u0196\2\2\u1565\u1572"+
		"\7c\2\2\u1566\u1572\7\u00ac\2\2\u1567\u1572\7\u00e8\2\2\u1568\u156f\7"+
		"\u015e\2\2\u1569\u156c\7\u0200\2\2\u156a\u156d\7\u01fa\2\2\u156b\u156d"+
		"\5\u02fa\u017e\2\u156c\u156a\3\2\2\2\u156c\u156b\3\2\2\2\u156d\u156e\3"+
		"\2\2\2\u156e\u1570\7\u0201\2\2\u156f\u1569\3\2\2\2\u156f\u1570\3\2\2\2"+
		"\u1570\u1572\3\2\2\2\u1571\u1565\3\2\2\2\u1571\u1566\3\2\2\2\u1571\u1567"+
		"\3\2\2\2\u1571\u1568\3\2\2\2\u1572\u1574\3\2\2\2\u1573\u1564\3\2\2\2\u1573"+
		"\u1574\3\2\2\2\u1574\u1582\3\2\2\2\u1575\u1582\5\u0304\u0183\2\u1576\u1577"+
		"\7b\2\2\u1577\u1582\5\u0306\u0184\2\u1578\u1582\5\u0306\u0184\2\u1579"+
		"\u1582\7\u0109\2\2\u157a\u1582\7\u019f\2\2\u157b\u1582\7\u0097\2\2\u157c"+
		"\u1582\7e\2\2\u157d\u1582\7\u0168\2\2\u157e\u1582\7\u00e9\2\2\u157f\u1582"+
		"\7\u00e3\2\2\u1580\u1582\7m\2\2\u1581\u1543\3\2\2\2\u1581\u154e\3\2\2"+
		"\2\u1581\u1575\3\2\2\2\u1581\u1576\3\2\2\2\u1581\u1578\3\2\2\2\u1581\u1579"+
		"\3\2\2\2\u1581\u157a\3\2\2\2\u1581\u157b\3\2\2\2\u1581\u157c\3\2\2\2\u1581"+
		"\u157d\3\2\2\2\u1581\u157e\3\2\2\2\u1581\u157f\3\2\2\2\u1581\u1580\3\2"+
		"\2\2\u1582\u0303\3\2\2\2\u1583\u1584\tP\2\2\u1584\u0305\3\2\2\2\u1585"+
		"\u1586\tQ\2\2\u1586\u0307\3\2\2\2\u1587\u1588\7\u021a\2\2\u1588\u158a"+
		"\5\u02e4\u0173\2\u1589\u1587\3\2\2\2\u1589\u158a\3\2\2\2\u158a\u158b\3"+
		"\2\2\2\u158b\u158c\5\u030a\u0186\2\u158c\u0309\3\2\2\2\u158d\u1590\5\u0316"+
		"\u018c\2\u158e\u1590\7\u01fd\2\2\u158f\u158d\3\2\2\2\u158f\u158e\3\2\2"+
		"\2\u1590\u030b\3\2\2\2\u1591\u1599\7\u0210\2\2\u1592\u1593\7\u020e\2\2"+
		"\u1593\u1599\7\u0214\2\2\u1594\u1595\7\u0213\2\2\u1595\u1599\7\u0217\2"+
		"\2\u1596\u1597\7\u0211\2\2\u1597\u1599\7\u0217\2\2\u1598\u1591\3\2\2\2"+
		"\u1598\u1592\3\2\2\2\u1598\u1594\3\2\2\2\u1598\u1596\3\2\2\2\u1599\u030d"+
		"\3\2\2\2\u159a\u159e\7\u020f\2\2\u159b\u159c\7\u0214\2\2\u159c\u159e\7"+
		"\u0217\2\2\u159d\u159a\3\2\2\2\u159d\u159b\3\2\2\2\u159e\u030f\3\2\2\2"+
		"\u159f\u15a3\7\u020d\2\2\u15a0\u15a1\7\u020e\2\2\u15a1\u15a3\7\u0217\2"+
		"\2\u15a2\u159f\3\2\2\2\u15a2\u15a0\3\2\2\2\u15a3\u0311\3\2\2\2\u15a4\u15a8"+
		"\7\u0215\2\2\u15a5\u15a6\7\u0216\2\2\u15a6\u15a8\7\u0216\2\2\u15a7\u15a4"+
		"\3\2\2\2\u15a7\u15a5\3\2\2\2\u15a8\u0313\3\2\2\2\u15a9\u15aa\7\u0200\2"+
		"\2\u15aa\u15ab\7\u0204\2\2\u15ab\u15ac\7\u0201\2\2\u15ac\u0315\3\2\2\2"+
		"\u15ad\u15ae\tR\2\2\u15ae\u0317\3\2\2\2\u02d9\u031b\u0320\u032a\u032e"+
		"\u0332\u0334\u0338\u0351\u0357\u0366\u036b\u0370\u0377\u0379\u0385\u038a"+
		"\u0396\u0398\u039f\u03a4\u03a6\u03ac\u03ba\u03bf\u03c2\u03c8\u03d1\u03df"+
		"\u03e7\u03f1\u03f4\u03f9\u03fe\u0405\u040a\u0415\u041a\u041d\u0421\u0425"+
		"\u042b\u0430\u043c\u0448\u0454\u0459\u045e\u0465\u0467\u0473\u0478\u047b"+
		"\u0481\u0487\u0489\u049b\u04a0\u04a5\u04a7\u04ae\u04b5\u04b8\u04bb\u04be"+
		"\u04c9\u04d5\u04d9\u04dc\u04e5\u04ed\u04f5\u04f8\u04ff\u0503\u050a\u0510"+
		"\u0539\u0555\u055c\u0561\u056c\u056f\u057a\u0582\u0586\u0592\u0595\u059b"+
		"\u059e\u05a3\u05a8\u05ac\u05b6\u05c0\u05c6\u05d1\u05d6\u05da\u05e2\u05ea"+
		"\u05ef\u05f2\u05f4\u05f7\u0600\u0605\u060c\u060f\u0612\u0616\u0619\u0621"+
		"\u0626\u062b\u0632\u063c\u064e\u0655\u065f\u0669\u0672\u0678\u0682\u0687"+
		"\u0690\u0696\u0699\u069c\u06ad\u06b2\u06bd\u06c3\u06c6\u06cd\u06d0\u06d7"+
		"\u06dc\u06e0\u06e5\u06ea\u06f4\u06fb\u0705\u070a\u0711\u0718\u071c\u071f"+
		"\u0722\u0733\u0738\u0741\u074f\u0756\u0766\u076f\u0771\u0786\u0796\u079f"+
		"\u07a4\u07a8\u07ab\u07b5\u07c1\u07c7\u07cf\u07d3\u07d6\u07e5\u07e9\u07ee"+
		"\u07f1\u07fe\u0802\u080e\u0813\u0817\u081b\u0821\u0824\u0827\u0835\u0845"+
		"\u084b\u084f\u0855\u0861\u086a\u086c\u0872\u0876\u0879\u087f\u0884\u0886"+
		"\u088c\u0897\u089b\u089e\u08a2\u08aa\u08b3\u08bd\u08bf\u08e2\u08e7\u08ee"+
		"\u08f2\u08f6\u08fa\u0906\u090a\u0918\u091e\u0925\u092a\u0934\u093a\u093c"+
		"\u0945\u094f\u0954\u0963\u0967\u096a\u096e\u0973\u0977\u0980\u0982\u0985"+
		"\u098e\u0990\u0993\u099a\u099d\u099f\u09ab\u09b3\u09ba\u09bf\u09c7\u09ce"+
		"\u09d2\u09d5\u09e1\u09e7\u09ef\u09f9\u0a04\u0a0a\u0a0c\u0a0e\u0a15\u0a18"+
		"\u0a1f\u0a2a\u0a30\u0a34\u0a3e\u0a41\u0a47\u0a52\u0a54\u0a56\u0a59\u0a5d"+
		"\u0a60\u0a64\u0a68\u0a6d\u0a78\u0a7c\u0a84\u0a87\u0a8c\u0a8e\u0a97\u0aa1"+
		"\u0aa6\u0aac\u0ab0\u0ab3\u0abb\u0abe\u0ac2\u0ac6\u0acb\u0ace\u0ad2\u0ad6"+
		"\u0ada\u0ae6\u0af4\u0af9\u0afd\u0b06\u0b0a\u0b12\u0b15\u0b18\u0b1c\u0b1f"+
		"\u0b22\u0b25\u0b28\u0b2b\u0b2f\u0b39\u0b40\u0b47\u0b4c\u0b51\u0b58\u0b5e"+
		"\u0b68\u0b6b\u0b70\u0b74\u0b77\u0b7a\u0b7e\u0b83\u0b87\u0b89\u0b96\u0b9d"+
		"\u0bab\u0bae\u0bb8\u0bbc\u0bc4\u0bd0\u0bda\u0bdf\u0be9\u0bf1\u0bf4\u0bfa"+
		"\u0bfe\u0c03\u0c0d\u0c12\u0c1f\u0c2b\u0c30\u0c3a\u0c3f\u0c41\u0c46\u0c4a"+
		"\u0c50\u0c54\u0c61\u0c65\u0c6f\u0c72\u0c74\u0c79\u0c82\u0c8f\u0c97\u0ca0"+
		"\u0ca4\u0ca9\u0cb4\u0cb6\u0cc6\u0ccb\u0cd1\u0cd7\u0ce9\u0cf0\u0cf3\u0cfb"+
		"\u0d04\u0d06\u0d0a\u0d0d\u0d12\u0d14\u0d18\u0d24\u0d2d\u0d35\u0d3a\u0d3e"+
		"\u0d43\u0d46\u0d4e\u0d56\u0d5c\u0d5f\u0d62\u0d6a\u0d74\u0d80\u0d87\u0d8b"+
		"\u0d8f\u0d92\u0d95\u0d9a\u0d9f\u0da2\u0da5\u0dab\u0dae\u0db4\u0db7\u0dba"+
		"\u0dbf\u0dc2\u0dca\u0dd0\u0dda\u0ddf\u0de5\u0deb\u0df5\u0df9\u0dfb\u0dfe"+
		"\u0e0a\u0e0e\u0e11\u0e25\u0e2a\u0e2f\u0e36\u0e39\u0e42\u0e49\u0e4e\u0e52"+
		"\u0e5a\u0e60\u0e68\u0e6b\u0e73\u0e7b\u0e7e\u0e81\u0e8a\u0e90\u0e96\u0e98"+
		"\u0ea5\u0ea7\u0eb0\u0eb2\u0eb6\u0ebc\u0ec0\u0ed9\u0ee4\u0ee9\u0f11\u0f15"+
		"\u0f1b\u0f29\u0f33\u0f39\u0f3f\u0f4a\u0f4e\u0f55\u0f5a\u0f5e\u0f62\u0f67"+
		"\u0f6d\u0f72\u0f76\u0f7a\u0f7e\u0f80\u0f8b\u0f90\u0f95\u0f9e\u0fa0\u0fa2"+
		"\u0fb3\u0fbb\u0fc7\u0fd1\u0fd9\u0fe2\u0fe5\u0fec\u0ff4\u0ffb\u0fff\u1006"+
		"\u100a\u100f\u1013\u101b\u101f\u1026\u102f\u103d\u104a\u104f\u1065\u1069"+
		"\u106c\u1073\u1076\u107a\u107d\u1084\u1087\u108d\u1090\u1094\u1097\u109e"+
		"\u10a3\u10b1\u10b7\u10ba\u10be\u10c6\u10d4\u10d9\u10e2\u10ee\u10f3\u10fd"+
		"\u1104\u110c\u1114\u1118\u111b\u1120\u1125\u112a\u1130\u1133\u1137\u1144"+
		"\u1148\u1151\u1157\u1165\u1170\u1174\u1177\u1187\u118d\u1197\u119f\u11a2"+
		"\u11a5\u11ae\u11b3\u11bc\u11c2\u11c7\u11ca\u11cf\u11d4\u11d8\u11de\u11e4"+
		"\u11ed\u11f2\u11fa\u11fe\u1203\u1209\u1210\u1215\u121c\u1220\u1225\u122d"+
		"\u1230\u1233\u1236\u123a\u123f\u1242\u124d\u1251\u1253\u125e\u1269\u1272"+
		"\u1275\u1279\u127c\u1280\u128d\u1292\u129a\u12a1\u12a6\u12aa\u12af\u12b3"+
		"\u12b9\u12bc\u12c3\u12d2\u12d5\u12d8\u12e2\u12e5\u12e7\u12f1\u12f3\u12f9"+
		"\u12ff\u1301\u130f\u1311\u1318\u131c\u1322\u1328\u132c\u1331\u1333\u133d"+
		"\u1346\u134f\u1359\u135e\u1362\u1365\u1369\u1370\u1378\u1380\u138b\u138e"+
		"\u1392\u13a5\u13aa\u13af\u13b6\u13c3\u13cd\u13d2\u13db\u13e3\u13eb\u13f1"+
		"\u13f6\u13fb\u13ff\u1404\u1407\u140d\u1411\u1416\u141f\u1425\u142a\u1431"+
		"\u143b\u143f\u1445\u144a\u144f\u1451\u1456\u145a\u145f\u1466\u146b\u146d"+
		"\u146f\u1479\u147e\u1482\u1485\u1489\u1491\u1497\u149c\u149f\u14a1\u14a5"+
		"\u14a9\u14ad\u14b5\u14bd\u14bf\u14c5\u14c8\u14e0\u14e7\u1508\u150d\u1510"+
		"\u1515\u1517\u151d\u1525\u152a\u1531\u1535\u1539\u1540\u1546\u154c\u1552"+
		"\u1558\u155d\u155f\u1562\u156c\u156f\u1571\u1573\u1581\u1589\u158f\u1598"+
		"\u159d\u15a2\u15a7";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}